// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#include "benchmark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_M2_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M3_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_M4_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M4_M5_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M1_M6_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M7_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M8_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M6_M9_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M6_M9_M10_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M9_M10_M11_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M13_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M13_M14_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M13_M14_M15_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M16_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M12_M17_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_M19_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_M19_M20_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M17_M22_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M23_M24_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M25_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M26_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M27_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M28_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M23_M29_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M23_M29_M30_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M23_M29_M30_M31_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M29_M30_M31_M32_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M29_M33_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M35_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M36_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_M39_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_M39_M40_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M42_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M43_M44_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M45_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M46_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M47_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M43_M48_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M48_M49_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_M51_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_M51_M52_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_M56_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_M56_M57_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M55_M56_M57_M58_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M59_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M59_M60_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M61_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M62_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M62_M63_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M65_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M66_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M67_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_M69_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_M69_M70_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M68_M69_M70_M71_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M72_M73_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M73_M74_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M73_M75_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M76_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M77_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_M79_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_M79_M80_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M78_M79_M80_M81_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M83_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_M85_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_M85_M86_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M84_M85_M86_M87_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M88_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M88_M89_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M90_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M90_M91_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M92_M93_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M92_M94_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M92_M94_M95_benchmark_2eproto;
namespace hyperprotobench {
class M1_M2_M3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2_M3> _instance;
} _M1_M2_M3_default_instance_;
class M1_M2_M4_M5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2_M4_M5> _instance;
} _M1_M2_M4_M5_default_instance_;
class M1_M2_M4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2_M4> _instance;
} _M1_M2_M4_default_instance_;
class M1_M2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2> _instance;
} _M1_M2_default_instance_;
class M1_M6_M7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6_M7> _instance;
} _M1_M6_M7_default_instance_;
class M1_M6_M8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6_M8> _instance;
} _M1_M6_M8_default_instance_;
class M1_M6_M9_M10_M11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6_M9_M10_M11> _instance;
} _M1_M6_M9_M10_M11_default_instance_;
class M1_M6_M9_M10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6_M9_M10> _instance;
} _M1_M6_M9_M10_default_instance_;
class M1_M6_M9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6_M9> _instance;
} _M1_M6_M9_default_instance_;
class M1_M6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M6> _instance;
} _M1_M6_default_instance_;
class M1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1> _instance;
} _M1_default_instance_;
class M12_M13_M14_M15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M13_M14_M15> _instance;
} _M12_M13_M14_M15_default_instance_;
class M12_M13_M14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M13_M14> _instance;
} _M12_M13_M14_default_instance_;
class M12_M13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M13> _instance;
} _M12_M13_default_instance_;
class M12_M16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M16> _instance;
} _M12_M16_default_instance_;
class M12_M17_M18_M19_M20_M21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17_M18_M19_M20_M21> _instance;
} _M12_M17_M18_M19_M20_M21_default_instance_;
class M12_M17_M18_M19_M20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17_M18_M19_M20> _instance;
} _M12_M17_M18_M19_M20_default_instance_;
class M12_M17_M18_M19DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17_M18_M19> _instance;
} _M12_M17_M18_M19_default_instance_;
class M12_M17_M18DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17_M18> _instance;
} _M12_M17_M18_default_instance_;
class M12_M17_M22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17_M22> _instance;
} _M12_M17_M22_default_instance_;
class M12_M17DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12_M17> _instance;
} _M12_M17_default_instance_;
class M12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M12> _instance;
} _M12_default_instance_;
class M23_M24_M25DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M24_M25> _instance;
} _M23_M24_M25_default_instance_;
class M23_M24_M26DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M24_M26> _instance;
} _M23_M24_M26_default_instance_;
class M23_M24_M27DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M24_M27> _instance;
} _M23_M24_M27_default_instance_;
class M23_M24DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M24> _instance;
} _M23_M24_default_instance_;
class M23_M28DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M28> _instance;
} _M23_M28_default_instance_;
class M23_M29_M30_M31_M32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M29_M30_M31_M32> _instance;
} _M23_M29_M30_M31_M32_default_instance_;
class M23_M29_M30_M31DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M29_M30_M31> _instance;
} _M23_M29_M30_M31_default_instance_;
class M23_M29_M30DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M29_M30> _instance;
} _M23_M29_M30_default_instance_;
class M23_M29_M33DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M29_M33> _instance;
} _M23_M29_M33_default_instance_;
class M23_M29DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23_M29> _instance;
} _M23_M29_default_instance_;
class M23DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M23> _instance;
} _M23_default_instance_;
class M34_M35DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M35> _instance;
} _M34_M35_default_instance_;
class M34_M36DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M36> _instance;
} _M34_M36_default_instance_;
class M34_M37_M38_M39_M40_M41DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M37_M38_M39_M40_M41> _instance;
} _M34_M37_M38_M39_M40_M41_default_instance_;
class M34_M37_M38_M39_M40DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M37_M38_M39_M40> _instance;
} _M34_M37_M38_M39_M40_default_instance_;
class M34_M37_M38_M39DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M37_M38_M39> _instance;
} _M34_M37_M38_M39_default_instance_;
class M34_M37_M38DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M37_M38> _instance;
} _M34_M37_M38_default_instance_;
class M34_M37DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M37> _instance;
} _M34_M37_default_instance_;
class M34_M42DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34_M42> _instance;
} _M34_M42_default_instance_;
class M34DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M34> _instance;
} _M34_default_instance_;
class M43_M44_M45DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44_M45> _instance;
} _M43_M44_M45_default_instance_;
class M43_M44_M46DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44_M46> _instance;
} _M43_M44_M46_default_instance_;
class M43_M44_M47DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44_M47> _instance;
} _M43_M44_M47_default_instance_;
class M43_M44DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44> _instance;
} _M43_M44_default_instance_;
class M43_M48_M49DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48_M49> _instance;
} _M43_M48_M49_default_instance_;
class M43_M48_M50_M51_M52_M53DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48_M50_M51_M52_M53> _instance;
} _M43_M48_M50_M51_M52_M53_default_instance_;
class M43_M48_M50_M51_M52DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48_M50_M51_M52> _instance;
} _M43_M48_M50_M51_M52_default_instance_;
class M43_M48_M50_M51DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48_M50_M51> _instance;
} _M43_M48_M50_M51_default_instance_;
class M43_M48_M50DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48_M50> _instance;
} _M43_M48_M50_default_instance_;
class M43_M48DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M48> _instance;
} _M43_M48_default_instance_;
class M43DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43> _instance;
} _M43_default_instance_;
class M54_M55_M56_M57_M58DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M55_M56_M57_M58> _instance;
} _M54_M55_M56_M57_M58_default_instance_;
class M54_M55_M56_M57DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M55_M56_M57> _instance;
} _M54_M55_M56_M57_default_instance_;
class M54_M55_M56DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M55_M56> _instance;
} _M54_M55_M56_default_instance_;
class M54_M55DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M55> _instance;
} _M54_M55_default_instance_;
class M54_M59_M60DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M59_M60> _instance;
} _M54_M59_M60_default_instance_;
class M54_M59DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M59> _instance;
} _M54_M59_default_instance_;
class M54_M61DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M61> _instance;
} _M54_M61_default_instance_;
class M54_M62_M63DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M62_M63> _instance;
} _M54_M62_M63_default_instance_;
class M54_M62DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54_M62> _instance;
} _M54_M62_default_instance_;
class M54DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M54> _instance;
} _M54_default_instance_;
class M64_M65DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M65> _instance;
} _M64_M65_default_instance_;
class M64_M66DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M66> _instance;
} _M64_M66_default_instance_;
class M64_M67DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M67> _instance;
} _M64_M67_default_instance_;
class M64_M68_M69_M70_M71DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M68_M69_M70_M71> _instance;
} _M64_M68_M69_M70_M71_default_instance_;
class M64_M68_M69_M70DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M68_M69_M70> _instance;
} _M64_M68_M69_M70_default_instance_;
class M64_M68_M69DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M68_M69> _instance;
} _M64_M68_M69_default_instance_;
class M64_M68DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64_M68> _instance;
} _M64_M68_default_instance_;
class M64DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M64> _instance;
} _M64_default_instance_;
class M72_M73_M74DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M73_M74> _instance;
} _M72_M73_M74_default_instance_;
class M72_M73_M75DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M73_M75> _instance;
} _M72_M73_M75_default_instance_;
class M72_M73DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M73> _instance;
} _M72_M73_default_instance_;
class M72_M76DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M76> _instance;
} _M72_M76_default_instance_;
class M72_M77DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M77> _instance;
} _M72_M77_default_instance_;
class M72_M78_M79_M80_M81DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M78_M79_M80_M81> _instance;
} _M72_M78_M79_M80_M81_default_instance_;
class M72_M78_M79_M80DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M78_M79_M80> _instance;
} _M72_M78_M79_M80_default_instance_;
class M72_M78_M79DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M78_M79> _instance;
} _M72_M78_M79_default_instance_;
class M72_M78DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72_M78> _instance;
} _M72_M78_default_instance_;
class M72DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M72> _instance;
} _M72_default_instance_;
class M82_M83DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M83> _instance;
} _M82_M83_default_instance_;
class M82_M84_M85_M86_M87DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M84_M85_M86_M87> _instance;
} _M82_M84_M85_M86_M87_default_instance_;
class M82_M84_M85_M86DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M84_M85_M86> _instance;
} _M82_M84_M85_M86_default_instance_;
class M82_M84_M85DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M84_M85> _instance;
} _M82_M84_M85_default_instance_;
class M82_M84DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M84> _instance;
} _M82_M84_default_instance_;
class M82_M88_M89DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M88_M89> _instance;
} _M82_M88_M89_default_instance_;
class M82_M88DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M88> _instance;
} _M82_M88_default_instance_;
class M82_M90_M91DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M90_M91> _instance;
} _M82_M90_M91_default_instance_;
class M82_M90DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82_M90> _instance;
} _M82_M90_default_instance_;
class M82DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M82> _instance;
} _M82_default_instance_;
class M92_M93DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M92_M93> _instance;
} _M92_M93_default_instance_;
class M92_M94_M95DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M92_M94_M95> _instance;
} _M92_M94_M95_default_instance_;
class M92_M94DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M92_M94> _instance;
} _M92_M94_default_instance_;
class M92DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M92> _instance;
} _M92_default_instance_;
}  // namespace hyperprotobench
static void InitDefaultsscc_info_M1_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_default_instance_;
    new (ptr) ::hyperprotobench::M1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M1_benchmark_2eproto}, {
      &scc_info_M1_M2_benchmark_2eproto.base,
      &scc_info_M1_M6_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_M2_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M1_M2_benchmark_2eproto}, {
      &scc_info_M1_M2_M3_benchmark_2eproto.base,
      &scc_info_M1_M2_M4_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_M3_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_M3_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2_M3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2_M3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M3_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M2_M3_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M2_M4_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_M4_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2_M4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2_M4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_M4_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M2_M4_benchmark_2eproto}, {
      &scc_info_M1_M2_M4_M5_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_M4_M5_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_M4_M5_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2_M4_M5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2_M4_M5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M4_M5_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M2_M4_M5_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M6_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M1_M6_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M1_M6_benchmark_2eproto}, {
      &scc_info_M1_M6_M7_benchmark_2eproto.base,
      &scc_info_M1_M6_M8_benchmark_2eproto.base,
      &scc_info_M1_M6_M9_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M6_M7_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_M7_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6_M7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6_M7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M7_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M6_M7_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M6_M8_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_M8_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6_M8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6_M8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M8_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M6_M8_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M6_M9_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_M9_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6_M9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6_M9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M6_M9_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M6_M9_benchmark_2eproto}, {
      &scc_info_M1_M6_M9_M10_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M6_M9_M10_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_M9_M10_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6_M9_M10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6_M9_M10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M6_M9_M10_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M6_M9_M10_benchmark_2eproto}, {
      &scc_info_M1_M6_M9_M10_M11_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M6_M9_M10_M11_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M6_M9_M10_M11_default_instance_;
    new (ptr) ::hyperprotobench::M1_M6_M9_M10_M11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M6_M9_M10_M11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M6_M9_M10_M11_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M6_M9_M10_M11_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M12_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_default_instance_;
    new (ptr) ::hyperprotobench::M12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M12_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M12_benchmark_2eproto}, {
      &scc_info_M12_M13_benchmark_2eproto.base,
      &scc_info_M12_M16_benchmark_2eproto.base,
      &scc_info_M12_M17_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M13_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M13_default_instance_;
    new (ptr) ::hyperprotobench::M12_M13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M13_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M12_M13_benchmark_2eproto}, {
      &scc_info_M12_M13_M14_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M13_M14_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M13_M14_default_instance_;
    new (ptr) ::hyperprotobench::M12_M13_M14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M13_M14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M13_M14_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M12_M13_M14_benchmark_2eproto}, {
      &scc_info_M12_M13_M14_M15_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M13_M14_M15_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M13_M14_M15_default_instance_;
    new (ptr) ::hyperprotobench::M12_M13_M14_M15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M13_M14_M15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M13_M14_M15_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M12_M13_M14_M15_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M12_M16_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M16_default_instance_;
    new (ptr) ::hyperprotobench::M12_M16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M16_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M12_M16_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M12_M17_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M12_M17_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M12_M17_benchmark_2eproto}, {
      &scc_info_M12_M17_M18_benchmark_2eproto.base,
      &scc_info_M12_M17_M22_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M17_M18_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_M18_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17_M18();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17_M18::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M12_M17_M18_benchmark_2eproto}, {
      &scc_info_M12_M17_M18_M19_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M17_M18_M19_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_M18_M19_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17_M18_M19();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17_M18_M19::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_M19_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M12_M17_M18_M19_benchmark_2eproto}, {
      &scc_info_M12_M17_M18_M19_M20_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M17_M18_M19_M20_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_M18_M19_M20_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17_M18_M19_M20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17_M18_M19_M20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M12_M17_M18_M19_M20_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M12_M17_M18_M19_M20_benchmark_2eproto}, {
      &scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_M18_M19_M20_M21_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17_M18_M19_M20_M21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17_M18_M19_M20_M21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M12_M17_M22_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M12_M17_M22_default_instance_;
    new (ptr) ::hyperprotobench::M12_M17_M22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M12_M17_M22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M12_M17_M22_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M12_M17_M22_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_default_instance_;
    new (ptr) ::hyperprotobench::M23();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M23_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M23_benchmark_2eproto}, {
      &scc_info_M23_M24_benchmark_2eproto.base,
      &scc_info_M23_M28_benchmark_2eproto.base,
      &scc_info_M23_M29_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M23_M24_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M24_default_instance_;
    new (ptr) ::hyperprotobench::M23_M24();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M24::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M23_M24_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M23_M24_benchmark_2eproto}, {
      &scc_info_M23_M24_M25_benchmark_2eproto.base,
      &scc_info_M23_M24_M26_benchmark_2eproto.base,
      &scc_info_M23_M24_M27_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M23_M24_M25_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M24_M25_default_instance_;
    new (ptr) ::hyperprotobench::M23_M24_M25();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M24_M25::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M25_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M24_M25_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_M24_M26_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M24_M26_default_instance_;
    new (ptr) ::hyperprotobench::M23_M24_M26();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M24_M26::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M26_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M24_M26_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_M24_M27_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M24_M27_default_instance_;
    new (ptr) ::hyperprotobench::M23_M24_M27();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M24_M27::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M24_M27_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M24_M27_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_M28_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M28_default_instance_;
    new (ptr) ::hyperprotobench::M23_M28();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M28::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M28_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M28_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_M29_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M29_default_instance_;
    new (ptr) ::hyperprotobench::M23_M29();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M29::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M23_M29_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M23_M29_benchmark_2eproto}, {
      &scc_info_M23_M29_M30_benchmark_2eproto.base,
      &scc_info_M23_M29_M33_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M23_M29_M30_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M29_M30_default_instance_;
    new (ptr) ::hyperprotobench::M23_M29_M30();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M29_M30::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M23_M29_M30_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M23_M29_M30_benchmark_2eproto}, {
      &scc_info_M23_M29_M30_M31_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M23_M29_M30_M31_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M29_M30_M31_default_instance_;
    new (ptr) ::hyperprotobench::M23_M29_M30_M31();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M29_M30_M31::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M23_M29_M30_M31_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M23_M29_M30_M31_benchmark_2eproto}, {
      &scc_info_M23_M29_M30_M31_M32_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M23_M29_M30_M31_M32_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M29_M30_M31_M32_default_instance_;
    new (ptr) ::hyperprotobench::M23_M29_M30_M31_M32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M29_M30_M31_M32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M29_M30_M31_M32_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M29_M30_M31_M32_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M23_M29_M33_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M23_M29_M33_default_instance_;
    new (ptr) ::hyperprotobench::M23_M29_M33();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M23_M29_M33::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M23_M29_M33_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M23_M29_M33_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M34_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_default_instance_;
    new (ptr) ::hyperprotobench::M34();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M34_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M34_benchmark_2eproto}, {
      &scc_info_M34_M35_benchmark_2eproto.base,
      &scc_info_M34_M36_benchmark_2eproto.base,
      &scc_info_M34_M37_benchmark_2eproto.base,
      &scc_info_M34_M42_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M34_M35_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M35_default_instance_;
    new (ptr) ::hyperprotobench::M34_M35();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M35::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M35_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M34_M35_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M34_M36_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M36_default_instance_;
    new (ptr) ::hyperprotobench::M34_M36();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M36::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M36_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M34_M36_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M34_M37_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M37_default_instance_;
    new (ptr) ::hyperprotobench::M34_M37();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M37::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M34_M37_benchmark_2eproto}, {
      &scc_info_M34_M37_M38_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M34_M37_M38_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M37_M38_default_instance_;
    new (ptr) ::hyperprotobench::M34_M37_M38();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M37_M38::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M34_M37_M38_benchmark_2eproto}, {
      &scc_info_M34_M37_M38_M39_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M34_M37_M38_M39_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M37_M38_M39_default_instance_;
    new (ptr) ::hyperprotobench::M34_M37_M38_M39();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M37_M38_M39::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_M39_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M34_M37_M38_M39_benchmark_2eproto}, {
      &scc_info_M34_M37_M38_M39_M40_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M34_M37_M38_M39_M40_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M37_M38_M39_M40_default_instance_;
    new (ptr) ::hyperprotobench::M34_M37_M38_M39_M40();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M37_M38_M39_M40::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M34_M37_M38_M39_M40_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M34_M37_M38_M39_M40_benchmark_2eproto}, {
      &scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M37_M38_M39_M40_M41_default_instance_;
    new (ptr) ::hyperprotobench::M34_M37_M38_M39_M40_M41();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M37_M38_M39_M40_M41::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M34_M42_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M34_M42_default_instance_;
    new (ptr) ::hyperprotobench::M34_M42();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M34_M42::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M34_M42_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M34_M42_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_default_instance_;
    new (ptr) ::hyperprotobench::M43();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M43_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M43_benchmark_2eproto}, {
      &scc_info_M43_M44_benchmark_2eproto.base,
      &scc_info_M43_M48_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M44_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M43_M44_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M43_M44_benchmark_2eproto}, {
      &scc_info_M43_M44_M45_benchmark_2eproto.base,
      &scc_info_M43_M44_M46_benchmark_2eproto.base,
      &scc_info_M43_M44_M47_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M44_M45_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_M45_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44_M45();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44_M45::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M45_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M44_M45_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_M44_M46_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_M46_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44_M46();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44_M46::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M46_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M44_M46_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_M44_M47_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_M47_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44_M47();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44_M47::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M47_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M44_M47_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_M48_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M43_M48_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M43_M48_benchmark_2eproto}, {
      &scc_info_M43_M48_M49_benchmark_2eproto.base,
      &scc_info_M43_M48_M50_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M48_M49_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_M49_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48_M49();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48_M49::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M48_M49_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M48_M49_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_M48_M50_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_M50_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48_M50();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48_M50::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_M48_M50_benchmark_2eproto}, {
      &scc_info_M43_M48_M50_M51_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M48_M50_M51_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_M50_M51_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48_M50_M51();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48_M50_M51::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_M51_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_M48_M50_M51_benchmark_2eproto}, {
      &scc_info_M43_M48_M50_M51_M52_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M48_M50_M51_M52_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_M50_M51_M52_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48_M50_M51_M52();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48_M50_M51_M52::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M48_M50_M51_M52_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_M48_M50_M51_M52_benchmark_2eproto}, {
      &scc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M48_M50_M51_M52_M53_default_instance_;
    new (ptr) ::hyperprotobench::M43_M48_M50_M51_M52_M53();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M48_M50_M51_M52_M53::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M54_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_default_instance_;
    new (ptr) ::hyperprotobench::M54();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M54_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M54_benchmark_2eproto}, {
      &scc_info_M54_M55_benchmark_2eproto.base,
      &scc_info_M54_M59_benchmark_2eproto.base,
      &scc_info_M54_M61_benchmark_2eproto.base,
      &scc_info_M54_M62_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M55_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M55_default_instance_;
    new (ptr) ::hyperprotobench::M54_M55();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M55::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M54_M55_benchmark_2eproto}, {
      &scc_info_M54_M55_M56_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M55_M56_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M55_M56_default_instance_;
    new (ptr) ::hyperprotobench::M54_M55_M56();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M55_M56::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_M56_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M54_M55_M56_benchmark_2eproto}, {
      &scc_info_M54_M55_M56_M57_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M55_M56_M57_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M55_M56_M57_default_instance_;
    new (ptr) ::hyperprotobench::M54_M55_M56_M57();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M55_M56_M57::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M55_M56_M57_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M54_M55_M56_M57_benchmark_2eproto}, {
      &scc_info_M54_M55_M56_M57_M58_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M55_M56_M57_M58_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M55_M56_M57_M58_default_instance_;
    new (ptr) ::hyperprotobench::M54_M55_M56_M57_M58();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M55_M56_M57_M58::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M55_M56_M57_M58_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M54_M55_M56_M57_M58_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M54_M59_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M59_default_instance_;
    new (ptr) ::hyperprotobench::M54_M59();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M59::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M59_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M54_M59_benchmark_2eproto}, {
      &scc_info_M54_M59_M60_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M59_M60_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M59_M60_default_instance_;
    new (ptr) ::hyperprotobench::M54_M59_M60();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M59_M60::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M59_M60_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M54_M59_M60_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M54_M61_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M61_default_instance_;
    new (ptr) ::hyperprotobench::M54_M61();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M61::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M61_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M54_M61_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M54_M62_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M62_default_instance_;
    new (ptr) ::hyperprotobench::M54_M62();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M62::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M54_M62_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M54_M62_benchmark_2eproto}, {
      &scc_info_M54_M62_M63_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M54_M62_M63_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M54_M62_M63_default_instance_;
    new (ptr) ::hyperprotobench::M54_M62_M63();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M54_M62_M63::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M54_M62_M63_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M54_M62_M63_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M64_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_default_instance_;
    new (ptr) ::hyperprotobench::M64();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M64_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M64_benchmark_2eproto}, {
      &scc_info_M64_M65_benchmark_2eproto.base,
      &scc_info_M64_M66_benchmark_2eproto.base,
      &scc_info_M64_M67_benchmark_2eproto.base,
      &scc_info_M64_M68_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M64_M65_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M65_default_instance_;
    new (ptr) ::hyperprotobench::M64_M65();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M65::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M65_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M64_M65_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M64_M66_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M66_default_instance_;
    new (ptr) ::hyperprotobench::M64_M66();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M66::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M66_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M64_M66_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M64_M67_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M67_default_instance_;
    new (ptr) ::hyperprotobench::M64_M67();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M67::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M67_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M64_M67_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M64_M68_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M68_default_instance_;
    new (ptr) ::hyperprotobench::M64_M68();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M68::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M64_M68_benchmark_2eproto}, {
      &scc_info_M64_M68_M69_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M64_M68_M69_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M68_M69_default_instance_;
    new (ptr) ::hyperprotobench::M64_M68_M69();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M68_M69::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_M69_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M64_M68_M69_benchmark_2eproto}, {
      &scc_info_M64_M68_M69_M70_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M64_M68_M69_M70_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M68_M69_M70_default_instance_;
    new (ptr) ::hyperprotobench::M64_M68_M69_M70();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M68_M69_M70::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M64_M68_M69_M70_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M64_M68_M69_M70_benchmark_2eproto}, {
      &scc_info_M64_M68_M69_M70_M71_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M64_M68_M69_M70_M71_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M64_M68_M69_M70_M71_default_instance_;
    new (ptr) ::hyperprotobench::M64_M68_M69_M70_M71();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M64_M68_M69_M70_M71::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M64_M68_M69_M70_M71_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M64_M68_M69_M70_M71_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M72_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_default_instance_;
    new (ptr) ::hyperprotobench::M72();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M72_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M72_benchmark_2eproto}, {
      &scc_info_M72_M73_benchmark_2eproto.base,
      &scc_info_M72_M76_benchmark_2eproto.base,
      &scc_info_M72_M77_benchmark_2eproto.base,
      &scc_info_M72_M78_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M72_M73_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M73_default_instance_;
    new (ptr) ::hyperprotobench::M72_M73();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M73::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M72_M73_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M72_M73_benchmark_2eproto}, {
      &scc_info_M72_M73_M74_benchmark_2eproto.base,
      &scc_info_M72_M73_M75_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M72_M73_M74_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M73_M74_default_instance_;
    new (ptr) ::hyperprotobench::M72_M73_M74();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M73_M74::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M73_M74_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M72_M73_M74_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M72_M73_M75_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M73_M75_default_instance_;
    new (ptr) ::hyperprotobench::M72_M73_M75();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M73_M75::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M73_M75_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M72_M73_M75_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M72_M76_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M76_default_instance_;
    new (ptr) ::hyperprotobench::M72_M76();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M76::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M76_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M72_M76_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M72_M77_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M77_default_instance_;
    new (ptr) ::hyperprotobench::M72_M77();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M77::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M77_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M72_M77_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M72_M78_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M78_default_instance_;
    new (ptr) ::hyperprotobench::M72_M78();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M78::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M72_M78_benchmark_2eproto}, {
      &scc_info_M72_M78_M79_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M72_M78_M79_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M78_M79_default_instance_;
    new (ptr) ::hyperprotobench::M72_M78_M79();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M78_M79::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_M79_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M72_M78_M79_benchmark_2eproto}, {
      &scc_info_M72_M78_M79_M80_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M72_M78_M79_M80_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M78_M79_M80_default_instance_;
    new (ptr) ::hyperprotobench::M72_M78_M79_M80();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M78_M79_M80::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M72_M78_M79_M80_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M72_M78_M79_M80_benchmark_2eproto}, {
      &scc_info_M72_M78_M79_M80_M81_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M72_M78_M79_M80_M81_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M72_M78_M79_M80_M81_default_instance_;
    new (ptr) ::hyperprotobench::M72_M78_M79_M80_M81();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M72_M78_M79_M80_M81::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M72_M78_M79_M80_M81_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M72_M78_M79_M80_M81_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M82_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_default_instance_;
    new (ptr) ::hyperprotobench::M82();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M82_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M82_benchmark_2eproto}, {
      &scc_info_M82_M83_benchmark_2eproto.base,
      &scc_info_M82_M84_benchmark_2eproto.base,
      &scc_info_M82_M88_benchmark_2eproto.base,
      &scc_info_M82_M90_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M83_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M83_default_instance_;
    new (ptr) ::hyperprotobench::M82_M83();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M83::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M83_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M82_M83_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M82_M84_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M84_default_instance_;
    new (ptr) ::hyperprotobench::M82_M84();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M84::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M82_M84_benchmark_2eproto}, {
      &scc_info_M82_M84_M85_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M84_M85_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M84_M85_default_instance_;
    new (ptr) ::hyperprotobench::M82_M84_M85();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M84_M85::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_M85_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M82_M84_M85_benchmark_2eproto}, {
      &scc_info_M82_M84_M85_M86_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M84_M85_M86_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M84_M85_M86_default_instance_;
    new (ptr) ::hyperprotobench::M82_M84_M85_M86();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M84_M85_M86::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M84_M85_M86_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M82_M84_M85_M86_benchmark_2eproto}, {
      &scc_info_M82_M84_M85_M86_M87_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M84_M85_M86_M87_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M84_M85_M86_M87_default_instance_;
    new (ptr) ::hyperprotobench::M82_M84_M85_M86_M87();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M84_M85_M86_M87::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M84_M85_M86_M87_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M82_M84_M85_M86_M87_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M82_M88_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M88_default_instance_;
    new (ptr) ::hyperprotobench::M82_M88();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M88::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M88_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M82_M88_benchmark_2eproto}, {
      &scc_info_M82_M88_M89_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M88_M89_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M88_M89_default_instance_;
    new (ptr) ::hyperprotobench::M82_M88_M89();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M88_M89::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M88_M89_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M82_M88_M89_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M82_M90_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M90_default_instance_;
    new (ptr) ::hyperprotobench::M82_M90();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M90::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M82_M90_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M82_M90_benchmark_2eproto}, {
      &scc_info_M82_M90_M91_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M82_M90_M91_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M82_M90_M91_default_instance_;
    new (ptr) ::hyperprotobench::M82_M90_M91();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M82_M90_M91::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M82_M90_M91_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M82_M90_M91_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M92_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M92_default_instance_;
    new (ptr) ::hyperprotobench::M92();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M92::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M92_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M92_benchmark_2eproto}, {
      &scc_info_M92_M93_benchmark_2eproto.base,
      &scc_info_M92_M94_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M92_M93_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M92_M93_default_instance_;
    new (ptr) ::hyperprotobench::M92_M93();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M92_M93::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M92_M93_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M92_M93_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M92_M94_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M92_M94_default_instance_;
    new (ptr) ::hyperprotobench::M92_M94();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M92_M94::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M92_M94_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M92_M94_benchmark_2eproto}, {
      &scc_info_M92_M94_M95_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M92_M94_M95_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M92_M94_M95_default_instance_;
    new (ptr) ::hyperprotobench::M92_M94_M95();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M92_M94_M95::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M92_M94_M95_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M92_M94_M95_benchmark_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_benchmark_2eproto[95];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_benchmark_2eproto[19];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_benchmark_2eproto = nullptr;

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS::M1_M2_M3_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2_M3::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2_M3),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_M4_M5_ACCEL_DESCRIPTORS::M1_M2_M4_M5_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2_M4_M5::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2_M4_M5),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4_M5, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4_M5, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_M4_ACCEL_DESCRIPTORS::M1_M2_M4_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2_M4::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2_M4),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_M4_M5_ACCEL_DESCRIPTORS::M1_M2_M4_M5_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS::M1_M2_M3_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_M4_ACCEL_DESCRIPTORS::M1_M2_M4_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  514L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_M7_ACCEL_DESCRIPTORS::M1_M6_M7_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6_M7::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6_M7),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M7, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M7, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_M8_ACCEL_DESCRIPTORS::M1_M6_M8_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6_M8::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6_M8),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 6L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS::M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6_M9_M10_M11::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6_M9_M10_M11),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_M9_M10_ACCEL_DESCRIPTORS::M1_M6_M9_M10_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6_M9_M10::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6_M9_M10),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS::M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_M9_ACCEL_DESCRIPTORS::M1_M6_M9_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6_M9::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6_M9),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_M9_M10_ACCEL_DESCRIPTORS::M1_M6_M9_M10_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  32L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M6_ACCEL_DESCRIPTORS::M1_M6_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M6::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M6),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_M7_ACCEL_DESCRIPTORS::M1_M6_M7_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_M8_ACCEL_DESCRIPTORS::M1_M6_M8_ACCEL_DESCRIPTORS),

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_M9_ACCEL_DESCRIPTORS::M1_M6_M9_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  42L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS::M1_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 22L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M6_ACCEL_DESCRIPTORS::M1_M6_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4196352L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M13_M14_M15_ACCEL_DESCRIPTORS::M12_M13_M14_M15_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M13_M14_M15::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M13_M14_M15),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14_M15, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14_M15, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M13_M14_ACCEL_DESCRIPTORS::M12_M13_M14_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M13_M14::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M13_M14),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 17L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M13_M14_M15_ACCEL_DESCRIPTORS::M12_M13_M14_M15_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M13_ACCEL_DESCRIPTORS::M12_M13_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M13::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M13),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M13_M14_ACCEL_DESCRIPTORS::M12_M13_M14_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M16_ACCEL_DESCRIPTORS::M12_M16_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M16::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M16),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS::M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17_M18_M19_M20_M21::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17_M18_M19_M20_M21),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS::M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17_M18_M19_M20::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17_M18_M19_M20),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS::M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_M18_M19_ACCEL_DESCRIPTORS::M12_M17_M18_M19_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17_M18_M19::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17_M18_M19),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS::M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_M18_ACCEL_DESCRIPTORS::M12_M17_M18_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17_M18::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17_M18),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_M18_M19_ACCEL_DESCRIPTORS::M12_M17_M18_M19_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_M22_ACCEL_DESCRIPTORS::M12_M17_M22_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17_M22::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17_M22),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_M17_ACCEL_DESCRIPTORS::M12_M17_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12_M17::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12_M17),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 17L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)17) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_M18_ACCEL_DESCRIPTORS::M12_M17_M18_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_M22_ACCEL_DESCRIPTORS::M12_M17_M22_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1536L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M12_ACCEL_DESCRIPTORS::M12_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M12::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M12),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 21L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M13_ACCEL_DESCRIPTORS::M12_M13_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M16_ACCEL_DESCRIPTORS::M12_M16_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M12_M17_ACCEL_DESCRIPTORS::M12_M17_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1058L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M24_M25_ACCEL_DESCRIPTORS::M23_M24_M25_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M24_M25::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M24_M25),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M25, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M25, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M24_M26_ACCEL_DESCRIPTORS::M23_M24_M26_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M24_M26::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M24_M26),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M26, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M26, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M24_M27_ACCEL_DESCRIPTORS::M23_M24_M27_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M24_M27::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M24_M27),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M27, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M27, f1_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS::M23_M24_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M24::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M24),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M24_M25_ACCEL_DESCRIPTORS::M23_M24_M25_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M24_M26_ACCEL_DESCRIPTORS::M23_M24_M26_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M24_M27_ACCEL_DESCRIPTORS::M23_M24_M27_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  28L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M28_ACCEL_DESCRIPTORS::M23_M28_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M28::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M28),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M28, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M28, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS::M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M29_M30_M31_M32::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M29_M30_M31_M32),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M29_M30_M31_ACCEL_DESCRIPTORS::M23_M29_M30_M31_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M29_M30_M31::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M29_M30_M31),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 14L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS::M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8192L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M29_M30_ACCEL_DESCRIPTORS::M23_M29_M30_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M29_M30::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M29_M30),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M29_M30_M31_ACCEL_DESCRIPTORS::M23_M29_M30_M31_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M29_M33_ACCEL_DESCRIPTORS::M23_M29_M33_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M29_M33::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M29_M33),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_M29_ACCEL_DESCRIPTORS::M23_M29_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23_M29::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23_M29),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M29_M30_ACCEL_DESCRIPTORS::M23_M29_M30_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M29_M33_ACCEL_DESCRIPTORS::M23_M29_M33_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  80L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M23_ACCEL_DESCRIPTORS::M23_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M23::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M23),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS::M23_M24_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M28_ACCEL_DESCRIPTORS::M23_M28_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M23_M29_ACCEL_DESCRIPTORS::M23_M29_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  772L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M35_ACCEL_DESCRIPTORS::M34_M35_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M35::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M35),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M35, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M35, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M36_ACCEL_DESCRIPTORS::M34_M36_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M36::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M36),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)13) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS::M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M37_M38_M39_M40_M41::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M37_M38_M39_M40_M41),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f8_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS::M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M37_M38_M39_M40::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M37_M38_M39_M40),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS::M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M37_M38_M39_ACCEL_DESCRIPTORS::M34_M37_M38_M39_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M37_M38_M39::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M37_M38_M39),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS::M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M37_M38_ACCEL_DESCRIPTORS::M34_M37_M38_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M37_M38::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M37_M38),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M37_M38_M39_ACCEL_DESCRIPTORS::M34_M37_M38_M39_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M37_ACCEL_DESCRIPTORS::M34_M37_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M37::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M37),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M37_M38_ACCEL_DESCRIPTORS::M34_M37_M38_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_M42_ACCEL_DESCRIPTORS::M34_M42_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34_M42::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34_M42),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M42, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M42, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M34_ACCEL_DESCRIPTORS::M34_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M34::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M34),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 21L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M35_ACCEL_DESCRIPTORS::M34_M35_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M36_ACCEL_DESCRIPTORS::M34_M36_ACCEL_DESCRIPTORS),

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M37_ACCEL_DESCRIPTORS::M34_M37_ACCEL_DESCRIPTORS),

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M34_M42_ACCEL_DESCRIPTORS::M34_M42_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  1089540L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS::M43_M44_M45_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44_M45::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44_M45),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_M46_ACCEL_DESCRIPTORS::M43_M44_M46_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44_M46::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44_M46),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f2_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_M47_ACCEL_DESCRIPTORS::M43_M44_M47_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44_M47::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44_M47),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M47, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M47, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS::M43_M44_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS::M43_M44_M45_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_M46_ACCEL_DESCRIPTORS::M43_M44_M46_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_M47_ACCEL_DESCRIPTORS::M43_M44_M47_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  3076L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_M49_ACCEL_DESCRIPTORS::M43_M48_M49_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48_M49::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48_M49),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS::M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48_M50_M51_M52_M53::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48_M50_M51_M52_M53),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS::M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48_M50_M51_M52::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48_M50_M51_M52),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS::M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_M50_M51_ACCEL_DESCRIPTORS::M43_M48_M50_M51_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48_M50_M51::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48_M50_M51),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 20L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS::M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f11_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_M50_ACCEL_DESCRIPTORS::M43_M48_M50_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48_M50::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48_M50),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_M50_M51_ACCEL_DESCRIPTORS::M43_M48_M50_M51_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M48_ACCEL_DESCRIPTORS::M43_M48_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M48::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M48),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 25L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_M49_ACCEL_DESCRIPTORS::M43_M48_M49_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_M50_ACCEL_DESCRIPTORS::M43_M48_M50_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16777218L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS::M43_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 27L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS::M43_M44_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 26 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 27 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M48_ACCEL_DESCRIPTORS::M43_M48_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  67108872L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS::M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M55_M56_M57_M58::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M55_M56_M57_M58),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M55_M56_M57_ACCEL_DESCRIPTORS::M54_M55_M56_M57_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M55_M56_M57::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M55_M56_M57),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS::M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M55_M56_ACCEL_DESCRIPTORS::M54_M55_M56_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M55_M56::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M55_M56),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M55_M56_M57_ACCEL_DESCRIPTORS::M54_M55_M56_M57_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M55_ACCEL_DESCRIPTORS::M54_M55_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M55::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M55),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 9L) << 32) |
  /* max field num */ (((uint64_t) 14L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M55_M56_ACCEL_DESCRIPTORS::M54_M55_M56_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  64L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M59_M60_ACCEL_DESCRIPTORS::M54_M59_M60_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M59_M60::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M59_M60),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M59_ACCEL_DESCRIPTORS::M54_M59_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M59::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M59),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M59_M60_ACCEL_DESCRIPTORS::M54_M59_M60_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M61_ACCEL_DESCRIPTORS::M54_M61_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M61::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M61),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, f2_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M62_M63_ACCEL_DESCRIPTORS::M54_M62_M63_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M62_M63::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M62_M63),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62_M63, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)13) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62_M63, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_M62_ACCEL_DESCRIPTORS::M54_M62_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54_M62::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54_M62),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M62_M63_ACCEL_DESCRIPTORS::M54_M62_M63_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M54_ACCEL_DESCRIPTORS::M54_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M54::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M54),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 6L) << 32) |
  /* max field num */ (((uint64_t) 27L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f1_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M55_ACCEL_DESCRIPTORS::M54_M55_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M59_ACCEL_DESCRIPTORS::M54_M59_ACCEL_DESCRIPTORS),

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f6_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M61_ACCEL_DESCRIPTORS::M54_M61_ACCEL_DESCRIPTORS),

  /* field 26 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 27 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M54_M62_ACCEL_DESCRIPTORS::M54_M62_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  5275656L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M65_ACCEL_DESCRIPTORS::M64_M65_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M65::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M65),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M65, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M65, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M66_ACCEL_DESCRIPTORS::M64_M66_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M66::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M66),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M66, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M66, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M67_ACCEL_DESCRIPTORS::M64_M67_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M67::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M67),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M67, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M67, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS::M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M68_M69_M70_M71::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M68_M69_M70_M71),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, f2_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M68_M69_M70_ACCEL_DESCRIPTORS::M64_M68_M69_M70_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M68_M69_M70::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M68_M69_M70),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS::M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M68_M69_ACCEL_DESCRIPTORS::M64_M68_M69_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M68_M69::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M68_M69),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M68_M69_M70_ACCEL_DESCRIPTORS::M64_M68_M69_M70_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_M68_ACCEL_DESCRIPTORS::M64_M68_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64_M68::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64_M68),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M68_M69_ACCEL_DESCRIPTORS::M64_M68_M69_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M64_ACCEL_DESCRIPTORS::M64_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M64::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M64),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M65_ACCEL_DESCRIPTORS::M64_M65_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M66_ACCEL_DESCRIPTORS::M64_M66_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M67_ACCEL_DESCRIPTORS::M64_M67_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M64_M68_ACCEL_DESCRIPTORS::M64_M68_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1548L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M73_M74_ACCEL_DESCRIPTORS::M72_M73_M74_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M73_M74::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M73_M74),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M74, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M74, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M73_M75_ACCEL_DESCRIPTORS::M72_M73_M75_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M73_M75::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M73_M75),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M73_ACCEL_DESCRIPTORS::M72_M73_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M73::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M73),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M73_M74_ACCEL_DESCRIPTORS::M72_M73_M74_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M73_M75_ACCEL_DESCRIPTORS::M72_M73_M75_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  6L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M76_ACCEL_DESCRIPTORS::M72_M76_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M76::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M76),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)13) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M77_ACCEL_DESCRIPTORS::M72_M77_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M77::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M77),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS::M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M78_M79_M80_M81::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M78_M79_M80_M81),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80_M81, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80_M81, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M78_M79_M80_ACCEL_DESCRIPTORS::M72_M78_M79_M80_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M78_M79_M80::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M78_M79_M80),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS::M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M78_M79_ACCEL_DESCRIPTORS::M72_M78_M79_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M78_M79::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M78_M79),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M78_M79_M80_ACCEL_DESCRIPTORS::M72_M78_M79_M80_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_M78_ACCEL_DESCRIPTORS::M72_M78_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72_M78::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72_M78),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M78_M79_ACCEL_DESCRIPTORS::M72_M78_M79_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M72_ACCEL_DESCRIPTORS::M72_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M72::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M72),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 17L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f1_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M73_ACCEL_DESCRIPTORS::M72_M73_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M76_ACCEL_DESCRIPTORS::M72_M76_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M77_ACCEL_DESCRIPTORS::M72_M77_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M72_M78_ACCEL_DESCRIPTORS::M72_M78_ACCEL_DESCRIPTORS),

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  32796L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M83_ACCEL_DESCRIPTORS::M82_M83_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M83::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M83),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS::M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M84_M85_M86_M87::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M84_M85_M86_M87),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M84_M85_M86_ACCEL_DESCRIPTORS::M82_M84_M85_M86_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M84_M85_M86::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M84_M85_M86),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS::M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M84_M85_ACCEL_DESCRIPTORS::M82_M84_M85_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M84_M85::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M84_M85),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M84_M85_M86_ACCEL_DESCRIPTORS::M82_M84_M85_M86_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)17) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M84_ACCEL_DESCRIPTORS::M82_M84_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M84::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M84),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M84_M85_ACCEL_DESCRIPTORS::M82_M84_M85_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1024L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M88_M89_ACCEL_DESCRIPTORS::M82_M88_M89_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M88_M89::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M88_M89),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M88_ACCEL_DESCRIPTORS::M82_M88_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M88::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M88),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M88_M89_ACCEL_DESCRIPTORS::M82_M88_M89_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  512L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M90_M91_ACCEL_DESCRIPTORS::M82_M90_M91_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M90_M91::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M90_M91),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90_M91, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90_M91, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_M90_ACCEL_DESCRIPTORS::M82_M90_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82_M90::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82_M90),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M90_M91_ACCEL_DESCRIPTORS::M82_M90_M91_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f3_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)2) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M82_ACCEL_DESCRIPTORS::M82_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M82::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M82),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 26L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M83_ACCEL_DESCRIPTORS::M82_M83_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M84_ACCEL_DESCRIPTORS::M82_M84_ACCEL_DESCRIPTORS),

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M88_ACCEL_DESCRIPTORS::M82_M88_ACCEL_DESCRIPTORS),

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M82_M90_ACCEL_DESCRIPTORS::M82_M90_ACCEL_DESCRIPTORS),

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 26 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2883600L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M92_M93_ACCEL_DESCRIPTORS::M92_M93_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M92_M93::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M92_M93),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M93, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M93, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M92_M94_M95_ACCEL_DESCRIPTORS::M92_M94_M95_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M92_M94_M95::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M92_M94_M95),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94_M95, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94_M95, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M92_M94_ACCEL_DESCRIPTORS::M92_M94_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M92_M94::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M92_M94),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M92_M94_M95_ACCEL_DESCRIPTORS::M92_M94_M95_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M92_ACCEL_DESCRIPTORS::M92_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M92::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M92),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M92_M93_ACCEL_DESCRIPTORS::M92_M93_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M92_M94_ACCEL_DESCRIPTORS::M92_M94_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  6L,
};

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_benchmark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4_M5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4_M5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4_M5, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M4, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f10_),
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  9,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M7, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M7, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M8, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10_M11, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9_M10, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6_M9, f2_),
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M6, f4_),
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_),
  1,
  2,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  22,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14_M15, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14_M15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14_M15, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13_M14, f6_),
  1,
  8,
  12,
  13,
  14,
  16,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M13, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M16, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20_M21, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19_M20, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18_M19, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M18, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17_M22, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12_M17, f7_),
  1,
  2,
  3,
  9,
  10,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M12, f13_),
  1,
  2,
  5,
  9,
  10,
  11,
  13,
  14,
  16,
  17,
  18,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M25, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M25, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M25, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M26, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M26, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M26, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M27, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M27, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24_M27, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M24, f5_),
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M28, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M28, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M28, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31_M32, f4_),
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30_M31, f7_),
  1,
  7,
  8,
  9,
  10,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M30, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29_M33, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23_M29, f6_),
  1,
  4,
  5,
  6,
  7,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M23, f10_),
  1,
  2,
  3,
  4,
  6,
  8,
  9,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M35, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M35, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M35, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M36, f5_),
  1,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40_M41, f10_),
  1,
  3,
  4,
  7,
  8,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39_M40, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38_M39, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37_M38, f8_),
  1,
  2,
  3,
  4,
  5,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M37, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M42, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M42, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34_M42, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M34, f14_),
  1,
  2,
  4,
  5,
  6,
  8,
  9,
  10,
  12,
  13,
  15,
  16,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M46, f3_),
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M47, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M47, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M47, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f4_),
  1,
  2,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M49, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52_M53, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51_M52, f5_),
  1,
  3,
  5,
  6,
  8,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50_M51, f11_),
  1,
  2,
  3,
  6,
  7,
  8,
  11,
  12,
  13,
  17,
  19,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48_M50, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M48, f10_),
  1,
  2,
  12,
  15,
  18,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f12_),
  1,
  2,
  3,
  5,
  7,
  9,
  10,
  17,
  18,
  20,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57_M58, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56_M57, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55_M56, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M55, f3_),
  1,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59_M60, f4_),
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M59, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M61, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62_M63, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62_M63, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62_M63, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54_M62, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M54, f9_),
  1,
  3,
  5,
  15,
  16,
  18,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M65, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M65, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M65, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M66, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M66, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M66, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M67, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M67, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M67, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70_M71, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69_M70, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68_M69, f5_),
  1,
  4,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64_M68, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M64, f8_),
  1,
  2,
  3,
  6,
  7,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M74, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M74, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M74, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73_M75, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M73, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M76, f4_),
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M77, f2_),
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80_M81, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80_M81, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80_M81, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79_M80, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78_M79, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72_M78, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M72, f10_),
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  13,
  15,
  17,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M83, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86_M87, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85_M86, f5_),
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84_M85, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M84, f3_),
  1,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88_M89, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M88, f2_),
  1,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90_M91, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90_M91, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90_M91, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82_M90, f4_),
  1,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M82, f12_),
  1,
  2,
  3,
  4,
  12,
  18,
  19,
  21,
  22,
  23,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M93, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M93, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M93, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94_M95, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94_M95, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94_M95, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92_M94, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M92, f4_),
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hyperprotobench::M1_M2_M3)},
  { 7, 13, sizeof(::hyperprotobench::M1_M2_M4_M5)},
  { 14, 21, sizeof(::hyperprotobench::M1_M2_M4)},
  { 23, 38, sizeof(::hyperprotobench::M1_M2)},
  { 48, 54, sizeof(::hyperprotobench::M1_M6_M7)},
  { 55, 62, sizeof(::hyperprotobench::M1_M6_M8)},
  { 64, 71, sizeof(::hyperprotobench::M1_M6_M9_M10_M11)},
  { 73, 80, sizeof(::hyperprotobench::M1_M6_M9_M10)},
  { 82, 89, sizeof(::hyperprotobench::M1_M6_M9)},
  { 91, 100, sizeof(::hyperprotobench::M1_M6)},
  { 104, 120, sizeof(::hyperprotobench::M1)},
  { 131, 137, sizeof(::hyperprotobench::M12_M13_M14_M15)},
  { 138, 149, sizeof(::hyperprotobench::M12_M13_M14)},
  { 155, 162, sizeof(::hyperprotobench::M12_M13)},
  { 164, 172, sizeof(::hyperprotobench::M12_M16)},
  { 175, 182, sizeof(::hyperprotobench::M12_M17_M18_M19_M20_M21)},
  { 184, 191, sizeof(::hyperprotobench::M12_M17_M18_M19_M20)},
  { 193, 200, sizeof(::hyperprotobench::M12_M17_M18_M19)},
  { 202, 209, sizeof(::hyperprotobench::M12_M17_M18)},
  { 211, 219, sizeof(::hyperprotobench::M12_M17_M22)},
  { 222, 234, sizeof(::hyperprotobench::M12_M17)},
  { 241, 259, sizeof(::hyperprotobench::M12)},
  { 272, 278, sizeof(::hyperprotobench::M23_M24_M25)},
  { 279, 285, sizeof(::hyperprotobench::M23_M24_M26)},
  { 286, 292, sizeof(::hyperprotobench::M23_M24_M27)},
  { 293, 303, sizeof(::hyperprotobench::M23_M24)},
  { 308, 314, sizeof(::hyperprotobench::M23_M28)},
  { 315, 324, sizeof(::hyperprotobench::M23_M29_M30_M31_M32)},
  { 328, 340, sizeof(::hyperprotobench::M23_M29_M30_M31)},
  { 347, 354, sizeof(::hyperprotobench::M23_M29_M30)},
  { 356, 364, sizeof(::hyperprotobench::M23_M29_M33)},
  { 367, 378, sizeof(::hyperprotobench::M23_M29)},
  { 384, 399, sizeof(::hyperprotobench::M23)},
  { 409, 415, sizeof(::hyperprotobench::M34_M35)},
  { 416, 426, sizeof(::hyperprotobench::M34_M36)},
  { 431, 446, sizeof(::hyperprotobench::M34_M37_M38_M39_M40_M41)},
  { 456, 463, sizeof(::hyperprotobench::M34_M37_M38_M39_M40)},
  { 465, 473, sizeof(::hyperprotobench::M34_M37_M38_M39)},
  { 476, 489, sizeof(::hyperprotobench::M34_M37_M38)},
  { 497, 505, sizeof(::hyperprotobench::M34_M37)},
  { 508, 514, sizeof(::hyperprotobench::M34_M42)},
  { 515, 534, sizeof(::hyperprotobench::M34)},
  { 548, 554, sizeof(::hyperprotobench::M43_M44_M45)},
  { 555, 563, sizeof(::hyperprotobench::M43_M44_M46)},
  { 566, 572, sizeof(::hyperprotobench::M43_M44_M47)},
  { 573, 582, sizeof(::hyperprotobench::M43_M44)},
  { 586, 593, sizeof(::hyperprotobench::M43_M48_M49)},
  { 595, 602, sizeof(::hyperprotobench::M43_M48_M50_M51_M52_M53)},
  { 604, 614, sizeof(::hyperprotobench::M43_M48_M50_M51_M52)},
  { 619, 635, sizeof(::hyperprotobench::M43_M48_M50_M51)},
  { 646, 653, sizeof(::hyperprotobench::M43_M48_M50)},
  { 655, 670, sizeof(::hyperprotobench::M43_M48)},
  { 680, 697, sizeof(::hyperprotobench::M43)},
  { 709, 717, sizeof(::hyperprotobench::M54_M55_M56_M57_M58)},
  { 720, 727, sizeof(::hyperprotobench::M54_M55_M56_M57)},
  { 729, 736, sizeof(::hyperprotobench::M54_M55_M56)},
  { 738, 746, sizeof(::hyperprotobench::M54_M55)},
  { 749, 758, sizeof(::hyperprotobench::M54_M59_M60)},
  { 762, 769, sizeof(::hyperprotobench::M54_M59)},
  { 771, 778, sizeof(::hyperprotobench::M54_M61)},
  { 780, 786, sizeof(::hyperprotobench::M54_M62_M63)},
  { 787, 794, sizeof(::hyperprotobench::M54_M62)},
  { 796, 810, sizeof(::hyperprotobench::M54)},
  { 819, 825, sizeof(::hyperprotobench::M64_M65)},
  { 826, 832, sizeof(::hyperprotobench::M64_M66)},
  { 833, 839, sizeof(::hyperprotobench::M64_M67)},
  { 840, 847, sizeof(::hyperprotobench::M64_M68_M69_M70_M71)},
  { 849, 856, sizeof(::hyperprotobench::M64_M68_M69_M70)},
  { 858, 868, sizeof(::hyperprotobench::M64_M68_M69)},
  { 873, 880, sizeof(::hyperprotobench::M64_M68)},
  { 882, 895, sizeof(::hyperprotobench::M64)},
  { 903, 909, sizeof(::hyperprotobench::M72_M73_M74)},
  { 910, 917, sizeof(::hyperprotobench::M72_M73_M75)},
  { 919, 927, sizeof(::hyperprotobench::M72_M73)},
  { 930, 939, sizeof(::hyperprotobench::M72_M76)},
  { 943, 950, sizeof(::hyperprotobench::M72_M77)},
  { 952, 958, sizeof(::hyperprotobench::M72_M78_M79_M80_M81)},
  { 959, 966, sizeof(::hyperprotobench::M72_M78_M79_M80)},
  { 968, 975, sizeof(::hyperprotobench::M72_M78_M79)},
  { 977, 984, sizeof(::hyperprotobench::M72_M78)},
  { 986, 1001, sizeof(::hyperprotobench::M72)},
  { 1011, 1018, sizeof(::hyperprotobench::M82_M83)},
  { 1020, 1027, sizeof(::hyperprotobench::M82_M84_M85_M86_M87)},
  { 1029, 1039, sizeof(::hyperprotobench::M82_M84_M85_M86)},
  { 1044, 1051, sizeof(::hyperprotobench::M82_M84_M85)},
  { 1053, 1061, sizeof(::hyperprotobench::M82_M84)},
  { 1064, 1072, sizeof(::hyperprotobench::M82_M88_M89)},
  { 1075, 1082, sizeof(::hyperprotobench::M82_M88)},
  { 1084, 1090, sizeof(::hyperprotobench::M82_M90_M91)},
  { 1091, 1100, sizeof(::hyperprotobench::M82_M90)},
  { 1104, 1121, sizeof(::hyperprotobench::M82)},
  { 1133, 1139, sizeof(::hyperprotobench::M92_M93)},
  { 1140, 1146, sizeof(::hyperprotobench::M92_M94_M95)},
  { 1147, 1154, sizeof(::hyperprotobench::M92_M94)},
  { 1156, 1165, sizeof(::hyperprotobench::M92)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_M3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_M4_M5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_M4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_M7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_M8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_M9_M10_M11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_M9_M10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_M9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M13_M14_M15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M13_M14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_M18_M19_M20_M21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_M18_M19_M20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_M18_M19_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_M18_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_M22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_M17_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M24_M25_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M24_M26_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M24_M27_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M24_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M28_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M29_M30_M31_M32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M29_M30_M31_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M29_M30_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M29_M33_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_M29_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M23_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M35_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M36_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M37_M38_M39_M40_M41_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M37_M38_M39_M40_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M37_M38_M39_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M37_M38_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M37_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_M42_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M34_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_M45_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_M46_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_M47_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_M49_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_M50_M51_M52_M53_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_M50_M51_M52_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_M50_M51_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_M50_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M48_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M55_M56_M57_M58_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M55_M56_M57_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M55_M56_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M55_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M59_M60_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M59_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M61_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M62_M63_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_M62_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M54_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M65_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M66_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M67_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M68_M69_M70_M71_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M68_M69_M70_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M68_M69_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_M68_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M64_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M73_M74_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M73_M75_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M73_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M76_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M77_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M78_M79_M80_M81_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M78_M79_M80_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M78_M79_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_M78_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M72_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M83_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M84_M85_M86_M87_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M84_M85_M86_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M84_M85_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M84_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M88_M89_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M88_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M90_M91_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_M90_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M82_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M92_M93_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M92_M94_M95_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M92_M94_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M92_default_instance_),
};

const char descriptor_table_protodef_benchmark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017benchmark.proto\022\017hyperprotobench\"\206\010\n\002M"
  "1\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\004\022\"\n\002f3\030\013 \001(\0132\026."
  "hyperprotobench.M1.M2\022\n\n\002f4\030\014 \001(\002\022\n\n\002f5\030"
  "\r \001(\t\022\n\n\002f6\030\016 \001(\010\022\n\n\002f7\030\017 \001(\t\022\n\n\002f8\030\020 \001("
  "\t\022\"\n\002f9\030\021 \001(\0162\026.hyperprotobench.M1.E1\022\013\n"
  "\003f10\030\022 \001(\007\022#\n\003f11\030\026 \001(\0132\026.hyperprotobenc"
  "h.M1.M6\032\204\003\n\002M2\022%\n\002f1\030\001 \001(\0132\031.hyperprotob"
  "ench.M1.M2.M3\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030\003 \001(\002\022%\n"
  "\002f4\030\004 \001(\0162\031.hyperprotobench.M1.M2.E1\022\n\n\002"
  "f5\030\005 \001(\002\022\n\n\002f6\030\007 \001(\002\022\n\n\002f7\030\010 \001(\005\022%\n\002f8\030\t"
  " \001(\0132\031.hyperprotobench.M1.M2.M4\022\n\n\002f9\030\n "
  "\001(\005\022\013\n\003f10\030\014 \001(\014\032\020\n\002M3\022\n\n\002f1\030\001 \001(\005\032L\n\002M4"
  "\022(\n\002f1\030\001 \001(\0132\034.hyperprotobench.M1.M2.M4."
  "M5\022\n\n\002f2\030\002 \001(\006\032\020\n\002M5\022\n\n\002f1\030\001 \001(\005\"T\n\002E1\022\016"
  "\n\nE1_CONST_1\020#\022\016\n\nE1_CONST_2\020n\022\016\n\nE1_CON"
  "ST_3\020P\022\016\n\nE1_CONST_4\020\027\022\016\n\nE1_CONST_5\020{\032\324"
  "\002\n\002M6\022%\n\002f1\030\003 \001(\0132\031.hyperprotobench.M1.M"
  "6.M7\022\n\n\002f2\030\004 \001(\004\022%\n\002f3\030\005 \001(\0132\031.hyperprot"
  "obench.M1.M6.M8\022%\n\002f4\030\007 \001(\0132\031.hyperproto"
  "bench.M1.M6.M9\032\020\n\002M7\022\n\n\002f1\030\002 \001(\002\032\034\n\002M8\022\n"
  "\n\002f1\030\006 \001(\010\022\n\n\002f2\030\007 \001(\005\032\234\001\n\002M9\022\n\n\002f1\030\002 \001("
  "\010\022)\n\002f2\030\006 \001(\0132\035.hyperprotobench.M1.M6.M9"
  ".M10\032_\n\003M10\022-\n\002f1\030\001 \001(\0132!.hyperprotobenc"
  "h.M1.M6.M9.M10.M11\022\n\n\002f2\030\002 \001(\004\032\035\n\003M11\022\n\n"
  "\002f1\030\001 \001(\t\022\n\n\002f2\030\002 \001(\t\"T\n\002E1\022\016\n\nE1_CONST_"
  "1\020\000\022\016\n\nE1_CONST_2\020A\022\016\n\nE1_CONST_3\020C\022\016\n\nE"
  "1_CONST_4\020\020\022\016\n\nE1_CONST_5\020r\"\214\t\n\003M12\022$\n\002f"
  "1\030\002 \001(\0132\030.hyperprotobench.M12.M13\022\n\n\002f2\030"
  "\003 \001(\t\022$\n\002f3\030\006 \001(\0132\030.hyperprotobench.M12."
  "M16\022\n\n\002f4\030\n \001(\006\022$\n\002f5\030\013 \001(\0132\030.hyperproto"
  "bench.M12.M17\022\n\n\002f6\030\014 \001(\010\022\n\n\002f7\030\016 \001(\t\022\n\n"
  "\002f8\030\017 \001(\005\022\n\n\002f9\030\021 \001(\005\022\013\n\003f10\030\022 \001(\006\022\013\n\003f1"
  "1\030\023 \001(\006\022\013\n\003f12\030\024 \001(\014\022\013\n\003f13\030\025 \001(\005\032\300\001\n\003M1"
  "3\022(\n\002f1\030\001 \001(\0132\034.hyperprotobench.M12.M13."
  "M14\022\n\n\002f2\030\003 \001(\005\032\202\001\n\003M14\022\n\n\002f1\030\002 \001(\005\022,\n\002f"
  "2\030\t \001(\0132 .hyperprotobench.M12.M13.M14.M1"
  "5\022\n\n\002f3\030\r \001(\010\022\n\n\002f4\030\016 \001(\005\022\n\n\002f5\030\017 \001(\t\022\n\n"
  "\002f6\030\021 \001(\002\032\021\n\003M15\022\n\n\002f1\030\001 \001(\005\032)\n\003M16\022\n\n\002f"
  "1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030\003 \001(\005\032\250\005\n\003M17\022"
  "\n\n\002f1\030\002 \001(\003\022\'\n\002f2\030\003 \001(\0162\033.hyperprotobenc"
  "h.M12.M17.E1\022\n\n\002f3\030\004 \001(\021\022(\n\002f4\030\n \001(\0132\034.h"
  "yperprotobench.M12.M17.M18\022(\n\002f5\030\013 \001(\0132\034"
  ".hyperprotobench.M12.M17.M22\022\n\n\002f6\030\020 \001(\005"
  "\022\n\n\002f7\030\021 \001(\005\032\362\002\n\003M18\022\n\n\002f1\030\001 \001(\004\022,\n\002f2\030\003"
  " \001(\0132 .hyperprotobench.M12.M17.M18.M19\032\260"
  "\002\n\003M19\022\n\n\002f1\030\001 \001(\005\0220\n\002f2\030\004 \001(\0132$.hyperpr"
  "otobench.M12.M17.M18.M19.M20\032\352\001\n\003M20\0224\n\002"
  "f1\030\001 \001(\0132(.hyperprotobench.M12.M17.M18.M"
  "19.M20.M21\022\n\n\002f2\030\004 \001(\005\032\240\001\n\003M21\022\n\n\002f1\030\002 \001"
  "(\t\0227\n\002f2\030\003 \001(\0162+.hyperprotobench.M12.M17"
  ".M18.M19.M20.M21.E1\"T\n\002E1\022\016\n\nE1_CONST_1\020"
  "\002\022\016\n\nE1_CONST_2\020$\022\016\n\nE1_CONST_3\020-\022\016\n\nE1_"
  "CONST_4\020q\022\016\n\nE1_CONST_5\020}\032)\n\003M22\022\n\n\002f1\030\003"
  " \001(\002\022\n\n\002f2\030\005 \001(\014\022\n\n\002f3\030\006 \001(\005\"T\n\002E1\022\016\n\nE1"
  "_CONST_1\020`\022\016\n\nE1_CONST_2\020!\022\016\n\nE1_CONST_3"
  "\020b\022\016\n\nE1_CONST_4\020\020\022\016\n\nE1_CONST_5\020=\"\350\007\n\003M"
  "23\022\n\n\002f1\030\002 \001(\005\022$\n\002f2\030\003 \001(\0132\030.hyperprotob"
  "ench.M23.M24\022\n\n\002f3\030\004 \001(\005\022\n\n\002f4\030\005 \001(\002\022\n\n\002"
  "f5\030\007 \001(\005\022$\n\002f6\030\t \001(\0132\030.hyperprotobench.M"
  "23.M28\022$\n\002f7\030\n \001(\0132\030.hyperprotobench.M23"
  ".M29\022\n\n\002f8\030\r \001(\003\022\n\n\002f9\030\016 \001(\002\022\013\n\003f10\030\017 \001("
  "\005\032\324\001\n\003M24\022\n\n\002f1\030\001 \001(\001\022(\n\002f2\030\002 \001(\0132\034.hype"
  "rprotobench.M23.M24.M25\022(\n\002f3\030\003 \001(\0132\034.hy"
  "perprotobench.M23.M24.M26\022(\n\002f4\030\004 \001(\0132\034."
  "hyperprotobench.M23.M24.M27\022\n\n\002f5\030\006 \001(\005\032"
  "\021\n\003M25\022\n\n\002f1\030\001 \001(\005\032\021\n\003M26\022\n\n\002f1\030\001 \001(\014\032\021\n"
  "\003M27\022\n\n\002f1\030\002 \003(\010\032\021\n\003M28\022\n\n\002f1\030\001 \001(\005\032\257\004\n\003"
  "M29\022\n\n\002f1\030\001 \001(\005\022(\n\002f2\030\004 \001(\0132\034.hyperproto"
  "bench.M23.M29.M30\022\n\n\002f3\030\005 \001(\005\022(\n\002f4\030\006 \001("
  "\0132\034.hyperprotobench.M23.M29.M33\022\n\n\002f5\030\007 "
  "\001(\002\022\n\n\002f6\030\t \001(\t\032\370\002\n\003M30\022,\n\002f1\030\004 \001(\0132 .hy"
  "perprotobench.M23.M29.M30.M31\022\n\n\002f2\030\005 \001("
  "\004\032\266\002\n\003M31\022\n\n\002f1\030\002 \001(\005\022\n\n\002f2\030\010 \001(\002\022\n\n\002f3\030"
  "\t \001(\005\022\n\n\002f4\030\n \001(\005\022\n\n\002f5\030\013 \001(\010\022\n\n\002f6\030\r \001("
  "\t\0220\n\002f7\030\016 \001(\0132$.hyperprotobench.M23.M29."
  "M30.M31.M32\032\264\001\n\003M32\0223\n\002f1\030\002 \001(\0162\'.hyperp"
  "rotobench.M23.M29.M30.M31.M32.E1\022\n\n\002f2\030\004"
  " \001(\010\022\n\n\002f3\030\005 \001(\005\022\n\n\002f4\030\006 \001(\014\"T\n\002E1\022\016\n\nE1"
  "_CONST_1\020&\022\016\n\nE1_CONST_2\020\007\022\016\n\nE1_CONST_3"
  "\020H\022\016\n\nE1_CONST_4\020L\022\016\n\nE1_CONST_5\020/\032)\n\003M3"
  "3\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030\003 \001(\014\"\311\t"
  "\n\003M34\022#\n\002f1\030\002 \001(\0162\027.hyperprotobench.M34."
  "E1\022$\n\002f2\030\003 \001(\0132\030.hyperprotobench.M34.M35"
  "\022\n\n\002f3\030\005 \001(\005\022\n\n\002f4\030\006 \001(\t\022\n\n\002f5\030\007 \001(\005\022\n\n\002"
  "f6\030\t \001(\005\022\n\n\002f7\030\n \001(\005\022\n\n\002f8\030\013 \001(\003\022#\n\002f9\030\r"
  " \001(\0162\027.hyperprotobench.M34.E2\022%\n\003f10\030\016 \001"
  "(\0132\030.hyperprotobench.M34.M36\022%\n\003f11\030\020 \001("
  "\0132\030.hyperprotobench.M34.M37\022\013\n\003f12\030\021 \001(\005"
  "\022\013\n\003f13\030\024 \001(\004\022%\n\003f14\030\025 \001(\0132\030.hyperprotob"
  "ench.M34.M42\032\021\n\003M35\022\n\n\002f1\030\001 \001(\004\032A\n\003M36\022\n"
  "\n\002f1\030\001 \001(\004\022\n\n\002f2\030\003 \001(\014\022\n\n\002f3\030\004 \001(\005\022\n\n\002f4"
  "\030\005 \001(\r\022\n\n\002f5\030\006 \001(\005\032\344\004\n\003M37\022\n\n\002f1\030\001 \001(\002\022\n"
  "\n\002f2\030\003 \001(\002\022(\n\002f3\030\004 \001(\0132\034.hyperprotobench"
  ".M34.M37.M38\032\232\004\n\003M38\022,\n\002f1\030\001 \001(\0132 .hyper"
  "protobench.M34.M37.M38.M39\022\n\n\002f2\030\002 \001(\005\022\n"
  "\n\002f3\030\003 \001(\003\022\n\n\002f4\030\004 \001(\005\022\n\n\002f5\030\005 \001(\005\022+\n\002f6"
  "\030\t \001(\0162\037.hyperprotobench.M34.M37.M38.E1\022"
  "\n\n\002f7\030\n \001(\005\022\n\n\002f8\030\013 \001(\003\032\231\002\n\003M39\022\n\n\002f1\030\001 "
  "\001(\t\0220\n\002f2\030\003 \001(\0132$.hyperprotobench.M34.M3"
  "7.M38.M39.M40\022\n\n\002f3\030\004 \001(\005\032\307\001\n\003M40\022\n\n\002f1\030"
  "\001 \001(\005\0224\n\002f2\030\004 \001(\0132(.hyperprotobench.M34."
  "M37.M38.M39.M40.M41\032~\n\003M41\022\n\n\002f1\030\001 \001(\002\022\n"
  "\n\002f2\030\003 \001(\005\022\n\n\002f3\030\004 \001(\t\022\n\n\002f4\030\007 \001(\t\022\n\n\002f5"
  "\030\010 \001(\014\022\n\n\002f6\030\013 \001(\002\022\n\n\002f7\030\014 \001(\005\022\n\n\002f8\030\r \003"
  "(\t\022\n\n\002f9\030\016 \001(\014\022\013\n\003f10\030\017 \001(\004\"T\n\002E1\022\016\n\nE1_"
  "CONST_1\020c\022\016\n\nE1_CONST_2\020(\022\016\n\nE1_CONST_3\020"
  "h\022\016\n\nE1_CONST_4\020\023\022\016\n\nE1_CONST_5\020s\032\021\n\003M42"
  "\022\n\n\002f1\030\001 \001(\005\"T\n\002E1\022\016\n\nE1_CONST_1\020\002\022\016\n\nE1"
  "_CONST_2\0202\022\016\n\nE1_CONST_3\020\025\022\016\n\nE1_CONST_4"
  "\0207\022\016\n\nE1_CONST_5\0208\"U\n\002E2\022\016\n\nE2_CONST_1\020D"
  "\022\016\n\nE2_CONST_2\020+\022\017\n\nE2_CONST_3\020\2568\022\016\n\nE2_"
  "CONST_4\0207\022\016\n\nE2_CONST_5\0208\"\364\n\n\003M43\022\n\n\002f1\030"
  "\002 \001(\t\022\n\n\002f2\030\003 \001(\002\022$\n\002f3\030\004 \001(\0132\030.hyperpro"
  "tobench.M43.M44\022\n\n\002f4\030\006 \001(\005\022\n\n\002f5\030\010 \001(\003\022"
  "\n\n\002f6\030\n \001(\005\022\n\n\002f7\030\013 \001(\003\022\n\n\002f8\030\022 \001(\005\022\n\n\002f"
  "9\030\023 \001(\005\022\013\n\003f10\030\025 \001(\005\022\013\n\003f11\030\032 \001(\004\022%\n\003f12"
  "\030\033 \001(\0132\030.hyperprotobench.M43.M48\032\330\002\n\003M44"
  "\022\n\n\002f1\030\001 \001(\t\022(\n\002f2\030\002 \001(\0132\034.hyperprotoben"
  "ch.M43.M44.M45\022(\n\002f3\030\n \001(\0132\034.hyperprotob"
  "ench.M43.M44.M46\022(\n\002f4\030\013 \001(\0132\034.hyperprot"
  "obench.M43.M44.M47\032\021\n\003M45\022\n\n\002f1\030\002 \001(\005\032\240\001"
  "\n\003M46\022\n\n\002f1\030\001 \001(\005\022+\n\002f2\030\002 \003(\0162\037.hyperpro"
  "tobench.M43.M44.M46.E1\022\n\n\002f3\030\005 \001(\003\"T\n\002E1"
  "\022\016\n\nE1_CONST_1\020@\022\016\n\nE1_CONST_2\020B\022\016\n\nE1_C"
  "ONST_3\020f\022\016\n\nE1_CONST_4\020\030\022\016\n\nE1_CONST_5\020\034"
  "\032\021\n\003M47\022\n\n\002f1\030\001 \001(\005\032\312\006\n\003M48\022(\n\002f1\030\002 \001(\0132"
  "\034.hyperprotobench.M43.M48.M49\022\'\n\002f2\030\003 \001("
  "\0162\033.hyperprotobench.M43.M48.E1\022\n\n\002f3\030\r \001"
  "(\005\022\n\n\002f4\030\020 \001(\002\022\n\n\002f5\030\023 \001(\002\022\n\n\002f6\030\025 \001(\t\022\n"
  "\n\002f7\030\026 \001(\006\022\n\n\002f8\030\027 \001(\t\022\n\n\002f9\030\030 \001(\001\022)\n\003f1"
  "0\030\031 \001(\0132\034.hyperprotobench.M43.M48.M50\032\035\n"
  "\003M49\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\002 \001(\004\032\373\003\n\003M50\022,\n\002"
  "f1\030\002 \001(\0132 .hyperprotobench.M43.M48.M50.M"
  "51\022\n\n\002f2\030\003 \001(\003\032\271\003\n\003M51\022\n\n\002f1\030\002 \001(\t\022\n\n\002f2"
  "\030\003 \001(\t\022\n\n\002f3\030\004 \001(\001\022/\n\002f4\030\007 \001(\0162#.hyperpr"
  "otobench.M43.M48.M50.M51.E1\022\n\n\002f5\030\010 \001(\002\022"
  "0\n\002f6\030\t \001(\0132$.hyperprotobench.M43.M48.M5"
  "0.M51.M52\022\n\n\002f7\030\014 \001(\004\022\n\n\002f8\030\r \001(\002\022\n\n\002f9\030"
  "\016 \001(\005\022\013\n\003f10\030\022 \001(\014\022\013\n\003f11\030\024 \003(\014\032\212\001\n\003M52\022"
  "\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\003 \001(\005\022\n\n\002f3\030\005 \001(\005\022\n\n\002f"
  "4\030\006 \001(\002\0224\n\002f5\030\010 \001(\0132(.hyperprotobench.M4"
  "3.M48.M50.M51.M52.M53\032\035\n\003M53\022\n\n\002f1\030\001 \001(\002"
  "\022\n\n\002f2\030\002 \001(\004\"T\n\002E1\022\016\n\nE1_CONST_1\020f\022\016\n\nE1"
  "_CONST_2\020(\022\016\n\nE1_CONST_3\020R\022\016\n\nE1_CONST_4"
  "\0204\022\016\n\nE1_CONST_5\020\030\"T\n\002E1\022\016\n\nE1_CONST_1\020\005"
  "\022\016\n\nE1_CONST_2\020K\022\016\n\nE1_CONST_3\020k\022\016\n\nE1_C"
  "ONST_4\020M\022\016\n\nE1_CONST_5\020N\"\237\007\n\003M54\022\n\n\002f1\030\006"
  " \003(\t\022$\n\002f2\030\010 \001(\0132\030.hyperprotobench.M54.M"
  "55\022\n\n\002f3\030\n \001(\014\022$\n\002f4\030\024 \001(\0132\030.hyperprotob"
  "ench.M54.M59\022\n\n\002f5\030\025 \001(\t\022\n\n\002f6\030\027 \003(\t\022$\n\002"
  "f7\030\031 \001(\0132\030.hyperprotobench.M54.M61\022\n\n\002f8"
  "\030\032 \001(\005\022$\n\002f9\030\033 \001(\0132\030.hyperprotobench.M54"
  ".M62\032\354\002\n\003M55\022\n\n\002f1\030\t \001(\002\022\'\n\002f2\030\n \001(\0162\033.h"
  "yperprotobench.M54.M55.E1\022(\n\002f3\030\016 \001(\0132\034."
  "hyperprotobench.M54.M55.M56\032\257\001\n\003M56\022\n\n\002f"
  "1\030\001 \001(\005\022,\n\002f2\030\004 \001(\0132 .hyperprotobench.M5"
  "4.M55.M56.M57\032n\n\003M57\0220\n\002f1\030\001 \001(\0132$.hyper"
  "protobench.M54.M55.M56.M57.M58\022\n\n\002f2\030\002 \001"
  "(\t\032)\n\003M58\022\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030"
  "\003 \001(\005\"T\n\002E1\022\016\n\nE1_CONST_1\020\001\022\016\n\nE1_CONST_"
  "2\020)\022\016\n\nE1_CONST_3\020v\022\016\n\nE1_CONST_4\020=\022\016\n\nE"
  "1_CONST_5\020_\032r\n\003M59\022(\n\002f1\030\001 \001(\0132\034.hyperpr"
  "otobench.M54.M59.M60\022\n\n\002f2\030\002 \001(\004\0325\n\003M60\022"
  "\n\n\002f1\030\001 \001(\t\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030\003 \001(\t\022\n\n\002f"
  "4\030\004 \001(\005\032\220\001\n\003M61\022\n\n\002f1\030\002 \001(\005\022\'\n\002f2\030\005 \003(\0162"
  "\033.hyperprotobench.M54.M61.E1\"T\n\002E1\022\016\n\nE1"
  "_CONST_1\020C\022\016\n\nE1_CONST_2\020&\022\016\n\nE1_CONST_3"
  "\020(\022\016\n\nE1_CONST_4\020+\022\016\n\nE1_CONST_5\020N\032N\n\003M6"
  "2\022\n\n\002f1\030\001 \001(\004\022(\n\002f2\030\002 \001(\0132\034.hyperprotobe"
  "nch.M54.M62.M63\032\021\n\003M63\022\n\n\002f1\030\001 \001(\r\"\375\004\n\003M"
  "64\022\n\n\002f1\030\002 \001(\005\022$\n\002f2\030\003 \001(\0132\030.hyperprotob"
  "ench.M64.M65\022$\n\002f3\030\004 \001(\0132\030.hyperprotoben"
  "ch.M64.M66\022\n\n\002f4\030\007 \001(\t\022#\n\002f5\030\010 \001(\0162\027.hyp"
  "erprotobench.M64.E1\022$\n\002f6\030\n \001(\0132\030.hyperp"
  "rotobench.M64.M67\022$\n\002f7\030\013 \001(\0132\030.hyperpro"
  "tobench.M64.M68\022\n\n\002f8\030\014 \001(\004\032\021\n\003M65\022\n\n\002f1"
  "\030\001 \001(\005\032\021\n\003M66\022\n\n\002f1\030\001 \001(\005\032\021\n\003M67\022\n\n\002f1\030\002"
  " \001(\002\032\205\002\n\003M68\022(\n\002f1\030\001 \001(\0132\034.hyperprotoben"
  "ch.M64.M68.M69\022\n\n\002f2\030\004 \001(\t\032\307\001\n\003M69\022\n\n\002f1"
  "\030\001 \001(\003\022\n\n\002f2\030\004 \001(\014\022\n\n\002f3\030\006 \001(\005\022,\n\002f4\030\010 \001"
  "(\0132 .hyperprotobench.M64.M68.M69.M70\022\n\n\002"
  "f5\030\t \001(\005\032b\n\003M70\022\n\n\002f1\030\001 \001(\005\0220\n\002f2\030\003 \001(\0132"
  "$.hyperprotobench.M64.M68.M69.M70.M71\032\035\n"
  "\003M71\022\n\n\002f1\030\002 \001(\t\022\n\n\002f2\030\003 \003(\005\"T\n\002E1\022\016\n\nE1"
  "_CONST_1\0201\022\016\n\nE1_CONST_2\020\022\022\016\n\nE1_CONST_3"
  "\020U\022\016\n\nE1_CONST_4\020z\022\016\n\nE1_CONST_5\020^\"\226\007\n\003M"
  "72\022\n\n\002f1\030\001 \003(\006\022$\n\002f2\030\002 \001(\0132\030.hyperprotob"
  "ench.M72.M73\022$\n\002f3\030\003 \001(\0132\030.hyperprotoben"
  "ch.M72.M76\022$\n\002f4\030\004 \001(\0132\030.hyperprotobench"
  ".M72.M77\022\n\n\002f5\030\007 \001(\002\022\n\n\002f6\030\010 \001(\003\022\n\n\002f7\030\t"
  " \001(\002\022\n\n\002f8\030\r \001(\005\022$\n\002f9\030\017 \001(\0132\030.hyperprot"
  "obench.M72.M78\022\013\n\003f10\030\021 \001(\005\032\227\001\n\003M73\022(\n\002f"
  "1\030\002 \001(\0132\034.hyperprotobench.M72.M73.M74\022(\n"
  "\002f2\030\003 \001(\0132\034.hyperprotobench.M72.M73.M75\022"
  "\n\n\002f3\030\004 \001(\014\032\021\n\003M74\022\n\n\002f1\030\001 \001(\002\032\035\n\003M75\022\n\n"
  "\002f1\030\002 \001(\t\022\n\n\002f2\030\003 \001(\001\032\250\001\n\003M76\022\n\n\002f1\030\004 \001("
  "\010\022\n\n\002f2\030\005 \001(\r\022\n\n\002f3\030\006 \001(\005\022\'\n\002f4\030\007 \001(\0162\033."
  "hyperprotobench.M72.M76.E1\"T\n\002E1\022\016\n\nE1_C"
  "ONST_1\020\004\022\016\n\nE1_CONST_2\020h\022\016\n\nE1_CONST_3\020\016"
  "\022\016\n\nE1_CONST_4\0205\022\016\n\nE1_CONST_5\020[\032\220\001\n\003M77"
  "\022\'\n\002f1\030\002 \001(\0162\033.hyperprotobench.M72.M77.E"
  "1\022\n\n\002f2\030\006 \001(\002\"T\n\002E1\022\016\n\nE1_CONST_1\020\004\022\016\n\nE"
  "1_CONST_2\020%\022\016\n\nE1_CONST_3\020(\022\016\n\nE1_CONST_"
  "4\0205\022\016\n\nE1_CONST_5\020z\032\325\001\n\003M78\022(\n\002f1\030\002 \001(\0132"
  "\034.hyperprotobench.M72.M78.M79\022\n\n\002f2\030\004 \001("
  "\005\032\227\001\n\003M79\022\n\n\002f1\030\001 \001(\005\022,\n\002f2\030\002 \001(\0132 .hype"
  "rprotobench.M72.M78.M79.M80\032V\n\003M80\0220\n\002f1"
  "\030\002 \001(\0132$.hyperprotobench.M72.M78.M79.M80"
  ".M81\022\n\n\002f2\030\003 \001(\t\032\021\n\003M81\022\n\n\002f1\030\001 \001(\005\"\356\010\n\003"
  "M82\022\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\001\022\n\n\002f3\030\003 \001(\003\022"
  "$\n\002f4\030\004 \001(\0132\030.hyperprotobench.M82.M83\022#\n"
  "\002f5\030\014 \001(\0162\027.hyperprotobench.M82.E1\022$\n\002f6"
  "\030\022 \001(\0132\030.hyperprotobench.M82.M84\022$\n\002f7\030\023"
  " \001(\0132\030.hyperprotobench.M82.M88\022$\n\002f8\030\025 \001"
  "(\0132\030.hyperprotobench.M82.M90\022\n\n\002f9\030\026 \001(\005"
  "\022\013\n\003f10\030\027 \001(\005\022\013\n\003f11\030\031 \001(\005\022\013\n\003f12\030\032 \001(\005\032"
  "\035\n\003M83\022\n\n\002f1\030\003 \001(\003\022\n\n\002f2\030\004 \001(\005\032\215\004\n\003M84\022\n"
  "\n\002f1\030\001 \001(\005\022(\n\002f2\030\n \001(\0132\034.hyperprotobench"
  ".M82.M84.M85\022\n\n\002f3\030\014 \001(\t\032\303\003\n\003M85\022,\n\002f1\030\003"
  " \001(\0132 .hyperprotobench.M82.M84.M85.M86\022\n"
  "\n\002f2\030\004 \001(\021\032\201\003\n\003M86\0220\n\002f1\030\002 \001(\0132$.hyperpr"
  "otobench.M82.M84.M85.M86.M87\022/\n\002f2\030\003 \001(\016"
  "2#.hyperprotobench.M82.M84.M85.M86.E1\022\n\n"
  "\002f3\030\004 \001(\010\022\n\n\002f4\030\005 \001(\003\022\n\n\002f5\030\006 \001(\005\032\234\001\n\003M8"
  "7\0223\n\002f1\030\001 \001(\0162\'.hyperprotobench.M82.M84."
  "M85.M86.M87.E1\022\n\n\002f2\030\002 \001(\t\"T\n\002E1\022\016\n\nE1_C"
  "ONST_1\020&\022\016\n\nE1_CONST_2\020\022\022\016\n\nE1_CONST_3\020\024"
  "\022\016\n\nE1_CONST_4\020\031\022\016\n\nE1_CONST_5\020z\"T\n\002E1\022\016"
  "\n\nE1_CONST_1\020D\022\016\n\nE1_CONST_2\020g\022\016\n\nE1_CON"
  "ST_3\020I\022\016\n\nE1_CONST_4\020,\022\016\n\nE1_CONST_5\020[\032f"
  "\n\003M88\022\n\n\002f1\030\001 \001(\014\022(\n\002f2\030\t \001(\0132\034.hyperpro"
  "tobench.M82.M88.M89\032)\n\003M89\022\n\n\002f1\030\001 \001(\005\022\n"
  "\n\002f2\030\002 \001(\002\022\n\n\002f3\030\003 \001(\005\032f\n\003M90\022(\n\002f1\030\001 \001("
  "\0132\034.hyperprotobench.M82.M90.M91\022\n\n\002f2\030\002 "
  "\001(\002\022\n\n\002f3\030\004 \003(\010\022\n\n\002f4\030\005 \001(\002\032\021\n\003M91\022\n\n\002f1"
  "\030\001 \001(\t\"T\n\002E1\022\016\n\nE1_CONST_1\020\000\022\016\n\nE1_CONST"
  "_2\020C\022\016\n\nE1_CONST_3\020+\022\016\n\nE1_CONST_4\020N\022\016\n\n"
  "E1_CONST_5\020\\\"\314\001\n\003M92\022$\n\002f1\030\001 \001(\0132\030.hyper"
  "protobench.M92.M93\022$\n\002f2\030\002 \001(\0132\030.hyperpr"
  "otobench.M92.M94\022\n\n\002f3\030\003 \001(\005\022\n\n\002f4\030\004 \001(\005"
  "\032\021\n\003M93\022\n\n\002f1\030\001 \001(\005\032N\n\003M94\022\n\n\002f1\030\001 \001(\005\022("
  "\n\002f2\030\002 \001(\0132\034.hyperprotobench.M92.M94.M95"
  "\032\021\n\003M95\022\n\n\002f1\030\002 \001(\005B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_benchmark_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_benchmark_2eproto_sccs[95] = {
  &scc_info_M1_benchmark_2eproto.base,
  &scc_info_M1_M2_benchmark_2eproto.base,
  &scc_info_M1_M2_M3_benchmark_2eproto.base,
  &scc_info_M1_M2_M4_benchmark_2eproto.base,
  &scc_info_M1_M2_M4_M5_benchmark_2eproto.base,
  &scc_info_M1_M6_benchmark_2eproto.base,
  &scc_info_M1_M6_M7_benchmark_2eproto.base,
  &scc_info_M1_M6_M8_benchmark_2eproto.base,
  &scc_info_M1_M6_M9_benchmark_2eproto.base,
  &scc_info_M1_M6_M9_M10_benchmark_2eproto.base,
  &scc_info_M1_M6_M9_M10_M11_benchmark_2eproto.base,
  &scc_info_M12_benchmark_2eproto.base,
  &scc_info_M12_M13_benchmark_2eproto.base,
  &scc_info_M12_M13_M14_benchmark_2eproto.base,
  &scc_info_M12_M13_M14_M15_benchmark_2eproto.base,
  &scc_info_M12_M16_benchmark_2eproto.base,
  &scc_info_M12_M17_benchmark_2eproto.base,
  &scc_info_M12_M17_M18_benchmark_2eproto.base,
  &scc_info_M12_M17_M18_M19_benchmark_2eproto.base,
  &scc_info_M12_M17_M18_M19_M20_benchmark_2eproto.base,
  &scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto.base,
  &scc_info_M12_M17_M22_benchmark_2eproto.base,
  &scc_info_M23_benchmark_2eproto.base,
  &scc_info_M23_M24_benchmark_2eproto.base,
  &scc_info_M23_M24_M25_benchmark_2eproto.base,
  &scc_info_M23_M24_M26_benchmark_2eproto.base,
  &scc_info_M23_M24_M27_benchmark_2eproto.base,
  &scc_info_M23_M28_benchmark_2eproto.base,
  &scc_info_M23_M29_benchmark_2eproto.base,
  &scc_info_M23_M29_M30_benchmark_2eproto.base,
  &scc_info_M23_M29_M30_M31_benchmark_2eproto.base,
  &scc_info_M23_M29_M30_M31_M32_benchmark_2eproto.base,
  &scc_info_M23_M29_M33_benchmark_2eproto.base,
  &scc_info_M34_benchmark_2eproto.base,
  &scc_info_M34_M35_benchmark_2eproto.base,
  &scc_info_M34_M36_benchmark_2eproto.base,
  &scc_info_M34_M37_benchmark_2eproto.base,
  &scc_info_M34_M37_M38_benchmark_2eproto.base,
  &scc_info_M34_M37_M38_M39_benchmark_2eproto.base,
  &scc_info_M34_M37_M38_M39_M40_benchmark_2eproto.base,
  &scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto.base,
  &scc_info_M34_M42_benchmark_2eproto.base,
  &scc_info_M43_benchmark_2eproto.base,
  &scc_info_M43_M44_benchmark_2eproto.base,
  &scc_info_M43_M44_M45_benchmark_2eproto.base,
  &scc_info_M43_M44_M46_benchmark_2eproto.base,
  &scc_info_M43_M44_M47_benchmark_2eproto.base,
  &scc_info_M43_M48_benchmark_2eproto.base,
  &scc_info_M43_M48_M49_benchmark_2eproto.base,
  &scc_info_M43_M48_M50_benchmark_2eproto.base,
  &scc_info_M43_M48_M50_M51_benchmark_2eproto.base,
  &scc_info_M43_M48_M50_M51_M52_benchmark_2eproto.base,
  &scc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto.base,
  &scc_info_M54_benchmark_2eproto.base,
  &scc_info_M54_M55_benchmark_2eproto.base,
  &scc_info_M54_M55_M56_benchmark_2eproto.base,
  &scc_info_M54_M55_M56_M57_benchmark_2eproto.base,
  &scc_info_M54_M55_M56_M57_M58_benchmark_2eproto.base,
  &scc_info_M54_M59_benchmark_2eproto.base,
  &scc_info_M54_M59_M60_benchmark_2eproto.base,
  &scc_info_M54_M61_benchmark_2eproto.base,
  &scc_info_M54_M62_benchmark_2eproto.base,
  &scc_info_M54_M62_M63_benchmark_2eproto.base,
  &scc_info_M64_benchmark_2eproto.base,
  &scc_info_M64_M65_benchmark_2eproto.base,
  &scc_info_M64_M66_benchmark_2eproto.base,
  &scc_info_M64_M67_benchmark_2eproto.base,
  &scc_info_M64_M68_benchmark_2eproto.base,
  &scc_info_M64_M68_M69_benchmark_2eproto.base,
  &scc_info_M64_M68_M69_M70_benchmark_2eproto.base,
  &scc_info_M64_M68_M69_M70_M71_benchmark_2eproto.base,
  &scc_info_M72_benchmark_2eproto.base,
  &scc_info_M72_M73_benchmark_2eproto.base,
  &scc_info_M72_M73_M74_benchmark_2eproto.base,
  &scc_info_M72_M73_M75_benchmark_2eproto.base,
  &scc_info_M72_M76_benchmark_2eproto.base,
  &scc_info_M72_M77_benchmark_2eproto.base,
  &scc_info_M72_M78_benchmark_2eproto.base,
  &scc_info_M72_M78_M79_benchmark_2eproto.base,
  &scc_info_M72_M78_M79_M80_benchmark_2eproto.base,
  &scc_info_M72_M78_M79_M80_M81_benchmark_2eproto.base,
  &scc_info_M82_benchmark_2eproto.base,
  &scc_info_M82_M83_benchmark_2eproto.base,
  &scc_info_M82_M84_benchmark_2eproto.base,
  &scc_info_M82_M84_M85_benchmark_2eproto.base,
  &scc_info_M82_M84_M85_M86_benchmark_2eproto.base,
  &scc_info_M82_M84_M85_M86_M87_benchmark_2eproto.base,
  &scc_info_M82_M88_benchmark_2eproto.base,
  &scc_info_M82_M88_M89_benchmark_2eproto.base,
  &scc_info_M82_M90_benchmark_2eproto.base,
  &scc_info_M82_M90_M91_benchmark_2eproto.base,
  &scc_info_M92_benchmark_2eproto.base,
  &scc_info_M92_M93_benchmark_2eproto.base,
  &scc_info_M92_M94_benchmark_2eproto.base,
  &scc_info_M92_M94_M95_benchmark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_benchmark_2eproto_once;
static bool descriptor_table_benchmark_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto = {
  &descriptor_table_benchmark_2eproto_initialized, descriptor_table_protodef_benchmark_2eproto, "benchmark.proto", 9704,
  &descriptor_table_benchmark_2eproto_once, descriptor_table_benchmark_2eproto_sccs, descriptor_table_benchmark_2eproto_deps, 95, 0,
  schemas, file_default_instances, TableStruct_benchmark_2eproto::offsets,
  file_level_metadata_benchmark_2eproto, 95, file_level_enum_descriptors_benchmark_2eproto, file_level_service_descriptors_benchmark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_benchmark_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_benchmark_2eproto), true);
namespace hyperprotobench {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[0];
}
bool M1_M2_E1_IsValid(int value) {
  switch (value) {
    case 23:
    case 35:
    case 80:
    case 110:
    case 123:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_M2_E1 M1_M2::E1_CONST_1;
constexpr M1_M2_E1 M1_M2::E1_CONST_2;
constexpr M1_M2_E1 M1_M2::E1_CONST_3;
constexpr M1_M2_E1 M1_M2::E1_CONST_4;
constexpr M1_M2_E1 M1_M2::E1_CONST_5;
constexpr M1_M2_E1 M1_M2::E1_MIN;
constexpr M1_M2_E1 M1_M2::E1_MAX;
constexpr int M1_M2::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[1];
}
bool M1_E1_IsValid(int value) {
  switch (value) {
    case 0:
    case 16:
    case 65:
    case 67:
    case 114:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_E1 M1::E1_CONST_1;
constexpr M1_E1 M1::E1_CONST_2;
constexpr M1_E1 M1::E1_CONST_3;
constexpr M1_E1 M1::E1_CONST_4;
constexpr M1_E1 M1::E1_CONST_5;
constexpr M1_E1 M1::E1_MIN;
constexpr M1_E1 M1::E1_MAX;
constexpr int M1::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M12_M17_M18_M19_M20_M21_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[2];
}
bool M12_M17_M18_M19_M20_M21_E1_IsValid(int value) {
  switch (value) {
    case 2:
    case 36:
    case 45:
    case 113:
    case 125:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_CONST_1;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_CONST_2;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_CONST_3;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_CONST_4;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_CONST_5;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_MIN;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::E1_MAX;
constexpr int M12_M17_M18_M19_M20_M21::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M12_M17_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[3];
}
bool M12_M17_E1_IsValid(int value) {
  switch (value) {
    case 16:
    case 33:
    case 61:
    case 96:
    case 98:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M12_M17_E1 M12_M17::E1_CONST_1;
constexpr M12_M17_E1 M12_M17::E1_CONST_2;
constexpr M12_M17_E1 M12_M17::E1_CONST_3;
constexpr M12_M17_E1 M12_M17::E1_CONST_4;
constexpr M12_M17_E1 M12_M17::E1_CONST_5;
constexpr M12_M17_E1 M12_M17::E1_MIN;
constexpr M12_M17_E1 M12_M17::E1_MAX;
constexpr int M12_M17::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M23_M29_M30_M31_M32_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[4];
}
bool M23_M29_M30_M31_M32_E1_IsValid(int value) {
  switch (value) {
    case 7:
    case 38:
    case 47:
    case 72:
    case 76:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_CONST_1;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_CONST_2;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_CONST_3;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_CONST_4;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_CONST_5;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_MIN;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::E1_MAX;
constexpr int M23_M29_M30_M31_M32::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_M37_M38_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[5];
}
bool M34_M37_M38_E1_IsValid(int value) {
  switch (value) {
    case 19:
    case 40:
    case 99:
    case 104:
    case 115:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M34_M37_M38_E1 M34_M37_M38::E1_CONST_1;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_CONST_2;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_CONST_3;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_CONST_4;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_CONST_5;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_MIN;
constexpr M34_M37_M38_E1 M34_M37_M38::E1_MAX;
constexpr int M34_M37_M38::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[6];
}
bool M34_E1_IsValid(int value) {
  switch (value) {
    case 2:
    case 21:
    case 50:
    case 55:
    case 56:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M34_E1 M34::E1_CONST_1;
constexpr M34_E1 M34::E1_CONST_2;
constexpr M34_E1 M34::E1_CONST_3;
constexpr M34_E1 M34::E1_CONST_4;
constexpr M34_E1 M34::E1_CONST_5;
constexpr M34_E1 M34::E1_MIN;
constexpr M34_E1 M34::E1_MAX;
constexpr int M34::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_E2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[7];
}
bool M34_E2_IsValid(int value) {
  switch (value) {
    case 43:
    case 55:
    case 56:
    case 68:
    case 7214:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M34_E2 M34::E2_CONST_1;
constexpr M34_E2 M34::E2_CONST_2;
constexpr M34_E2 M34::E2_CONST_3;
constexpr M34_E2 M34::E2_CONST_4;
constexpr M34_E2 M34::E2_CONST_5;
constexpr M34_E2 M34::E2_MIN;
constexpr M34_E2 M34::E2_MAX;
constexpr int M34::E2_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M44_M46_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[8];
}
bool M43_M44_M46_E1_IsValid(int value) {
  switch (value) {
    case 24:
    case 28:
    case 64:
    case 66:
    case 102:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M43_M44_M46_E1 M43_M44_M46::E1_CONST_1;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_CONST_2;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_CONST_3;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_CONST_4;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_CONST_5;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_MIN;
constexpr M43_M44_M46_E1 M43_M44_M46::E1_MAX;
constexpr int M43_M44_M46::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M48_M50_M51_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[9];
}
bool M43_M48_M50_M51_E1_IsValid(int value) {
  switch (value) {
    case 24:
    case 40:
    case 52:
    case 82:
    case 102:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_CONST_1;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_CONST_2;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_CONST_3;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_CONST_4;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_CONST_5;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_MIN;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51::E1_MAX;
constexpr int M43_M48_M50_M51::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M48_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[10];
}
bool M43_M48_E1_IsValid(int value) {
  switch (value) {
    case 5:
    case 75:
    case 77:
    case 78:
    case 107:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M43_M48_E1 M43_M48::E1_CONST_1;
constexpr M43_M48_E1 M43_M48::E1_CONST_2;
constexpr M43_M48_E1 M43_M48::E1_CONST_3;
constexpr M43_M48_E1 M43_M48::E1_CONST_4;
constexpr M43_M48_E1 M43_M48::E1_CONST_5;
constexpr M43_M48_E1 M43_M48::E1_MIN;
constexpr M43_M48_E1 M43_M48::E1_MAX;
constexpr int M43_M48::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M54_M55_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[11];
}
bool M54_M55_E1_IsValid(int value) {
  switch (value) {
    case 1:
    case 41:
    case 61:
    case 95:
    case 118:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M54_M55_E1 M54_M55::E1_CONST_1;
constexpr M54_M55_E1 M54_M55::E1_CONST_2;
constexpr M54_M55_E1 M54_M55::E1_CONST_3;
constexpr M54_M55_E1 M54_M55::E1_CONST_4;
constexpr M54_M55_E1 M54_M55::E1_CONST_5;
constexpr M54_M55_E1 M54_M55::E1_MIN;
constexpr M54_M55_E1 M54_M55::E1_MAX;
constexpr int M54_M55::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M54_M61_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[12];
}
bool M54_M61_E1_IsValid(int value) {
  switch (value) {
    case 38:
    case 40:
    case 43:
    case 67:
    case 78:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M54_M61_E1 M54_M61::E1_CONST_1;
constexpr M54_M61_E1 M54_M61::E1_CONST_2;
constexpr M54_M61_E1 M54_M61::E1_CONST_3;
constexpr M54_M61_E1 M54_M61::E1_CONST_4;
constexpr M54_M61_E1 M54_M61::E1_CONST_5;
constexpr M54_M61_E1 M54_M61::E1_MIN;
constexpr M54_M61_E1 M54_M61::E1_MAX;
constexpr int M54_M61::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M64_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[13];
}
bool M64_E1_IsValid(int value) {
  switch (value) {
    case 18:
    case 49:
    case 85:
    case 94:
    case 122:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M64_E1 M64::E1_CONST_1;
constexpr M64_E1 M64::E1_CONST_2;
constexpr M64_E1 M64::E1_CONST_3;
constexpr M64_E1 M64::E1_CONST_4;
constexpr M64_E1 M64::E1_CONST_5;
constexpr M64_E1 M64::E1_MIN;
constexpr M64_E1 M64::E1_MAX;
constexpr int M64::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M72_M76_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[14];
}
bool M72_M76_E1_IsValid(int value) {
  switch (value) {
    case 4:
    case 14:
    case 53:
    case 91:
    case 104:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M72_M76_E1 M72_M76::E1_CONST_1;
constexpr M72_M76_E1 M72_M76::E1_CONST_2;
constexpr M72_M76_E1 M72_M76::E1_CONST_3;
constexpr M72_M76_E1 M72_M76::E1_CONST_4;
constexpr M72_M76_E1 M72_M76::E1_CONST_5;
constexpr M72_M76_E1 M72_M76::E1_MIN;
constexpr M72_M76_E1 M72_M76::E1_MAX;
constexpr int M72_M76::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M72_M77_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[15];
}
bool M72_M77_E1_IsValid(int value) {
  switch (value) {
    case 4:
    case 37:
    case 40:
    case 53:
    case 122:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M72_M77_E1 M72_M77::E1_CONST_1;
constexpr M72_M77_E1 M72_M77::E1_CONST_2;
constexpr M72_M77_E1 M72_M77::E1_CONST_3;
constexpr M72_M77_E1 M72_M77::E1_CONST_4;
constexpr M72_M77_E1 M72_M77::E1_CONST_5;
constexpr M72_M77_E1 M72_M77::E1_MIN;
constexpr M72_M77_E1 M72_M77::E1_MAX;
constexpr int M72_M77::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_M84_M85_M86_M87_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[16];
}
bool M82_M84_M85_M86_M87_E1_IsValid(int value) {
  switch (value) {
    case 18:
    case 20:
    case 25:
    case 38:
    case 122:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_CONST_1;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_CONST_2;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_CONST_3;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_CONST_4;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_CONST_5;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_MIN;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::E1_MAX;
constexpr int M82_M84_M85_M86_M87::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_M84_M85_M86_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[17];
}
bool M82_M84_M85_M86_E1_IsValid(int value) {
  switch (value) {
    case 44:
    case 68:
    case 73:
    case 91:
    case 103:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_CONST_1;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_CONST_2;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_CONST_3;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_CONST_4;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_CONST_5;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_MIN;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86::E1_MAX;
constexpr int M82_M84_M85_M86::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[18];
}
bool M82_E1_IsValid(int value) {
  switch (value) {
    case 0:
    case 43:
    case 67:
    case 78:
    case 92:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M82_E1 M82::E1_CONST_1;
constexpr M82_E1 M82::E1_CONST_2;
constexpr M82_E1 M82::E1_CONST_3;
constexpr M82_E1 M82::E1_CONST_4;
constexpr M82_E1 M82::E1_CONST_5;
constexpr M82_E1 M82::E1_MIN;
constexpr M82_E1 M82::E1_MAX;
constexpr int M82::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void M1_M2_M3::InitAsDefaultInstance() {
}
class M1_M2_M3::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2_M3>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M2_M3::M1_M2_M3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2.M3)
}
M1_M2_M3::M1_M2_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2.M3)
}
M1_M2_M3::M1_M2_M3(const M1_M2_M3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2.M3)
}

void M1_M2_M3::SharedCtor() {
  f1_ = 0;
}

M1_M2_M3::~M1_M2_M3() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2.M3)
  SharedDtor();
}

void M1_M2_M3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M2_M3::ArenaDtor(void* object) {
  M1_M2_M3* _this = reinterpret_cast< M1_M2_M3* >(object);
  (void)_this;
}
void M1_M2_M3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2_M3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2_M3& M1_M2_M3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_M3_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2_M3::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2_M3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2_M3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2.M3)
  return target;
}

size_t M1_M2_M3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2.M3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2_M3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2.M3)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2_M3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2_M3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2.M3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2.M3)
    MergeFrom(*source);
  }
}

void M1_M2_M3::MergeFrom(const M1_M2_M3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2.M3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M2_M3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2_M3::CopyFrom(const M1_M2_M3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2_M3::IsInitialized() const {
  return true;
}

void M1_M2_M3::InternalSwap(M1_M2_M3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2_M3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M2_M4_M5::InitAsDefaultInstance() {
}
class M1_M2_M4_M5::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2_M4_M5>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M2_M4_M5::M1_M2_M4_M5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2.M4.M5)
}
M1_M2_M4_M5::M1_M2_M4_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2.M4.M5)
}
M1_M2_M4_M5::M1_M2_M4_M5(const M1_M2_M4_M5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2.M4.M5)
}

void M1_M2_M4_M5::SharedCtor() {
  f1_ = 0;
}

M1_M2_M4_M5::~M1_M2_M4_M5() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2.M4.M5)
  SharedDtor();
}

void M1_M2_M4_M5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M2_M4_M5::ArenaDtor(void* object) {
  M1_M2_M4_M5* _this = reinterpret_cast< M1_M2_M4_M5* >(object);
  (void)_this;
}
void M1_M2_M4_M5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2_M4_M5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2_M4_M5& M1_M2_M4_M5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_M4_M5_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2_M4_M5::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2.M4.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2_M4_M5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2_M4_M5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2.M4.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2.M4.M5)
  return target;
}

size_t M1_M2_M4_M5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2.M4.M5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2_M4_M5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2.M4.M5)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2_M4_M5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2_M4_M5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2.M4.M5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2.M4.M5)
    MergeFrom(*source);
  }
}

void M1_M2_M4_M5::MergeFrom(const M1_M2_M4_M5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2.M4.M5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M2_M4_M5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2.M4.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2_M4_M5::CopyFrom(const M1_M2_M4_M5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2.M4.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2_M4_M5::IsInitialized() const {
  return true;
}

void M1_M2_M4_M5::InternalSwap(M1_M2_M4_M5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2_M4_M5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M2_M4::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M2_M4_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M2_M4_M5*>(
      ::hyperprotobench::M1_M2_M4_M5::internal_default_instance());
}
class M1_M2_M4::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2_M4>()._has_bits_);
  static const ::hyperprotobench::M1_M2_M4_M5& f1(const M1_M2_M4* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M1_M2_M4_M5&
M1_M2_M4::_Internal::f1(const M1_M2_M4* msg) {
  return *msg->f1_;
}
void M1_M2_M4::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M2_M4_M5* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.M4.f1)
}
M1_M2_M4::M1_M2_M4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2.M4)
}
M1_M2_M4::M1_M2_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2.M4)
}
M1_M2_M4::M1_M2_M4(const M1_M2_M4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M2_M4_M5(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2.M4)
}

void M1_M2_M4::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_M4_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M1_M2_M4::~M1_M2_M4() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2.M4)
  SharedDtor();
}

void M1_M2_M4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M1_M2_M4::ArenaDtor(void* object) {
  M1_M2_M4* _this = reinterpret_cast< M1_M2_M4* >(object);
  (void)_this;
}
void M1_M2_M4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2_M4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2_M4& M1_M2_M4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_M4_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2_M4::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2_M4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M2.M4.M5 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2_M4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M2.M4.M5 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional fixed64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2.M4)
  return target;
}

size_t M1_M2_M4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2.M4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M1.M2.M4.M5 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional fixed64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2_M4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2.M4)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2_M4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2_M4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2.M4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2.M4)
    MergeFrom(*source);
  }
}

void M1_M2_M4::MergeFrom(const M1_M2_M4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2.M4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M1_M2_M4_M5::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M2_M4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2_M4::CopyFrom(const M1_M2_M4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2_M4::IsInitialized() const {
  return true;
}

void M1_M2_M4::InternalSwap(M1_M2_M4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2_M4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M2::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M2_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M2_M3*>(
      ::hyperprotobench::M1_M2_M3::internal_default_instance());
  ::hyperprotobench::_M1_M2_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M1_M2_M4*>(
      ::hyperprotobench::M1_M2_M4::internal_default_instance());
}
class M1_M2::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2>()._has_bits_);
  static const ::hyperprotobench::M1_M2_M3& f1(const M1_M2* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hyperprotobench::M1_M2_M4& f8(const M1_M2* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::hyperprotobench::M1_M2_M3&
M1_M2::_Internal::f1(const M1_M2* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M1_M2_M4&
M1_M2::_Internal::f8(const M1_M2* msg) {
  return *msg->f8_;
}
void M1_M2::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M2_M3* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f1)
}
void M1_M2::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M1_M2_M4* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f8)
}
M1_M2::M1_M2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(const M1_M2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M2_M3(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M1_M2_M4(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2)
}

void M1_M2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_benchmark_2eproto.base);
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
  f4_ = 35;
}

M1_M2::~M1_M2() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2)
  SharedDtor();
}

void M1_M2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f8_;
}

void M1_M2::ArenaDtor(void* object) {
  M1_M2* _this = reinterpret_cast< M1_M2* >(object);
  (void)_this;
}
void M1_M2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2& M1_M2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001000u) {
    f10_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000200u) {
    GOOGLE_DCHECK(f8_ != nullptr);
    f8_->Clear();
  }
  if (cached_has_bits & 0x000000acu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00000500u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f9_));
  }
  f4_ = 35;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M2.M3 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2.E1 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_M2_E1_IsValid(val))) {
            _internal_set_f4(static_cast<::hyperprotobench::M1_M2_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2.M4 f8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M2.M3 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional float f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M1.M2.E1 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_f4(), target);
  }

  // optional float f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f5(), target);
  }

  // optional float f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_f6(), target);
  }

  // optional int32 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M1.M2.M4 f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f8(this), target, stream);
  }

  // optional int32 f9 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f9(), target);
  }

  // optional bytes f10 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2)
  return target;
}

size_t M1_M2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f10 = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f10());
  }

  // optional .hyperprotobench.M1.M2.M3 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // optional .hyperprotobench.M1.M2.M4 f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f8_);
  }

  if (cached_has_bits & 0x000000acu) {
    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional float f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000500u) {
    // optional int32 f7 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional int32 f9 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

  }
  // optional .hyperprotobench.M1.M2.E1 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2)
    MergeFrom(*source);
  }
}

void M1_M2::MergeFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f10()) {
    _internal_set_f10(from._internal_f10());
  }
  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::hyperprotobench::M1_M2_M3::MergeFrom(from._internal_f1());
  }
  if (from._internal_has_f8()) {
    _internal_mutable_f8()->::hyperprotobench::M1_M2_M4::MergeFrom(from._internal_f8());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000acu) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000500u) {
    if (cached_has_bits & 0x00000100u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000010u) {
    _internal_set_f4(from._internal_f4());
  }
}

void M1_M2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2::CopyFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2::IsInitialized() const {
  return true;
}

void M1_M2::InternalSwap(M1_M2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f8_, other->f8_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6_M7::InitAsDefaultInstance() {
}
class M1_M6_M7::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6_M7>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M6_M7::M1_M6_M7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6.M7)
}
M1_M6_M7::M1_M6_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6.M7)
}
M1_M6_M7::M1_M6_M7(const M1_M6_M7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6.M7)
}

void M1_M6_M7::SharedCtor() {
  f1_ = 0;
}

M1_M6_M7::~M1_M6_M7() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6.M7)
  SharedDtor();
}

void M1_M6_M7::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M6_M7::ArenaDtor(void* object) {
  M1_M6_M7* _this = reinterpret_cast< M1_M6_M7* >(object);
  (void)_this;
}
void M1_M6_M7::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6_M7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6_M7& M1_M6_M7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_M7_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6_M7::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6_M7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6_M7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6.M7)
  return target;
}

size_t M1_M6_M7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6.M7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6_M7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6.M7)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6_M7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6_M7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6.M7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6.M7)
    MergeFrom(*source);
  }
}

void M1_M6_M7::MergeFrom(const M1_M6_M7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6.M7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M6_M7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6_M7::CopyFrom(const M1_M6_M7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6_M7::IsInitialized() const {
  return true;
}

void M1_M6_M7::InternalSwap(M1_M6_M7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6_M7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6_M8::InitAsDefaultInstance() {
}
class M1_M6_M8::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6_M8>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M1_M6_M8::M1_M6_M8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6.M8)
}
M1_M6_M8::M1_M6_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6.M8)
}
M1_M6_M8::M1_M6_M8(const M1_M6_M8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6.M8)
}

void M1_M6_M8::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M1_M6_M8::~M1_M6_M8() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6.M8)
  SharedDtor();
}

void M1_M6_M8::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M6_M8::ArenaDtor(void* object) {
  M1_M6_M8* _this = reinterpret_cast< M1_M6_M8* >(object);
  (void)_this;
}
void M1_M6_M8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6_M8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6_M8& M1_M6_M8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_M8_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6_M8::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6_M8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6_M8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_f1(), target);
  }

  // optional int32 f2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6.M8)
  return target;
}

size_t M1_M6_M8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6.M8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool f1 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 f2 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6_M8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6.M8)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6_M8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6_M8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6.M8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6.M8)
    MergeFrom(*source);
  }
}

void M1_M6_M8::MergeFrom(const M1_M6_M8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6.M8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M6_M8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6_M8::CopyFrom(const M1_M6_M8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6_M8::IsInitialized() const {
  return true;
}

void M1_M6_M8::InternalSwap(M1_M6_M8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6_M8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6_M9_M10_M11::InitAsDefaultInstance() {
}
class M1_M6_M9_M10_M11::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6_M9_M10_M11>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M1_M6_M9_M10_M11::M1_M6_M9_M10_M11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6.M9.M10.M11)
}
M1_M6_M9_M10_M11::M1_M6_M9_M10_M11(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6.M9.M10.M11)
}
M1_M6_M9_M10_M11::M1_M6_M9_M10_M11(const M1_M6_M9_M10_M11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6.M9.M10.M11)
}

void M1_M6_M9_M10_M11::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M6_M9_M10_M11_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M1_M6_M9_M10_M11::~M1_M6_M9_M10_M11() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6.M9.M10.M11)
  SharedDtor();
}

void M1_M6_M9_M10_M11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M6_M9_M10_M11::ArenaDtor(void* object) {
  M1_M6_M9_M10_M11* _this = reinterpret_cast< M1_M6_M9_M10_M11* >(object);
  (void)_this;
}
void M1_M6_M9_M10_M11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6_M9_M10_M11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6_M9_M10_M11& M1_M6_M9_M10_M11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_M9_M10_M11_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6_M9_M10_M11::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6.M9.M10.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6_M9_M10_M11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M6.M9.M10.M11.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M6.M9.M10.M11.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6_M9_M10_M11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6.M9.M10.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M6.M9.M10.M11.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M6.M9.M10.M11.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6.M9.M10.M11)
  return target;
}

size_t M1_M6_M9_M10_M11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6.M9.M10.M11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6_M9_M10_M11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6.M9.M10.M11)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6_M9_M10_M11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6_M9_M10_M11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6.M9.M10.M11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6.M9.M10.M11)
    MergeFrom(*source);
  }
}

void M1_M6_M9_M10_M11::MergeFrom(const M1_M6_M9_M10_M11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6.M9.M10.M11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
  }
}

void M1_M6_M9_M10_M11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6.M9.M10.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6_M9_M10_M11::CopyFrom(const M1_M6_M9_M10_M11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6.M9.M10.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6_M9_M10_M11::IsInitialized() const {
  return true;
}

void M1_M6_M9_M10_M11::InternalSwap(M1_M6_M9_M10_M11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6_M9_M10_M11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6_M9_M10::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M6_M9_M10_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M6_M9_M10_M11*>(
      ::hyperprotobench::M1_M6_M9_M10_M11::internal_default_instance());
}
class M1_M6_M9_M10::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6_M9_M10>()._has_bits_);
  static const ::hyperprotobench::M1_M6_M9_M10_M11& f1(const M1_M6_M9_M10* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M1_M6_M9_M10_M11&
M1_M6_M9_M10::_Internal::f1(const M1_M6_M9_M10* msg) {
  return *msg->f1_;
}
void M1_M6_M9_M10::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M6_M9_M10_M11* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.M9.M10.f1)
}
M1_M6_M9_M10::M1_M6_M9_M10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6.M9.M10)
}
M1_M6_M9_M10::M1_M6_M9_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6.M9.M10)
}
M1_M6_M9_M10::M1_M6_M9_M10(const M1_M6_M9_M10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M6_M9_M10_M11(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6.M9.M10)
}

void M1_M6_M9_M10::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M6_M9_M10_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M1_M6_M9_M10::~M1_M6_M9_M10() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6.M9.M10)
  SharedDtor();
}

void M1_M6_M9_M10::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M1_M6_M9_M10::ArenaDtor(void* object) {
  M1_M6_M9_M10* _this = reinterpret_cast< M1_M6_M9_M10* >(object);
  (void)_this;
}
void M1_M6_M9_M10::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6_M9_M10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6_M9_M10& M1_M6_M9_M10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_M9_M10_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6_M9_M10::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6.M9.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6_M9_M10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M6.M9.M10.M11 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6_M9_M10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6.M9.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M6.M9.M10.M11 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6.M9.M10)
  return target;
}

size_t M1_M6_M9_M10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6.M9.M10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M1.M6.M9.M10.M11 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6_M9_M10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6.M9.M10)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6_M9_M10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6_M9_M10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6.M9.M10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6.M9.M10)
    MergeFrom(*source);
  }
}

void M1_M6_M9_M10::MergeFrom(const M1_M6_M9_M10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6.M9.M10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M1_M6_M9_M10_M11::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M6_M9_M10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6.M9.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6_M9_M10::CopyFrom(const M1_M6_M9_M10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6.M9.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6_M9_M10::IsInitialized() const {
  return true;
}

void M1_M6_M9_M10::InternalSwap(M1_M6_M9_M10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6_M9_M10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6_M9::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M6_M9_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M1_M6_M9_M10*>(
      ::hyperprotobench::M1_M6_M9_M10::internal_default_instance());
}
class M1_M6_M9::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6_M9>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M1_M6_M9_M10& f2(const M1_M6_M9* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hyperprotobench::M1_M6_M9_M10&
M1_M6_M9::_Internal::f2(const M1_M6_M9* msg) {
  return *msg->f2_;
}
void M1_M6_M9::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M1_M6_M9_M10* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.M9.f2)
}
M1_M6_M9::M1_M6_M9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6.M9)
}
M1_M6_M9::M1_M6_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6.M9)
}
M1_M6_M9::M1_M6_M9(const M1_M6_M9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M1_M6_M9_M10(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6.M9)
}

void M1_M6_M9::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M6_M9_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M1_M6_M9::~M1_M6_M9() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6.M9)
  SharedDtor();
}

void M1_M6_M9::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M1_M6_M9::ArenaDtor(void* object) {
  M1_M6_M9* _this = reinterpret_cast< M1_M6_M9* >(object);
  (void)_this;
}
void M1_M6_M9::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6_M9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6_M9& M1_M6_M9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_M9_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6_M9::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6_M9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M6.M9.M10 f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6_M9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M1.M6.M9.M10 f2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6.M9)
  return target;
}

size_t M1_M6_M9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6.M9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    // optional .hyperprotobench.M1.M6.M9.M10 f2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional bool f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6_M9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6.M9)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6_M9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6_M9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6.M9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6.M9)
    MergeFrom(*source);
  }
}

void M1_M6_M9::MergeFrom(const M1_M6_M9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6.M9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_f2()->::hyperprotobench::M1_M6_M9_M10::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M6_M9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6_M9::CopyFrom(const M1_M6_M9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6_M9::IsInitialized() const {
  return true;
}

void M1_M6_M9::InternalSwap(M1_M6_M9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6_M9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M6::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M6_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M6_M7*>(
      ::hyperprotobench::M1_M6_M7::internal_default_instance());
  ::hyperprotobench::_M1_M6_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M1_M6_M8*>(
      ::hyperprotobench::M1_M6_M8::internal_default_instance());
  ::hyperprotobench::_M1_M6_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M1_M6_M9*>(
      ::hyperprotobench::M1_M6_M9::internal_default_instance());
}
class M1_M6::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M6>()._has_bits_);
  static const ::hyperprotobench::M1_M6_M7& f1(const M1_M6* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M1_M6_M8& f3(const M1_M6* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M1_M6_M9& f4(const M1_M6* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hyperprotobench::M1_M6_M7&
M1_M6::_Internal::f1(const M1_M6* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M1_M6_M8&
M1_M6::_Internal::f3(const M1_M6* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M1_M6_M9&
M1_M6::_Internal::f4(const M1_M6* msg) {
  return *msg->f4_;
}
void M1_M6::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M6_M7* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.f1)
}
void M1_M6::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M1_M6_M8* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.f3)
}
void M1_M6::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M1_M6_M9* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.f4)
}
M1_M6::M1_M6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M6)
}
M1_M6::M1_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M6)
}
M1_M6::M1_M6(const M1_M6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M6_M7(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M1_M6_M8(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M1_M6_M9(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M6)
}

void M1_M6::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M6_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M1_M6::~M1_M6() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M6)
  SharedDtor();
}

void M1_M6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f4_;
}

void M1_M6::ArenaDtor(void* object) {
  M1_M6* _this = reinterpret_cast< M1_M6* >(object);
  (void)_this;
}
void M1_M6::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M6& M1_M6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M6_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M6::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M6.M7 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M6.M8 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M6.M9 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M6.M7 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f1(this), target, stream);
  }

  // optional uint64 f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M1.M6.M8 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::f3(this), target, stream);
  }

  // optional .hyperprotobench.M1.M6.M9 f4 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M6)
  return target;
}

size_t M1_M6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    // optional .hyperprotobench.M1.M6.M7 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M1.M6.M8 f3 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional .hyperprotobench.M1.M6.M9 f4 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional uint64 f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M6)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M6)
    MergeFrom(*source);
  }
}

void M1_M6::MergeFrom(const M1_M6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M1_M6_M7::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M1_M6_M8::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_f4()->::hyperprotobench::M1_M6_M9::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M6::CopyFrom(const M1_M6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M6::IsInitialized() const {
  return true;
}

void M1_M6::InternalSwap(M1_M6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M1_M2*>(
      ::hyperprotobench::M1_M2::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f11_ = const_cast< ::hyperprotobench::M1_M6*>(
      ::hyperprotobench::M1_M6::internal_default_instance());
}
class M1::_Internal {
 public:
  using HasBits = decltype(std::declval<M1>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M1_M2& f3(const M1* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::hyperprotobench::M1_M6& f11(const M1* msg);
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::hyperprotobench::M1_M2&
M1::_Internal::f3(const M1* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M1_M6&
M1::_Internal::f11(const M1* msg) {
  return *msg->f11_;
}
void M1::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M1_M2* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f3)
}
void M1::unsafe_arena_set_allocated_f11(
    ::hyperprotobench::M1_M6* f11) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f11_;
  }
  f11_ = f11;
  if (f11) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f11)
}
M1::M1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1)
}
M1::M1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1)
}
M1::M1(const M1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M1_M2(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f11()) {
    f11_ = new ::hyperprotobench::M1_M6(*from.f11_);
  } else {
    f11_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1)
}

void M1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f10_));
}

M1::~M1() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1)
  SharedDtor();
}

void M1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f11_;
}

void M1::ArenaDtor(void* object) {
  M1* _this = reinterpret_cast< M1* >(object);
  (void)_this;
}
void M1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1& M1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000a000u) {
    if (cached_has_bits & 0x00002000u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      f7_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    f8_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000800u) {
    GOOGLE_DCHECK(f3_ != nullptr);
    f3_->Clear();
  }
  if (cached_has_bits & 0x00400000u) {
    GOOGLE_DCHECK(f11_ != nullptr);
    f11_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00005000u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00060000u) {
    ::memset(&f9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f9_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2 f3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.E1 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_E1_IsValid(val))) {
            _internal_set_f9(static_cast<::hyperprotobench::M1_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M6 f11 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_f11(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M1.M2 f3 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f3(this), target, stream);
  }

  // optional float f4 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_f4(), target);
  }

  // optional string f5 = 13;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f5");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_f5(), target);
  }

  // optional bool f6 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_f6(), target);
  }

  // optional string f7 = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f7");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_f7(), target);
  }

  // optional string f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f8().data(), static_cast<int>(this->_internal_f8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f8");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M1.E1 f9 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_f9(), target);
  }

  // optional fixed32 f10 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(18, this->_internal_f10(), target);
  }

  // optional .hyperprotobench.M1.M6 f11 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::f11(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1)
  return target;
}

size_t M1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000a000u) {
    // optional string f5 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional string f7 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

  }
  // optional string f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f8());
  }

  // optional .hyperprotobench.M1.M2 f3 = 11;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f3_);
  }

  // optional .hyperprotobench.M1.M6 f11 = 22;
  if (cached_has_bits & 0x00400000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f11_);
  }

  if (cached_has_bits & 0x00000006u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (cached_has_bits & 0x00005000u) {
    // optional float f4 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional bool f6 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00060000u) {
    // optional .hyperprotobench.M1.E1 f9 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f9());
    }

    // optional fixed32 f10 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  const M1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1)
    MergeFrom(*source);
  }
}

void M1::MergeFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000a000u) {
    if (cached_has_bits & 0x00002000u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_f7(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_mutable_f3()->::hyperprotobench::M1_M2::MergeFrom(from._internal_f3());
  }
  if (cached_has_bits & 0x00400000u) {
    _internal_mutable_f11()->::hyperprotobench::M1_M6::MergeFrom(from._internal_f11());
  }
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00005000u) {
    if (cached_has_bits & 0x00001000u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00004000u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00060000u) {
    if (cached_has_bits & 0x00020000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00040000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1::CopyFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1::IsInitialized() const {
  return true;
}

void M1::InternalSwap(M1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f11_, other->f11_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M13_M14_M15::InitAsDefaultInstance() {
}
class M12_M13_M14_M15::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M13_M14_M15>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M12_M13_M14_M15::M12_M13_M14_M15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M13.M14.M15)
}
M12_M13_M14_M15::M12_M13_M14_M15(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M13.M14.M15)
}
M12_M13_M14_M15::M12_M13_M14_M15(const M12_M13_M14_M15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M13.M14.M15)
}

void M12_M13_M14_M15::SharedCtor() {
  f1_ = 0;
}

M12_M13_M14_M15::~M12_M13_M14_M15() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M13.M14.M15)
  SharedDtor();
}

void M12_M13_M14_M15::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M12_M13_M14_M15::ArenaDtor(void* object) {
  M12_M13_M14_M15* _this = reinterpret_cast< M12_M13_M14_M15* >(object);
  (void)_this;
}
void M12_M13_M14_M15::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M13_M14_M15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M13_M14_M15& M12_M13_M14_M15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M13_M14_M15_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M13_M14_M15::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M13.M14.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M13_M14_M15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M13_M14_M15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M13.M14.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M13.M14.M15)
  return target;
}

size_t M12_M13_M14_M15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M13.M14.M15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M13_M14_M15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M13.M14.M15)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M13_M14_M15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M13_M14_M15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M13.M14.M15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M13.M14.M15)
    MergeFrom(*source);
  }
}

void M12_M13_M14_M15::MergeFrom(const M12_M13_M14_M15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M13.M14.M15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M12_M13_M14_M15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M13.M14.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M13_M14_M15::CopyFrom(const M12_M13_M14_M15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M13.M14.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M13_M14_M15::IsInitialized() const {
  return true;
}

void M12_M13_M14_M15::InternalSwap(M12_M13_M14_M15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M13_M14_M15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M13_M14::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M13_M14_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M12_M13_M14_M15*>(
      ::hyperprotobench::M12_M13_M14_M15::internal_default_instance());
}
class M12_M13_M14::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M13_M14>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M12_M13_M14_M15& f2(const M12_M13_M14* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::hyperprotobench::M12_M13_M14_M15&
M12_M13_M14::_Internal::f2(const M12_M13_M14* msg) {
  return *msg->f2_;
}
void M12_M13_M14::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M12_M13_M14_M15* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M13.M14.f2)
}
M12_M13_M14::M12_M13_M14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M13.M14)
}
M12_M13_M14::M12_M13_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M13.M14)
}
M12_M13_M14::M12_M13_M14(const M12_M13_M14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M12_M13_M14_M15(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M13.M14)
}

void M12_M13_M14::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M13_M14_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
}

M12_M13_M14::~M12_M13_M14() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M13.M14)
  SharedDtor();
}

void M12_M13_M14::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M12_M13_M14::ArenaDtor(void* object) {
  M12_M13_M14* _this = reinterpret_cast< M12_M13_M14* >(object);
  (void)_this;
}
void M12_M13_M14::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M13_M14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M13_M14& M12_M13_M14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M13_M14_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M13_M14::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M13.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00004000u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f1_ = 0;
  if (cached_has_bits & 0x00003000u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  f6_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M13_M14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M13.M14.M15 f2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M12.M13.M14.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f6 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M13_M14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M13.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M12.M13.M14.M15 f2 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f2(this), target, stream);
  }

  // optional bool f3 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_f3(), target);
  }

  // optional int32 f4 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_f4(), target);
  }

  // optional string f5 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M12.M13.M14.f5");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_f5(), target);
  }

  // optional float f6 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M13.M14)
  return target;
}

size_t M12_M13_M14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M13.M14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00004100u) {
    // optional string f5 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional .hyperprotobench.M12.M13.M14.M15 f2 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (cached_has_bits & 0x00003000u) {
    // optional bool f3 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 f4 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  // optional float f6 = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M13_M14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M13.M14)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M13_M14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M13_M14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M13.M14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M13.M14)
    MergeFrom(*source);
  }
}

void M12_M13_M14::MergeFrom(const M12_M13_M14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M13.M14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00004000u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_f2()->::hyperprotobench::M12_M13_M14_M15::MergeFrom(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00003000u) {
    if (cached_has_bits & 0x00001000u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00002000u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f6(from._internal_f6());
  }
}

void M12_M13_M14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M13.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M13_M14::CopyFrom(const M12_M13_M14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M13.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M13_M14::IsInitialized() const {
  return true;
}

void M12_M13_M14::InternalSwap(M12_M13_M14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M13_M14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M13::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M13_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M12_M13_M14*>(
      ::hyperprotobench::M12_M13_M14::internal_default_instance());
}
class M12_M13::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M13>()._has_bits_);
  static const ::hyperprotobench::M12_M13_M14& f1(const M12_M13* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M12_M13_M14&
M12_M13::_Internal::f1(const M12_M13* msg) {
  return *msg->f1_;
}
void M12_M13::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M12_M13_M14* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M13.f1)
}
M12_M13::M12_M13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M13)
}
M12_M13::M12_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M13)
}
M12_M13::M12_M13(const M12_M13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M12_M13_M14(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M13)
}

void M12_M13::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M13_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M12_M13::~M12_M13() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M13)
  SharedDtor();
}

void M12_M13::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M12_M13::ArenaDtor(void* object) {
  M12_M13* _this = reinterpret_cast< M12_M13* >(object);
  (void)_this;
}
void M12_M13::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M13& M12_M13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M13_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M13::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M12.M13.M14 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M12.M13.M14 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M13)
  return target;
}

size_t M12_M13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M12.M13.M14 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M13)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M13)
    MergeFrom(*source);
  }
}

void M12_M13::MergeFrom(const M12_M13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M12_M13_M14::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M13::CopyFrom(const M12_M13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M13::IsInitialized() const {
  return true;
}

void M12_M13::InternalSwap(M12_M13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M16::InitAsDefaultInstance() {
}
class M12_M16::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M16>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M12_M16::M12_M16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M16)
}
M12_M16::M12_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M16)
}
M12_M16::M12_M16(const M12_M16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M16)
}

void M12_M16::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M12_M16::~M12_M16() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M16)
  SharedDtor();
}

void M12_M16::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M12_M16::ArenaDtor(void* object) {
  M12_M16* _this = reinterpret_cast< M12_M16* >(object);
  (void)_this;
}
void M12_M16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M16& M12_M16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M16_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M16::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M16)
  return target;
}

size_t M12_M16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M16)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M16)
    MergeFrom(*source);
  }
}

void M12_M16::MergeFrom(const M12_M16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M16::CopyFrom(const M12_M16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M16::IsInitialized() const {
  return true;
}

void M12_M16::InternalSwap(M12_M16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17_M18_M19_M20_M21::InitAsDefaultInstance() {
}
class M12_M17_M18_M19_M20_M21::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17_M18_M19_M20_M21>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M12_M17_M18_M19_M20_M21::M12_M17_M18_M19_M20_M21()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17.M18.M19.M20.M21)
}
M12_M17_M18_M19_M20_M21::M12_M17_M18_M19_M20_M21(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17.M18.M19.M20.M21)
}
M12_M17_M18_M19_M20_M21::M12_M17_M18_M19_M20_M21(const M12_M17_M18_M19_M20_M21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17.M18.M19.M20.M21)
}

void M12_M17_M18_M19_M20_M21::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = 2;
}

M12_M17_M18_M19_M20_M21::~M12_M17_M18_M19_M20_M21() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17.M18.M19.M20.M21)
  SharedDtor();
}

void M12_M17_M18_M19_M20_M21::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M12_M17_M18_M19_M20_M21::ArenaDtor(void* object) {
  M12_M17_M18_M19_M20_M21* _this = reinterpret_cast< M12_M17_M18_M19_M20_M21* >(object);
  (void)_this;
}
void M12_M17_M18_M19_M20_M21::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17_M18_M19_M20_M21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17_M18_M19_M20_M21& M12_M17_M18_M19_M20_M21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_M18_M19_M20_M21_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17_M18_M19_M20_M21::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    f2_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17_M18_M19_M20_M21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M12.M17.M18.M19.M20.M21.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.M18.M19.M20.M21.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M12_M17_M18_M19_M20_M21_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17_M18_M19_M20_M21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M12.M17.M18.M19.M20.M21.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M12.M17.M18.M19.M20.M21.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17.M18.M19.M20.M21)
  return target;
}

size_t M12_M17_M18_M19_M20_M21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M12.M17.M18.M19.M20.M21.E1 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17_M18_M19_M20_M21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17_M18_M19_M20_M21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17_M18_M19_M20_M21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17.M18.M19.M20.M21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17.M18.M19.M20.M21)
    MergeFrom(*source);
  }
}

void M12_M17_M18_M19_M20_M21::MergeFrom(const M12_M17_M18_M19_M20_M21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M17_M18_M19_M20_M21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17_M18_M19_M20_M21::CopyFrom(const M12_M17_M18_M19_M20_M21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17.M18.M19.M20.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17_M18_M19_M20_M21::IsInitialized() const {
  return true;
}

void M12_M17_M18_M19_M20_M21::InternalSwap(M12_M17_M18_M19_M20_M21* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17_M18_M19_M20_M21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17_M18_M19_M20::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M17_M18_M19_M20_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M12_M17_M18_M19_M20_M21*>(
      ::hyperprotobench::M12_M17_M18_M19_M20_M21::internal_default_instance());
}
class M12_M17_M18_M19_M20::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17_M18_M19_M20>()._has_bits_);
  static const ::hyperprotobench::M12_M17_M18_M19_M20_M21& f1(const M12_M17_M18_M19_M20* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M12_M17_M18_M19_M20_M21&
M12_M17_M18_M19_M20::_Internal::f1(const M12_M17_M18_M19_M20* msg) {
  return *msg->f1_;
}
void M12_M17_M18_M19_M20::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M12_M17_M18_M19_M20_M21* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.M18.M19.M20.f1)
}
M12_M17_M18_M19_M20::M12_M17_M18_M19_M20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17.M18.M19.M20)
}
M12_M17_M18_M19_M20::M12_M17_M18_M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17.M18.M19.M20)
}
M12_M17_M18_M19_M20::M12_M17_M18_M19_M20(const M12_M17_M18_M19_M20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M12_M17_M18_M19_M20_M21(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17.M18.M19.M20)
}

void M12_M17_M18_M19_M20::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_M18_M19_M20_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M12_M17_M18_M19_M20::~M12_M17_M18_M19_M20() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17.M18.M19.M20)
  SharedDtor();
}

void M12_M17_M18_M19_M20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M12_M17_M18_M19_M20::ArenaDtor(void* object) {
  M12_M17_M18_M19_M20* _this = reinterpret_cast< M12_M17_M18_M19_M20* >(object);
  (void)_this;
}
void M12_M17_M18_M19_M20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17_M18_M19_M20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17_M18_M19_M20& M12_M17_M18_M19_M20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_M18_M19_M20_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17_M18_M19_M20::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17.M18.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17_M18_M19_M20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M12.M17.M18.M19.M20.M21 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17_M18_M19_M20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17.M18.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M12.M17.M18.M19.M20.M21 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17.M18.M19.M20)
  return target;
}

size_t M12_M17_M18_M19_M20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17.M18.M19.M20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional .hyperprotobench.M12.M17.M18.M19.M20.M21 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int32 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17_M18_M19_M20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17.M18.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17_M18_M19_M20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17_M18_M19_M20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17.M18.M19.M20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17.M18.M19.M20)
    MergeFrom(*source);
  }
}

void M12_M17_M18_M19_M20::MergeFrom(const M12_M17_M18_M19_M20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17.M18.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M12_M17_M18_M19_M20_M21::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M17_M18_M19_M20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17.M18.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17_M18_M19_M20::CopyFrom(const M12_M17_M18_M19_M20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17.M18.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17_M18_M19_M20::IsInitialized() const {
  return true;
}

void M12_M17_M18_M19_M20::InternalSwap(M12_M17_M18_M19_M20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17_M18_M19_M20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17_M18_M19::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M17_M18_M19_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M12_M17_M18_M19_M20*>(
      ::hyperprotobench::M12_M17_M18_M19_M20::internal_default_instance());
}
class M12_M17_M18_M19::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17_M18_M19>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M12_M17_M18_M19_M20& f2(const M12_M17_M18_M19* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M12_M17_M18_M19_M20&
M12_M17_M18_M19::_Internal::f2(const M12_M17_M18_M19* msg) {
  return *msg->f2_;
}
void M12_M17_M18_M19::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M12_M17_M18_M19_M20* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.M18.M19.f2)
}
M12_M17_M18_M19::M12_M17_M18_M19()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17.M18.M19)
}
M12_M17_M18_M19::M12_M17_M18_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17.M18.M19)
}
M12_M17_M18_M19::M12_M17_M18_M19(const M12_M17_M18_M19& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M12_M17_M18_M19_M20(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17.M18.M19)
}

void M12_M17_M18_M19::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_M18_M19_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M12_M17_M18_M19::~M12_M17_M18_M19() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17.M18.M19)
  SharedDtor();
}

void M12_M17_M18_M19::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M12_M17_M18_M19::ArenaDtor(void* object) {
  M12_M17_M18_M19* _this = reinterpret_cast< M12_M17_M18_M19* >(object);
  (void)_this;
}
void M12_M17_M18_M19::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17_M18_M19::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17_M18_M19& M12_M17_M18_M19::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_M18_M19_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17_M18_M19::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17.M18.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17_M18_M19::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.M18.M19.M20 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17_M18_M19::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17.M18.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M12.M17.M18.M19.M20 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17.M18.M19)
  return target;
}

size_t M12_M17_M18_M19::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17.M18.M19)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional .hyperprotobench.M12.M17.M18.M19.M20 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17_M18_M19::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17.M18.M19)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17_M18_M19* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17_M18_M19>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17.M18.M19)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17.M18.M19)
    MergeFrom(*source);
  }
}

void M12_M17_M18_M19::MergeFrom(const M12_M17_M18_M19& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17.M18.M19)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M12_M17_M18_M19_M20::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M17_M18_M19::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17.M18.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17_M18_M19::CopyFrom(const M12_M17_M18_M19& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17.M18.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17_M18_M19::IsInitialized() const {
  return true;
}

void M12_M17_M18_M19::InternalSwap(M12_M17_M18_M19* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17_M18_M19::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17_M18::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M17_M18_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M12_M17_M18_M19*>(
      ::hyperprotobench::M12_M17_M18_M19::internal_default_instance());
}
class M12_M17_M18::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17_M18>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M12_M17_M18_M19& f2(const M12_M17_M18* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M12_M17_M18_M19&
M12_M17_M18::_Internal::f2(const M12_M17_M18* msg) {
  return *msg->f2_;
}
void M12_M17_M18::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M12_M17_M18_M19* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.M18.f2)
}
M12_M17_M18::M12_M17_M18()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17.M18)
}
M12_M17_M18::M12_M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17.M18)
}
M12_M17_M18::M12_M17_M18(const M12_M17_M18& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M12_M17_M18_M19(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17.M18)
}

void M12_M17_M18::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_M18_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M12_M17_M18::~M12_M17_M18() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17.M18)
  SharedDtor();
}

void M12_M17_M18::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M12_M17_M18::ArenaDtor(void* object) {
  M12_M17_M18* _this = reinterpret_cast< M12_M17_M18* >(object);
  (void)_this;
}
void M12_M17_M18::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17_M18::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17_M18& M12_M17_M18::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_M18_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17_M18::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17_M18::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.M18.M19 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17_M18::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M12.M17.M18.M19 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17.M18)
  return target;
}

size_t M12_M17_M18::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17.M18)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M12.M17.M18.M19 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional uint64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17_M18::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17_M18* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17_M18>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17.M18)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17.M18)
    MergeFrom(*source);
  }
}

void M12_M17_M18::MergeFrom(const M12_M17_M18& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M12_M17_M18_M19::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M17_M18::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17_M18::CopyFrom(const M12_M17_M18& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17_M18::IsInitialized() const {
  return true;
}

void M12_M17_M18::InternalSwap(M12_M17_M18* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17_M18::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17_M22::InitAsDefaultInstance() {
}
class M12_M17_M22::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17_M22>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

M12_M17_M22::M12_M17_M22()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17.M22)
}
M12_M17_M22::M12_M17_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17.M22)
}
M12_M17_M22::M12_M17_M22(const M12_M17_M22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17.M22)
}

void M12_M17_M22::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_M22_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M12_M17_M22::~M12_M17_M22() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17.M22)
  SharedDtor();
}

void M12_M17_M22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M12_M17_M22::ArenaDtor(void* object) {
  M12_M17_M22* _this = reinterpret_cast< M12_M17_M22* >(object);
  (void)_this;
}
void M12_M17_M22::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17_M22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17_M22& M12_M17_M22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_M22_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17_M22::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000012u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17_M22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17_M22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f1(), target);
  }

  // optional bytes f2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f2(), target);
  }

  // optional int32 f3 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17.M22)
  return target;
}

size_t M12_M17_M22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17.M22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional bytes f2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional float f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 f3 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17_M22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17.M22)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17_M22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17_M22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17.M22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17.M22)
    MergeFrom(*source);
  }
}

void M12_M17_M22::MergeFrom(const M12_M17_M22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17.M22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12_M17_M22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17_M22::CopyFrom(const M12_M17_M22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17_M22::IsInitialized() const {
  return true;
}

void M12_M17_M22::InternalSwap(M12_M17_M22* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17_M22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12_M17::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_M17_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M12_M17_M18*>(
      ::hyperprotobench::M12_M17_M18::internal_default_instance());
  ::hyperprotobench::_M12_M17_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M12_M17_M22*>(
      ::hyperprotobench::M12_M17_M22::internal_default_instance());
}
class M12_M17::_Internal {
 public:
  using HasBits = decltype(std::declval<M12_M17>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M12_M17_M18& f4(const M12_M17* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M12_M17_M22& f5(const M12_M17* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::hyperprotobench::M12_M17_M18&
M12_M17::_Internal::f4(const M12_M17* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M12_M17_M22&
M12_M17::_Internal::f5(const M12_M17* msg) {
  return *msg->f5_;
}
void M12_M17::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M12_M17_M18* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.f4)
}
void M12_M17::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M12_M17_M22* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.f5)
}
M12_M17::M12_M17()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12.M17)
}
M12_M17::M12_M17(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12.M17)
}
M12_M17::M12_M17(const M12_M17& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M12_M17_M18(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M12_M17_M22(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12.M17)
}

void M12_M17::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_M17_benchmark_2eproto.base);
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f6_));
  f2_ = 96;
}

M12_M17::~M12_M17() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12.M17)
  SharedDtor();
}

void M12_M17::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f5_;
}

void M12_M17::ArenaDtor(void* object) {
  M12_M17* _this = reinterpret_cast< M12_M17* >(object);
  (void)_this;
}
void M12_M17::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12_M17::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12_M17& M12_M17::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_M17_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12_M17::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
  }
  f1_ = PROTOBUF_LONGLONG(0);
  f7_ = 0;
  f3_ = 0;
  f6_ = 0;
  f2_ = 96;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12_M17::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M12_M17_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M12_M17_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional sint32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.M18 f4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17.M22 f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12_M17::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M12.M17.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  // optional sint32 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M12.M17.M18 f4 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f4(this), target, stream);
  }

  // optional .hyperprotobench.M12.M17.M22 f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f5(this), target, stream);
  }

  // optional int32 f6 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_f6(), target);
  }

  // optional int32 f7 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12.M17)
  return target;
}

size_t M12_M17::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12.M17)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000600u) {
    // optional .hyperprotobench.M12.M17.M18 f4 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional .hyperprotobench.M12.M17.M22 f5 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

  }
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  // optional int32 f7 = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f7());
  }

  // optional sint32 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_f3());
  }

  // optional int32 f6 = 16;
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f6());
  }

  // optional .hyperprotobench.M12.M17.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12_M17::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12.M17)
  GOOGLE_DCHECK_NE(&from, this);
  const M12_M17* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12_M17>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12.M17)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12.M17)
    MergeFrom(*source);
  }
}

void M12_M17::MergeFrom(const M12_M17& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12.M17)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_f4()->::hyperprotobench::M12_M17_M18::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f5()->::hyperprotobench::M12_M17_M22::MergeFrom(from._internal_f5());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_f3(from._internal_f3());
  }
  if (cached_has_bits & 0x00008000u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_f2(from._internal_f2());
  }
}

void M12_M17::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12_M17::CopyFrom(const M12_M17& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12_M17::IsInitialized() const {
  return true;
}

void M12_M17::InternalSwap(M12_M17* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f1_, other->f1_);
  swap(f7_, other->f7_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12_M17::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M12::InitAsDefaultInstance() {
  ::hyperprotobench::_M12_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M12_M13*>(
      ::hyperprotobench::M12_M13::internal_default_instance());
  ::hyperprotobench::_M12_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M12_M16*>(
      ::hyperprotobench::M12_M16::internal_default_instance());
  ::hyperprotobench::_M12_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M12_M17*>(
      ::hyperprotobench::M12_M17::internal_default_instance());
}
class M12::_Internal {
 public:
  using HasBits = decltype(std::declval<M12>()._has_bits_);
  static const ::hyperprotobench::M12_M13& f1(const M12* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M12_M16& f3(const M12* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M12_M17& f5(const M12* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::hyperprotobench::M12_M13&
M12::_Internal::f1(const M12* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M12_M16&
M12::_Internal::f3(const M12* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M12_M17&
M12::_Internal::f5(const M12* msg) {
  return *msg->f5_;
}
void M12::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M12_M13* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f1)
}
void M12::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M12_M16* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f3)
}
void M12::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M12_M17* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f5)
}
M12::M12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M12)
}
M12::M12(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M12)
}
M12::M12(const M12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f12()) {
    f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f12(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M12_M13(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M12_M16(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M12_M17(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f4_, &from.f4_,
    static_cast<size_t>(reinterpret_cast<char*>(&f13_) -
    reinterpret_cast<char*>(&f4_)) + sizeof(f13_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M12)
}

void M12::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M12_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f13_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f13_));
}

M12::~M12() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M12)
  SharedDtor();
}

void M12::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f5_;
}

void M12::ArenaDtor(void* object) {
  M12* _this = reinterpret_cast< M12* >(object);
  (void)_this;
}
void M12::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M12& M12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M12_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M12::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00002000u) {
    f7_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00080000u) {
    f12_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  if (cached_has_bits & 0x00000400u) {
    GOOGLE_DCHECK(f5_ != nullptr);
    f5_->Clear();
  }
  if (cached_has_bits & 0x00004a00u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f8_));
  }
  if (cached_has_bits & 0x00170000u) {
    ::memset(&f10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f13_) -
        reinterpret_cast<char*>(&f10_)) + sizeof(f13_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M12.M13 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M12.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M16 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M12.M17 f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M12.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f11 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes f12 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_f12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f13 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_f13(&has_bits);
          f13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M12.M13 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M12.f2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M12.M16 f3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f3(this), target, stream);
  }

  // optional fixed64 f4 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M12.M17 f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f5(this), target, stream);
  }

  // optional bool f6 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_f6(), target);
  }

  // optional string f7 = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M12.f7");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_f7(), target);
  }

  // optional int32 f8 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_f8(), target);
  }

  // optional int32 f9 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f9(), target);
  }

  // optional fixed64 f10 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(18, this->_internal_f10(), target);
  }

  // optional fixed64 f11 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(19, this->_internal_f11(), target);
  }

  // optional bytes f12 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_f12(), target);
  }

  // optional int32 f13 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_f13(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M12)
  return target;
}

size_t M12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f2 = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f2());
  }

  // optional string f7 = 14;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f7());
  }

  // optional bytes f12 = 20;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f12());
  }

  if (cached_has_bits & 0x00000022u) {
    // optional .hyperprotobench.M12.M13 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M12.M16 f3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

  }
  if (cached_has_bits & 0x00004e00u) {
    // optional .hyperprotobench.M12.M17 f5 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional fixed64 f4 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional bool f6 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 f8 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

  }
  if (cached_has_bits & 0x00170000u) {
    // optional fixed64 f10 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 f11 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int32 f9 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional int32 f13 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f13());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M12)
  GOOGLE_DCHECK_NE(&from, this);
  const M12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M12)
    MergeFrom(*source);
  }
}

void M12::MergeFrom(const M12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f7()) {
    _internal_set_f7(from._internal_f7());
  }
  if (from._internal_has_f12()) {
    _internal_set_f12(from._internal_f12());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M12_M13::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_f3()->::hyperprotobench::M12_M16::MergeFrom(from._internal_f3());
    }
  }
  if (cached_has_bits & 0x00004e00u) {
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f5()->::hyperprotobench::M12_M17::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00000200u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000800u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00004000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00170000u) {
    if (cached_has_bits & 0x00020000u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00040000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00010000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00100000u) {
      f13_ = from.f13_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M12::CopyFrom(const M12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M12::IsInitialized() const {
  return true;
}

void M12::InternalSwap(M12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f12_.Swap(&other->f12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f9_, other->f9_);
  swap(f13_, other->f13_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M24_M25::InitAsDefaultInstance() {
}
class M23_M24_M25::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M24_M25>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M23_M24_M25::M23_M24_M25()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M24.M25)
}
M23_M24_M25::M23_M24_M25(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M24.M25)
}
M23_M24_M25::M23_M24_M25(const M23_M24_M25& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M24.M25)
}

void M23_M24_M25::SharedCtor() {
  f1_ = 0;
}

M23_M24_M25::~M23_M24_M25() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M24.M25)
  SharedDtor();
}

void M23_M24_M25::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M23_M24_M25::ArenaDtor(void* object) {
  M23_M24_M25* _this = reinterpret_cast< M23_M24_M25* >(object);
  (void)_this;
}
void M23_M24_M25::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M24_M25::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M24_M25& M23_M24_M25::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M24_M25_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M24_M25::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M24.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M24_M25::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M24_M25::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M24.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M24.M25)
  return target;
}

size_t M23_M24_M25::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M24.M25)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M24_M25::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M24.M25)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M24_M25* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M24_M25>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M24.M25)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M24.M25)
    MergeFrom(*source);
  }
}

void M23_M24_M25::MergeFrom(const M23_M24_M25& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M24.M25)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M23_M24_M25::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M24.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M24_M25::CopyFrom(const M23_M24_M25& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M24.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M24_M25::IsInitialized() const {
  return true;
}

void M23_M24_M25::InternalSwap(M23_M24_M25* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M24_M25::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M24_M26::InitAsDefaultInstance() {
}
class M23_M24_M26::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M24_M26>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M23_M24_M26::M23_M24_M26()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M24.M26)
}
M23_M24_M26::M23_M24_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M24.M26)
}
M23_M24_M26::M23_M24_M26(const M23_M24_M26& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M24.M26)
}

void M23_M24_M26::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M24_M26_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M23_M24_M26::~M23_M24_M26() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M24.M26)
  SharedDtor();
}

void M23_M24_M26::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M23_M24_M26::ArenaDtor(void* object) {
  M23_M24_M26* _this = reinterpret_cast< M23_M24_M26* >(object);
  (void)_this;
}
void M23_M24_M26::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M24_M26::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M24_M26& M23_M24_M26::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M24_M26_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M24_M26::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M24.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M24_M26::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M24_M26::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M24.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M24.M26)
  return target;
}

size_t M23_M24_M26::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M24.M26)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M24_M26::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M24.M26)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M24_M26* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M24_M26>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M24.M26)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M24.M26)
    MergeFrom(*source);
  }
}

void M23_M24_M26::MergeFrom(const M23_M24_M26& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M24.M26)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M23_M24_M26::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M24.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M24_M26::CopyFrom(const M23_M24_M26& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M24.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M24_M26::IsInitialized() const {
  return true;
}

void M23_M24_M26::InternalSwap(M23_M24_M26* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M24_M26::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M24_M27::InitAsDefaultInstance() {
}
class M23_M24_M27::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M24_M27>()._has_bits_);
};

M23_M24_M27::M23_M24_M27()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M24.M27)
}
M23_M24_M27::M23_M24_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f1_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M24.M27)
}
M23_M24_M27::M23_M24_M27(const M23_M24_M27& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f1_(from.f1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M24.M27)
}

void M23_M24_M27::SharedCtor() {
}

M23_M24_M27::~M23_M24_M27() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M24.M27)
  SharedDtor();
}

void M23_M24_M27::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M23_M24_M27::ArenaDtor(void* object) {
  M23_M24_M27* _this = reinterpret_cast< M23_M24_M27* >(object);
  (void)_this;
}
void M23_M24_M27::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M24_M27::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M24_M27& M23_M24_M27::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M24_M27_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M24_M27::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M24.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M24_M27::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_f1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M24_M27::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M24.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool f1 = 2;
  for (int i = 0, n = this->_internal_f1_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f1(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M24.M27)
  return target;
}

size_t M23_M24_M27::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M24.M27)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool f1 = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f1_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f1_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M24_M27::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M24.M27)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M24_M27* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M24_M27>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M24.M27)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M24.M27)
    MergeFrom(*source);
  }
}

void M23_M24_M27::MergeFrom(const M23_M24_M27& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M24.M27)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f1_.MergeFrom(from.f1_);
}

void M23_M24_M27::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M24.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M24_M27::CopyFrom(const M23_M24_M27& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M24.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M24_M27::IsInitialized() const {
  return true;
}

void M23_M24_M27::InternalSwap(M23_M24_M27* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.InternalSwap(&other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M24_M27::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M24::InitAsDefaultInstance() {
  ::hyperprotobench::_M23_M24_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M23_M24_M25*>(
      ::hyperprotobench::M23_M24_M25::internal_default_instance());
  ::hyperprotobench::_M23_M24_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M23_M24_M26*>(
      ::hyperprotobench::M23_M24_M26::internal_default_instance());
  ::hyperprotobench::_M23_M24_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M23_M24_M27*>(
      ::hyperprotobench::M23_M24_M27::internal_default_instance());
}
class M23_M24::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M24>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M23_M24_M25& f2(const M23_M24* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M23_M24_M26& f3(const M23_M24* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M23_M24_M27& f4(const M23_M24* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::hyperprotobench::M23_M24_M25&
M23_M24::_Internal::f2(const M23_M24* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M23_M24_M26&
M23_M24::_Internal::f3(const M23_M24* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M23_M24_M27&
M23_M24::_Internal::f4(const M23_M24* msg) {
  return *msg->f4_;
}
void M23_M24::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M23_M24_M25* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M24.f2)
}
void M23_M24::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M23_M24_M26* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M24.f3)
}
void M23_M24::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M23_M24_M27* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M24.f4)
}
M23_M24::M23_M24()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M24)
}
M23_M24::M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M24)
}
M23_M24::M23_M24(const M23_M24& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M23_M24_M25(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M23_M24_M26(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M23_M24_M27(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M24)
}

void M23_M24::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M24_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
}

M23_M24::~M23_M24() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M24)
  SharedDtor();
}

void M23_M24::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f4_;
}

void M23_M24::ArenaDtor(void* object) {
  M23_M24* _this = reinterpret_cast< M23_M24* >(object);
  (void)_this;
}
void M23_M24::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M24::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M24& M23_M24::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M24_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M24::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x00000042u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M24::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M24.M25 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M24.M26 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M24.M27 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M24::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M23.M24.M25 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M23.M24.M26 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f3(this), target, stream);
  }

  // optional .hyperprotobench.M23.M24.M27 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f4(this), target, stream);
  }

  // optional int32 f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M24)
  return target;
}

size_t M23_M24::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M24)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000005eu) {
    // optional .hyperprotobench.M23.M24.M25 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M23.M24.M26 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional .hyperprotobench.M23.M24.M27 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional double f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M24::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M24* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M24>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M24)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M24)
    MergeFrom(*source);
  }
}

void M23_M24::MergeFrom(const M23_M24& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000005eu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M23_M24_M25::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M23_M24_M26::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f4()->::hyperprotobench::M23_M24_M27::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M24::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M24::CopyFrom(const M23_M24& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M24::IsInitialized() const {
  return true;
}

void M23_M24::InternalSwap(M23_M24* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M24::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M28::InitAsDefaultInstance() {
}
class M23_M28::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M28>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M23_M28::M23_M28()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M28)
}
M23_M28::M23_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M28)
}
M23_M28::M23_M28(const M23_M28& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M28)
}

void M23_M28::SharedCtor() {
  f1_ = 0;
}

M23_M28::~M23_M28() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M28)
  SharedDtor();
}

void M23_M28::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M23_M28::ArenaDtor(void* object) {
  M23_M28* _this = reinterpret_cast< M23_M28* >(object);
  (void)_this;
}
void M23_M28::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M28::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M28& M23_M28::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M28_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M28::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M28::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M28::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M28)
  return target;
}

size_t M23_M28::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M28)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M28::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M28)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M28* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M28>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M28)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M28)
    MergeFrom(*source);
  }
}

void M23_M28::MergeFrom(const M23_M28& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M28)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M23_M28::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M28::CopyFrom(const M23_M28& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M28::IsInitialized() const {
  return true;
}

void M23_M28::InternalSwap(M23_M28* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M28::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M29_M30_M31_M32::InitAsDefaultInstance() {
}
class M23_M29_M30_M31_M32::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M29_M30_M31_M32>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M23_M29_M30_M31_M32::M23_M29_M30_M31_M32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M29.M30.M31.M32)
}
M23_M29_M30_M31_M32::M23_M29_M30_M31_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M29.M30.M31.M32)
}
M23_M29_M30_M31_M32::M23_M29_M30_M31_M32(const M23_M29_M30_M31_M32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M29.M30.M31.M32)
}

void M23_M29_M30_M31_M32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M29_M30_M31_M32_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  f1_ = 38;
}

M23_M29_M30_M31_M32::~M23_M29_M30_M31_M32() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M29.M30.M31.M32)
  SharedDtor();
}

void M23_M29_M30_M31_M32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M23_M29_M30_M31_M32::ArenaDtor(void* object) {
  M23_M29_M30_M31_M32* _this = reinterpret_cast< M23_M29_M30_M31_M32* >(object);
  (void)_this;
}
void M23_M29_M30_M31_M32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M29_M30_M31_M32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M29_M30_M31_M32& M23_M29_M30_M31_M32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M29_M30_M31_M32_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M29_M30_M31_M32::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M29.M30.M31.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    f4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001au) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
    f1_ = 38;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M29_M30_M31_M32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M23.M29.M30.M31.M32.E1 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M23_M29_M30_M31_M32_E1_IsValid(val))) {
            _internal_set_f1(static_cast<::hyperprotobench::M23_M29_M30_M31_M32_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M29_M30_M31_M32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M29.M30.M31.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M23.M29.M30.M31.M32.E1 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_f1(), target);
  }

  // optional bool f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional bytes f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M29.M30.M31.M32)
  return target;
}

size_t M23_M29_M30_M31_M32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M29.M30.M31.M32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003au) {
    // optional bytes f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional bool f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M23.M29.M30.M31.M32.E1 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M29_M30_M31_M32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M29.M30.M31.M32)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M29_M30_M31_M32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M29_M30_M31_M32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M29.M30.M31.M32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M29.M30.M31.M32)
    MergeFrom(*source);
  }
}

void M23_M29_M30_M31_M32::MergeFrom(const M23_M29_M30_M31_M32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M29.M30.M31.M32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003au) {
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M29_M30_M31_M32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M29.M30.M31.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M29_M30_M31_M32::CopyFrom(const M23_M29_M30_M31_M32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M29.M30.M31.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M29_M30_M31_M32::IsInitialized() const {
  return true;
}

void M23_M29_M30_M31_M32::InternalSwap(M23_M29_M30_M31_M32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M29_M30_M31_M32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M29_M30_M31::InitAsDefaultInstance() {
  ::hyperprotobench::_M23_M29_M30_M31_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M23_M29_M30_M31_M32*>(
      ::hyperprotobench::M23_M29_M30_M31_M32::internal_default_instance());
}
class M23_M29_M30_M31::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M29_M30_M31>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M23_M29_M30_M31_M32& f7(const M23_M29_M30_M31* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::hyperprotobench::M23_M29_M30_M31_M32&
M23_M29_M30_M31::_Internal::f7(const M23_M29_M30_M31* msg) {
  return *msg->f7_;
}
void M23_M29_M30_M31::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M23_M29_M30_M31_M32* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M30.M31.f7)
}
M23_M29_M30_M31::M23_M29_M30_M31()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M29.M30.M31)
}
M23_M29_M30_M31::M23_M29_M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M29.M30.M31)
}
M23_M29_M30_M31::M23_M29_M30_M31(const M23_M29_M30_M31& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M23_M29_M30_M31_M32(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M29.M30.M31)
}

void M23_M29_M30_M31::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M29_M30_M31_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f7_)) + sizeof(f4_));
}

M23_M29_M30_M31::~M23_M29_M30_M31() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M29.M30.M31)
  SharedDtor();
}

void M23_M29_M30_M31::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f7_;
}

void M23_M29_M30_M31::ArenaDtor(void* object) {
  M23_M29_M30_M31* _this = reinterpret_cast< M23_M29_M30_M31* >(object);
  (void)_this;
}
void M23_M29_M30_M31::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M29_M30_M31::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M29_M30_M31& M23_M29_M30_M31::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M29_M30_M31_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M29_M30_M31::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M29.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00003000u) {
    if (cached_has_bits & 0x00001000u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  if (cached_has_bits & 0x00000082u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M29_M30_M31::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M23.M29.M30.M31.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M29.M30.M31.M32 f7 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M29_M30_M31::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M29.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional float f2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_f2(), target);
  }

  // optional int32 f3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f3(), target);
  }

  // optional int32 f4 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f4(), target);
  }

  // optional bool f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_f5(), target);
  }

  // optional string f6 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M23.M29.M30.M31.f6");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M23.M29.M30.M31.M32 f7 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::f7(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M29.M30.M31)
  return target;
}

size_t M23_M29_M30_M31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M29.M30.M31)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00003000u) {
    // optional string f6 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional .hyperprotobench.M23.M29.M30.M31.M32 f7 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  if (cached_has_bits & 0x00000082u) {
    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional float f2 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool f5 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 f3 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f4 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M29_M30_M31::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M29.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M29_M30_M31* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M29_M30_M31>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M29.M30.M31)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M29.M30.M31)
    MergeFrom(*source);
  }
}

void M23_M29_M30_M31::MergeFrom(const M23_M29_M30_M31& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M29.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00003000u) {
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_f7()->::hyperprotobench::M23_M29_M30_M31_M32::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000080u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000400u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000100u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000200u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M29_M30_M31::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M29.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M29_M30_M31::CopyFrom(const M23_M29_M30_M31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M29.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M29_M30_M31::IsInitialized() const {
  return true;
}

void M23_M29_M30_M31::InternalSwap(M23_M29_M30_M31* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f5_, other->f5_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M29_M30_M31::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M29_M30::InitAsDefaultInstance() {
  ::hyperprotobench::_M23_M29_M30_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M23_M29_M30_M31*>(
      ::hyperprotobench::M23_M29_M30_M31::internal_default_instance());
}
class M23_M29_M30::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M29_M30>()._has_bits_);
  static const ::hyperprotobench::M23_M29_M30_M31& f1(const M23_M29_M30* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M23_M29_M30_M31&
M23_M29_M30::_Internal::f1(const M23_M29_M30* msg) {
  return *msg->f1_;
}
void M23_M29_M30::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M23_M29_M30_M31* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M30.f1)
}
M23_M29_M30::M23_M29_M30()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M29.M30)
}
M23_M29_M30::M23_M29_M30(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M29.M30)
}
M23_M29_M30::M23_M29_M30(const M23_M29_M30& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M23_M29_M30_M31(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M29.M30)
}

void M23_M29_M30::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M29_M30_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M23_M29_M30::~M23_M29_M30() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M29.M30)
  SharedDtor();
}

void M23_M29_M30::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M23_M29_M30::ArenaDtor(void* object) {
  M23_M29_M30* _this = reinterpret_cast< M23_M29_M30* >(object);
  (void)_this;
}
void M23_M29_M30::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M29_M30::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M29_M30& M23_M29_M30::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M29_M30_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M29_M30::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M29.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M29_M30::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M23.M29.M30.M31 f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M29_M30::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M29.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M23.M29.M30.M31 f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f1(this), target, stream);
  }

  // optional uint64 f2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M29.M30)
  return target;
}

size_t M23_M29_M30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M29.M30)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M23.M29.M30.M31 f1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional uint64 f2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M29_M30::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M29.M30)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M29_M30* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M29_M30>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M29.M30)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M29.M30)
    MergeFrom(*source);
  }
}

void M23_M29_M30::MergeFrom(const M23_M29_M30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M29.M30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M23_M29_M30_M31::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M29_M30::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M29.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M29_M30::CopyFrom(const M23_M29_M30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M29.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M29_M30::IsInitialized() const {
  return true;
}

void M23_M29_M30::InternalSwap(M23_M29_M30* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M29_M30::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M29_M33::InitAsDefaultInstance() {
}
class M23_M29_M33::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M29_M33>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M23_M29_M33::M23_M29_M33()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M29.M33)
}
M23_M29_M33::M23_M29_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M29.M33)
}
M23_M29_M33::M23_M29_M33(const M23_M29_M33& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M29.M33)
}

void M23_M29_M33::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M29_M33_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = 0;
}

M23_M29_M33::~M23_M29_M33() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M29.M33)
  SharedDtor();
}

void M23_M29_M33::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M23_M29_M33::ArenaDtor(void* object) {
  M23_M29_M33* _this = reinterpret_cast< M23_M29_M33* >(object);
  (void)_this;
}
void M23_M29_M33::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M29_M33::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M29_M33& M23_M29_M33::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M29_M33_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M29_M33::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M29.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M29_M33::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M29_M33::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M29.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional bytes f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M29.M33)
  return target;
}

size_t M23_M29_M33::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M29.M33)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional bytes f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M29_M33::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M29.M33)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M29_M33* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M29_M33>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M29.M33)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M29.M33)
    MergeFrom(*source);
  }
}

void M23_M29_M33::MergeFrom(const M23_M29_M33& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M29.M33)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M29_M33::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M29.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M29_M33::CopyFrom(const M23_M29_M33& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M29.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M29_M33::IsInitialized() const {
  return true;
}

void M23_M29_M33::InternalSwap(M23_M29_M33* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M29_M33::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23_M29::InitAsDefaultInstance() {
  ::hyperprotobench::_M23_M29_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M23_M29_M30*>(
      ::hyperprotobench::M23_M29_M30::internal_default_instance());
  ::hyperprotobench::_M23_M29_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M23_M29_M33*>(
      ::hyperprotobench::M23_M29_M33::internal_default_instance());
}
class M23_M29::_Internal {
 public:
  using HasBits = decltype(std::declval<M23_M29>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M23_M29_M30& f2(const M23_M29* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hyperprotobench::M23_M29_M33& f4(const M23_M29* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M23_M29_M30&
M23_M29::_Internal::f2(const M23_M29* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M23_M29_M33&
M23_M29::_Internal::f4(const M23_M29* msg) {
  return *msg->f4_;
}
void M23_M29::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M23_M29_M30* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.f2)
}
void M23_M29::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M23_M29_M33* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.f4)
}
M23_M29::M23_M29()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23.M29)
}
M23_M29::M23_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23.M29)
}
M23_M29::M23_M29(const M23_M29& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M23_M29_M30(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M23_M29_M33(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23.M29)
}

void M23_M29::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_M29_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
}

M23_M29::~M23_M29() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23.M29)
  SharedDtor();
}

void M23_M29::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f4_;
}

void M23_M29::ArenaDtor(void* object) {
  M23_M29* _this = reinterpret_cast< M23_M29* >(object);
  (void)_this;
}
void M23_M29::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23_M29::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23_M29& M23_M29::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_M29_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23_M29::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000200u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000050u) {
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x000000a2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23_M29::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M29.M30 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M29.M33 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M23.M29.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23_M29::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M23.M29.M30 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M23.M29.M33 f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f4(this), target, stream);
  }

  // optional float f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_f5(), target);
  }

  // optional string f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M23.M29.f6");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23.M29)
  return target;
}

size_t M23_M29::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23.M29)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f6 = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x000000f2u) {
    // optional .hyperprotobench.M23.M29.M30 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M23.M29.M33 f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional float f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23_M29::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23.M29)
  GOOGLE_DCHECK_NE(&from, this);
  const M23_M29* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23_M29>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23.M29)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23.M29)
    MergeFrom(*source);
  }
}

void M23_M29::MergeFrom(const M23_M29& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23.M29)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f6()) {
    _internal_set_f6(from._internal_f6());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000f2u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M23_M29_M30::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_f4()->::hyperprotobench::M23_M29_M33::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23_M29::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23_M29::CopyFrom(const M23_M29& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23_M29::IsInitialized() const {
  return true;
}

void M23_M29::InternalSwap(M23_M29* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23_M29::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M23::InitAsDefaultInstance() {
  ::hyperprotobench::_M23_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M23_M24*>(
      ::hyperprotobench::M23_M24::internal_default_instance());
  ::hyperprotobench::_M23_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M23_M28*>(
      ::hyperprotobench::M23_M28::internal_default_instance());
  ::hyperprotobench::_M23_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M23_M29*>(
      ::hyperprotobench::M23_M29::internal_default_instance());
}
class M23::_Internal {
 public:
  using HasBits = decltype(std::declval<M23>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M23_M24& f2(const M23* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M23_M28& f6(const M23* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hyperprotobench::M23_M29& f7(const M23* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::hyperprotobench::M23_M24&
M23::_Internal::f2(const M23* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M23_M28&
M23::_Internal::f6(const M23* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M23_M29&
M23::_Internal::f7(const M23* msg) {
  return *msg->f7_;
}
void M23::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M23_M24* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.f2)
}
void M23::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M23_M28* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.f6)
}
void M23::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M23_M29* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.f7)
}
M23::M23()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M23)
}
M23::M23(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M23)
}
M23::M23(const M23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M23_M24(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M23_M28(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M23_M29(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M23)
}

void M23::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M23_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f10_));
}

M23::~M23() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M23)
  SharedDtor();
}

void M23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f7_;
}

void M23::ArenaDtor(void* object) {
  M23* _this = reinterpret_cast< M23* >(object);
  (void)_this;
}
void M23::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M23::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M23& M23::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M23_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M23::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(f6_ != nullptr);
      f6_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  if (cached_has_bits & 0x0000005au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00007000u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M23::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M24 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M28 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M23.M29 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f9 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M23::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M23.M24 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f3(), target);
  }

  // optional float f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f4(), target);
  }

  // optional int32 f5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M23.M28 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f6(this), target, stream);
  }

  // optional .hyperprotobench.M23.M29 f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f7(this), target, stream);
  }

  // optional int64 f8 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f8(), target);
  }

  // optional float f9 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_f9(), target);
  }

  // optional int32 f10 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M23)
  return target;
}

size_t M23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M23)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hyperprotobench.M23.M24 f2 = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  if (cached_has_bits & 0x00000300u) {
    // optional .hyperprotobench.M23.M28 f6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f6_);
    }

    // optional .hyperprotobench.M23.M29 f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  if (cached_has_bits & 0x0000005au) {
    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional float f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 f5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00007000u) {
    // optional int64 f8 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional float f9 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional int32 f10 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f10());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M23::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M23)
  GOOGLE_DCHECK_NE(&from, this);
  const M23* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M23>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M23)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M23)
    MergeFrom(*source);
  }
}

void M23::MergeFrom(const M23& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M23)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::hyperprotobench::M23_M24::MergeFrom(from._internal_f2());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_f6()->::hyperprotobench::M23_M28::MergeFrom(from._internal_f6());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_f7()->::hyperprotobench::M23_M29::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x0000005au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007000u) {
    if (cached_has_bits & 0x00001000u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00002000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00004000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M23::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M23::CopyFrom(const M23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M23::IsInitialized() const {
  return true;
}

void M23::InternalSwap(M23* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M23::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M35::InitAsDefaultInstance() {
}
class M34_M35::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M35>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M34_M35::M34_M35()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M35)
}
M34_M35::M34_M35(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M35)
}
M34_M35::M34_M35(const M34_M35& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M35)
}

void M34_M35::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M34_M35::~M34_M35() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M35)
  SharedDtor();
}

void M34_M35::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M34_M35::ArenaDtor(void* object) {
  M34_M35* _this = reinterpret_cast< M34_M35* >(object);
  (void)_this;
}
void M34_M35::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M35::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M35& M34_M35::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M35_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M35::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M35::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M35::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M35)
  return target;
}

size_t M34_M35::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M35)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M35::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M35)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M35* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M35>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M35)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M35)
    MergeFrom(*source);
  }
}

void M34_M35::MergeFrom(const M34_M35& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M35)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M34_M35::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M35::CopyFrom(const M34_M35& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M35::IsInitialized() const {
  return true;
}

void M34_M35::InternalSwap(M34_M35* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M35::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M36::InitAsDefaultInstance() {
}
class M34_M36::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M36>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

M34_M36::M34_M36()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M36)
}
M34_M36::M34_M36(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M36)
}
M34_M36::M34_M36(const M34_M36& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M36)
}

void M34_M36::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M36_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M34_M36::~M34_M36() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M36)
  SharedDtor();
}

void M34_M36::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M34_M36::ArenaDtor(void* object) {
  M34_M36* _this = reinterpret_cast< M34_M36* >(object);
  (void)_this;
}
void M34_M36::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M36::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M36& M34_M36::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M36_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M36::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000072u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M36::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M36::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional int32 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f3(), target);
  }

  // optional uint32 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_f4(), target);
  }

  // optional int32 f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M36)
  return target;
}

size_t M34_M36::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M36)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007au) {
    // optional bytes f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional uint64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional uint32 f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_f4());
    }

    // optional int32 f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M36::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M36)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M36* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M36>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M36)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M36)
    MergeFrom(*source);
  }
}

void M34_M36::MergeFrom(const M34_M36& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M36)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M36::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M36::CopyFrom(const M34_M36& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M36::IsInitialized() const {
  return true;
}

void M34_M36::InternalSwap(M34_M36* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M36::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M37_M38_M39_M40_M41::InitAsDefaultInstance() {
}
class M34_M37_M38_M39_M40_M41::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M37_M38_M39_M40_M41>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

M34_M37_M38_M39_M40_M41::M34_M37_M38_M39_M40_M41()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M37.M38.M39.M40.M41)
}
M34_M37_M38_M39_M40_M41::M34_M37_M38_M39_M40_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f8_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M37.M38.M39.M40.M41)
}
M34_M37_M38_M39_M40_M41::M34_M37_M38_M39_M40_M41(const M34_M37_M38_M39_M40_M41& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f8_(from.f8_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M37.M38.M39.M40.M41)
}

void M34_M37_M38_M39_M40_M41::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
}

M34_M37_M38_M39_M40_M41::~M34_M37_M38_M39_M40_M41() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M37.M38.M39.M40.M41)
  SharedDtor();
}

void M34_M37_M38_M39_M40_M41::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M34_M37_M38_M39_M40_M41::ArenaDtor(void* object) {
  M34_M37_M38_M39_M40_M41* _this = reinterpret_cast< M34_M37_M38_M39_M40_M41* >(object);
  (void)_this;
}
void M34_M37_M38_M39_M40_M41::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M37_M38_M39_M40_M41::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M37_M38_M39_M40_M41& M34_M37_M38_M39_M40_M41::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M37_M38_M39_M40_M41_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M37_M38_M39_M40_M41::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f8_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000090u) {
    if (cached_has_bits & 0x00000010u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00000100u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      f9_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00009800u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M37_M38_M39_M40_M41::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M34.M37.M38.M39.M40.M41.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M34.M37.M38.M39.M40.M41.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f8();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M34.M37.M38.M39.M40.M41.f8");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f10 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M37_M38_M39_M40_M41::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  // optional string f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M34.M37.M38.M39.M40.M41.f3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f3(), target);
  }

  // optional string f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M34.M37.M38.M39.M40.M41.f4");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f4(), target);
  }

  // optional bytes f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f5(), target);
  }

  // optional float f6 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_f6(), target);
  }

  // optional int32 f7 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f7(), target);
  }

  // repeated string f8 = 13;
  for (int i = 0, n = this->_internal_f8_size(); i < n; i++) {
    const auto& s = this->_internal_f8(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M34.M37.M38.M39.M40.M41.f8");
    target = stream->WriteString(13, s, target);
  }

  // optional bytes f9 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_f9(), target);
  }

  // optional uint64 f10 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M37.M38.M39.M40.M41)
  return target;
}

size_t M34_M37_M38_M39_M40_M41::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string f8 = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f8_.size());
  for (int i = 0, n = f8_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      f8_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000090u) {
    // optional string f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional string f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00004100u) {
    // optional bytes f5 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional bytes f9 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

  }
  if (cached_has_bits & 0x0000000au) {
    // optional float f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (cached_has_bits & 0x00009800u) {
    // optional float f6 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 f7 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional uint64 f10 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f10());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M37_M38_M39_M40_M41::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M37_M38_M39_M40_M41* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M37_M38_M39_M40_M41>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M37.M38.M39.M40.M41)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M37.M38.M39.M40.M41)
    MergeFrom(*source);
  }
}

void M34_M37_M38_M39_M40_M41::MergeFrom(const M34_M37_M38_M39_M40_M41& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f8_.MergeFrom(from.f8_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000090u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f4(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_f9(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00009800u) {
    if (cached_has_bits & 0x00000800u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00001000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00008000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M37_M38_M39_M40_M41::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M37_M38_M39_M40_M41::CopyFrom(const M34_M37_M38_M39_M40_M41& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M37.M38.M39.M40.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M37_M38_M39_M40_M41::IsInitialized() const {
  return true;
}

void M34_M37_M38_M39_M40_M41::InternalSwap(M34_M37_M38_M39_M40_M41* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f8_.InternalSwap(&other->f8_);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M37_M38_M39_M40_M41::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M37_M38_M39_M40::InitAsDefaultInstance() {
  ::hyperprotobench::_M34_M37_M38_M39_M40_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M34_M37_M38_M39_M40_M41*>(
      ::hyperprotobench::M34_M37_M38_M39_M40_M41::internal_default_instance());
}
class M34_M37_M38_M39_M40::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M37_M38_M39_M40>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M34_M37_M38_M39_M40_M41& f2(const M34_M37_M38_M39_M40* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M34_M37_M38_M39_M40_M41&
M34_M37_M38_M39_M40::_Internal::f2(const M34_M37_M38_M39_M40* msg) {
  return *msg->f2_;
}
void M34_M37_M38_M39_M40::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M34_M37_M38_M39_M40_M41* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.f2)
}
M34_M37_M38_M39_M40::M34_M37_M38_M39_M40()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M37.M38.M39.M40)
}
M34_M37_M38_M39_M40::M34_M37_M38_M39_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M37.M38.M39.M40)
}
M34_M37_M38_M39_M40::M34_M37_M38_M39_M40(const M34_M37_M38_M39_M40& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M34_M37_M38_M39_M40_M41(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M37.M38.M39.M40)
}

void M34_M37_M38_M39_M40::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M37_M38_M39_M40_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M34_M37_M38_M39_M40::~M34_M37_M38_M39_M40() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M37.M38.M39.M40)
  SharedDtor();
}

void M34_M37_M38_M39_M40::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M34_M37_M38_M39_M40::ArenaDtor(void* object) {
  M34_M37_M38_M39_M40* _this = reinterpret_cast< M34_M37_M38_M39_M40* >(object);
  (void)_this;
}
void M34_M37_M38_M39_M40::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M37_M38_M39_M40::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M37_M38_M39_M40& M34_M37_M38_M39_M40::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M37_M38_M39_M40_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M37_M38_M39_M40::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M37.M38.M39.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M37_M38_M39_M40::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M37.M38.M39.M40.M41 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M37_M38_M39_M40::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M37.M38.M39.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M34.M37.M38.M39.M40.M41 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M37.M38.M39.M40)
  return target;
}

size_t M34_M37_M38_M39_M40::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M37.M38.M39.M40)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional .hyperprotobench.M34.M37.M38.M39.M40.M41 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M37_M38_M39_M40::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M37.M38.M39.M40)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M37_M38_M39_M40* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M37_M38_M39_M40>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M37.M38.M39.M40)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M37.M38.M39.M40)
    MergeFrom(*source);
  }
}

void M34_M37_M38_M39_M40::MergeFrom(const M34_M37_M38_M39_M40& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M37.M38.M39.M40)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M34_M37_M38_M39_M40_M41::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M37_M38_M39_M40::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M37.M38.M39.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M37_M38_M39_M40::CopyFrom(const M34_M37_M38_M39_M40& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M37.M38.M39.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M37_M38_M39_M40::IsInitialized() const {
  return true;
}

void M34_M37_M38_M39_M40::InternalSwap(M34_M37_M38_M39_M40* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M37_M38_M39_M40::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M37_M38_M39::InitAsDefaultInstance() {
  ::hyperprotobench::_M34_M37_M38_M39_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M34_M37_M38_M39_M40*>(
      ::hyperprotobench::M34_M37_M38_M39_M40::internal_default_instance());
}
class M34_M37_M38_M39::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M37_M38_M39>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M34_M37_M38_M39_M40& f2(const M34_M37_M38_M39* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M34_M37_M38_M39_M40&
M34_M37_M38_M39::_Internal::f2(const M34_M37_M38_M39* msg) {
  return *msg->f2_;
}
void M34_M37_M38_M39::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M34_M37_M38_M39_M40* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.f2)
}
M34_M37_M38_M39::M34_M37_M38_M39()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M37.M38.M39)
}
M34_M37_M38_M39::M34_M37_M38_M39(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M37.M38.M39)
}
M34_M37_M38_M39::M34_M37_M38_M39(const M34_M37_M38_M39& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M34_M37_M38_M39_M40(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M37.M38.M39)
}

void M34_M37_M38_M39::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M37_M38_M39_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
}

M34_M37_M38_M39::~M34_M37_M38_M39() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M37.M38.M39)
  SharedDtor();
}

void M34_M37_M38_M39::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M34_M37_M38_M39::ArenaDtor(void* object) {
  M34_M37_M38_M39* _this = reinterpret_cast< M34_M37_M38_M39* >(object);
  (void)_this;
}
void M34_M37_M38_M39::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M37_M38_M39::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M37_M38_M39& M34_M37_M38_M39::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M37_M38_M39_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M37_M38_M39::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M37.M38.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f3_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M37_M38_M39::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M34.M37.M38.M39.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M37.M38.M39.M40 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M37_M38_M39::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M37.M38.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M34.M37.M38.M39.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M34.M37.M38.M39.M40 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M37.M38.M39)
  return target;
}

size_t M34_M37_M38_M39::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M37.M38.M39)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M34.M37.M38.M39.M40 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M37_M38_M39::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M37.M38.M39)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M37_M38_M39* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M37_M38_M39>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M37.M38.M39)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M37.M38.M39)
    MergeFrom(*source);
  }
}

void M34_M37_M38_M39::MergeFrom(const M34_M37_M38_M39& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M37.M38.M39)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M34_M37_M38_M39_M40::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M37_M38_M39::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M37.M38.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M37_M38_M39::CopyFrom(const M34_M37_M38_M39& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M37.M38.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M37_M38_M39::IsInitialized() const {
  return true;
}

void M34_M37_M38_M39::InternalSwap(M34_M37_M38_M39* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M37_M38_M39::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M37_M38::InitAsDefaultInstance() {
  ::hyperprotobench::_M34_M37_M38_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M34_M37_M38_M39*>(
      ::hyperprotobench::M34_M37_M38_M39::internal_default_instance());
}
class M34_M37_M38::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M37_M38>()._has_bits_);
  static const ::hyperprotobench::M34_M37_M38_M39& f1(const M34_M37_M38* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::hyperprotobench::M34_M37_M38_M39&
M34_M37_M38::_Internal::f1(const M34_M37_M38* msg) {
  return *msg->f1_;
}
void M34_M37_M38::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M34_M37_M38_M39* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.f1)
}
M34_M37_M38::M34_M37_M38()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M37.M38)
}
M34_M37_M38::M34_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M37.M38)
}
M34_M37_M38::M34_M37_M38(const M34_M37_M38& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M34_M37_M38_M39(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M37.M38)
}

void M34_M37_M38::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M37_M38_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f8_));
  f6_ = 99;
}

M34_M37_M38::~M34_M37_M38() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M37.M38)
  SharedDtor();
}

void M34_M37_M38::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M34_M37_M38::ArenaDtor(void* object) {
  M34_M37_M38* _this = reinterpret_cast< M34_M37_M38* >(object);
  (void)_this;
}
void M34_M37_M38::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M37_M38::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M37_M38& M34_M37_M38::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M37_M38_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M37_M38::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00000e00u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f8_));
    f6_ = 99;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M37_M38::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M34.M37.M38.M39 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M37.M38.E1 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M34_M37_M38_E1_IsValid(val))) {
            _internal_set_f6(static_cast<::hyperprotobench::M34_M37_M38_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M37_M38::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M34.M37.M38.M39 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional int64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f3(), target);
  }

  // optional int32 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f4(), target);
  }

  // optional int32 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M34.M37.M38.E1 f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_f6(), target);
  }

  // optional int32 f7 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f7(), target);
  }

  // optional int64 f8 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M37.M38)
  return target;
}

size_t M34_M37_M38::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M37.M38)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .hyperprotobench.M34.M37.M38.M39 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional int32 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00000e00u) {
    // optional int32 f7 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional int64 f8 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional .hyperprotobench.M34.M37.M38.E1 f6 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M37_M38::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M37_M38* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M37_M38>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M37.M38)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M37.M38)
    MergeFrom(*source);
  }
}

void M34_M37_M38::MergeFrom(const M34_M37_M38& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M34_M37_M38_M39::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000e00u) {
    if (cached_has_bits & 0x00000400u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000800u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000200u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M37_M38::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M37_M38::CopyFrom(const M34_M37_M38& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M37_M38::IsInitialized() const {
  return true;
}

void M34_M37_M38::InternalSwap(M34_M37_M38* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M37_M38::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M37::InitAsDefaultInstance() {
  ::hyperprotobench::_M34_M37_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M34_M37_M38*>(
      ::hyperprotobench::M34_M37_M38::internal_default_instance());
}
class M34_M37::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M37>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M34_M37_M38& f3(const M34_M37* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M34_M37_M38&
M34_M37::_Internal::f3(const M34_M37* msg) {
  return *msg->f3_;
}
void M34_M37::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M34_M37_M38* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.f3)
}
M34_M37::M34_M37()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M37)
}
M34_M37::M34_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M37)
}
M34_M37::M34_M37(const M34_M37& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M34_M37_M38(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M37)
}

void M34_M37::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_M37_benchmark_2eproto.base);
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f2_));
}

M34_M37::~M34_M37() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M37)
  SharedDtor();
}

void M34_M37::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f3_;
}

void M34_M37::ArenaDtor(void* object) {
  M34_M37* _this = reinterpret_cast< M34_M37* >(object);
  (void)_this;
}
void M34_M37::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M37::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M37& M34_M37::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M37_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M37::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f3_ != nullptr);
    f3_->Clear();
  }
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M37::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M37.M38 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M37::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f1(), target);
  }

  // optional float f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M34.M37.M38 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M37)
  return target;
}

size_t M34_M37::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M37)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional .hyperprotobench.M34.M37.M38 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional float f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M37::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M37)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M37* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M37>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M37)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M37)
    MergeFrom(*source);
  }
}

void M34_M37::MergeFrom(const M34_M37& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M37)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f3()->::hyperprotobench::M34_M37_M38::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M34_M37::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M37::CopyFrom(const M34_M37& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M37::IsInitialized() const {
  return true;
}

void M34_M37::InternalSwap(M34_M37* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M37::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34_M42::InitAsDefaultInstance() {
}
class M34_M42::_Internal {
 public:
  using HasBits = decltype(std::declval<M34_M42>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M34_M42::M34_M42()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34.M42)
}
M34_M42::M34_M42(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34.M42)
}
M34_M42::M34_M42(const M34_M42& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34.M42)
}

void M34_M42::SharedCtor() {
  f1_ = 0;
}

M34_M42::~M34_M42() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34.M42)
  SharedDtor();
}

void M34_M42::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M34_M42::ArenaDtor(void* object) {
  M34_M42* _this = reinterpret_cast< M34_M42* >(object);
  (void)_this;
}
void M34_M42::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34_M42::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34_M42& M34_M42::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_M42_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34_M42::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34_M42::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34_M42::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34.M42)
  return target;
}

size_t M34_M42::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34.M42)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34_M42::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34.M42)
  GOOGLE_DCHECK_NE(&from, this);
  const M34_M42* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34_M42>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34.M42)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34.M42)
    MergeFrom(*source);
  }
}

void M34_M42::MergeFrom(const M34_M42& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34.M42)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M34_M42::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34_M42::CopyFrom(const M34_M42& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34_M42::IsInitialized() const {
  return true;
}

void M34_M42::InternalSwap(M34_M42* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34_M42::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M34::InitAsDefaultInstance() {
  ::hyperprotobench::_M34_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M34_M35*>(
      ::hyperprotobench::M34_M35::internal_default_instance());
  ::hyperprotobench::_M34_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M34_M36*>(
      ::hyperprotobench::M34_M36::internal_default_instance());
  ::hyperprotobench::_M34_default_instance_._instance.get_mutable()->f11_ = const_cast< ::hyperprotobench::M34_M37*>(
      ::hyperprotobench::M34_M37::internal_default_instance());
  ::hyperprotobench::_M34_default_instance_._instance.get_mutable()->f14_ = const_cast< ::hyperprotobench::M34_M42*>(
      ::hyperprotobench::M34_M42::internal_default_instance());
}
class M34::_Internal {
 public:
  using HasBits = decltype(std::declval<M34>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M34_M35& f2(const M34* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M34_M36& f10(const M34* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::hyperprotobench::M34_M37& f11(const M34* msg);
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::hyperprotobench::M34_M42& f14(const M34* msg);
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::hyperprotobench::M34_M35&
M34::_Internal::f2(const M34* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M34_M36&
M34::_Internal::f10(const M34* msg) {
  return *msg->f10_;
}
const ::hyperprotobench::M34_M37&
M34::_Internal::f11(const M34* msg) {
  return *msg->f11_;
}
const ::hyperprotobench::M34_M42&
M34::_Internal::f14(const M34* msg) {
  return *msg->f14_;
}
void M34::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M34_M35* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.f2)
}
void M34::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M34_M36* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.f10)
}
void M34::unsafe_arena_set_allocated_f11(
    ::hyperprotobench::M34_M37* f11) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f11_;
  }
  f11_ = f11;
  if (f11) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.f11)
}
void M34::unsafe_arena_set_allocated_f14(
    ::hyperprotobench::M34_M42* f14) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f14_;
  }
  f14_ = f14;
  if (f14) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.f14)
}
M34::M34()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M34)
}
M34::M34(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M34)
}
M34::M34(const M34& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M34_M35(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M34_M36(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  if (from._internal_has_f11()) {
    f11_ = new ::hyperprotobench::M34_M37(*from.f11_);
  } else {
    f11_ = nullptr;
  }
  if (from._internal_has_f14()) {
    f14_ = new ::hyperprotobench::M34_M42(*from.f14_);
  } else {
    f14_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M34)
}

void M34::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M34_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f13_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f13_));
  f1_ = 2;
  f9_ = 68;
}

M34::~M34() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M34)
  SharedDtor();
}

void M34::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f10_;
  if (this != internal_default_instance()) delete f11_;
  if (this != internal_default_instance()) delete f14_;
}

void M34::ArenaDtor(void* object) {
  M34* _this = reinterpret_cast< M34* >(object);
  (void)_this;
}
void M34::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M34::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M34& M34::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M34_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M34::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    if (cached_has_bits & 0x00000020u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x0000a000u) {
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(f10_ != nullptr);
      f10_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(f11_ != nullptr);
      f11_->Clear();
    }
  }
  if (cached_has_bits & 0x00100000u) {
    GOOGLE_DCHECK(f14_ != nullptr);
    f14_->Clear();
  }
  if (cached_has_bits & 0x00000050u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f8_));
  }
  if (cached_has_bits & 0x00090000u) {
    ::memset(&f12_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f13_) -
        reinterpret_cast<char*>(&f12_)) + sizeof(f13_));
  }
  f1_ = 2;
  f9_ = 68;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M34::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M34.E1 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M34_E1_IsValid(val))) {
            _internal_set_f1(static_cast<::hyperprotobench::M34_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M35 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M34.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.E2 f9 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M34_E2_IsValid(val))) {
            _internal_set_f9(static_cast<::hyperprotobench::M34_E2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M36 f10 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M37 f11 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_f11(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f12 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f13 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_f13(&has_bits);
          f13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M34.M42 f14 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_f14(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M34::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M34.E1 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M34.M35 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional string f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M34.f4");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f4(), target);
  }

  // optional int32 f5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f5(), target);
  }

  // optional int32 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f6(), target);
  }

  // optional int32 f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f7(), target);
  }

  // optional int64 f8 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M34.E2 f9 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_f9(), target);
  }

  // optional .hyperprotobench.M34.M36 f10 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::f10(this), target, stream);
  }

  // optional .hyperprotobench.M34.M37 f11 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::f11(this), target, stream);
  }

  // optional int32 f12 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f12(), target);
  }

  // optional uint64 f13 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_f13(), target);
  }

  // optional .hyperprotobench.M34.M42 f14 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::f14(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M34)
  return target;
}

size_t M34::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M34)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    // optional string f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

    // optional .hyperprotobench.M34.M35 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  if (cached_has_bits & 0x0000a000u) {
    // optional .hyperprotobench.M34.M36 f10 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f10_);
    }

    // optional .hyperprotobench.M34.M37 f11 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f11_);
    }

  }
  // optional .hyperprotobench.M34.M42 f14 = 21;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f14_);
  }

  if (cached_has_bits & 0x00000050u) {
    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 f6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

    // optional int32 f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional int64 f8 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

  }
  if (cached_has_bits & 0x00090000u) {
    // optional int32 f12 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f12());
    }

    // optional uint64 f13 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f13());
    }

  }
  // optional .hyperprotobench.M34.E1 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f1());
  }

  // optional .hyperprotobench.M34.E2 f9 = 13;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M34::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M34)
  GOOGLE_DCHECK_NE(&from, this);
  const M34* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M34>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M34)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M34)
    MergeFrom(*source);
  }
}

void M34::MergeFrom(const M34& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M34)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M34_M35::MergeFrom(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x0000a000u) {
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_f10()->::hyperprotobench::M34_M36::MergeFrom(from._internal_f10());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_f11()->::hyperprotobench::M34_M37::MergeFrom(from._internal_f11());
    }
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_mutable_f14()->::hyperprotobench::M34_M42::MergeFrom(from._internal_f14());
  }
  if (cached_has_bits & 0x00000050u) {
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00090000u) {
    if (cached_has_bits & 0x00010000u) {
      f12_ = from.f12_;
    }
    if (cached_has_bits & 0x00080000u) {
      f13_ = from.f13_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00001000u) {
    _internal_set_f9(from._internal_f9());
  }
}

void M34::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M34::CopyFrom(const M34& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M34::IsInitialized() const {
  return true;
}

void M34::InternalSwap(M34* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f14_, other->f14_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f12_, other->f12_);
  swap(f13_, other->f13_);
  swap(f1_, other->f1_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M34::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44_M45::InitAsDefaultInstance() {
}
class M43_M44_M45::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44_M45>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M43_M44_M45::M43_M44_M45()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44.M45)
}
M43_M44_M45::M43_M44_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44.M45)
}
M43_M44_M45::M43_M44_M45(const M43_M44_M45& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44.M45)
}

void M43_M44_M45::SharedCtor() {
  f1_ = 0;
}

M43_M44_M45::~M43_M44_M45() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44.M45)
  SharedDtor();
}

void M43_M44_M45::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M43_M44_M45::ArenaDtor(void* object) {
  M43_M44_M45* _this = reinterpret_cast< M43_M44_M45* >(object);
  (void)_this;
}
void M43_M44_M45::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44_M45::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44_M45& M43_M44_M45::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_M45_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44_M45::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44_M45::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44_M45::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44.M45)
  return target;
}

size_t M43_M44_M45::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44.M45)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44_M45::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44.M45)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44_M45* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44_M45>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44.M45)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44.M45)
    MergeFrom(*source);
  }
}

void M43_M44_M45::MergeFrom(const M43_M44_M45& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44.M45)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M43_M44_M45::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44_M45::CopyFrom(const M43_M44_M45& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44_M45::IsInitialized() const {
  return true;
}

void M43_M44_M45::InternalSwap(M43_M44_M45* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44_M45::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44_M46::InitAsDefaultInstance() {
}
class M43_M44_M46::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44_M46>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M43_M44_M46::M43_M44_M46()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44.M46)
}
M43_M44_M46::M43_M44_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44.M46)
}
M43_M44_M46::M43_M44_M46(const M43_M44_M46& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f2_(from.f2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44.M46)
}

void M43_M44_M46::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M43_M44_M46::~M43_M44_M46() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44.M46)
  SharedDtor();
}

void M43_M44_M46::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M43_M44_M46::ArenaDtor(void* object) {
  M43_M44_M46* _this = reinterpret_cast< M43_M44_M46* >(object);
  (void)_this;
}
void M43_M44_M46::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44_M46::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44_M46& M43_M44_M46::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_M46_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44_M46::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f2_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44_M46::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hyperprotobench.M43.M44.M46.E1 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M43_M44_M46_E1_IsValid(val))) {
              _internal_add_f2(static_cast<::hyperprotobench::M43_M44_M46_E1>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_f2(), ptr, ctx, ::hyperprotobench::M43_M44_M46_E1_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44_M46::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // repeated .hyperprotobench.M43.M44.M46.E1 f2 = 2;
  for (int i = 0, n = this->_internal_f2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        2, this->_internal_f2(i), target);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44.M46)
  return target;
}

size_t M43_M44_M46::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44.M46)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hyperprotobench.M43.M44.M46.E1 f2 = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_f2_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_f2(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int64 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44_M46::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44.M46)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44_M46* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44_M46>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44.M46)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44.M46)
    MergeFrom(*source);
  }
}

void M43_M44_M46::MergeFrom(const M43_M44_M46& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44.M46)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f2_.MergeFrom(from.f2_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M44_M46::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44_M46::CopyFrom(const M43_M44_M46& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44_M46::IsInitialized() const {
  return true;
}

void M43_M44_M46::InternalSwap(M43_M44_M46* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.InternalSwap(&other->f2_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44_M46::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44_M47::InitAsDefaultInstance() {
}
class M43_M44_M47::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44_M47>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M43_M44_M47::M43_M44_M47()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44.M47)
}
M43_M44_M47::M43_M44_M47(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44.M47)
}
M43_M44_M47::M43_M44_M47(const M43_M44_M47& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44.M47)
}

void M43_M44_M47::SharedCtor() {
  f1_ = 0;
}

M43_M44_M47::~M43_M44_M47() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44.M47)
  SharedDtor();
}

void M43_M44_M47::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M43_M44_M47::ArenaDtor(void* object) {
  M43_M44_M47* _this = reinterpret_cast< M43_M44_M47* >(object);
  (void)_this;
}
void M43_M44_M47::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44_M47::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44_M47& M43_M44_M47::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_M47_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44_M47::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44.M47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44_M47::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44_M47::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44.M47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44.M47)
  return target;
}

size_t M43_M44_M47::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44.M47)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44_M47::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44.M47)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44_M47* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44_M47>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44.M47)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44.M47)
    MergeFrom(*source);
  }
}

void M43_M44_M47::MergeFrom(const M43_M44_M47& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44.M47)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M43_M44_M47::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44.M47)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44_M47::CopyFrom(const M43_M44_M47& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44.M47)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44_M47::IsInitialized() const {
  return true;
}

void M43_M44_M47::InternalSwap(M43_M44_M47* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44_M47::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M44_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M43_M44_M45*>(
      ::hyperprotobench::M43_M44_M45::internal_default_instance());
  ::hyperprotobench::_M43_M44_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M43_M44_M46*>(
      ::hyperprotobench::M43_M44_M46::internal_default_instance());
  ::hyperprotobench::_M43_M44_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M43_M44_M47*>(
      ::hyperprotobench::M43_M44_M47::internal_default_instance());
}
class M43_M44::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M43_M44_M45& f2(const M43_M44* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M43_M44_M46& f3(const M43_M44* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::hyperprotobench::M43_M44_M47& f4(const M43_M44* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::hyperprotobench::M43_M44_M45&
M43_M44::_Internal::f2(const M43_M44* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M43_M44_M46&
M43_M44::_Internal::f3(const M43_M44* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M43_M44_M47&
M43_M44::_Internal::f4(const M43_M44* msg) {
  return *msg->f4_;
}
void M43_M44::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M43_M44_M45* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f2)
}
void M43_M44::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M43_M44_M46* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f3)
}
void M43_M44::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M43_M44_M47* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f4)
}
M43_M44::M43_M44()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44)
}
M43_M44::M43_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44)
}
M43_M44::M43_M44(const M43_M44& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M43_M44_M45(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M43_M44_M46(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M43_M44_M47(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44)
}

void M43_M44::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M44_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
}

M43_M44::~M43_M44() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44)
  SharedDtor();
}

void M43_M44::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f4_;
}

void M43_M44::ArenaDtor(void* object) {
  M43_M44* _this = reinterpret_cast< M43_M44* >(object);
  (void)_this;
}
void M43_M44::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44& M43_M44::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000c00u) {
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M44.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44.M45 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44.M46 f3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44.M47 f4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M44.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M43.M44.M45 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M43.M44.M46 f3 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f3(this), target, stream);
  }

  // optional .hyperprotobench.M43.M44.M47 f4 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44)
  return target;
}

size_t M43_M44::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M43.M44.M45 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  if (cached_has_bits & 0x00000c00u) {
    // optional .hyperprotobench.M43.M44.M46 f3 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional .hyperprotobench.M43.M44.M47 f4 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44)
    MergeFrom(*source);
  }
}

void M43_M44::MergeFrom(const M43_M44& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M43_M44_M45::MergeFrom(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00000c00u) {
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f3()->::hyperprotobench::M43_M44_M46::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_f4()->::hyperprotobench::M43_M44_M47::MergeFrom(from._internal_f4());
    }
  }
}

void M43_M44::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44::CopyFrom(const M43_M44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44::IsInitialized() const {
  return true;
}

void M43_M44::InternalSwap(M43_M44* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48_M49::InitAsDefaultInstance() {
}
class M43_M48_M49::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48_M49>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M43_M48_M49::M43_M48_M49()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48.M49)
}
M43_M48_M49::M43_M48_M49(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48.M49)
}
M43_M48_M49::M43_M48_M49(const M43_M48_M49& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48.M49)
}

void M43_M48_M49::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M48_M49_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = PROTOBUF_ULONGLONG(0);
}

M43_M48_M49::~M43_M48_M49() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48.M49)
  SharedDtor();
}

void M43_M48_M49::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M43_M48_M49::ArenaDtor(void* object) {
  M43_M48_M49* _this = reinterpret_cast< M43_M48_M49* >(object);
  (void)_this;
}
void M43_M48_M49::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48_M49::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48_M49& M43_M48_M49::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_M49_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48_M49::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48.M49)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48_M49::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48_M49::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48.M49)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48.M49)
  return target;
}

size_t M43_M48_M49::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48.M49)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48_M49::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48.M49)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48_M49* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48_M49>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48.M49)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48.M49)
    MergeFrom(*source);
  }
}

void M43_M48_M49::MergeFrom(const M43_M48_M49& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48.M49)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M48_M49::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48.M49)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48_M49::CopyFrom(const M43_M48_M49& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48.M49)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48_M49::IsInitialized() const {
  return true;
}

void M43_M48_M49::InternalSwap(M43_M48_M49* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48_M49::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48_M50_M51_M52_M53::InitAsDefaultInstance() {
}
class M43_M48_M50_M51_M52_M53::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48_M50_M51_M52_M53>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M43_M48_M50_M51_M52_M53::M43_M48_M50_M51_M52_M53()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48.M50.M51.M52.M53)
}
M43_M48_M50_M51_M52_M53::M43_M48_M50_M51_M52_M53(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48.M50.M51.M52.M53)
}
M43_M48_M50_M51_M52_M53::M43_M48_M50_M51_M52_M53(const M43_M48_M50_M51_M52_M53& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48.M50.M51.M52.M53)
}

void M43_M48_M50_M51_M52_M53::SharedCtor() {
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M43_M48_M50_M51_M52_M53::~M43_M48_M50_M51_M52_M53() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48.M50.M51.M52.M53)
  SharedDtor();
}

void M43_M48_M50_M51_M52_M53::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M43_M48_M50_M51_M52_M53::ArenaDtor(void* object) {
  M43_M48_M50_M51_M52_M53* _this = reinterpret_cast< M43_M48_M50_M51_M52_M53* >(object);
  (void)_this;
}
void M43_M48_M50_M51_M52_M53::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48_M50_M51_M52_M53::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48_M50_M51_M52_M53& M43_M48_M50_M51_M52_M53::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_M50_M51_M52_M53_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48_M50_M51_M52_M53::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48_M50_M51_M52_M53::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48_M50_M51_M52_M53::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48.M50.M51.M52.M53)
  return target;
}

size_t M43_M48_M50_M51_M52_M53::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

    // optional float f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48_M50_M51_M52_M53::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48_M50_M51_M52_M53* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48_M50_M51_M52_M53>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48.M50.M51.M52.M53)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48.M50.M51.M52.M53)
    MergeFrom(*source);
  }
}

void M43_M48_M50_M51_M52_M53::MergeFrom(const M43_M48_M50_M51_M52_M53& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M48_M50_M51_M52_M53::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48_M50_M51_M52_M53::CopyFrom(const M43_M48_M50_M51_M52_M53& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48.M50.M51.M52.M53)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48_M50_M51_M52_M53::IsInitialized() const {
  return true;
}

void M43_M48_M50_M51_M52_M53::InternalSwap(M43_M48_M50_M51_M52_M53* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48_M50_M51_M52_M53::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48_M50_M51_M52::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M48_M50_M51_M52_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M43_M48_M50_M51_M52_M53*>(
      ::hyperprotobench::M43_M48_M50_M51_M52_M53::internal_default_instance());
}
class M43_M48_M50_M51_M52::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48_M50_M51_M52>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M43_M48_M50_M51_M52_M53& f5(const M43_M48_M50_M51_M52* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::hyperprotobench::M43_M48_M50_M51_M52_M53&
M43_M48_M50_M51_M52::_Internal::f5(const M43_M48_M50_M51_M52* msg) {
  return *msg->f5_;
}
void M43_M48_M50_M51_M52::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M43_M48_M50_M51_M52_M53* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.M52.f5)
}
M43_M48_M50_M51_M52::M43_M48_M50_M51_M52()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48.M50.M51.M52)
}
M43_M48_M50_M51_M52::M43_M48_M50_M51_M52(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48.M50.M51.M52)
}
M43_M48_M50_M51_M52::M43_M48_M50_M51_M52(const M43_M48_M50_M51_M52& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M43_M48_M50_M51_M52_M53(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48.M50.M51.M52)
}

void M43_M48_M50_M51_M52::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M48_M50_M51_M52_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f4_));
}

M43_M48_M50_M51_M52::~M43_M48_M50_M51_M52() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48.M50.M51.M52)
  SharedDtor();
}

void M43_M48_M50_M51_M52::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
}

void M43_M48_M50_M51_M52::ArenaDtor(void* object) {
  M43_M48_M50_M51_M52* _this = reinterpret_cast< M43_M48_M50_M51_M52* >(object);
  (void)_this;
}
void M43_M48_M50_M51_M52::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48_M50_M51_M52::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48_M50_M51_M52& M43_M48_M50_M51_M52::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_M50_M51_M52_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48_M50_M51_M52::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48.M50.M51.M52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f5_ != nullptr);
    f5_->Clear();
  }
  if (cached_has_bits & 0x00000068u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48_M50_M51_M52::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48.M50.M51.M52.M53 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48_M50_M51_M52::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48.M50.M51.M52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional float f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M43.M48.M50.M51.M52.M53 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f5(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48.M50.M51.M52)
  return target;
}

size_t M43_M48_M50_M51_M52::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48.M50.M51.M52)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  // optional .hyperprotobench.M43.M48.M50.M51.M52.M53 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f5_);
  }

  if (cached_has_bits & 0x00000068u) {
    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional float f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48_M50_M51_M52::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48.M50.M51.M52)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48_M50_M51_M52* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48_M50_M51_M52>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48.M50.M51.M52)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48.M50.M51.M52)
    MergeFrom(*source);
  }
}

void M43_M48_M50_M51_M52::MergeFrom(const M43_M48_M50_M51_M52& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48.M50.M51.M52)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
  if (from._internal_has_f5()) {
    _internal_mutable_f5()->::hyperprotobench::M43_M48_M50_M51_M52_M53::MergeFrom(from._internal_f5());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000068u) {
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M48_M50_M51_M52::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48.M50.M51.M52)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48_M50_M51_M52::CopyFrom(const M43_M48_M50_M51_M52& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48.M50.M51.M52)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48_M50_M51_M52::IsInitialized() const {
  return true;
}

void M43_M48_M50_M51_M52::InternalSwap(M43_M48_M50_M51_M52* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48_M50_M51_M52::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48_M50_M51::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M48_M50_M51_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M43_M48_M50_M51_M52*>(
      ::hyperprotobench::M43_M48_M50_M51_M52::internal_default_instance());
}
class M43_M48_M50_M51::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48_M50_M51>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M43_M48_M50_M51_M52& f6(const M43_M48_M50_M51* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::hyperprotobench::M43_M48_M50_M51_M52&
M43_M48_M50_M51::_Internal::f6(const M43_M48_M50_M51* msg) {
  return *msg->f6_;
}
void M43_M48_M50_M51::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M43_M48_M50_M51_M52* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.f6)
}
M43_M48_M50_M51::M43_M48_M50_M51()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48.M50.M51)
}
M43_M48_M50_M51::M43_M48_M50_M51(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f11_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48.M50.M51)
}
M43_M48_M50_M51::M43_M48_M50_M51(const M43_M48_M50_M51& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f11_(from.f11_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M43_M48_M50_M51_M52(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48.M50.M51)
}

void M43_M48_M50_M51::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M48_M50_M51_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f6_)) + sizeof(f9_));
  f4_ = 102;
}

M43_M48_M50_M51::~M43_M48_M50_M51() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48.M50.M51)
  SharedDtor();
}

void M43_M48_M50_M51::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f6_;
}

void M43_M48_M50_M51::ArenaDtor(void* object) {
  M43_M48_M50_M51* _this = reinterpret_cast< M43_M48_M50_M51* >(object);
  (void)_this;
}
void M43_M48_M50_M51::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48_M50_M51::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48_M50_M51& M43_M48_M50_M51::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_M50_M51_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48_M50_M51::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48.M50.M51)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f11_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00020000u) {
    f10_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f6_ != nullptr);
    f6_->Clear();
  }
  if (cached_has_bits & 0x00000088u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00003800u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f9_));
  }
  f4_ = 102;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48_M50_M51::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M48.M50.M51.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M48.M50.M51.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48.M50.M51.E1 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M43_M48_M50_M51_E1_IsValid(val))) {
            _internal_set_f4(static_cast<::hyperprotobench::M43_M48_M50_M51_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48.M50.M51.M52 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_f11();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48_M50_M51::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48.M50.M51)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M48.M50.M51.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional string f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M48.M50.M51.f2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional double f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M43.M48.M50.M51.E1 f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f4(), target);
  }

  // optional float f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M43.M48.M50.M51.M52 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f6(this), target, stream);
  }

  // optional uint64 f7 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_f7(), target);
  }

  // optional float f8 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_f8(), target);
  }

  // optional int32 f9 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_f9(), target);
  }

  // optional bytes f10 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_f10(), target);
  }

  // repeated bytes f11 = 20;
  for (int i = 0, n = this->_internal_f11_size(); i < n; i++) {
    const auto& s = this->_internal_f11(i);
    target = stream->WriteBytes(20, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48.M50.M51)
  return target;
}

size_t M43_M48_M50_M51::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48.M50.M51)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f11 = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f11_.size());
  for (int i = 0, n = f11_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f11_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

  }
  // optional bytes f10 = 18;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f10());
  }

  // optional .hyperprotobench.M43.M48.M50.M51.M52 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f6_);
  }

  if (cached_has_bits & 0x00000088u) {
    // optional double f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional float f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003800u) {
    // optional float f8 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint64 f7 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f7());
    }

    // optional int32 f9 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

  }
  // optional .hyperprotobench.M43.M48.M50.M51.E1 f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48_M50_M51::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48.M50.M51)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48_M50_M51* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48_M50_M51>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48.M50.M51)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48.M50.M51)
    MergeFrom(*source);
  }
}

void M43_M48_M50_M51::MergeFrom(const M43_M48_M50_M51& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48.M50.M51)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f11_.MergeFrom(from.f11_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00020000u) {
    _internal_set_f10(from._internal_f10());
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_f6()->::hyperprotobench::M43_M48_M50_M51_M52::MergeFrom(from._internal_f6());
  }
  if (cached_has_bits & 0x00000088u) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003800u) {
    if (cached_has_bits & 0x00001000u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000800u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00002000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000040u) {
    _internal_set_f4(from._internal_f4());
  }
}

void M43_M48_M50_M51::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48.M50.M51)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48_M50_M51::CopyFrom(const M43_M48_M50_M51& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48.M50.M51)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48_M50_M51::IsInitialized() const {
  return true;
}

void M43_M48_M50_M51::InternalSwap(M43_M48_M50_M51* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f11_.InternalSwap(&other->f11_);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f6_, other->f6_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48_M50_M51::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48_M50::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M48_M50_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M43_M48_M50_M51*>(
      ::hyperprotobench::M43_M48_M50_M51::internal_default_instance());
}
class M43_M48_M50::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48_M50>()._has_bits_);
  static const ::hyperprotobench::M43_M48_M50_M51& f1(const M43_M48_M50* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M43_M48_M50_M51&
M43_M48_M50::_Internal::f1(const M43_M48_M50* msg) {
  return *msg->f1_;
}
void M43_M48_M50::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M43_M48_M50_M51* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.f1)
}
M43_M48_M50::M43_M48_M50()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48.M50)
}
M43_M48_M50::M43_M48_M50(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48.M50)
}
M43_M48_M50::M43_M48_M50(const M43_M48_M50& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M43_M48_M50_M51(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48.M50)
}

void M43_M48_M50::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M48_M50_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M43_M48_M50::~M43_M48_M50() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48.M50)
  SharedDtor();
}

void M43_M48_M50::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M43_M48_M50::ArenaDtor(void* object) {
  M43_M48_M50* _this = reinterpret_cast< M43_M48_M50* >(object);
  (void)_this;
}
void M43_M48_M50::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48_M50::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48_M50& M43_M48_M50::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_M50_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48_M50::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48.M50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48_M50::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M43.M48.M50.M51 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48_M50::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48.M50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M43.M48.M50.M51 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional int64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48.M50)
  return target;
}

size_t M43_M48_M50::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48.M50)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M43.M48.M50.M51 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48_M50::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48.M50)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48_M50* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48_M50>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48.M50)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48.M50)
    MergeFrom(*source);
  }
}

void M43_M48_M50::MergeFrom(const M43_M48_M50& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48.M50)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M43_M48_M50_M51::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M48_M50::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48.M50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48_M50::CopyFrom(const M43_M48_M50& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48.M50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48_M50::IsInitialized() const {
  return true;
}

void M43_M48_M50::InternalSwap(M43_M48_M50* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48_M50::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M48::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M48_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M43_M48_M49*>(
      ::hyperprotobench::M43_M48_M49::internal_default_instance());
  ::hyperprotobench::_M43_M48_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M43_M48_M50*>(
      ::hyperprotobench::M43_M48_M50::internal_default_instance());
}
class M43_M48::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M48>()._has_bits_);
  static const ::hyperprotobench::M43_M48_M49& f1(const M43_M48* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::hyperprotobench::M43_M48_M50& f10(const M43_M48* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::hyperprotobench::M43_M48_M49&
M43_M48::_Internal::f1(const M43_M48* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M43_M48_M50&
M43_M48::_Internal::f10(const M43_M48* msg) {
  return *msg->f10_;
}
void M43_M48::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M43_M48_M49* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.f1)
}
void M43_M48::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M43_M48_M50* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.f10)
}
M43_M48::M43_M48()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M48)
}
M43_M48::M43_M48(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M48)
}
M43_M48::M43_M48(const M43_M48& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M43_M48_M49(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M43_M48_M50(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  ::memcpy(&f5_, &from.f5_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f5_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M48)
}

void M43_M48::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M48_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
  f2_ = 5;
}

M43_M48::~M43_M48() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M48)
  SharedDtor();
}

void M43_M48::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f10_;
}

void M43_M48::ArenaDtor(void* object) {
  M43_M48* _this = reinterpret_cast< M43_M48* >(object);
  (void)_this;
}
void M43_M48::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M48::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M48& M43_M48::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M48_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M48::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M48)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00500000u) {
    if (cached_has_bits & 0x00100000u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      f8_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(f10_ != nullptr);
    f10_->Clear();
  }
  f5_ = 0;
  if (cached_has_bits & 0x00009000u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00a00000u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f9_));
  }
  f2_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M48::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M43.M48.M49 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M43_M48_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M43_M48_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f4 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f5 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M48.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f7 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string f8 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M48.f8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f9 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48.M50 f10 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M48::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M48)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M43.M48.M49 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M43.M48.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  // optional int32 f3 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_f3(), target);
  }

  // optional float f4 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_f4(), target);
  }

  // optional float f5 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_f5(), target);
  }

  // optional string f6 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M48.f6");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_f6(), target);
  }

  // optional fixed64 f7 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(22, this->_internal_f7(), target);
  }

  // optional string f8 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f8().data(), static_cast<int>(this->_internal_f8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M48.f8");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_f8(), target);
  }

  // optional double f9 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_f9(), target);
  }

  // optional .hyperprotobench.M43.M48.M50 f10 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::f10(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M48)
  return target;
}

size_t M43_M48::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M48)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00500000u) {
    // optional string f6 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional string f8 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f8());
    }

  }
  // optional .hyperprotobench.M43.M48.M49 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // optional .hyperprotobench.M43.M48.M50 f10 = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f10_);
  }

  // optional float f5 = 19;
  if (cached_has_bits & 0x00040000u) {
    total_size += 2 + 4;
  }

  if (cached_has_bits & 0x00009000u) {
    // optional int32 f3 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional float f4 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00a00000u) {
    // optional fixed64 f7 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional double f9 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional .hyperprotobench.M43.M48.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M48::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M48)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M48* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M48>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M48)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M48)
    MergeFrom(*source);
  }
}

void M43_M48::MergeFrom(const M43_M48& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M48)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00500000u) {
    if (cached_has_bits & 0x00100000u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_f8(from._internal_f8());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_mutable_f1()->::hyperprotobench::M43_M48_M49::MergeFrom(from._internal_f1());
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_mutable_f10()->::hyperprotobench::M43_M48_M50::MergeFrom(from._internal_f10());
  }
  if (cached_has_bits & 0x00040000u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00009000u) {
    if (cached_has_bits & 0x00001000u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00008000u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00a00000u) {
    if (cached_has_bits & 0x00200000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00800000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_f2(from._internal_f2());
  }
}

void M43_M48::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M48)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M48::CopyFrom(const M43_M48& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M48)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M48::IsInitialized() const {
  return true;
}

void M43_M48::InternalSwap(M43_M48* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f10_, other->f10_);
  swap(f5_, other->f5_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M48::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M43_M44*>(
      ::hyperprotobench::M43_M44::internal_default_instance());
  ::hyperprotobench::_M43_default_instance_._instance.get_mutable()->f12_ = const_cast< ::hyperprotobench::M43_M48*>(
      ::hyperprotobench::M43_M48::internal_default_instance());
}
class M43::_Internal {
 public:
  using HasBits = decltype(std::declval<M43>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M43_M44& f3(const M43* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::hyperprotobench::M43_M48& f12(const M43* msg);
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::hyperprotobench::M43_M44&
M43::_Internal::f3(const M43* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M43_M48&
M43::_Internal::f12(const M43* msg) {
  return *msg->f12_;
}
void M43::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M43_M44* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.f3)
}
void M43::unsafe_arena_set_allocated_f12(
    ::hyperprotobench::M43_M48* f12) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f12_;
  }
  f12_ = f12;
  if (f12) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.f12)
}
M43::M43()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43)
}
M43::M43(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43)
}
M43::M43(const M43& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M43_M44(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f12()) {
    f12_ = new ::hyperprotobench::M43_M48(*from.f12_);
  } else {
    f12_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f11_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f11_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43)
}

void M43::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f11_));
}

M43::~M43() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43)
  SharedDtor();
}

void M43::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f12_;
}

void M43::ArenaDtor(void* object) {
  M43* _this = reinterpret_cast< M43* >(object);
  (void)_this;
}
void M43::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43& M43::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  if (cached_has_bits & 0x04000000u) {
    GOOGLE_DCHECK(f12_ != nullptr);
    f12_->Clear();
  }
  if (cached_has_bits & 0x000000a4u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00160000u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f10_));
  }
  f11_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f11 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M48 f12 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_f12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional float f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M43.M44 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  // optional int32 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f4(), target);
  }

  // optional int64 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_f5(), target);
  }

  // optional int32 f6 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f6(), target);
  }

  // optional int64 f7 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f7(), target);
  }

  // optional int32 f8 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_f8(), target);
  }

  // optional int32 f9 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_f9(), target);
  }

  // optional int32 f10 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_f10(), target);
  }

  // optional uint64 f11 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(26, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M43.M48 f12 = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::f12(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43)
  return target;
}

size_t M43::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M43.M44 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

  }
  // optional .hyperprotobench.M43.M48 f12 = 27;
  if (cached_has_bits & 0x04000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f12_);
  }

  if (cached_has_bits & 0x000000a4u) {
    // optional float f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional int64 f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional int64 f7 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

    // optional int32 f6 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

  }
  if (cached_has_bits & 0x00160000u) {
    // optional int32 f8 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

    // optional int32 f9 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional int32 f10 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f10());
    }

  }
  // optional uint64 f11 = 26;
  if (cached_has_bits & 0x02000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f11());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43)
  GOOGLE_DCHECK_NE(&from, this);
  const M43* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43)
    MergeFrom(*source);
  }
}

void M43::MergeFrom(const M43& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M43_M44::MergeFrom(from._internal_f3());
    }
  }
  if (cached_has_bits & 0x04000000u) {
    _internal_mutable_f12()->::hyperprotobench::M43_M48::MergeFrom(from._internal_f12());
  }
  if (cached_has_bits & 0x000000a4u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000400u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000200u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00160000u) {
    if (cached_has_bits & 0x00020000u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00040000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00100000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x02000000u) {
    _internal_set_f11(from._internal_f11());
  }
}

void M43::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43::CopyFrom(const M43& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43::IsInitialized() const {
  return true;
}

void M43::InternalSwap(M43* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f12_, other->f12_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f6_, other->f6_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M55_M56_M57_M58::InitAsDefaultInstance() {
}
class M54_M55_M56_M57_M58::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M55_M56_M57_M58>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M54_M55_M56_M57_M58::M54_M55_M56_M57_M58()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M55.M56.M57.M58)
}
M54_M55_M56_M57_M58::M54_M55_M56_M57_M58(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M55.M56.M57.M58)
}
M54_M55_M56_M57_M58::M54_M55_M56_M57_M58(const M54_M55_M56_M57_M58& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M55.M56.M57.M58)
}

void M54_M55_M56_M57_M58::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M54_M55_M56_M57_M58::~M54_M55_M56_M57_M58() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M55.M56.M57.M58)
  SharedDtor();
}

void M54_M55_M56_M57_M58::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M54_M55_M56_M57_M58::ArenaDtor(void* object) {
  M54_M55_M56_M57_M58* _this = reinterpret_cast< M54_M55_M56_M57_M58* >(object);
  (void)_this;
}
void M54_M55_M56_M57_M58::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M55_M56_M57_M58::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M55_M56_M57_M58& M54_M55_M56_M57_M58::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M55_M56_M57_M58_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M55_M56_M57_M58::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M55.M56.M57.M58)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M55_M56_M57_M58::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M55_M56_M57_M58::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M55.M56.M57.M58)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M55.M56.M57.M58)
  return target;
}

size_t M54_M55_M56_M57_M58::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M55.M56.M57.M58)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M55_M56_M57_M58::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M55.M56.M57.M58)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M55_M56_M57_M58* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M55_M56_M57_M58>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M55.M56.M57.M58)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M55.M56.M57.M58)
    MergeFrom(*source);
  }
}

void M54_M55_M56_M57_M58::MergeFrom(const M54_M55_M56_M57_M58& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M55.M56.M57.M58)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M55_M56_M57_M58::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M55.M56.M57.M58)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M55_M56_M57_M58::CopyFrom(const M54_M55_M56_M57_M58& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M55.M56.M57.M58)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M55_M56_M57_M58::IsInitialized() const {
  return true;
}

void M54_M55_M56_M57_M58::InternalSwap(M54_M55_M56_M57_M58* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M55_M56_M57_M58::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M55_M56_M57::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_M55_M56_M57_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M54_M55_M56_M57_M58*>(
      ::hyperprotobench::M54_M55_M56_M57_M58::internal_default_instance());
}
class M54_M55_M56_M57::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M55_M56_M57>()._has_bits_);
  static const ::hyperprotobench::M54_M55_M56_M57_M58& f1(const M54_M55_M56_M57* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M54_M55_M56_M57_M58&
M54_M55_M56_M57::_Internal::f1(const M54_M55_M56_M57* msg) {
  return *msg->f1_;
}
void M54_M55_M56_M57::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M54_M55_M56_M57_M58* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M55.M56.M57.f1)
}
M54_M55_M56_M57::M54_M55_M56_M57()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M55.M56.M57)
}
M54_M55_M56_M57::M54_M55_M56_M57(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M55.M56.M57)
}
M54_M55_M56_M57::M54_M55_M56_M57(const M54_M55_M56_M57& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M54_M55_M56_M57_M58(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M55.M56.M57)
}

void M54_M55_M56_M57::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M55_M56_M57_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = nullptr;
}

M54_M55_M56_M57::~M54_M55_M56_M57() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M55.M56.M57)
  SharedDtor();
}

void M54_M55_M56_M57::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M54_M55_M56_M57::ArenaDtor(void* object) {
  M54_M55_M56_M57* _this = reinterpret_cast< M54_M55_M56_M57* >(object);
  (void)_this;
}
void M54_M55_M56_M57::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M55_M56_M57::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M55_M56_M57& M54_M55_M56_M57::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M55_M56_M57_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M55_M56_M57::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M55.M56.M57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M55_M56_M57::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M54.M55.M56.M57.M58 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.M55.M56.M57.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M55_M56_M57::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M55.M56.M57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M54.M55.M56.M57.M58 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.M55.M56.M57.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M55.M56.M57)
  return target;
}

size_t M54_M55_M56_M57::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M55.M56.M57)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M54.M55.M56.M57.M58 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M55_M56_M57::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M55.M56.M57)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M55_M56_M57* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M55_M56_M57>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M55.M56.M57)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M55.M56.M57)
    MergeFrom(*source);
  }
}

void M54_M55_M56_M57::MergeFrom(const M54_M55_M56_M57& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M55.M56.M57)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M54_M55_M56_M57_M58::MergeFrom(from._internal_f1());
    }
  }
}

void M54_M55_M56_M57::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M55.M56.M57)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M55_M56_M57::CopyFrom(const M54_M55_M56_M57& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M55.M56.M57)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M55_M56_M57::IsInitialized() const {
  return true;
}

void M54_M55_M56_M57::InternalSwap(M54_M55_M56_M57* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M55_M56_M57::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M55_M56::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_M55_M56_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M54_M55_M56_M57*>(
      ::hyperprotobench::M54_M55_M56_M57::internal_default_instance());
}
class M54_M55_M56::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M55_M56>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M54_M55_M56_M57& f2(const M54_M55_M56* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M54_M55_M56_M57&
M54_M55_M56::_Internal::f2(const M54_M55_M56* msg) {
  return *msg->f2_;
}
void M54_M55_M56::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M54_M55_M56_M57* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M55.M56.f2)
}
M54_M55_M56::M54_M55_M56()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M55.M56)
}
M54_M55_M56::M54_M55_M56(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M55.M56)
}
M54_M55_M56::M54_M55_M56(const M54_M55_M56& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M54_M55_M56_M57(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M55.M56)
}

void M54_M55_M56::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M55_M56_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M54_M55_M56::~M54_M55_M56() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M55.M56)
  SharedDtor();
}

void M54_M55_M56::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M54_M55_M56::ArenaDtor(void* object) {
  M54_M55_M56* _this = reinterpret_cast< M54_M55_M56* >(object);
  (void)_this;
}
void M54_M55_M56::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M55_M56::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M55_M56& M54_M55_M56::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M55_M56_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M55_M56::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M55.M56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M55_M56::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M55.M56.M57 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M55_M56::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M55.M56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M54.M55.M56.M57 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M55.M56)
  return target;
}

size_t M54_M55_M56::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M55.M56)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional .hyperprotobench.M54.M55.M56.M57 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M55_M56::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M55.M56)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M55_M56* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M55_M56>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M55.M56)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M55.M56)
    MergeFrom(*source);
  }
}

void M54_M55_M56::MergeFrom(const M54_M55_M56& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M55.M56)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M54_M55_M56_M57::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M55_M56::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M55.M56)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M55_M56::CopyFrom(const M54_M55_M56& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M55.M56)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M55_M56::IsInitialized() const {
  return true;
}

void M54_M55_M56::InternalSwap(M54_M55_M56* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M55_M56::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M55::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_M55_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M54_M55_M56*>(
      ::hyperprotobench::M54_M55_M56::internal_default_instance());
}
class M54_M55::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M55>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M54_M55_M56& f3(const M54_M55* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::hyperprotobench::M54_M55_M56&
M54_M55::_Internal::f3(const M54_M55* msg) {
  return *msg->f3_;
}
void M54_M55::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M54_M55_M56* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M55.f3)
}
M54_M55::M54_M55()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M55)
}
M54_M55::M54_M55(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M55)
}
M54_M55::M54_M55(const M54_M55& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M54_M55_M56(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M55)
}

void M54_M55::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M55_benchmark_2eproto.base);
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
  f2_ = 1;
}

M54_M55::~M54_M55() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M55)
  SharedDtor();
}

void M54_M55::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f3_;
}

void M54_M55::ArenaDtor(void* object) {
  M54_M55* _this = reinterpret_cast< M54_M55* >(object);
  (void)_this;
}
void M54_M55::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M55::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M55& M54_M55::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M55_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M55::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M55)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    GOOGLE_DCHECK(f3_ != nullptr);
    f3_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    f1_ = 0;
    f2_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M55::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M55.E1 f2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M54_M55_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M54_M55_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M55.M56 f3 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M55::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M55)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M54.M55.E1 f2 = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M54.M55.M56 f3 = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M55)
  return target;
}

size_t M54_M55::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M55)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    // optional .hyperprotobench.M54.M55.M56 f3 = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional float f1 = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional .hyperprotobench.M54.M55.E1 f2 = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M55::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M55)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M55* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M55>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M55)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M55)
    MergeFrom(*source);
  }
}

void M54_M55::MergeFrom(const M54_M55& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M55)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_f3()->::hyperprotobench::M54_M55_M56::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M55::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M55)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M55::CopyFrom(const M54_M55& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M55)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M55::IsInitialized() const {
  return true;
}

void M54_M55::InternalSwap(M54_M55* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M55::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M59_M60::InitAsDefaultInstance() {
}
class M54_M59_M60::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M59_M60>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

M54_M59_M60::M54_M59_M60()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M59.M60)
}
M54_M59_M60::M54_M59_M60(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M59.M60)
}
M54_M59_M60::M54_M59_M60(const M54_M59_M60& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M59.M60)
}

void M54_M59_M60::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M59_M60_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
}

M54_M59_M60::~M54_M59_M60() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M59.M60)
  SharedDtor();
}

void M54_M59_M60::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M54_M59_M60::ArenaDtor(void* object) {
  M54_M59_M60* _this = reinterpret_cast< M54_M59_M60* >(object);
  (void)_this;
}
void M54_M59_M60::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M59_M60::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M59_M60& M54_M59_M60::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M59_M60_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M59_M60::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M59.M60)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000014u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M59_M60::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.M59.M60.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.M59.M60.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M59_M60::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M59.M60)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.M59.M60.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional string f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.M59.M60.f3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f3(), target);
  }

  // optional int32 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M59.M60)
  return target;
}

size_t M54_M59_M60::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M59.M60)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M59_M60::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M59.M60)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M59_M60* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M59_M60>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M59.M60)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M59.M60)
    MergeFrom(*source);
  }
}

void M54_M59_M60::MergeFrom(const M54_M59_M60& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M59.M60)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M59_M60::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M59.M60)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M59_M60::CopyFrom(const M54_M59_M60& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M59.M60)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M59_M60::IsInitialized() const {
  return true;
}

void M54_M59_M60::InternalSwap(M54_M59_M60* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M59_M60::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M59::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_M59_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M54_M59_M60*>(
      ::hyperprotobench::M54_M59_M60::internal_default_instance());
}
class M54_M59::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M59>()._has_bits_);
  static const ::hyperprotobench::M54_M59_M60& f1(const M54_M59* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M54_M59_M60&
M54_M59::_Internal::f1(const M54_M59* msg) {
  return *msg->f1_;
}
void M54_M59::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M54_M59_M60* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M59.f1)
}
M54_M59::M54_M59()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M59)
}
M54_M59::M54_M59(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M59)
}
M54_M59::M54_M59(const M54_M59& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M54_M59_M60(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M59)
}

void M54_M59::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M59_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M54_M59::~M54_M59() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M59)
  SharedDtor();
}

void M54_M59::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M54_M59::ArenaDtor(void* object) {
  M54_M59* _this = reinterpret_cast< M54_M59* >(object);
  (void)_this;
}
void M54_M59::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M59::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M59& M54_M59::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M59_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M59::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M59)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M59::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M54.M59.M60 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M59::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M59)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M54.M59.M60 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M59)
  return target;
}

size_t M54_M59::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M59)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M54.M59.M60 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M59::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M59)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M59* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M59>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M59)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M59)
    MergeFrom(*source);
  }
}

void M54_M59::MergeFrom(const M54_M59& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M59)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M54_M59_M60::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M59::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M59)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M59::CopyFrom(const M54_M59& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M59)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M59::IsInitialized() const {
  return true;
}

void M54_M59::InternalSwap(M54_M59* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M59::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M61::InitAsDefaultInstance() {
}
class M54_M61::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M61>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M54_M61::M54_M61()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M61)
}
M54_M61::M54_M61(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M61)
}
M54_M61::M54_M61(const M54_M61& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f2_(from.f2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M61)
}

void M54_M61::SharedCtor() {
  f1_ = 0;
}

M54_M61::~M54_M61() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M61)
  SharedDtor();
}

void M54_M61::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M54_M61::ArenaDtor(void* object) {
  M54_M61* _this = reinterpret_cast< M54_M61* >(object);
  (void)_this;
}
void M54_M61::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M61::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M61& M54_M61::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M61_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M61::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M61)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f2_.Clear();
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M61::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .hyperprotobench.M54.M61.E1 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M54_M61_E1_IsValid(val))) {
              _internal_add_f2(static_cast<::hyperprotobench::M54_M61_E1>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_f2(), ptr, ctx, ::hyperprotobench::M54_M61_E1_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M61::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M61)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // repeated .hyperprotobench.M54.M61.E1 f2 = 5;
  for (int i = 0, n = this->_internal_f2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_f2(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M61)
  return target;
}

size_t M54_M61::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M61)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .hyperprotobench.M54.M61.E1 f2 = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_f2_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_f2(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional int32 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M61::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M61)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M61* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M61>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M61)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M61)
    MergeFrom(*source);
  }
}

void M54_M61::MergeFrom(const M54_M61& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M61)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f2_.MergeFrom(from.f2_);
  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M54_M61::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M61)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M61::CopyFrom(const M54_M61& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M61)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M61::IsInitialized() const {
  return true;
}

void M54_M61::InternalSwap(M54_M61* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.InternalSwap(&other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M61::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M62_M63::InitAsDefaultInstance() {
}
class M54_M62_M63::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M62_M63>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M54_M62_M63::M54_M62_M63()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M62.M63)
}
M54_M62_M63::M54_M62_M63(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M62.M63)
}
M54_M62_M63::M54_M62_M63(const M54_M62_M63& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M62.M63)
}

void M54_M62_M63::SharedCtor() {
  f1_ = 0u;
}

M54_M62_M63::~M54_M62_M63() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M62.M63)
  SharedDtor();
}

void M54_M62_M63::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M54_M62_M63::ArenaDtor(void* object) {
  M54_M62_M63* _this = reinterpret_cast< M54_M62_M63* >(object);
  (void)_this;
}
void M54_M62_M63::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M62_M63::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M62_M63& M54_M62_M63::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M62_M63_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M62_M63::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M62.M63)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M62_M63::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M62_M63::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M62.M63)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M62.M63)
  return target;
}

size_t M54_M62_M63::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M62.M63)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M62_M63::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M62.M63)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M62_M63* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M62_M63>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M62.M63)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M62.M63)
    MergeFrom(*source);
  }
}

void M54_M62_M63::MergeFrom(const M54_M62_M63& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M62.M63)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M54_M62_M63::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M62.M63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M62_M63::CopyFrom(const M54_M62_M63& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M62.M63)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M62_M63::IsInitialized() const {
  return true;
}

void M54_M62_M63::InternalSwap(M54_M62_M63* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M62_M63::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54_M62::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_M62_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M54_M62_M63*>(
      ::hyperprotobench::M54_M62_M63::internal_default_instance());
}
class M54_M62::_Internal {
 public:
  using HasBits = decltype(std::declval<M54_M62>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M54_M62_M63& f2(const M54_M62* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M54_M62_M63&
M54_M62::_Internal::f2(const M54_M62* msg) {
  return *msg->f2_;
}
void M54_M62::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M54_M62_M63* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M62.f2)
}
M54_M62::M54_M62()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54.M62)
}
M54_M62::M54_M62(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54.M62)
}
M54_M62::M54_M62(const M54_M62& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M54_M62_M63(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54.M62)
}

void M54_M62::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_M62_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M54_M62::~M54_M62() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54.M62)
  SharedDtor();
}

void M54_M62::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M54_M62::ArenaDtor(void* object) {
  M54_M62* _this = reinterpret_cast< M54_M62* >(object);
  (void)_this;
}
void M54_M62::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54_M62::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54_M62& M54_M62::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_M62_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54_M62::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54.M62)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54_M62::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M62.M63 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54_M62::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54.M62)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M54.M62.M63 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54.M62)
  return target;
}

size_t M54_M62::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54.M62)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M54.M62.M63 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional uint64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54_M62::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54.M62)
  GOOGLE_DCHECK_NE(&from, this);
  const M54_M62* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54_M62>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54.M62)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54.M62)
    MergeFrom(*source);
  }
}

void M54_M62::MergeFrom(const M54_M62& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54.M62)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M54_M62_M63::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54_M62::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54.M62)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54_M62::CopyFrom(const M54_M62& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54.M62)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54_M62::IsInitialized() const {
  return true;
}

void M54_M62::InternalSwap(M54_M62* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54_M62::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M54::InitAsDefaultInstance() {
  ::hyperprotobench::_M54_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M54_M55*>(
      ::hyperprotobench::M54_M55::internal_default_instance());
  ::hyperprotobench::_M54_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M54_M59*>(
      ::hyperprotobench::M54_M59::internal_default_instance());
  ::hyperprotobench::_M54_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M54_M61*>(
      ::hyperprotobench::M54_M61::internal_default_instance());
  ::hyperprotobench::_M54_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M54_M62*>(
      ::hyperprotobench::M54_M62::internal_default_instance());
}
class M54::_Internal {
 public:
  using HasBits = decltype(std::declval<M54>()._has_bits_);
  static const ::hyperprotobench::M54_M55& f2(const M54* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hyperprotobench::M54_M59& f4(const M54* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::hyperprotobench::M54_M61& f7(const M54* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::hyperprotobench::M54_M62& f9(const M54* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::hyperprotobench::M54_M55&
M54::_Internal::f2(const M54* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M54_M59&
M54::_Internal::f4(const M54* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M54_M61&
M54::_Internal::f7(const M54* msg) {
  return *msg->f7_;
}
const ::hyperprotobench::M54_M62&
M54::_Internal::f9(const M54* msg) {
  return *msg->f9_;
}
void M54::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M54_M55* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f2)
}
void M54::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M54_M59* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f4)
}
void M54::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M54_M61* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f7)
}
void M54::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M54_M62* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f9)
}
M54::M54()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M54)
}
M54::M54(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f1_(arena),
  f6_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M54)
}
M54::M54(const M54& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f1_(from.f1_),
      f6_(from.f6_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M54_M55(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M54_M59(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M54_M61(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M54_M62(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  f8_ = from.f8_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M54)
}

void M54::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M54_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f8_));
}

M54::~M54() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M54)
  SharedDtor();
}

void M54::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f7_;
  if (this != internal_default_instance()) delete f9_;
}

void M54::ArenaDtor(void* object) {
  M54* _this = reinterpret_cast< M54* >(object);
  (void)_this;
}
void M54::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M54::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M54& M54::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M54_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M54::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M54)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_.Clear();
  f6_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    f3_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00010000u) {
    f5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  if (cached_has_bits & 0x00008000u) {
    GOOGLE_DCHECK(f4_ != nullptr);
    f4_->Clear();
  }
  if (cached_has_bits & 0x00500000u) {
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
  }
  f8_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M54::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f1();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.f1");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M55 f2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M59 f4 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string f6 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_f6();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M54.f6");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M61 f7 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M54.M62 f9 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M54::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M54)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string f1 = 6;
  for (int i = 0, n = this->_internal_f1_size(); i < n; i++) {
    const auto& s = this->_internal_f1(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.f1");
    target = stream->WriteString(6, s, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M54.M55 f2 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f2(this), target, stream);
  }

  // optional bytes f3 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M54.M59 f4 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::f4(this), target, stream);
  }

  // optional string f5 = 21;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.f5");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_f5(), target);
  }

  // repeated string f6 = 23;
  for (int i = 0, n = this->_internal_f6_size(); i < n; i++) {
    const auto& s = this->_internal_f6(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M54.f6");
    target = stream->WriteString(23, s, target);
  }

  // optional .hyperprotobench.M54.M61 f7 = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::f7(this), target, stream);
  }

  // optional int32 f8 = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M54.M62 f9 = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::f9(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M54)
  return target;
}

size_t M54::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M54)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string f1 = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f1_.size());
  for (int i = 0, n = f1_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      f1_.Get(i));
  }

  // repeated string f6 = 23;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f6_.size());
  for (int i = 0, n = f6_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      f6_.Get(i));
  }

  // optional bytes f3 = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f3());
  }

  // optional string f5 = 21;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f5());
  }

  // optional .hyperprotobench.M54.M55 f2 = 8;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  // optional .hyperprotobench.M54.M59 f4 = 20;
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f4_);
  }

  if (cached_has_bits & 0x00700000u) {
    // optional .hyperprotobench.M54.M61 f7 = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

    // optional .hyperprotobench.M54.M62 f9 = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

    // optional int32 f8 = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M54::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M54)
  GOOGLE_DCHECK_NE(&from, this);
  const M54* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M54>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M54)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M54)
    MergeFrom(*source);
  }
}

void M54::MergeFrom(const M54& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M54)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f1_.MergeFrom(from.f1_);
  f6_.MergeFrom(from.f6_);
  if (from._internal_has_f3()) {
    _internal_set_f3(from._internal_f3());
  }
  if (from._internal_has_f5()) {
    _internal_set_f5(from._internal_f5());
  }
  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::hyperprotobench::M54_M55::MergeFrom(from._internal_f2());
  }
  if (from._internal_has_f4()) {
    _internal_mutable_f4()->::hyperprotobench::M54_M59::MergeFrom(from._internal_f4());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00700000u) {
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_f7()->::hyperprotobench::M54_M61::MergeFrom(from._internal_f7());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_f9()->::hyperprotobench::M54_M62::MergeFrom(from._internal_f9());
    }
    if (cached_has_bits & 0x00200000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M54::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M54)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M54::CopyFrom(const M54& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M54)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M54::IsInitialized() const {
  return true;
}

void M54::InternalSwap(M54* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.InternalSwap(&other->f1_);
  f6_.InternalSwap(&other->f6_);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f8_, other->f8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M54::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M65::InitAsDefaultInstance() {
}
class M64_M65::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M65>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M64_M65::M64_M65()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M65)
}
M64_M65::M64_M65(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M65)
}
M64_M65::M64_M65(const M64_M65& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M65)
}

void M64_M65::SharedCtor() {
  f1_ = 0;
}

M64_M65::~M64_M65() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M65)
  SharedDtor();
}

void M64_M65::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M64_M65::ArenaDtor(void* object) {
  M64_M65* _this = reinterpret_cast< M64_M65* >(object);
  (void)_this;
}
void M64_M65::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M65::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M65& M64_M65::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M65_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M65::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M65)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M65::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M65::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M65)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M65)
  return target;
}

size_t M64_M65::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M65)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M65::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M65)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M65* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M65>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M65)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M65)
    MergeFrom(*source);
  }
}

void M64_M65::MergeFrom(const M64_M65& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M65)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M64_M65::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M65::CopyFrom(const M64_M65& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M65)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M65::IsInitialized() const {
  return true;
}

void M64_M65::InternalSwap(M64_M65* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M65::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M66::InitAsDefaultInstance() {
}
class M64_M66::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M66>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M64_M66::M64_M66()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M66)
}
M64_M66::M64_M66(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M66)
}
M64_M66::M64_M66(const M64_M66& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M66)
}

void M64_M66::SharedCtor() {
  f1_ = 0;
}

M64_M66::~M64_M66() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M66)
  SharedDtor();
}

void M64_M66::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M64_M66::ArenaDtor(void* object) {
  M64_M66* _this = reinterpret_cast< M64_M66* >(object);
  (void)_this;
}
void M64_M66::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M66::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M66& M64_M66::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M66_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M66::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M66)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M66::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M66::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M66)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M66)
  return target;
}

size_t M64_M66::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M66)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M66::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M66)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M66* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M66>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M66)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M66)
    MergeFrom(*source);
  }
}

void M64_M66::MergeFrom(const M64_M66& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M66)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M64_M66::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M66::CopyFrom(const M64_M66& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M66)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M66::IsInitialized() const {
  return true;
}

void M64_M66::InternalSwap(M64_M66* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M66::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M67::InitAsDefaultInstance() {
}
class M64_M67::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M67>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M64_M67::M64_M67()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M67)
}
M64_M67::M64_M67(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M67)
}
M64_M67::M64_M67(const M64_M67& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M67)
}

void M64_M67::SharedCtor() {
  f1_ = 0;
}

M64_M67::~M64_M67() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M67)
  SharedDtor();
}

void M64_M67::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M64_M67::ArenaDtor(void* object) {
  M64_M67* _this = reinterpret_cast< M64_M67* >(object);
  (void)_this;
}
void M64_M67::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M67::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M67& M64_M67::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M67_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M67::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M67)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M67::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M67::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M67)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M67)
  return target;
}

size_t M64_M67::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M67)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M67::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M67)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M67* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M67>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M67)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M67)
    MergeFrom(*source);
  }
}

void M64_M67::MergeFrom(const M64_M67& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M67)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M64_M67::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M67::CopyFrom(const M64_M67& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M67)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M67::IsInitialized() const {
  return true;
}

void M64_M67::InternalSwap(M64_M67* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M67::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M68_M69_M70_M71::InitAsDefaultInstance() {
}
class M64_M68_M69_M70_M71::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M68_M69_M70_M71>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M64_M68_M69_M70_M71::M64_M68_M69_M70_M71()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M68.M69.M70.M71)
}
M64_M68_M69_M70_M71::M64_M68_M69_M70_M71(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M68.M69.M70.M71)
}
M64_M68_M69_M70_M71::M64_M68_M69_M70_M71(const M64_M68_M69_M70_M71& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f2_(from.f2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M68.M69.M70.M71)
}

void M64_M68_M69_M70_M71::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M64_M68_M69_M70_M71_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M64_M68_M69_M70_M71::~M64_M68_M69_M70_M71() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M68.M69.M70.M71)
  SharedDtor();
}

void M64_M68_M69_M70_M71::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M64_M68_M69_M70_M71::ArenaDtor(void* object) {
  M64_M68_M69_M70_M71* _this = reinterpret_cast< M64_M68_M69_M70_M71* >(object);
  (void)_this;
}
void M64_M68_M69_M70_M71::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M68_M69_M70_M71::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M68_M69_M70_M71& M64_M68_M69_M70_M71::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M68_M69_M70_M71_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M68_M69_M70_M71::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M68.M69.M70.M71)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f2_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M68_M69_M70_M71::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M64.M68.M69.M70.M71.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M68_M69_M70_M71::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M68.M69.M70.M71)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M64.M68.M69.M70.M71.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // repeated int32 f2 = 3;
  for (int i = 0, n = this->_internal_f2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M68.M69.M70.M71)
  return target;
}

size_t M64_M68_M69_M70_M71::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M68.M69.M70.M71)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f2 = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f2_size());
    total_size += data_size;
  }

  // optional string f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M68_M69_M70_M71::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M68.M69.M70.M71)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M68_M69_M70_M71* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M68_M69_M70_M71>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M68.M69.M70.M71)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M68.M69.M70.M71)
    MergeFrom(*source);
  }
}

void M64_M68_M69_M70_M71::MergeFrom(const M64_M68_M69_M70_M71& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M68.M69.M70.M71)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f2_.MergeFrom(from.f2_);
  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M64_M68_M69_M70_M71::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M68.M69.M70.M71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M68_M69_M70_M71::CopyFrom(const M64_M68_M69_M70_M71& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M68.M69.M70.M71)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M68_M69_M70_M71::IsInitialized() const {
  return true;
}

void M64_M68_M69_M70_M71::InternalSwap(M64_M68_M69_M70_M71* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.InternalSwap(&other->f2_);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M68_M69_M70_M71::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M68_M69_M70::InitAsDefaultInstance() {
  ::hyperprotobench::_M64_M68_M69_M70_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M64_M68_M69_M70_M71*>(
      ::hyperprotobench::M64_M68_M69_M70_M71::internal_default_instance());
}
class M64_M68_M69_M70::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M68_M69_M70>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M64_M68_M69_M70_M71& f2(const M64_M68_M69_M70* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M64_M68_M69_M70_M71&
M64_M68_M69_M70::_Internal::f2(const M64_M68_M69_M70* msg) {
  return *msg->f2_;
}
void M64_M68_M69_M70::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M64_M68_M69_M70_M71* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.M69.M70.f2)
}
M64_M68_M69_M70::M64_M68_M69_M70()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M68.M69.M70)
}
M64_M68_M69_M70::M64_M68_M69_M70(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M68.M69.M70)
}
M64_M68_M69_M70::M64_M68_M69_M70(const M64_M68_M69_M70& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M64_M68_M69_M70_M71(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M68.M69.M70)
}

void M64_M68_M69_M70::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M64_M68_M69_M70_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M64_M68_M69_M70::~M64_M68_M69_M70() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M68.M69.M70)
  SharedDtor();
}

void M64_M68_M69_M70::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M64_M68_M69_M70::ArenaDtor(void* object) {
  M64_M68_M69_M70* _this = reinterpret_cast< M64_M68_M69_M70* >(object);
  (void)_this;
}
void M64_M68_M69_M70::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M68_M69_M70::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M68_M69_M70& M64_M68_M69_M70::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M68_M69_M70_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M68_M69_M70::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M68.M69.M70)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M68_M69_M70::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M68.M69.M70.M71 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M68_M69_M70::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M68.M69.M70)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M64.M68.M69.M70.M71 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M68.M69.M70)
  return target;
}

size_t M64_M68_M69_M70::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M68.M69.M70)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M64.M68.M69.M70.M71 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M68_M69_M70::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M68.M69.M70)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M68_M69_M70* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M68_M69_M70>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M68.M69.M70)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M68.M69.M70)
    MergeFrom(*source);
  }
}

void M64_M68_M69_M70::MergeFrom(const M64_M68_M69_M70& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M68.M69.M70)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M64_M68_M69_M70_M71::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M64_M68_M69_M70::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M68.M69.M70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M68_M69_M70::CopyFrom(const M64_M68_M69_M70& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M68.M69.M70)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M68_M69_M70::IsInitialized() const {
  return true;
}

void M64_M68_M69_M70::InternalSwap(M64_M68_M69_M70* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M68_M69_M70::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M68_M69::InitAsDefaultInstance() {
  ::hyperprotobench::_M64_M68_M69_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M64_M68_M69_M70*>(
      ::hyperprotobench::M64_M68_M69_M70::internal_default_instance());
}
class M64_M68_M69::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M68_M69>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M64_M68_M69_M70& f4(const M64_M68_M69* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M64_M68_M69_M70&
M64_M68_M69::_Internal::f4(const M64_M68_M69* msg) {
  return *msg->f4_;
}
void M64_M68_M69::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M64_M68_M69_M70* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.M69.f4)
}
M64_M68_M69::M64_M68_M69()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M68.M69)
}
M64_M68_M69::M64_M68_M69(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M68.M69)
}
M64_M68_M69::M64_M68_M69(const M64_M68_M69& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M64_M68_M69_M70(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M68.M69)
}

void M64_M68_M69::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M64_M68_M69_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
}

M64_M68_M69::~M64_M68_M69() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M68.M69)
  SharedDtor();
}

void M64_M68_M69::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M64_M68_M69::ArenaDtor(void* object) {
  M64_M68_M69* _this = reinterpret_cast< M64_M68_M69* >(object);
  (void)_this;
}
void M64_M68_M69::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M68_M69::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M68_M69& M64_M68_M69::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M68_M69_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M68_M69::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M68.M69)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f4_ != nullptr);
    f4_->Clear();
  }
  if (cached_has_bits & 0x00000042u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  f5_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M68_M69::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M68.M69.M70 f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M68_M69::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M68.M69)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional int32 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M64.M68.M69.M70 f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f4(this), target, stream);
  }

  // optional int32 f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M68.M69)
  return target;
}

size_t M64_M68_M69::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M68.M69)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f2 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  // optional .hyperprotobench.M64.M68.M69.M70 f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f4_);
  }

  if (cached_has_bits & 0x00000042u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  // optional int32 f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M68_M69::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M68.M69)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M68_M69* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M68_M69>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M68.M69)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M68.M69)
    MergeFrom(*source);
  }
}

void M64_M68_M69::MergeFrom(const M64_M68_M69& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M68.M69)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f4()) {
    _internal_mutable_f4()->::hyperprotobench::M64_M68_M69_M70::MergeFrom(from._internal_f4());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000042u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f5(from._internal_f5());
  }
}

void M64_M68_M69::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M68.M69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M68_M69::CopyFrom(const M64_M68_M69& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M68.M69)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M68_M69::IsInitialized() const {
  return true;
}

void M64_M68_M69::InternalSwap(M64_M68_M69* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M68_M69::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64_M68::InitAsDefaultInstance() {
  ::hyperprotobench::_M64_M68_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M64_M68_M69*>(
      ::hyperprotobench::M64_M68_M69::internal_default_instance());
}
class M64_M68::_Internal {
 public:
  using HasBits = decltype(std::declval<M64_M68>()._has_bits_);
  static const ::hyperprotobench::M64_M68_M69& f1(const M64_M68* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M64_M68_M69&
M64_M68::_Internal::f1(const M64_M68* msg) {
  return *msg->f1_;
}
void M64_M68::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M64_M68_M69* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.f1)
}
M64_M68::M64_M68()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64.M68)
}
M64_M68::M64_M68(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64.M68)
}
M64_M68::M64_M68(const M64_M68& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M64_M68_M69(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64.M68)
}

void M64_M68::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M64_M68_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = nullptr;
}

M64_M68::~M64_M68() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64.M68)
  SharedDtor();
}

void M64_M68::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M64_M68::ArenaDtor(void* object) {
  M64_M68* _this = reinterpret_cast< M64_M68* >(object);
  (void)_this;
}
void M64_M68::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64_M68::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64_M68& M64_M68::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_M68_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64_M68::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64.M68)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000010u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64_M68::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M64.M68.M69 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M64.M68.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64_M68::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64.M68)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M64.M68.M69 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M64.M68.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64.M68)
  return target;
}

size_t M64_M68::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64.M68)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional string f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M64.M68.M69 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64_M68::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64.M68)
  GOOGLE_DCHECK_NE(&from, this);
  const M64_M68* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64_M68>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64.M68)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64.M68)
    MergeFrom(*source);
  }
}

void M64_M68::MergeFrom(const M64_M68& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64.M68)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M64_M68_M69::MergeFrom(from._internal_f1());
    }
  }
}

void M64_M68::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64.M68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64_M68::CopyFrom(const M64_M68& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64.M68)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64_M68::IsInitialized() const {
  return true;
}

void M64_M68::InternalSwap(M64_M68* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64_M68::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M64::InitAsDefaultInstance() {
  ::hyperprotobench::_M64_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M64_M65*>(
      ::hyperprotobench::M64_M65::internal_default_instance());
  ::hyperprotobench::_M64_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M64_M66*>(
      ::hyperprotobench::M64_M66::internal_default_instance());
  ::hyperprotobench::_M64_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M64_M67*>(
      ::hyperprotobench::M64_M67::internal_default_instance());
  ::hyperprotobench::_M64_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M64_M68*>(
      ::hyperprotobench::M64_M68::internal_default_instance());
}
class M64::_Internal {
 public:
  using HasBits = decltype(std::declval<M64>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M64_M65& f2(const M64* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M64_M66& f3(const M64* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M64_M67& f6(const M64* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M64_M68& f7(const M64* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::hyperprotobench::M64_M65&
M64::_Internal::f2(const M64* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M64_M66&
M64::_Internal::f3(const M64* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M64_M67&
M64::_Internal::f6(const M64* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M64_M68&
M64::_Internal::f7(const M64* msg) {
  return *msg->f7_;
}
void M64::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M64_M65* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.f2)
}
void M64::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M64_M66* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.f3)
}
void M64::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M64_M67* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.f6)
}
void M64::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M64_M68* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.f7)
}
M64::M64()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M64)
}
M64::M64(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M64)
}
M64::M64(const M64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M64_M65(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M64_M66(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M64_M67(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M64_M68(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M64)
}

void M64::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M64_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f8_));
  f5_ = 49;
}

M64::~M64() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M64)
  SharedDtor();
}

void M64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f7_;
}

void M64::ArenaDtor(void* object) {
  M64* _this = reinterpret_cast< M64* >(object);
  (void)_this;
}
void M64::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M64::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M64& M64::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M64_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M64::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000004cu) {
    if (cached_has_bits & 0x00000040u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(f6_ != nullptr);
      f6_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  f1_ = 0;
  f8_ = PROTOBUF_ULONGLONG(0);
  f5_ = 49;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M64::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M65 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M66 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M64.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.E1 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M64_E1_IsValid(val))) {
            _internal_set_f5(static_cast<::hyperprotobench::M64_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M67 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M64.M68 f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M64::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M64)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M64.M65 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M64.M66 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  // optional string f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M64.f4");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M64.E1 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M64.M67 f6 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f6(this), target, stream);
  }

  // optional .hyperprotobench.M64.M68 f7 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f7(this), target, stream);
  }

  // optional uint64 f8 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M64)
  return target;
}

size_t M64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M64)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000004cu) {
    // optional string f4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

    // optional .hyperprotobench.M64.M65 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M64.M66 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional .hyperprotobench.M64.M67 f6 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f6_);
    }

    // optional .hyperprotobench.M64.M68 f7 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  // optional uint64 f8 = 12;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f8());
  }

  // optional .hyperprotobench.M64.E1 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M64::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M64)
  GOOGLE_DCHECK_NE(&from, this);
  const M64* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M64>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M64)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M64)
    MergeFrom(*source);
  }
}

void M64::MergeFrom(const M64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000004cu) {
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M64_M65::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M64_M66::MergeFrom(from._internal_f3());
    }
  }
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_f6()->::hyperprotobench::M64_M67::MergeFrom(from._internal_f6());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f7()->::hyperprotobench::M64_M68::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00000080u) {
    _internal_set_f5(from._internal_f5());
  }
}

void M64::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M64::CopyFrom(const M64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M64::IsInitialized() const {
  return true;
}

void M64::InternalSwap(M64* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f8_, other->f8_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M64::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M73_M74::InitAsDefaultInstance() {
}
class M72_M73_M74::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M73_M74>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M72_M73_M74::M72_M73_M74()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M73.M74)
}
M72_M73_M74::M72_M73_M74(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M73.M74)
}
M72_M73_M74::M72_M73_M74(const M72_M73_M74& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M73.M74)
}

void M72_M73_M74::SharedCtor() {
  f1_ = 0;
}

M72_M73_M74::~M72_M73_M74() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M73.M74)
  SharedDtor();
}

void M72_M73_M74::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M72_M73_M74::ArenaDtor(void* object) {
  M72_M73_M74* _this = reinterpret_cast< M72_M73_M74* >(object);
  (void)_this;
}
void M72_M73_M74::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M73_M74::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M73_M74& M72_M73_M74::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M73_M74_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M73_M74::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M73.M74)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M73_M74::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M73_M74::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M73.M74)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M73.M74)
  return target;
}

size_t M72_M73_M74::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M73.M74)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M73_M74::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M73.M74)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M73_M74* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M73_M74>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M73.M74)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M73.M74)
    MergeFrom(*source);
  }
}

void M72_M73_M74::MergeFrom(const M72_M73_M74& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M73.M74)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M72_M73_M74::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M73.M74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M73_M74::CopyFrom(const M72_M73_M74& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M73.M74)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M73_M74::IsInitialized() const {
  return true;
}

void M72_M73_M74::InternalSwap(M72_M73_M74* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M73_M74::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M73_M75::InitAsDefaultInstance() {
}
class M72_M73_M75::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M73_M75>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M72_M73_M75::M72_M73_M75()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M73.M75)
}
M72_M73_M75::M72_M73_M75(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M73.M75)
}
M72_M73_M75::M72_M73_M75(const M72_M73_M75& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M73.M75)
}

void M72_M73_M75::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_M73_M75_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = 0;
}

M72_M73_M75::~M72_M73_M75() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M73.M75)
  SharedDtor();
}

void M72_M73_M75::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M72_M73_M75::ArenaDtor(void* object) {
  M72_M73_M75* _this = reinterpret_cast< M72_M73_M75* >(object);
  (void)_this;
}
void M72_M73_M75::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M73_M75::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M73_M75& M72_M73_M75::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M73_M75_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M73_M75::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M73.M75)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M73_M75::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M72.M73.M75.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M73_M75::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M73.M75)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M72.M73.M75.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional double f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M73.M75)
  return target;
}

size_t M72_M73_M75::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M73.M75)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional double f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M73_M75::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M73.M75)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M73_M75* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M73_M75>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M73.M75)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M73.M75)
    MergeFrom(*source);
  }
}

void M72_M73_M75::MergeFrom(const M72_M73_M75& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M73.M75)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M72_M73_M75::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M73.M75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M73_M75::CopyFrom(const M72_M73_M75& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M73.M75)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M73_M75::IsInitialized() const {
  return true;
}

void M72_M73_M75::InternalSwap(M72_M73_M75* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M73_M75::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M73::InitAsDefaultInstance() {
  ::hyperprotobench::_M72_M73_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M72_M73_M74*>(
      ::hyperprotobench::M72_M73_M74::internal_default_instance());
  ::hyperprotobench::_M72_M73_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M72_M73_M75*>(
      ::hyperprotobench::M72_M73_M75::internal_default_instance());
}
class M72_M73::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M73>()._has_bits_);
  static const ::hyperprotobench::M72_M73_M74& f1(const M72_M73* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M72_M73_M75& f2(const M72_M73* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M72_M73_M74&
M72_M73::_Internal::f1(const M72_M73* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M72_M73_M75&
M72_M73::_Internal::f2(const M72_M73* msg) {
  return *msg->f2_;
}
void M72_M73::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M72_M73_M74* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M73.f1)
}
void M72_M73::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M72_M73_M75* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M73.f2)
}
M72_M73::M72_M73()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M73)
}
M72_M73::M72_M73(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M73)
}
M72_M73::M72_M73(const M72_M73& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M72_M73_M74(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M72_M73_M75(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M73)
}

void M72_M73::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_M73_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M72_M73::~M72_M73() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M73)
  SharedDtor();
}

void M72_M73::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void M72_M73::ArenaDtor(void* object) {
  M72_M73* _this = reinterpret_cast< M72_M73* >(object);
  (void)_this;
}
void M72_M73::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M73::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M73& M72_M73::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M73_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M73::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M73)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M73::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M72.M73.M74 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M73.M75 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M73::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M73)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M72.M73.M74 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M72.M73.M75 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional bytes f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M73)
  return target;
}

size_t M72_M73::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M73)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M72.M73.M74 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M72.M73.M75 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M73::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M73)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M73* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M73>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M73)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M73)
    MergeFrom(*source);
  }
}

void M72_M73::MergeFrom(const M72_M73& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M73)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M72_M73_M74::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M72_M73_M75::MergeFrom(from._internal_f2());
    }
  }
}

void M72_M73::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M73::CopyFrom(const M72_M73& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M73)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M73::IsInitialized() const {
  return true;
}

void M72_M73::InternalSwap(M72_M73* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M73::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M76::InitAsDefaultInstance() {
}
class M72_M76::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M76>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

M72_M76::M72_M76()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M76)
}
M72_M76::M72_M76(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M76)
}
M72_M76::M72_M76(const M72_M76& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M76)
}

void M72_M76::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  f4_ = 4;
}

M72_M76::~M72_M76() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M76)
  SharedDtor();
}

void M72_M76::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M72_M76::ArenaDtor(void* object) {
  M72_M76* _this = reinterpret_cast< M72_M76* >(object);
  (void)_this;
}
void M72_M76::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M76::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M76& M72_M76::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M76_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M76::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M76)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
    f4_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M76::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M76.E1 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M72_M76_E1_IsValid(val))) {
            _internal_set_f4(static_cast<::hyperprotobench::M72_M76_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M76::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M76)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f1(), target);
  }

  // optional uint32 f2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_f2(), target);
  }

  // optional int32 f3 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M72.M76.E1 f4 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M76)
  return target;
}

size_t M72_M76::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M76)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional bool f1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 f2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M72.M76.E1 f4 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M76::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M76)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M76* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M76>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M76)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M76)
    MergeFrom(*source);
  }
}

void M72_M76::MergeFrom(const M72_M76& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M76)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M72_M76::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M76::CopyFrom(const M72_M76& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M76)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M76::IsInitialized() const {
  return true;
}

void M72_M76::InternalSwap(M72_M76* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M76::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M77::InitAsDefaultInstance() {
}
class M72_M77::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M77>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M72_M77::M72_M77()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M77)
}
M72_M77::M72_M77(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M77)
}
M72_M77::M72_M77(const M72_M77& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M77)
}

void M72_M77::SharedCtor() {
  f2_ = 0;
  f1_ = 4;
}

M72_M77::~M72_M77() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M77)
  SharedDtor();
}

void M72_M77::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M72_M77::ArenaDtor(void* object) {
  M72_M77* _this = reinterpret_cast< M72_M77* >(object);
  (void)_this;
}
void M72_M77::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M77::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M77& M72_M77::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M77_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M77::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M77)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    f2_ = 0;
    f1_ = 4;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M77::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M72.M77.E1 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M72_M77_E1_IsValid(val))) {
            _internal_set_f1(static_cast<::hyperprotobench::M72_M77_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M77::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M77)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M72.M77.E1 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_f1(), target);
  }

  // optional float f2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M77)
  return target;
}

size_t M72_M77::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M77)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    // optional float f2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .hyperprotobench.M72.M77.E1 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M77::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M77)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M77* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M77>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M77)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M77)
    MergeFrom(*source);
  }
}

void M72_M77::MergeFrom(const M72_M77& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M77)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000020u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M72_M77::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M77::CopyFrom(const M72_M77& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M77)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M77::IsInitialized() const {
  return true;
}

void M72_M77::InternalSwap(M72_M77* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M77::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M78_M79_M80_M81::InitAsDefaultInstance() {
}
class M72_M78_M79_M80_M81::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M78_M79_M80_M81>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M72_M78_M79_M80_M81::M72_M78_M79_M80_M81()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M78.M79.M80.M81)
}
M72_M78_M79_M80_M81::M72_M78_M79_M80_M81(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M78.M79.M80.M81)
}
M72_M78_M79_M80_M81::M72_M78_M79_M80_M81(const M72_M78_M79_M80_M81& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M78.M79.M80.M81)
}

void M72_M78_M79_M80_M81::SharedCtor() {
  f1_ = 0;
}

M72_M78_M79_M80_M81::~M72_M78_M79_M80_M81() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M78.M79.M80.M81)
  SharedDtor();
}

void M72_M78_M79_M80_M81::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M72_M78_M79_M80_M81::ArenaDtor(void* object) {
  M72_M78_M79_M80_M81* _this = reinterpret_cast< M72_M78_M79_M80_M81* >(object);
  (void)_this;
}
void M72_M78_M79_M80_M81::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M78_M79_M80_M81::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M78_M79_M80_M81& M72_M78_M79_M80_M81::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M78_M79_M80_M81_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M78_M79_M80_M81::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M78.M79.M80.M81)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M78_M79_M80_M81::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M78_M79_M80_M81::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M78.M79.M80.M81)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M78.M79.M80.M81)
  return target;
}

size_t M72_M78_M79_M80_M81::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M78.M79.M80.M81)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M78_M79_M80_M81::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M78.M79.M80.M81)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M78_M79_M80_M81* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M78_M79_M80_M81>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M78.M79.M80.M81)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M78.M79.M80.M81)
    MergeFrom(*source);
  }
}

void M72_M78_M79_M80_M81::MergeFrom(const M72_M78_M79_M80_M81& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M78.M79.M80.M81)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M72_M78_M79_M80_M81::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M78.M79.M80.M81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M78_M79_M80_M81::CopyFrom(const M72_M78_M79_M80_M81& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M78.M79.M80.M81)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M78_M79_M80_M81::IsInitialized() const {
  return true;
}

void M72_M78_M79_M80_M81::InternalSwap(M72_M78_M79_M80_M81* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M78_M79_M80_M81::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M78_M79_M80::InitAsDefaultInstance() {
  ::hyperprotobench::_M72_M78_M79_M80_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M72_M78_M79_M80_M81*>(
      ::hyperprotobench::M72_M78_M79_M80_M81::internal_default_instance());
}
class M72_M78_M79_M80::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M78_M79_M80>()._has_bits_);
  static const ::hyperprotobench::M72_M78_M79_M80_M81& f1(const M72_M78_M79_M80* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M72_M78_M79_M80_M81&
M72_M78_M79_M80::_Internal::f1(const M72_M78_M79_M80* msg) {
  return *msg->f1_;
}
void M72_M78_M79_M80::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M72_M78_M79_M80_M81* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M78.M79.M80.f1)
}
M72_M78_M79_M80::M72_M78_M79_M80()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M78.M79.M80)
}
M72_M78_M79_M80::M72_M78_M79_M80(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M78.M79.M80)
}
M72_M78_M79_M80::M72_M78_M79_M80(const M72_M78_M79_M80& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M72_M78_M79_M80_M81(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M78.M79.M80)
}

void M72_M78_M79_M80::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_M78_M79_M80_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = nullptr;
}

M72_M78_M79_M80::~M72_M78_M79_M80() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M78.M79.M80)
  SharedDtor();
}

void M72_M78_M79_M80::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M72_M78_M79_M80::ArenaDtor(void* object) {
  M72_M78_M79_M80* _this = reinterpret_cast< M72_M78_M79_M80* >(object);
  (void)_this;
}
void M72_M78_M79_M80::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M78_M79_M80::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M78_M79_M80& M72_M78_M79_M80::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M78_M79_M80_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M78_M79_M80::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M78.M79.M80)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M78_M79_M80::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M72.M78.M79.M80.M81 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M72.M78.M79.M80.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M78_M79_M80::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M78.M79.M80)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M72.M78.M79.M80.M81 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M72.M78.M79.M80.f2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M78.M79.M80)
  return target;
}

size_t M72_M78_M79_M80::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M78.M79.M80)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M72.M78.M79.M80.M81 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M78_M79_M80::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M78.M79.M80)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M78_M79_M80* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M78_M79_M80>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M78.M79.M80)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M78.M79.M80)
    MergeFrom(*source);
  }
}

void M72_M78_M79_M80::MergeFrom(const M72_M78_M79_M80& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M78.M79.M80)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M72_M78_M79_M80_M81::MergeFrom(from._internal_f1());
    }
  }
}

void M72_M78_M79_M80::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M78.M79.M80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M78_M79_M80::CopyFrom(const M72_M78_M79_M80& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M78.M79.M80)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M78_M79_M80::IsInitialized() const {
  return true;
}

void M72_M78_M79_M80::InternalSwap(M72_M78_M79_M80* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M78_M79_M80::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M78_M79::InitAsDefaultInstance() {
  ::hyperprotobench::_M72_M78_M79_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M72_M78_M79_M80*>(
      ::hyperprotobench::M72_M78_M79_M80::internal_default_instance());
}
class M72_M78_M79::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M78_M79>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M72_M78_M79_M80& f2(const M72_M78_M79* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M72_M78_M79_M80&
M72_M78_M79::_Internal::f2(const M72_M78_M79* msg) {
  return *msg->f2_;
}
void M72_M78_M79::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M72_M78_M79_M80* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M78.M79.f2)
}
M72_M78_M79::M72_M78_M79()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M78.M79)
}
M72_M78_M79::M72_M78_M79(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M78.M79)
}
M72_M78_M79::M72_M78_M79(const M72_M78_M79& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M72_M78_M79_M80(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M78.M79)
}

void M72_M78_M79::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_M78_M79_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M72_M78_M79::~M72_M78_M79() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M78.M79)
  SharedDtor();
}

void M72_M78_M79::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M72_M78_M79::ArenaDtor(void* object) {
  M72_M78_M79* _this = reinterpret_cast< M72_M78_M79* >(object);
  (void)_this;
}
void M72_M78_M79::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M78_M79::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M78_M79& M72_M78_M79::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M78_M79_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M78_M79::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M78.M79)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M78_M79::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M78.M79.M80 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M78_M79::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M78.M79)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M72.M78.M79.M80 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M78.M79)
  return target;
}

size_t M72_M78_M79::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M78.M79)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M72.M78.M79.M80 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M78_M79::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M78.M79)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M78_M79* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M78_M79>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M78.M79)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M78.M79)
    MergeFrom(*source);
  }
}

void M72_M78_M79::MergeFrom(const M72_M78_M79& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M78.M79)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M72_M78_M79_M80::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M72_M78_M79::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M78.M79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M78_M79::CopyFrom(const M72_M78_M79& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M78.M79)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M78_M79::IsInitialized() const {
  return true;
}

void M72_M78_M79::InternalSwap(M72_M78_M79* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M78_M79::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72_M78::InitAsDefaultInstance() {
  ::hyperprotobench::_M72_M78_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M72_M78_M79*>(
      ::hyperprotobench::M72_M78_M79::internal_default_instance());
}
class M72_M78::_Internal {
 public:
  using HasBits = decltype(std::declval<M72_M78>()._has_bits_);
  static const ::hyperprotobench::M72_M78_M79& f1(const M72_M78* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M72_M78_M79&
M72_M78::_Internal::f1(const M72_M78* msg) {
  return *msg->f1_;
}
void M72_M78::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M72_M78_M79* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M78.f1)
}
M72_M78::M72_M78()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72.M78)
}
M72_M78::M72_M78(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72.M78)
}
M72_M78::M72_M78(const M72_M78& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M72_M78_M79(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72.M78)
}

void M72_M78::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_M78_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M72_M78::~M72_M78() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72.M78)
  SharedDtor();
}

void M72_M78::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M72_M78::ArenaDtor(void* object) {
  M72_M78* _this = reinterpret_cast< M72_M78* >(object);
  (void)_this;
}
void M72_M78::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72_M78::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72_M78& M72_M78::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_M78_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72_M78::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72.M78)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72_M78::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M72.M78.M79 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72_M78::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72.M78)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M72.M78.M79 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72.M78)
  return target;
}

size_t M72_M78::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72.M78)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M72.M78.M79 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int32 f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72_M78::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72.M78)
  GOOGLE_DCHECK_NE(&from, this);
  const M72_M78* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72_M78>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72.M78)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72.M78)
    MergeFrom(*source);
  }
}

void M72_M78::MergeFrom(const M72_M78& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72.M78)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M72_M78_M79::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M72_M78::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72.M78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72_M78::CopyFrom(const M72_M78& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72.M78)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72_M78::IsInitialized() const {
  return true;
}

void M72_M78::InternalSwap(M72_M78* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72_M78::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M72::InitAsDefaultInstance() {
  ::hyperprotobench::_M72_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M72_M73*>(
      ::hyperprotobench::M72_M73::internal_default_instance());
  ::hyperprotobench::_M72_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M72_M76*>(
      ::hyperprotobench::M72_M76::internal_default_instance());
  ::hyperprotobench::_M72_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M72_M77*>(
      ::hyperprotobench::M72_M77::internal_default_instance());
  ::hyperprotobench::_M72_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M72_M78*>(
      ::hyperprotobench::M72_M78::internal_default_instance());
}
class M72::_Internal {
 public:
  using HasBits = decltype(std::declval<M72>()._has_bits_);
  static const ::hyperprotobench::M72_M73& f2(const M72* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M72_M76& f3(const M72* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M72_M77& f4(const M72* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::hyperprotobench::M72_M78& f9(const M72* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::hyperprotobench::M72_M73&
M72::_Internal::f2(const M72* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M72_M76&
M72::_Internal::f3(const M72* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M72_M77&
M72::_Internal::f4(const M72* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M72_M78&
M72::_Internal::f9(const M72* msg) {
  return *msg->f9_;
}
void M72::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M72_M73* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.f2)
}
void M72::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M72_M76* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.f3)
}
void M72::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M72_M77* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.f4)
}
void M72::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M72_M78* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.f9)
}
M72::M72()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M72)
}
M72::M72(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f1_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M72)
}
M72::M72(const M72& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f1_(from.f1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M72_M73(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M72_M76(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M72_M77(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M72_M78(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  ::memcpy(&f6_, &from.f6_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f6_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M72)
}

void M72::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M72_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f10_));
}

M72::~M72() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M72)
  SharedDtor();
}

void M72::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f9_;
}

void M72::ArenaDtor(void* object) {
  M72* _this = reinterpret_cast< M72* >(object);
  (void)_this;
}
void M72::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M72::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M72& M72::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M72_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M72::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M72)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x00008000u) {
    GOOGLE_DCHECK(f9_ != nullptr);
    f9_->Clear();
  }
  f6_ = PROTOBUF_LONGLONG(0);
  f5_ = 0;
  if (cached_has_bits & 0x00002200u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f8_));
  }
  f10_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M72::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f1(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_f1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M73 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M76 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M77 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f7 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M72.M78 f9 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M72::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M72)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 f1 = 1;
  for (int i = 0, n = this->_internal_f1_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M72.M73 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M72.M76 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f3(this), target, stream);
  }

  // optional .hyperprotobench.M72.M77 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f4(this), target, stream);
  }

  // optional float f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_f5(), target);
  }

  // optional int64 f6 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_f6(), target);
  }

  // optional float f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_f7(), target);
  }

  // optional int32 f8 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M72.M78 f9 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::f9(this), target, stream);
  }

  // optional int32 f10 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M72)
  return target;
}

size_t M72::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M72)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 f1 = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f1_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f1_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .hyperprotobench.M72.M73 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M72.M76 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional .hyperprotobench.M72.M77 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

  }
  if (cached_has_bits & 0x00008100u) {
    // optional .hyperprotobench.M72.M78 f9 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

    // optional int64 f6 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

  }
  // optional float f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00002200u) {
    // optional float f7 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 f8 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

  }
  // optional int32 f10 = 17;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f10());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M72::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M72)
  GOOGLE_DCHECK_NE(&from, this);
  const M72* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M72>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M72)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M72)
    MergeFrom(*source);
  }
}

void M72::MergeFrom(const M72& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M72)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f1_.MergeFrom(from.f1_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M72_M73::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M72_M76::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f4()->::hyperprotobench::M72_M77::MergeFrom(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x00008100u) {
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_f9()->::hyperprotobench::M72_M78::MergeFrom(from._internal_f9());
    }
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000080u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00002200u) {
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00002000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00020000u) {
    _internal_set_f10(from._internal_f10());
  }
}

void M72::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M72::CopyFrom(const M72& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M72)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M72::IsInitialized() const {
  return true;
}

void M72::InternalSwap(M72* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.InternalSwap(&other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f9_, other->f9_);
  swap(f6_, other->f6_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M72::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M83::InitAsDefaultInstance() {
}
class M82_M83::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M83>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M82_M83::M82_M83()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M83)
}
M82_M83::M82_M83(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M83)
}
M82_M83::M82_M83(const M82_M83& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M83)
}

void M82_M83::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M82_M83::~M82_M83() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M83)
  SharedDtor();
}

void M82_M83::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M82_M83::ArenaDtor(void* object) {
  M82_M83* _this = reinterpret_cast< M82_M83* >(object);
  (void)_this;
}
void M82_M83::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M83::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M83& M82_M83::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M83_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M83::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M83)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M83::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M83::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M83)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f1(), target);
  }

  // optional int32 f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M83)
  return target;
}

size_t M82_M83::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M83)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M83::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M83)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M83* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M83>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M83)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M83)
    MergeFrom(*source);
  }
}

void M82_M83::MergeFrom(const M82_M83& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M83)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M83::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M83::CopyFrom(const M82_M83& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M83)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M83::IsInitialized() const {
  return true;
}

void M82_M83::InternalSwap(M82_M83* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M83::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M84_M85_M86_M87::InitAsDefaultInstance() {
}
class M82_M84_M85_M86_M87::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M84_M85_M86_M87>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M82_M84_M85_M86_M87::M82_M84_M85_M86_M87()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M84.M85.M86.M87)
}
M82_M84_M85_M86_M87::M82_M84_M85_M86_M87(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M84.M85.M86.M87)
}
M82_M84_M85_M86_M87::M82_M84_M85_M86_M87(const M82_M84_M85_M86_M87& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M84.M85.M86.M87)
}

void M82_M84_M85_M86_M87::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M84_M85_M86_M87_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = 38;
}

M82_M84_M85_M86_M87::~M82_M84_M85_M86_M87() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M84.M85.M86.M87)
  SharedDtor();
}

void M82_M84_M85_M86_M87::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M82_M84_M85_M86_M87::ArenaDtor(void* object) {
  M82_M84_M85_M86_M87* _this = reinterpret_cast< M82_M84_M85_M86_M87* >(object);
  (void)_this;
}
void M82_M84_M85_M86_M87::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M84_M85_M86_M87::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M84_M85_M86_M87& M82_M84_M85_M86_M87::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M84_M85_M86_M87_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M84_M85_M86_M87::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M84.M85.M86.M87)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    f1_ = 38;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M84_M85_M86_M87::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M82.M84.M85.M86.M87.E1 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M82_M84_M85_M86_M87_E1_IsValid(val))) {
            _internal_set_f1(static_cast<::hyperprotobench::M82_M84_M85_M86_M87_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M82.M84.M85.M86.M87.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M84_M85_M86_M87::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M84.M85.M86.M87)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M82.M84.M85.M86.M87.E1 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M82.M84.M85.M86.M87.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M84.M85.M86.M87)
  return target;
}

size_t M82_M84_M85_M86_M87::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M84.M85.M86.M87)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M82.M84.M85.M86.M87.E1 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M84_M85_M86_M87::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M84.M85.M86.M87)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M84_M85_M86_M87* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M84_M85_M86_M87>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M84.M85.M86.M87)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M84.M85.M86.M87)
    MergeFrom(*source);
  }
}

void M82_M84_M85_M86_M87::MergeFrom(const M82_M84_M85_M86_M87& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M84.M85.M86.M87)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M84_M85_M86_M87::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M84.M85.M86.M87)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M84_M85_M86_M87::CopyFrom(const M82_M84_M85_M86_M87& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M84.M85.M86.M87)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M84_M85_M86_M87::IsInitialized() const {
  return true;
}

void M82_M84_M85_M86_M87::InternalSwap(M82_M84_M85_M86_M87* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M84_M85_M86_M87::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M84_M85_M86::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_M84_M85_M86_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M82_M84_M85_M86_M87*>(
      ::hyperprotobench::M82_M84_M85_M86_M87::internal_default_instance());
}
class M82_M84_M85_M86::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M84_M85_M86>()._has_bits_);
  static const ::hyperprotobench::M82_M84_M85_M86_M87& f1(const M82_M84_M85_M86* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hyperprotobench::M82_M84_M85_M86_M87&
M82_M84_M85_M86::_Internal::f1(const M82_M84_M85_M86* msg) {
  return *msg->f1_;
}
void M82_M84_M85_M86::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M82_M84_M85_M86_M87* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M84.M85.M86.f1)
}
M82_M84_M85_M86::M82_M84_M85_M86()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M84.M85.M86)
}
M82_M84_M85_M86::M82_M84_M85_M86(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M84.M85.M86)
}
M82_M84_M85_M86::M82_M84_M85_M86(const M82_M84_M85_M86& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M82_M84_M85_M86_M87(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f4_, &from.f4_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f4_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M84.M85.M86)
}

void M82_M84_M85_M86::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M84_M85_M86_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  f2_ = 68;
}

M82_M84_M85_M86::~M82_M84_M85_M86() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M84.M85.M86)
  SharedDtor();
}

void M82_M84_M85_M86::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M82_M84_M85_M86::ArenaDtor(void* object) {
  M82_M84_M85_M86* _this = reinterpret_cast< M82_M84_M85_M86* >(object);
  (void)_this;
}
void M82_M84_M85_M86::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M84_M85_M86::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M84_M85_M86& M82_M84_M85_M86::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M84_M85_M86_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M84_M85_M86::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M84.M85.M86)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
    f2_ = 68;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M84_M85_M86::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M82.M84.M85.M86.M87 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M84.M85.M86.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M82_M84_M85_M86_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M82_M84_M85_M86_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M84_M85_M86::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M84.M85.M86)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M82.M84.M85.M86.M87 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M82.M84.M85.M86.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  // optional bool f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f3(), target);
  }

  // optional int64 f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f4(), target);
  }

  // optional int32 f5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M84.M85.M86)
  return target;
}

size_t M82_M84_M85_M86::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M84.M85.M86)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .hyperprotobench.M82.M84.M85.M86.M87 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional bool f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 f5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

    // optional .hyperprotobench.M82.M84.M85.M86.E1 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M84_M85_M86::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M84.M85.M86)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M84_M85_M86* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M84_M85_M86>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M84.M85.M86)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M84.M85.M86)
    MergeFrom(*source);
  }
}

void M82_M84_M85_M86::MergeFrom(const M82_M84_M85_M86& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M84.M85.M86)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M82_M84_M85_M86_M87::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M84_M85_M86::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M84.M85.M86)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M84_M85_M86::CopyFrom(const M82_M84_M85_M86& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M84.M85.M86)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M84_M85_M86::IsInitialized() const {
  return true;
}

void M82_M84_M85_M86::InternalSwap(M82_M84_M85_M86* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f4_, other->f4_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M84_M85_M86::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M84_M85::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_M84_M85_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M82_M84_M85_M86*>(
      ::hyperprotobench::M82_M84_M85_M86::internal_default_instance());
}
class M82_M84_M85::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M84_M85>()._has_bits_);
  static const ::hyperprotobench::M82_M84_M85_M86& f1(const M82_M84_M85* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M82_M84_M85_M86&
M82_M84_M85::_Internal::f1(const M82_M84_M85* msg) {
  return *msg->f1_;
}
void M82_M84_M85::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M82_M84_M85_M86* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M84.M85.f1)
}
M82_M84_M85::M82_M84_M85()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M84.M85)
}
M82_M84_M85::M82_M84_M85(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M84.M85)
}
M82_M84_M85::M82_M84_M85(const M82_M84_M85& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M82_M84_M85_M86(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M84.M85)
}

void M82_M84_M85::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M84_M85_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M82_M84_M85::~M82_M84_M85() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M84.M85)
  SharedDtor();
}

void M82_M84_M85::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M82_M84_M85::ArenaDtor(void* object) {
  M82_M84_M85* _this = reinterpret_cast< M82_M84_M85* >(object);
  (void)_this;
}
void M82_M84_M85::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M84_M85::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M84_M85& M82_M84_M85::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M84_M85_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M84_M85::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M84.M85)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M84_M85::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M82.M84.M85.M86 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M84_M85::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M84.M85)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M82.M84.M85.M86 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f1(this), target, stream);
  }

  // optional sint32 f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M84.M85)
  return target;
}

size_t M82_M84_M85::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M84.M85)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M82.M84.M85.M86 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional sint32 f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M84_M85::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M84.M85)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M84_M85* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M84_M85>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M84.M85)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M84.M85)
    MergeFrom(*source);
  }
}

void M82_M84_M85::MergeFrom(const M82_M84_M85& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M84.M85)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M82_M84_M85_M86::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M84_M85::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M84.M85)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M84_M85::CopyFrom(const M82_M84_M85& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M84.M85)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M84_M85::IsInitialized() const {
  return true;
}

void M82_M84_M85::InternalSwap(M82_M84_M85* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M84_M85::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M84::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_M84_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M82_M84_M85*>(
      ::hyperprotobench::M82_M84_M85::internal_default_instance());
}
class M82_M84::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M84>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M82_M84_M85& f2(const M82_M84* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::hyperprotobench::M82_M84_M85&
M82_M84::_Internal::f2(const M82_M84* msg) {
  return *msg->f2_;
}
void M82_M84::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M82_M84_M85* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M84.f2)
}
M82_M84::M82_M84()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M84)
}
M82_M84::M82_M84(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M84)
}
M82_M84::M82_M84(const M82_M84& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M82_M84_M85(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M84)
}

void M82_M84::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M84_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M82_M84::~M82_M84() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M84)
  SharedDtor();
}

void M82_M84::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M82_M84::ArenaDtor(void* object) {
  M82_M84* _this = reinterpret_cast< M82_M84* >(object);
  (void)_this;
}
void M82_M84::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M84::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M84& M82_M84::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M84_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M84::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M84)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00001000u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M84::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M84.M85 f2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M82.M84.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M84::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M84)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M82.M84.M85 f2 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f2(this), target, stream);
  }

  // optional string f3 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M82.M84.f3");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M84)
  return target;
}

size_t M82_M84::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M84)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    // optional string f3 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M82.M84.M85 f2 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M84::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M84)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M84* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M84>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M84)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M84)
    MergeFrom(*source);
  }
}

void M82_M84::MergeFrom(const M82_M84& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M84)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f2()->::hyperprotobench::M82_M84_M85::MergeFrom(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
}

void M82_M84::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M84::CopyFrom(const M82_M84& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M84)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M84::IsInitialized() const {
  return true;
}

void M82_M84::InternalSwap(M82_M84* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M84::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M88_M89::InitAsDefaultInstance() {
}
class M82_M88_M89::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M88_M89>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M82_M88_M89::M82_M88_M89()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M88.M89)
}
M82_M88_M89::M82_M88_M89(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M88.M89)
}
M82_M88_M89::M82_M88_M89(const M82_M88_M89& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M88.M89)
}

void M82_M88_M89::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M82_M88_M89::~M82_M88_M89() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M88.M89)
  SharedDtor();
}

void M82_M88_M89::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M82_M88_M89::ArenaDtor(void* object) {
  M82_M88_M89* _this = reinterpret_cast< M82_M88_M89* >(object);
  (void)_this;
}
void M82_M88_M89::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M88_M89::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M88_M89& M82_M88_M89::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M88_M89_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M88_M89::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M88.M89)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M88_M89::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M88_M89::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M88.M89)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional float f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M88.M89)
  return target;
}

size_t M82_M88_M89::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M88.M89)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional float f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M88_M89::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M88.M89)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M88_M89* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M88_M89>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M88.M89)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M88.M89)
    MergeFrom(*source);
  }
}

void M82_M88_M89::MergeFrom(const M82_M88_M89& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M88.M89)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M88_M89::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M88.M89)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M88_M89::CopyFrom(const M82_M88_M89& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M88.M89)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M88_M89::IsInitialized() const {
  return true;
}

void M82_M88_M89::InternalSwap(M82_M88_M89* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M88_M89::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M88::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_M88_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M82_M88_M89*>(
      ::hyperprotobench::M82_M88_M89::internal_default_instance());
}
class M82_M88::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M88>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M82_M88_M89& f2(const M82_M88* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M82_M88_M89&
M82_M88::_Internal::f2(const M82_M88* msg) {
  return *msg->f2_;
}
void M82_M88::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M82_M88_M89* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M88.f2)
}
M82_M88::M82_M88()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M88)
}
M82_M88::M82_M88(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M88)
}
M82_M88::M82_M88(const M82_M88& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M82_M88_M89(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M88)
}

void M82_M88::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M88_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = nullptr;
}

M82_M88::~M82_M88() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M88)
  SharedDtor();
}

void M82_M88::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M82_M88::ArenaDtor(void* object) {
  M82_M88* _this = reinterpret_cast< M82_M88* >(object);
  (void)_this;
}
void M82_M88::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M88::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M88& M82_M88::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M88_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M88::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M88)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000200u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M88::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M88.M89 f2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M88::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M88)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M82.M88.M89 f2 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M88)
  return target;
}

size_t M82_M88::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M88)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  // optional .hyperprotobench.M82.M88.M89 f2 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M88::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M88)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M88* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M88>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M88)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M88)
    MergeFrom(*source);
  }
}

void M82_M88::MergeFrom(const M82_M88& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M88)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::hyperprotobench::M82_M88_M89::MergeFrom(from._internal_f2());
  }
}

void M82_M88::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M88)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M88::CopyFrom(const M82_M88& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M88)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M88::IsInitialized() const {
  return true;
}

void M82_M88::InternalSwap(M82_M88* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M88::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M90_M91::InitAsDefaultInstance() {
}
class M82_M90_M91::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M90_M91>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M82_M90_M91::M82_M90_M91()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M90.M91)
}
M82_M90_M91::M82_M90_M91(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M90.M91)
}
M82_M90_M91::M82_M90_M91(const M82_M90_M91& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M90.M91)
}

void M82_M90_M91::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M90_M91_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M82_M90_M91::~M82_M90_M91() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M90.M91)
  SharedDtor();
}

void M82_M90_M91::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M82_M90_M91::ArenaDtor(void* object) {
  M82_M90_M91* _this = reinterpret_cast< M82_M90_M91* >(object);
  (void)_this;
}
void M82_M90_M91::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M90_M91::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M90_M91& M82_M90_M91::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M90_M91_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M90_M91::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M90.M91)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M90_M91::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M82.M90.M91.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M90_M91::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M90.M91)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M82.M90.M91.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M90.M91)
  return target;
}

size_t M82_M90_M91::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M90.M91)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M90_M91::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M90.M91)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M90_M91* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M90_M91>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M90.M91)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M90.M91)
    MergeFrom(*source);
  }
}

void M82_M90_M91::MergeFrom(const M82_M90_M91& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M90.M91)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M82_M90_M91::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M90.M91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M90_M91::CopyFrom(const M82_M90_M91& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M90.M91)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M90_M91::IsInitialized() const {
  return true;
}

void M82_M90_M91::InternalSwap(M82_M90_M91* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M90_M91::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82_M90::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_M90_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M82_M90_M91*>(
      ::hyperprotobench::M82_M90_M91::internal_default_instance());
}
class M82_M90::_Internal {
 public:
  using HasBits = decltype(std::declval<M82_M90>()._has_bits_);
  static const ::hyperprotobench::M82_M90_M91& f1(const M82_M90* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::hyperprotobench::M82_M90_M91&
M82_M90::_Internal::f1(const M82_M90* msg) {
  return *msg->f1_;
}
void M82_M90::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M82_M90_M91* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M90.f1)
}
M82_M90::M82_M90()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82.M90)
}
M82_M90::M82_M90(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f3_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82.M90)
}
M82_M90::M82_M90(const M82_M90& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f3_(from.f3_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M82_M90_M91(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82.M90)
}

void M82_M90::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_M90_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
}

M82_M90::~M82_M90() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82.M90)
  SharedDtor();
}

void M82_M90::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M82_M90::ArenaDtor(void* object) {
  M82_M90* _this = reinterpret_cast< M82_M90* >(object);
  (void)_this;
}
void M82_M90::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82_M90::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82_M90& M82_M90::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_M90_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82_M90::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82.M90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f3_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000024u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82_M90::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M82.M90.M91 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_f3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82_M90::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82.M90)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M82.M90.M91 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional float f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f2(), target);
  }

  // repeated bool f3 = 4;
  for (int i = 0, n = this->_internal_f3_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f3(i), target);
  }

  // optional float f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82.M90)
  return target;
}

size_t M82_M90::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82.M90)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool f3 = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f3_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f3_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000026u) {
    // optional .hyperprotobench.M82.M90.M91 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional float f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82_M90::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82.M90)
  GOOGLE_DCHECK_NE(&from, this);
  const M82_M90* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82_M90>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82.M90)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82.M90)
    MergeFrom(*source);
  }
}

void M82_M90::MergeFrom(const M82_M90& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82.M90)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f3_.MergeFrom(from.f3_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000026u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M82_M90_M91::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82_M90::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82.M90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82_M90::CopyFrom(const M82_M90& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82.M90)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82_M90::IsInitialized() const {
  return true;
}

void M82_M90::InternalSwap(M82_M90* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.InternalSwap(&other->f3_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82_M90::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M82::InitAsDefaultInstance() {
  ::hyperprotobench::_M82_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M82_M83*>(
      ::hyperprotobench::M82_M83::internal_default_instance());
  ::hyperprotobench::_M82_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M82_M84*>(
      ::hyperprotobench::M82_M84::internal_default_instance());
  ::hyperprotobench::_M82_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M82_M88*>(
      ::hyperprotobench::M82_M88::internal_default_instance());
  ::hyperprotobench::_M82_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M82_M90*>(
      ::hyperprotobench::M82_M90::internal_default_instance());
}
class M82::_Internal {
 public:
  using HasBits = decltype(std::declval<M82>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M82_M83& f4(const M82* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M82_M84& f6(const M82* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::hyperprotobench::M82_M88& f7(const M82* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::hyperprotobench::M82_M90& f8(const M82* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::hyperprotobench::M82_M83&
M82::_Internal::f4(const M82* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M82_M84&
M82::_Internal::f6(const M82* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M82_M88&
M82::_Internal::f7(const M82* msg) {
  return *msg->f7_;
}
const ::hyperprotobench::M82_M90&
M82::_Internal::f8(const M82* msg) {
  return *msg->f8_;
}
void M82::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M82_M83* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.f4)
}
void M82::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M82_M84* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.f6)
}
void M82::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M82_M88* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.f7)
}
void M82::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M82_M90* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.f8)
}
M82::M82()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M82)
}
M82::M82(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M82)
}
M82::M82(const M82& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M82_M83(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M82_M84(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M82_M88(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M82_M90(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f12_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f12_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M82)
}

void M82::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M82_benchmark_2eproto.base);
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f12_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f12_));
}

M82::~M82() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M82)
  SharedDtor();
}

void M82::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f7_;
  if (this != internal_default_instance()) delete f8_;
}

void M82::ArenaDtor(void* object) {
  M82* _this = reinterpret_cast< M82* >(object);
  (void)_this;
}
void M82::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M82::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M82& M82::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M82_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M82::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M82)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f4_ != nullptr);
    f4_->Clear();
  }
  if (cached_has_bits & 0x002c0000u) {
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(f6_ != nullptr);
      f6_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(f8_ != nullptr);
      f8_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  f5_ = 0;
  if (cached_has_bits & 0x00c00000u) {
    ::memset(&f9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f9_)) + sizeof(f10_));
  }
  if (cached_has_bits & 0x06000000u) {
    ::memset(&f11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f12_) -
        reinterpret_cast<char*>(&f11_)) + sizeof(f12_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M82::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M83 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.E1 f5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M82_E1_IsValid(val))) {
            _internal_set_f5(static_cast<::hyperprotobench::M82_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M84 f6 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M88 f7 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M82.M90 f8 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f11 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f12 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M82::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M82)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional double f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f2(), target);
  }

  // optional int64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M82.M83 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f4(this), target, stream);
  }

  // optional .hyperprotobench.M82.E1 f5 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M82.M84 f6 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::f6(this), target, stream);
  }

  // optional .hyperprotobench.M82.M88 f7 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::f7(this), target, stream);
  }

  // optional .hyperprotobench.M82.M90 f8 = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::f8(this), target, stream);
  }

  // optional int32 f9 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_f9(), target);
  }

  // optional int32 f10 = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_f10(), target);
  }

  // optional int32 f11 = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_f11(), target);
  }

  // optional int32 f12 = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M82)
  return target;
}

size_t M82::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M82)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hyperprotobench.M82.M83 f4 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f4_);
  }

  if (cached_has_bits & 0x002c0000u) {
    // optional .hyperprotobench.M82.M84 f6 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f6_);
    }

    // optional .hyperprotobench.M82.M88 f7 = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

    // optional .hyperprotobench.M82.M90 f8 = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f8_);
    }

  }
  if (cached_has_bits & 0x0000000eu) {
    // optional double f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  // optional .hyperprotobench.M82.E1 f5 = 12;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f5());
  }

  if (cached_has_bits & 0x00c00000u) {
    // optional int32 f9 = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional int32 f10 = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f10());
    }

  }
  if (cached_has_bits & 0x06000000u) {
    // optional int32 f11 = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f11());
    }

    // optional int32 f12 = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f12());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M82::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M82)
  GOOGLE_DCHECK_NE(&from, this);
  const M82* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M82>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M82)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M82)
    MergeFrom(*source);
  }
}

void M82::MergeFrom(const M82& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M82)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f4()) {
    _internal_mutable_f4()->::hyperprotobench::M82_M83::MergeFrom(from._internal_f4());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x002c0000u) {
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_f6()->::hyperprotobench::M82_M84::MergeFrom(from._internal_f6());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_f7()->::hyperprotobench::M82_M88::MergeFrom(from._internal_f7());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_f8()->::hyperprotobench::M82_M90::MergeFrom(from._internal_f8());
    }
  }
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001000u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00c00000u) {
    if (cached_has_bits & 0x00400000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00800000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x06000000u) {
    if (cached_has_bits & 0x02000000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x04000000u) {
      f12_ = from.f12_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M82::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M82::CopyFrom(const M82& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M82)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M82::IsInitialized() const {
  return true;
}

void M82::InternalSwap(M82* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f12_, other->f12_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M82::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M92_M93::InitAsDefaultInstance() {
}
class M92_M93::_Internal {
 public:
  using HasBits = decltype(std::declval<M92_M93>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M92_M93::M92_M93()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M92.M93)
}
M92_M93::M92_M93(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M92.M93)
}
M92_M93::M92_M93(const M92_M93& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M92.M93)
}

void M92_M93::SharedCtor() {
  f1_ = 0;
}

M92_M93::~M92_M93() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M92.M93)
  SharedDtor();
}

void M92_M93::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M92_M93::ArenaDtor(void* object) {
  M92_M93* _this = reinterpret_cast< M92_M93* >(object);
  (void)_this;
}
void M92_M93::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M92_M93::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M92_M93& M92_M93::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M92_M93_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M92_M93::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M92.M93)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M92_M93::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M92_M93::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M92.M93)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M92.M93)
  return target;
}

size_t M92_M93::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M92.M93)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M92_M93::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M92.M93)
  GOOGLE_DCHECK_NE(&from, this);
  const M92_M93* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M92_M93>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M92.M93)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M92.M93)
    MergeFrom(*source);
  }
}

void M92_M93::MergeFrom(const M92_M93& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M92.M93)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M92_M93::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M92.M93)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M92_M93::CopyFrom(const M92_M93& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M92.M93)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M92_M93::IsInitialized() const {
  return true;
}

void M92_M93::InternalSwap(M92_M93* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M92_M93::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M92_M94_M95::InitAsDefaultInstance() {
}
class M92_M94_M95::_Internal {
 public:
  using HasBits = decltype(std::declval<M92_M94_M95>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M92_M94_M95::M92_M94_M95()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M92.M94.M95)
}
M92_M94_M95::M92_M94_M95(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M92.M94.M95)
}
M92_M94_M95::M92_M94_M95(const M92_M94_M95& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M92.M94.M95)
}

void M92_M94_M95::SharedCtor() {
  f1_ = 0;
}

M92_M94_M95::~M92_M94_M95() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M92.M94.M95)
  SharedDtor();
}

void M92_M94_M95::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M92_M94_M95::ArenaDtor(void* object) {
  M92_M94_M95* _this = reinterpret_cast< M92_M94_M95* >(object);
  (void)_this;
}
void M92_M94_M95::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M92_M94_M95::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M92_M94_M95& M92_M94_M95::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M92_M94_M95_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M92_M94_M95::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M92.M94.M95)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M92_M94_M95::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M92_M94_M95::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M92.M94.M95)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M92.M94.M95)
  return target;
}

size_t M92_M94_M95::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M92.M94.M95)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M92_M94_M95::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M92.M94.M95)
  GOOGLE_DCHECK_NE(&from, this);
  const M92_M94_M95* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M92_M94_M95>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M92.M94.M95)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M92.M94.M95)
    MergeFrom(*source);
  }
}

void M92_M94_M95::MergeFrom(const M92_M94_M95& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M92.M94.M95)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M92_M94_M95::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M92.M94.M95)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M92_M94_M95::CopyFrom(const M92_M94_M95& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M92.M94.M95)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M92_M94_M95::IsInitialized() const {
  return true;
}

void M92_M94_M95::InternalSwap(M92_M94_M95* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M92_M94_M95::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M92_M94::InitAsDefaultInstance() {
  ::hyperprotobench::_M92_M94_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M92_M94_M95*>(
      ::hyperprotobench::M92_M94_M95::internal_default_instance());
}
class M92_M94::_Internal {
 public:
  using HasBits = decltype(std::declval<M92_M94>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M92_M94_M95& f2(const M92_M94* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M92_M94_M95&
M92_M94::_Internal::f2(const M92_M94* msg) {
  return *msg->f2_;
}
void M92_M94::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M92_M94_M95* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M92.M94.f2)
}
M92_M94::M92_M94()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M92.M94)
}
M92_M94::M92_M94(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M92.M94)
}
M92_M94::M92_M94(const M92_M94& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M92_M94_M95(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M92.M94)
}

void M92_M94::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M92_M94_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M92_M94::~M92_M94() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M92.M94)
  SharedDtor();
}

void M92_M94::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M92_M94::ArenaDtor(void* object) {
  M92_M94* _this = reinterpret_cast< M92_M94* >(object);
  (void)_this;
}
void M92_M94::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M92_M94::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M92_M94& M92_M94::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M92_M94_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M92_M94::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M92.M94)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M92_M94::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M92.M94.M95 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M92_M94::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M92.M94)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M92.M94.M95 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M92.M94)
  return target;
}

size_t M92_M94::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M92.M94)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M92.M94.M95 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M92_M94::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M92.M94)
  GOOGLE_DCHECK_NE(&from, this);
  const M92_M94* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M92_M94>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M92.M94)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M92.M94)
    MergeFrom(*source);
  }
}

void M92_M94::MergeFrom(const M92_M94& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M92.M94)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M92_M94_M95::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M92_M94::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M92.M94)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M92_M94::CopyFrom(const M92_M94& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M92.M94)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M92_M94::IsInitialized() const {
  return true;
}

void M92_M94::InternalSwap(M92_M94* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M92_M94::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M92::InitAsDefaultInstance() {
  ::hyperprotobench::_M92_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M92_M93*>(
      ::hyperprotobench::M92_M93::internal_default_instance());
  ::hyperprotobench::_M92_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M92_M94*>(
      ::hyperprotobench::M92_M94::internal_default_instance());
}
class M92::_Internal {
 public:
  using HasBits = decltype(std::declval<M92>()._has_bits_);
  static const ::hyperprotobench::M92_M93& f1(const M92* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M92_M94& f2(const M92* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M92_M93&
M92::_Internal::f1(const M92* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M92_M94&
M92::_Internal::f2(const M92* msg) {
  return *msg->f2_;
}
void M92::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M92_M93* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M92.f1)
}
void M92::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M92_M94* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M92.f2)
}
M92::M92()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M92)
}
M92::M92(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M92)
}
M92::M92(const M92& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M92_M93(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M92_M94(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M92)
}

void M92::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M92_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
}

M92::~M92() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M92)
  SharedDtor();
}

void M92::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void M92::ArenaDtor(void* object) {
  M92* _this = reinterpret_cast< M92* >(object);
  (void)_this;
}
void M92::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M92::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M92& M92::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M92_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M92::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M92)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M92::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M92.M93 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M92.M94 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M92::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M92)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M92.M93 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M92.M94 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  // optional int32 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M92)
  return target;
}

size_t M92::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M92)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .hyperprotobench.M92.M93 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M92.M94 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M92::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M92)
  GOOGLE_DCHECK_NE(&from, this);
  const M92* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M92>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M92)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M92)
    MergeFrom(*source);
  }
}

void M92::MergeFrom(const M92& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M92)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M92_M93::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M92_M94::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M92::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M92)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M92::CopyFrom(const M92& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M92)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M92::IsInitialized() const {
  return true;
}

void M92::InternalSwap(M92* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M92::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2_M3* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2_M3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2_M3 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2_M4_M5* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2_M4_M5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2_M4_M5 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2_M4* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2_M4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2_M4 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6_M7* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6_M7 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6_M7 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6_M8* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6_M8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6_M8 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6_M9_M10_M11* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6_M9_M10_M11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6_M9_M10_M11 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6_M9_M10* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6_M9_M10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6_M9_M10 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6_M9* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6_M9 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6_M9 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M6* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M6 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1* Arena::CreateMaybeMessage< ::hyperprotobench::M1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M13_M14_M15* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M13_M14_M15 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M13_M14_M15 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M13_M14* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M13_M14 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M13_M14 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M13* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M13 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M13 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M16* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M16 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17_M18_M19_M20_M21* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17_M18_M19_M20_M21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17_M18_M19_M20_M21 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17_M18_M19_M20* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17_M18_M19_M20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17_M18_M19_M20 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17_M18_M19* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17_M18_M19 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17_M18_M19 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17_M18* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17_M18 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17_M18 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17_M22* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17_M22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17_M22 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12_M17* Arena::CreateMaybeMessage< ::hyperprotobench::M12_M17 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12_M17 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M12* Arena::CreateMaybeMessage< ::hyperprotobench::M12 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M12 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M24_M25* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M24_M25 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M24_M25 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M24_M26* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M24_M26 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M24_M26 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M24_M27* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M24_M27 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M24_M27 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M24* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M24 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M24 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M28* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M28 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M28 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M29_M30_M31_M32* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M29_M30_M31_M32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M29_M30_M31_M32 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M29_M30_M31* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M29_M30_M31 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M29_M30_M31 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M29_M30* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M29_M30 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M29_M30 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M29_M33* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M29_M33 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M29_M33 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23_M29* Arena::CreateMaybeMessage< ::hyperprotobench::M23_M29 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23_M29 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M23* Arena::CreateMaybeMessage< ::hyperprotobench::M23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M23 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M35* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M35 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M35 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M36* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M36 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M36 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M37_M38_M39_M40_M41* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M37_M38_M39_M40_M41 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M37_M38_M39_M40_M41 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M37_M38_M39_M40* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M37_M38_M39_M40 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M37_M38_M39_M40 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M37_M38_M39* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M37_M38_M39 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M37_M38_M39 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M37_M38* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M37_M38 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M37_M38 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M37* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M37 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M37 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34_M42* Arena::CreateMaybeMessage< ::hyperprotobench::M34_M42 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34_M42 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M34* Arena::CreateMaybeMessage< ::hyperprotobench::M34 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M34 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44_M45* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44_M45 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44_M45 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44_M46* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44_M46 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44_M46 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44_M47* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44_M47 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44_M47 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48_M49* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48_M49 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48_M49 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48_M50_M51_M52_M53* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48_M50_M51_M52_M53 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48_M50_M51_M52_M53 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48_M50_M51_M52* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48_M50_M51_M52 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48_M50_M51_M52 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48_M50_M51* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48_M50_M51 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48_M50_M51 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48_M50* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48_M50 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48_M50 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M48* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M48 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M48 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43* Arena::CreateMaybeMessage< ::hyperprotobench::M43 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M55_M56_M57_M58* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M55_M56_M57_M58 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M55_M56_M57_M58 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M55_M56_M57* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M55_M56_M57 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M55_M56_M57 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M55_M56* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M55_M56 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M55_M56 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M55* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M55 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M55 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M59_M60* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M59_M60 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M59_M60 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M59* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M59 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M59 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M61* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M61 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M61 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M62_M63* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M62_M63 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M62_M63 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54_M62* Arena::CreateMaybeMessage< ::hyperprotobench::M54_M62 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54_M62 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M54* Arena::CreateMaybeMessage< ::hyperprotobench::M54 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M54 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M65* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M65 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M65 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M66* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M66 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M66 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M67* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M67 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M67 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M68_M69_M70_M71* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M68_M69_M70_M71 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M68_M69_M70_M71 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M68_M69_M70* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M68_M69_M70 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M68_M69_M70 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M68_M69* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M68_M69 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M68_M69 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64_M68* Arena::CreateMaybeMessage< ::hyperprotobench::M64_M68 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64_M68 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M64* Arena::CreateMaybeMessage< ::hyperprotobench::M64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M64 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M73_M74* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M73_M74 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M73_M74 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M73_M75* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M73_M75 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M73_M75 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M73* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M73 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M73 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M76* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M76 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M76 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M77* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M77 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M77 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M78_M79_M80_M81* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M78_M79_M80_M81 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M78_M79_M80_M81 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M78_M79_M80* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M78_M79_M80 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M78_M79_M80 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M78_M79* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M78_M79 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M78_M79 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72_M78* Arena::CreateMaybeMessage< ::hyperprotobench::M72_M78 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72_M78 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M72* Arena::CreateMaybeMessage< ::hyperprotobench::M72 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M72 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M83* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M83 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M83 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M84_M85_M86_M87* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M84_M85_M86_M87 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M84_M85_M86_M87 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M84_M85_M86* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M84_M85_M86 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M84_M85_M86 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M84_M85* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M84_M85 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M84_M85 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M84* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M84 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M84 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M88_M89* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M88_M89 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M88_M89 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M88* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M88 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M88 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M90_M91* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M90_M91 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M90_M91 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82_M90* Arena::CreateMaybeMessage< ::hyperprotobench::M82_M90 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82_M90 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M82* Arena::CreateMaybeMessage< ::hyperprotobench::M82 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M82 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M92_M93* Arena::CreateMaybeMessage< ::hyperprotobench::M92_M93 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M92_M93 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M92_M94_M95* Arena::CreateMaybeMessage< ::hyperprotobench::M92_M94_M95 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M92_M94_M95 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M92_M94* Arena::CreateMaybeMessage< ::hyperprotobench::M92_M94 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M92_M94 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M92* Arena::CreateMaybeMessage< ::hyperprotobench::M92 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M92 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
