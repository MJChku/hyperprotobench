// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[95]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto;

 struct hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M2_M4_M5_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M4_M5_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M2_M4_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M4_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_M7_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M7_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_M8_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M8_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_M9_M10_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M9_M10_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_M9_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M9_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M6_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M13_M14_M15_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M13_M14_M15_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M13_M14_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M13_M14_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M13_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M13_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M16_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M16_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_M18_M19_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18_M19_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_M18_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_M22_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M22_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_M17_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M12_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M12_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M24_M25_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24_M25_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M24_M26_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24_M26_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M24_M27_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24_M27_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M28_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M28_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M29_M30_M31_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M30_M31_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M29_M30_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M30_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M29_M33_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M33_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M29_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M35_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M35_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M36_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M36_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M37_M38_M39_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_M39_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M37_M38_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M37_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_M42_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_M42_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M34_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M34_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_M45_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_M46_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_M46_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_M47_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_M47_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_M49_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M49_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_M50_M51_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_M50_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M48_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M55_M56_M57_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M55_M56_M57_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M55_M56_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M55_M56_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M55_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M55_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M59_M60_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M59_M60_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M59_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M59_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M61_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M61_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M62_M63_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M62_M63_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_M62_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_M62_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M54_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M54_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M65_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M65_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M66_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M66_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M67_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M67_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M68_M69_M70_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M68_M69_M70_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M68_M69_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M68_M69_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_M68_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_M68_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M64_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M64_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M73_M74_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M73_M74_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M73_M75_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M73_M75_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M73_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M73_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M76_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M76_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M77_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M77_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M78_M79_M80_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M78_M79_M80_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M78_M79_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M78_M79_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_M78_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_M78_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M72_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M72_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M83_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M83_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M84_M85_M86_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M84_M85_M86_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M84_M85_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M84_M85_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M84_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M84_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M88_M89_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M88_M89_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M88_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M88_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M90_M91_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M90_M91_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_M90_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_M90_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M82_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M82_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M92_M93_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M92_M93_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M92_M94_M95_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M92_M94_M95_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M92_M94_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M92_M94_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M92_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M92_ACCEL_DESCRIPTORS[];
};
namespace hyperprotobench {
class M1;
class M1DefaultTypeInternal;
extern M1DefaultTypeInternal _M1_default_instance_;
class M12;
class M12DefaultTypeInternal;
extern M12DefaultTypeInternal _M12_default_instance_;
class M12_M13;
class M12_M13DefaultTypeInternal;
extern M12_M13DefaultTypeInternal _M12_M13_default_instance_;
class M12_M13_M14;
class M12_M13_M14DefaultTypeInternal;
extern M12_M13_M14DefaultTypeInternal _M12_M13_M14_default_instance_;
class M12_M13_M14_M15;
class M12_M13_M14_M15DefaultTypeInternal;
extern M12_M13_M14_M15DefaultTypeInternal _M12_M13_M14_M15_default_instance_;
class M12_M16;
class M12_M16DefaultTypeInternal;
extern M12_M16DefaultTypeInternal _M12_M16_default_instance_;
class M12_M17;
class M12_M17DefaultTypeInternal;
extern M12_M17DefaultTypeInternal _M12_M17_default_instance_;
class M12_M17_M18;
class M12_M17_M18DefaultTypeInternal;
extern M12_M17_M18DefaultTypeInternal _M12_M17_M18_default_instance_;
class M12_M17_M18_M19;
class M12_M17_M18_M19DefaultTypeInternal;
extern M12_M17_M18_M19DefaultTypeInternal _M12_M17_M18_M19_default_instance_;
class M12_M17_M18_M19_M20;
class M12_M17_M18_M19_M20DefaultTypeInternal;
extern M12_M17_M18_M19_M20DefaultTypeInternal _M12_M17_M18_M19_M20_default_instance_;
class M12_M17_M18_M19_M20_M21;
class M12_M17_M18_M19_M20_M21DefaultTypeInternal;
extern M12_M17_M18_M19_M20_M21DefaultTypeInternal _M12_M17_M18_M19_M20_M21_default_instance_;
class M12_M17_M22;
class M12_M17_M22DefaultTypeInternal;
extern M12_M17_M22DefaultTypeInternal _M12_M17_M22_default_instance_;
class M1_M2;
class M1_M2DefaultTypeInternal;
extern M1_M2DefaultTypeInternal _M1_M2_default_instance_;
class M1_M2_M3;
class M1_M2_M3DefaultTypeInternal;
extern M1_M2_M3DefaultTypeInternal _M1_M2_M3_default_instance_;
class M1_M2_M4;
class M1_M2_M4DefaultTypeInternal;
extern M1_M2_M4DefaultTypeInternal _M1_M2_M4_default_instance_;
class M1_M2_M4_M5;
class M1_M2_M4_M5DefaultTypeInternal;
extern M1_M2_M4_M5DefaultTypeInternal _M1_M2_M4_M5_default_instance_;
class M1_M6;
class M1_M6DefaultTypeInternal;
extern M1_M6DefaultTypeInternal _M1_M6_default_instance_;
class M1_M6_M7;
class M1_M6_M7DefaultTypeInternal;
extern M1_M6_M7DefaultTypeInternal _M1_M6_M7_default_instance_;
class M1_M6_M8;
class M1_M6_M8DefaultTypeInternal;
extern M1_M6_M8DefaultTypeInternal _M1_M6_M8_default_instance_;
class M1_M6_M9;
class M1_M6_M9DefaultTypeInternal;
extern M1_M6_M9DefaultTypeInternal _M1_M6_M9_default_instance_;
class M1_M6_M9_M10;
class M1_M6_M9_M10DefaultTypeInternal;
extern M1_M6_M9_M10DefaultTypeInternal _M1_M6_M9_M10_default_instance_;
class M1_M6_M9_M10_M11;
class M1_M6_M9_M10_M11DefaultTypeInternal;
extern M1_M6_M9_M10_M11DefaultTypeInternal _M1_M6_M9_M10_M11_default_instance_;
class M23;
class M23DefaultTypeInternal;
extern M23DefaultTypeInternal _M23_default_instance_;
class M23_M24;
class M23_M24DefaultTypeInternal;
extern M23_M24DefaultTypeInternal _M23_M24_default_instance_;
class M23_M24_M25;
class M23_M24_M25DefaultTypeInternal;
extern M23_M24_M25DefaultTypeInternal _M23_M24_M25_default_instance_;
class M23_M24_M26;
class M23_M24_M26DefaultTypeInternal;
extern M23_M24_M26DefaultTypeInternal _M23_M24_M26_default_instance_;
class M23_M24_M27;
class M23_M24_M27DefaultTypeInternal;
extern M23_M24_M27DefaultTypeInternal _M23_M24_M27_default_instance_;
class M23_M28;
class M23_M28DefaultTypeInternal;
extern M23_M28DefaultTypeInternal _M23_M28_default_instance_;
class M23_M29;
class M23_M29DefaultTypeInternal;
extern M23_M29DefaultTypeInternal _M23_M29_default_instance_;
class M23_M29_M30;
class M23_M29_M30DefaultTypeInternal;
extern M23_M29_M30DefaultTypeInternal _M23_M29_M30_default_instance_;
class M23_M29_M30_M31;
class M23_M29_M30_M31DefaultTypeInternal;
extern M23_M29_M30_M31DefaultTypeInternal _M23_M29_M30_M31_default_instance_;
class M23_M29_M30_M31_M32;
class M23_M29_M30_M31_M32DefaultTypeInternal;
extern M23_M29_M30_M31_M32DefaultTypeInternal _M23_M29_M30_M31_M32_default_instance_;
class M23_M29_M33;
class M23_M29_M33DefaultTypeInternal;
extern M23_M29_M33DefaultTypeInternal _M23_M29_M33_default_instance_;
class M34;
class M34DefaultTypeInternal;
extern M34DefaultTypeInternal _M34_default_instance_;
class M34_M35;
class M34_M35DefaultTypeInternal;
extern M34_M35DefaultTypeInternal _M34_M35_default_instance_;
class M34_M36;
class M34_M36DefaultTypeInternal;
extern M34_M36DefaultTypeInternal _M34_M36_default_instance_;
class M34_M37;
class M34_M37DefaultTypeInternal;
extern M34_M37DefaultTypeInternal _M34_M37_default_instance_;
class M34_M37_M38;
class M34_M37_M38DefaultTypeInternal;
extern M34_M37_M38DefaultTypeInternal _M34_M37_M38_default_instance_;
class M34_M37_M38_M39;
class M34_M37_M38_M39DefaultTypeInternal;
extern M34_M37_M38_M39DefaultTypeInternal _M34_M37_M38_M39_default_instance_;
class M34_M37_M38_M39_M40;
class M34_M37_M38_M39_M40DefaultTypeInternal;
extern M34_M37_M38_M39_M40DefaultTypeInternal _M34_M37_M38_M39_M40_default_instance_;
class M34_M37_M38_M39_M40_M41;
class M34_M37_M38_M39_M40_M41DefaultTypeInternal;
extern M34_M37_M38_M39_M40_M41DefaultTypeInternal _M34_M37_M38_M39_M40_M41_default_instance_;
class M34_M42;
class M34_M42DefaultTypeInternal;
extern M34_M42DefaultTypeInternal _M34_M42_default_instance_;
class M43;
class M43DefaultTypeInternal;
extern M43DefaultTypeInternal _M43_default_instance_;
class M43_M44;
class M43_M44DefaultTypeInternal;
extern M43_M44DefaultTypeInternal _M43_M44_default_instance_;
class M43_M44_M45;
class M43_M44_M45DefaultTypeInternal;
extern M43_M44_M45DefaultTypeInternal _M43_M44_M45_default_instance_;
class M43_M44_M46;
class M43_M44_M46DefaultTypeInternal;
extern M43_M44_M46DefaultTypeInternal _M43_M44_M46_default_instance_;
class M43_M44_M47;
class M43_M44_M47DefaultTypeInternal;
extern M43_M44_M47DefaultTypeInternal _M43_M44_M47_default_instance_;
class M43_M48;
class M43_M48DefaultTypeInternal;
extern M43_M48DefaultTypeInternal _M43_M48_default_instance_;
class M43_M48_M49;
class M43_M48_M49DefaultTypeInternal;
extern M43_M48_M49DefaultTypeInternal _M43_M48_M49_default_instance_;
class M43_M48_M50;
class M43_M48_M50DefaultTypeInternal;
extern M43_M48_M50DefaultTypeInternal _M43_M48_M50_default_instance_;
class M43_M48_M50_M51;
class M43_M48_M50_M51DefaultTypeInternal;
extern M43_M48_M50_M51DefaultTypeInternal _M43_M48_M50_M51_default_instance_;
class M43_M48_M50_M51_M52;
class M43_M48_M50_M51_M52DefaultTypeInternal;
extern M43_M48_M50_M51_M52DefaultTypeInternal _M43_M48_M50_M51_M52_default_instance_;
class M43_M48_M50_M51_M52_M53;
class M43_M48_M50_M51_M52_M53DefaultTypeInternal;
extern M43_M48_M50_M51_M52_M53DefaultTypeInternal _M43_M48_M50_M51_M52_M53_default_instance_;
class M54;
class M54DefaultTypeInternal;
extern M54DefaultTypeInternal _M54_default_instance_;
class M54_M55;
class M54_M55DefaultTypeInternal;
extern M54_M55DefaultTypeInternal _M54_M55_default_instance_;
class M54_M55_M56;
class M54_M55_M56DefaultTypeInternal;
extern M54_M55_M56DefaultTypeInternal _M54_M55_M56_default_instance_;
class M54_M55_M56_M57;
class M54_M55_M56_M57DefaultTypeInternal;
extern M54_M55_M56_M57DefaultTypeInternal _M54_M55_M56_M57_default_instance_;
class M54_M55_M56_M57_M58;
class M54_M55_M56_M57_M58DefaultTypeInternal;
extern M54_M55_M56_M57_M58DefaultTypeInternal _M54_M55_M56_M57_M58_default_instance_;
class M54_M59;
class M54_M59DefaultTypeInternal;
extern M54_M59DefaultTypeInternal _M54_M59_default_instance_;
class M54_M59_M60;
class M54_M59_M60DefaultTypeInternal;
extern M54_M59_M60DefaultTypeInternal _M54_M59_M60_default_instance_;
class M54_M61;
class M54_M61DefaultTypeInternal;
extern M54_M61DefaultTypeInternal _M54_M61_default_instance_;
class M54_M62;
class M54_M62DefaultTypeInternal;
extern M54_M62DefaultTypeInternal _M54_M62_default_instance_;
class M54_M62_M63;
class M54_M62_M63DefaultTypeInternal;
extern M54_M62_M63DefaultTypeInternal _M54_M62_M63_default_instance_;
class M64;
class M64DefaultTypeInternal;
extern M64DefaultTypeInternal _M64_default_instance_;
class M64_M65;
class M64_M65DefaultTypeInternal;
extern M64_M65DefaultTypeInternal _M64_M65_default_instance_;
class M64_M66;
class M64_M66DefaultTypeInternal;
extern M64_M66DefaultTypeInternal _M64_M66_default_instance_;
class M64_M67;
class M64_M67DefaultTypeInternal;
extern M64_M67DefaultTypeInternal _M64_M67_default_instance_;
class M64_M68;
class M64_M68DefaultTypeInternal;
extern M64_M68DefaultTypeInternal _M64_M68_default_instance_;
class M64_M68_M69;
class M64_M68_M69DefaultTypeInternal;
extern M64_M68_M69DefaultTypeInternal _M64_M68_M69_default_instance_;
class M64_M68_M69_M70;
class M64_M68_M69_M70DefaultTypeInternal;
extern M64_M68_M69_M70DefaultTypeInternal _M64_M68_M69_M70_default_instance_;
class M64_M68_M69_M70_M71;
class M64_M68_M69_M70_M71DefaultTypeInternal;
extern M64_M68_M69_M70_M71DefaultTypeInternal _M64_M68_M69_M70_M71_default_instance_;
class M72;
class M72DefaultTypeInternal;
extern M72DefaultTypeInternal _M72_default_instance_;
class M72_M73;
class M72_M73DefaultTypeInternal;
extern M72_M73DefaultTypeInternal _M72_M73_default_instance_;
class M72_M73_M74;
class M72_M73_M74DefaultTypeInternal;
extern M72_M73_M74DefaultTypeInternal _M72_M73_M74_default_instance_;
class M72_M73_M75;
class M72_M73_M75DefaultTypeInternal;
extern M72_M73_M75DefaultTypeInternal _M72_M73_M75_default_instance_;
class M72_M76;
class M72_M76DefaultTypeInternal;
extern M72_M76DefaultTypeInternal _M72_M76_default_instance_;
class M72_M77;
class M72_M77DefaultTypeInternal;
extern M72_M77DefaultTypeInternal _M72_M77_default_instance_;
class M72_M78;
class M72_M78DefaultTypeInternal;
extern M72_M78DefaultTypeInternal _M72_M78_default_instance_;
class M72_M78_M79;
class M72_M78_M79DefaultTypeInternal;
extern M72_M78_M79DefaultTypeInternal _M72_M78_M79_default_instance_;
class M72_M78_M79_M80;
class M72_M78_M79_M80DefaultTypeInternal;
extern M72_M78_M79_M80DefaultTypeInternal _M72_M78_M79_M80_default_instance_;
class M72_M78_M79_M80_M81;
class M72_M78_M79_M80_M81DefaultTypeInternal;
extern M72_M78_M79_M80_M81DefaultTypeInternal _M72_M78_M79_M80_M81_default_instance_;
class M82;
class M82DefaultTypeInternal;
extern M82DefaultTypeInternal _M82_default_instance_;
class M82_M83;
class M82_M83DefaultTypeInternal;
extern M82_M83DefaultTypeInternal _M82_M83_default_instance_;
class M82_M84;
class M82_M84DefaultTypeInternal;
extern M82_M84DefaultTypeInternal _M82_M84_default_instance_;
class M82_M84_M85;
class M82_M84_M85DefaultTypeInternal;
extern M82_M84_M85DefaultTypeInternal _M82_M84_M85_default_instance_;
class M82_M84_M85_M86;
class M82_M84_M85_M86DefaultTypeInternal;
extern M82_M84_M85_M86DefaultTypeInternal _M82_M84_M85_M86_default_instance_;
class M82_M84_M85_M86_M87;
class M82_M84_M85_M86_M87DefaultTypeInternal;
extern M82_M84_M85_M86_M87DefaultTypeInternal _M82_M84_M85_M86_M87_default_instance_;
class M82_M88;
class M82_M88DefaultTypeInternal;
extern M82_M88DefaultTypeInternal _M82_M88_default_instance_;
class M82_M88_M89;
class M82_M88_M89DefaultTypeInternal;
extern M82_M88_M89DefaultTypeInternal _M82_M88_M89_default_instance_;
class M82_M90;
class M82_M90DefaultTypeInternal;
extern M82_M90DefaultTypeInternal _M82_M90_default_instance_;
class M82_M90_M91;
class M82_M90_M91DefaultTypeInternal;
extern M82_M90_M91DefaultTypeInternal _M82_M90_M91_default_instance_;
class M92;
class M92DefaultTypeInternal;
extern M92DefaultTypeInternal _M92_default_instance_;
class M92_M93;
class M92_M93DefaultTypeInternal;
extern M92_M93DefaultTypeInternal _M92_M93_default_instance_;
class M92_M94;
class M92_M94DefaultTypeInternal;
extern M92_M94DefaultTypeInternal _M92_M94_default_instance_;
class M92_M94_M95;
class M92_M94_M95DefaultTypeInternal;
extern M92_M94_M95DefaultTypeInternal _M92_M94_M95_default_instance_;
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> ::hyperprotobench::M1* Arena::CreateMaybeMessage<::hyperprotobench::M1>(Arena*);
template<> ::hyperprotobench::M12* Arena::CreateMaybeMessage<::hyperprotobench::M12>(Arena*);
template<> ::hyperprotobench::M12_M13* Arena::CreateMaybeMessage<::hyperprotobench::M12_M13>(Arena*);
template<> ::hyperprotobench::M12_M13_M14* Arena::CreateMaybeMessage<::hyperprotobench::M12_M13_M14>(Arena*);
template<> ::hyperprotobench::M12_M13_M14_M15* Arena::CreateMaybeMessage<::hyperprotobench::M12_M13_M14_M15>(Arena*);
template<> ::hyperprotobench::M12_M16* Arena::CreateMaybeMessage<::hyperprotobench::M12_M16>(Arena*);
template<> ::hyperprotobench::M12_M17* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17>(Arena*);
template<> ::hyperprotobench::M12_M17_M18* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17_M18>(Arena*);
template<> ::hyperprotobench::M12_M17_M18_M19* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19>(Arena*);
template<> ::hyperprotobench::M12_M17_M18_M19_M20* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19_M20>(Arena*);
template<> ::hyperprotobench::M12_M17_M18_M19_M20_M21* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19_M20_M21>(Arena*);
template<> ::hyperprotobench::M12_M17_M22* Arena::CreateMaybeMessage<::hyperprotobench::M12_M17_M22>(Arena*);
template<> ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2>(Arena*);
template<> ::hyperprotobench::M1_M2_M3* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2_M3>(Arena*);
template<> ::hyperprotobench::M1_M2_M4* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2_M4>(Arena*);
template<> ::hyperprotobench::M1_M2_M4_M5* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2_M4_M5>(Arena*);
template<> ::hyperprotobench::M1_M6* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6>(Arena*);
template<> ::hyperprotobench::M1_M6_M7* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6_M7>(Arena*);
template<> ::hyperprotobench::M1_M6_M8* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6_M8>(Arena*);
template<> ::hyperprotobench::M1_M6_M9* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6_M9>(Arena*);
template<> ::hyperprotobench::M1_M6_M9_M10* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6_M9_M10>(Arena*);
template<> ::hyperprotobench::M1_M6_M9_M10_M11* Arena::CreateMaybeMessage<::hyperprotobench::M1_M6_M9_M10_M11>(Arena*);
template<> ::hyperprotobench::M23* Arena::CreateMaybeMessage<::hyperprotobench::M23>(Arena*);
template<> ::hyperprotobench::M23_M24* Arena::CreateMaybeMessage<::hyperprotobench::M23_M24>(Arena*);
template<> ::hyperprotobench::M23_M24_M25* Arena::CreateMaybeMessage<::hyperprotobench::M23_M24_M25>(Arena*);
template<> ::hyperprotobench::M23_M24_M26* Arena::CreateMaybeMessage<::hyperprotobench::M23_M24_M26>(Arena*);
template<> ::hyperprotobench::M23_M24_M27* Arena::CreateMaybeMessage<::hyperprotobench::M23_M24_M27>(Arena*);
template<> ::hyperprotobench::M23_M28* Arena::CreateMaybeMessage<::hyperprotobench::M23_M28>(Arena*);
template<> ::hyperprotobench::M23_M29* Arena::CreateMaybeMessage<::hyperprotobench::M23_M29>(Arena*);
template<> ::hyperprotobench::M23_M29_M30* Arena::CreateMaybeMessage<::hyperprotobench::M23_M29_M30>(Arena*);
template<> ::hyperprotobench::M23_M29_M30_M31* Arena::CreateMaybeMessage<::hyperprotobench::M23_M29_M30_M31>(Arena*);
template<> ::hyperprotobench::M23_M29_M30_M31_M32* Arena::CreateMaybeMessage<::hyperprotobench::M23_M29_M30_M31_M32>(Arena*);
template<> ::hyperprotobench::M23_M29_M33* Arena::CreateMaybeMessage<::hyperprotobench::M23_M29_M33>(Arena*);
template<> ::hyperprotobench::M34* Arena::CreateMaybeMessage<::hyperprotobench::M34>(Arena*);
template<> ::hyperprotobench::M34_M35* Arena::CreateMaybeMessage<::hyperprotobench::M34_M35>(Arena*);
template<> ::hyperprotobench::M34_M36* Arena::CreateMaybeMessage<::hyperprotobench::M34_M36>(Arena*);
template<> ::hyperprotobench::M34_M37* Arena::CreateMaybeMessage<::hyperprotobench::M34_M37>(Arena*);
template<> ::hyperprotobench::M34_M37_M38* Arena::CreateMaybeMessage<::hyperprotobench::M34_M37_M38>(Arena*);
template<> ::hyperprotobench::M34_M37_M38_M39* Arena::CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39>(Arena*);
template<> ::hyperprotobench::M34_M37_M38_M39_M40* Arena::CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39_M40>(Arena*);
template<> ::hyperprotobench::M34_M37_M38_M39_M40_M41* Arena::CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39_M40_M41>(Arena*);
template<> ::hyperprotobench::M34_M42* Arena::CreateMaybeMessage<::hyperprotobench::M34_M42>(Arena*);
template<> ::hyperprotobench::M43* Arena::CreateMaybeMessage<::hyperprotobench::M43>(Arena*);
template<> ::hyperprotobench::M43_M44* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44>(Arena*);
template<> ::hyperprotobench::M43_M44_M45* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44_M45>(Arena*);
template<> ::hyperprotobench::M43_M44_M46* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44_M46>(Arena*);
template<> ::hyperprotobench::M43_M44_M47* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44_M47>(Arena*);
template<> ::hyperprotobench::M43_M48* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48>(Arena*);
template<> ::hyperprotobench::M43_M48_M49* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48_M49>(Arena*);
template<> ::hyperprotobench::M43_M48_M50* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48_M50>(Arena*);
template<> ::hyperprotobench::M43_M48_M50_M51* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51>(Arena*);
template<> ::hyperprotobench::M43_M48_M50_M51_M52* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51_M52>(Arena*);
template<> ::hyperprotobench::M43_M48_M50_M51_M52_M53* Arena::CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51_M52_M53>(Arena*);
template<> ::hyperprotobench::M54* Arena::CreateMaybeMessage<::hyperprotobench::M54>(Arena*);
template<> ::hyperprotobench::M54_M55* Arena::CreateMaybeMessage<::hyperprotobench::M54_M55>(Arena*);
template<> ::hyperprotobench::M54_M55_M56* Arena::CreateMaybeMessage<::hyperprotobench::M54_M55_M56>(Arena*);
template<> ::hyperprotobench::M54_M55_M56_M57* Arena::CreateMaybeMessage<::hyperprotobench::M54_M55_M56_M57>(Arena*);
template<> ::hyperprotobench::M54_M55_M56_M57_M58* Arena::CreateMaybeMessage<::hyperprotobench::M54_M55_M56_M57_M58>(Arena*);
template<> ::hyperprotobench::M54_M59* Arena::CreateMaybeMessage<::hyperprotobench::M54_M59>(Arena*);
template<> ::hyperprotobench::M54_M59_M60* Arena::CreateMaybeMessage<::hyperprotobench::M54_M59_M60>(Arena*);
template<> ::hyperprotobench::M54_M61* Arena::CreateMaybeMessage<::hyperprotobench::M54_M61>(Arena*);
template<> ::hyperprotobench::M54_M62* Arena::CreateMaybeMessage<::hyperprotobench::M54_M62>(Arena*);
template<> ::hyperprotobench::M54_M62_M63* Arena::CreateMaybeMessage<::hyperprotobench::M54_M62_M63>(Arena*);
template<> ::hyperprotobench::M64* Arena::CreateMaybeMessage<::hyperprotobench::M64>(Arena*);
template<> ::hyperprotobench::M64_M65* Arena::CreateMaybeMessage<::hyperprotobench::M64_M65>(Arena*);
template<> ::hyperprotobench::M64_M66* Arena::CreateMaybeMessage<::hyperprotobench::M64_M66>(Arena*);
template<> ::hyperprotobench::M64_M67* Arena::CreateMaybeMessage<::hyperprotobench::M64_M67>(Arena*);
template<> ::hyperprotobench::M64_M68* Arena::CreateMaybeMessage<::hyperprotobench::M64_M68>(Arena*);
template<> ::hyperprotobench::M64_M68_M69* Arena::CreateMaybeMessage<::hyperprotobench::M64_M68_M69>(Arena*);
template<> ::hyperprotobench::M64_M68_M69_M70* Arena::CreateMaybeMessage<::hyperprotobench::M64_M68_M69_M70>(Arena*);
template<> ::hyperprotobench::M64_M68_M69_M70_M71* Arena::CreateMaybeMessage<::hyperprotobench::M64_M68_M69_M70_M71>(Arena*);
template<> ::hyperprotobench::M72* Arena::CreateMaybeMessage<::hyperprotobench::M72>(Arena*);
template<> ::hyperprotobench::M72_M73* Arena::CreateMaybeMessage<::hyperprotobench::M72_M73>(Arena*);
template<> ::hyperprotobench::M72_M73_M74* Arena::CreateMaybeMessage<::hyperprotobench::M72_M73_M74>(Arena*);
template<> ::hyperprotobench::M72_M73_M75* Arena::CreateMaybeMessage<::hyperprotobench::M72_M73_M75>(Arena*);
template<> ::hyperprotobench::M72_M76* Arena::CreateMaybeMessage<::hyperprotobench::M72_M76>(Arena*);
template<> ::hyperprotobench::M72_M77* Arena::CreateMaybeMessage<::hyperprotobench::M72_M77>(Arena*);
template<> ::hyperprotobench::M72_M78* Arena::CreateMaybeMessage<::hyperprotobench::M72_M78>(Arena*);
template<> ::hyperprotobench::M72_M78_M79* Arena::CreateMaybeMessage<::hyperprotobench::M72_M78_M79>(Arena*);
template<> ::hyperprotobench::M72_M78_M79_M80* Arena::CreateMaybeMessage<::hyperprotobench::M72_M78_M79_M80>(Arena*);
template<> ::hyperprotobench::M72_M78_M79_M80_M81* Arena::CreateMaybeMessage<::hyperprotobench::M72_M78_M79_M80_M81>(Arena*);
template<> ::hyperprotobench::M82* Arena::CreateMaybeMessage<::hyperprotobench::M82>(Arena*);
template<> ::hyperprotobench::M82_M83* Arena::CreateMaybeMessage<::hyperprotobench::M82_M83>(Arena*);
template<> ::hyperprotobench::M82_M84* Arena::CreateMaybeMessage<::hyperprotobench::M82_M84>(Arena*);
template<> ::hyperprotobench::M82_M84_M85* Arena::CreateMaybeMessage<::hyperprotobench::M82_M84_M85>(Arena*);
template<> ::hyperprotobench::M82_M84_M85_M86* Arena::CreateMaybeMessage<::hyperprotobench::M82_M84_M85_M86>(Arena*);
template<> ::hyperprotobench::M82_M84_M85_M86_M87* Arena::CreateMaybeMessage<::hyperprotobench::M82_M84_M85_M86_M87>(Arena*);
template<> ::hyperprotobench::M82_M88* Arena::CreateMaybeMessage<::hyperprotobench::M82_M88>(Arena*);
template<> ::hyperprotobench::M82_M88_M89* Arena::CreateMaybeMessage<::hyperprotobench::M82_M88_M89>(Arena*);
template<> ::hyperprotobench::M82_M90* Arena::CreateMaybeMessage<::hyperprotobench::M82_M90>(Arena*);
template<> ::hyperprotobench::M82_M90_M91* Arena::CreateMaybeMessage<::hyperprotobench::M82_M90_M91>(Arena*);
template<> ::hyperprotobench::M92* Arena::CreateMaybeMessage<::hyperprotobench::M92>(Arena*);
template<> ::hyperprotobench::M92_M93* Arena::CreateMaybeMessage<::hyperprotobench::M92_M93>(Arena*);
template<> ::hyperprotobench::M92_M94* Arena::CreateMaybeMessage<::hyperprotobench::M92_M94>(Arena*);
template<> ::hyperprotobench::M92_M94_M95* Arena::CreateMaybeMessage<::hyperprotobench::M92_M94_M95>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hyperprotobench {

enum M1_M2_E1 : int {
  M1_M2_E1_E1_CONST_1 = 35,
  M1_M2_E1_E1_CONST_2 = 110,
  M1_M2_E1_E1_CONST_3 = 80,
  M1_M2_E1_E1_CONST_4 = 23,
  M1_M2_E1_E1_CONST_5 = 123
};
bool M1_M2_E1_IsValid(int value);
constexpr M1_M2_E1 M1_M2_E1_E1_MIN = M1_M2_E1_E1_CONST_4;
constexpr M1_M2_E1 M1_M2_E1_E1_MAX = M1_M2_E1_E1_CONST_5;
constexpr int M1_M2_E1_E1_ARRAYSIZE = M1_M2_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_E1_descriptor();
template<typename T>
inline const std::string& M1_M2_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_M2_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_M2_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_M2_E1_descriptor(), enum_t_value);
}
inline bool M1_M2_E1_Parse(
    const std::string& name, M1_M2_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_M2_E1>(
    M1_M2_E1_descriptor(), name, value);
}
enum M1_E1 : int {
  M1_E1_E1_CONST_1 = 0,
  M1_E1_E1_CONST_2 = 65,
  M1_E1_E1_CONST_3 = 67,
  M1_E1_E1_CONST_4 = 16,
  M1_E1_E1_CONST_5 = 114
};
bool M1_E1_IsValid(int value);
constexpr M1_E1 M1_E1_E1_MIN = M1_E1_E1_CONST_1;
constexpr M1_E1 M1_E1_E1_MAX = M1_E1_E1_CONST_5;
constexpr int M1_E1_E1_ARRAYSIZE = M1_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E1_descriptor();
template<typename T>
inline const std::string& M1_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_E1_descriptor(), enum_t_value);
}
inline bool M1_E1_Parse(
    const std::string& name, M1_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_E1>(
    M1_E1_descriptor(), name, value);
}
enum M12_M17_M18_M19_M20_M21_E1 : int {
  M12_M17_M18_M19_M20_M21_E1_E1_CONST_1 = 2,
  M12_M17_M18_M19_M20_M21_E1_E1_CONST_2 = 36,
  M12_M17_M18_M19_M20_M21_E1_E1_CONST_3 = 45,
  M12_M17_M18_M19_M20_M21_E1_E1_CONST_4 = 113,
  M12_M17_M18_M19_M20_M21_E1_E1_CONST_5 = 125
};
bool M12_M17_M18_M19_M20_M21_E1_IsValid(int value);
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21_E1_E1_MIN = M12_M17_M18_M19_M20_M21_E1_E1_CONST_1;
constexpr M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21_E1_E1_MAX = M12_M17_M18_M19_M20_M21_E1_E1_CONST_5;
constexpr int M12_M17_M18_M19_M20_M21_E1_E1_ARRAYSIZE = M12_M17_M18_M19_M20_M21_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M12_M17_M18_M19_M20_M21_E1_descriptor();
template<typename T>
inline const std::string& M12_M17_M18_M19_M20_M21_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M12_M17_M18_M19_M20_M21_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M12_M17_M18_M19_M20_M21_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M12_M17_M18_M19_M20_M21_E1_descriptor(), enum_t_value);
}
inline bool M12_M17_M18_M19_M20_M21_E1_Parse(
    const std::string& name, M12_M17_M18_M19_M20_M21_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M12_M17_M18_M19_M20_M21_E1>(
    M12_M17_M18_M19_M20_M21_E1_descriptor(), name, value);
}
enum M12_M17_E1 : int {
  M12_M17_E1_E1_CONST_1 = 96,
  M12_M17_E1_E1_CONST_2 = 33,
  M12_M17_E1_E1_CONST_3 = 98,
  M12_M17_E1_E1_CONST_4 = 16,
  M12_M17_E1_E1_CONST_5 = 61
};
bool M12_M17_E1_IsValid(int value);
constexpr M12_M17_E1 M12_M17_E1_E1_MIN = M12_M17_E1_E1_CONST_4;
constexpr M12_M17_E1 M12_M17_E1_E1_MAX = M12_M17_E1_E1_CONST_3;
constexpr int M12_M17_E1_E1_ARRAYSIZE = M12_M17_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M12_M17_E1_descriptor();
template<typename T>
inline const std::string& M12_M17_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M12_M17_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M12_M17_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M12_M17_E1_descriptor(), enum_t_value);
}
inline bool M12_M17_E1_Parse(
    const std::string& name, M12_M17_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M12_M17_E1>(
    M12_M17_E1_descriptor(), name, value);
}
enum M23_M29_M30_M31_M32_E1 : int {
  M23_M29_M30_M31_M32_E1_E1_CONST_1 = 38,
  M23_M29_M30_M31_M32_E1_E1_CONST_2 = 7,
  M23_M29_M30_M31_M32_E1_E1_CONST_3 = 72,
  M23_M29_M30_M31_M32_E1_E1_CONST_4 = 76,
  M23_M29_M30_M31_M32_E1_E1_CONST_5 = 47
};
bool M23_M29_M30_M31_M32_E1_IsValid(int value);
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32_E1_E1_MIN = M23_M29_M30_M31_M32_E1_E1_CONST_2;
constexpr M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32_E1_E1_MAX = M23_M29_M30_M31_M32_E1_E1_CONST_4;
constexpr int M23_M29_M30_M31_M32_E1_E1_ARRAYSIZE = M23_M29_M30_M31_M32_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M23_M29_M30_M31_M32_E1_descriptor();
template<typename T>
inline const std::string& M23_M29_M30_M31_M32_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M23_M29_M30_M31_M32_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M23_M29_M30_M31_M32_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M23_M29_M30_M31_M32_E1_descriptor(), enum_t_value);
}
inline bool M23_M29_M30_M31_M32_E1_Parse(
    const std::string& name, M23_M29_M30_M31_M32_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M23_M29_M30_M31_M32_E1>(
    M23_M29_M30_M31_M32_E1_descriptor(), name, value);
}
enum M34_M37_M38_E1 : int {
  M34_M37_M38_E1_E1_CONST_1 = 99,
  M34_M37_M38_E1_E1_CONST_2 = 40,
  M34_M37_M38_E1_E1_CONST_3 = 104,
  M34_M37_M38_E1_E1_CONST_4 = 19,
  M34_M37_M38_E1_E1_CONST_5 = 115
};
bool M34_M37_M38_E1_IsValid(int value);
constexpr M34_M37_M38_E1 M34_M37_M38_E1_E1_MIN = M34_M37_M38_E1_E1_CONST_4;
constexpr M34_M37_M38_E1 M34_M37_M38_E1_E1_MAX = M34_M37_M38_E1_E1_CONST_5;
constexpr int M34_M37_M38_E1_E1_ARRAYSIZE = M34_M37_M38_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_M37_M38_E1_descriptor();
template<typename T>
inline const std::string& M34_M37_M38_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M34_M37_M38_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M34_M37_M38_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M34_M37_M38_E1_descriptor(), enum_t_value);
}
inline bool M34_M37_M38_E1_Parse(
    const std::string& name, M34_M37_M38_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M34_M37_M38_E1>(
    M34_M37_M38_E1_descriptor(), name, value);
}
enum M34_E1 : int {
  M34_E1_E1_CONST_1 = 2,
  M34_E1_E1_CONST_2 = 50,
  M34_E1_E1_CONST_3 = 21,
  M34_E1_E1_CONST_4 = 55,
  M34_E1_E1_CONST_5 = 56
};
bool M34_E1_IsValid(int value);
constexpr M34_E1 M34_E1_E1_MIN = M34_E1_E1_CONST_1;
constexpr M34_E1 M34_E1_E1_MAX = M34_E1_E1_CONST_5;
constexpr int M34_E1_E1_ARRAYSIZE = M34_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_E1_descriptor();
template<typename T>
inline const std::string& M34_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M34_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M34_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M34_E1_descriptor(), enum_t_value);
}
inline bool M34_E1_Parse(
    const std::string& name, M34_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M34_E1>(
    M34_E1_descriptor(), name, value);
}
enum M34_E2 : int {
  M34_E2_E2_CONST_1 = 68,
  M34_E2_E2_CONST_2 = 43,
  M34_E2_E2_CONST_3 = 7214,
  M34_E2_E2_CONST_4 = 55,
  M34_E2_E2_CONST_5 = 56
};
bool M34_E2_IsValid(int value);
constexpr M34_E2 M34_E2_E2_MIN = M34_E2_E2_CONST_2;
constexpr M34_E2 M34_E2_E2_MAX = M34_E2_E2_CONST_3;
constexpr int M34_E2_E2_ARRAYSIZE = M34_E2_E2_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M34_E2_descriptor();
template<typename T>
inline const std::string& M34_E2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M34_E2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M34_E2_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M34_E2_descriptor(), enum_t_value);
}
inline bool M34_E2_Parse(
    const std::string& name, M34_E2* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M34_E2>(
    M34_E2_descriptor(), name, value);
}
enum M43_M44_M46_E1 : int {
  M43_M44_M46_E1_E1_CONST_1 = 64,
  M43_M44_M46_E1_E1_CONST_2 = 66,
  M43_M44_M46_E1_E1_CONST_3 = 102,
  M43_M44_M46_E1_E1_CONST_4 = 24,
  M43_M44_M46_E1_E1_CONST_5 = 28
};
bool M43_M44_M46_E1_IsValid(int value);
constexpr M43_M44_M46_E1 M43_M44_M46_E1_E1_MIN = M43_M44_M46_E1_E1_CONST_4;
constexpr M43_M44_M46_E1 M43_M44_M46_E1_E1_MAX = M43_M44_M46_E1_E1_CONST_3;
constexpr int M43_M44_M46_E1_E1_ARRAYSIZE = M43_M44_M46_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M44_M46_E1_descriptor();
template<typename T>
inline const std::string& M43_M44_M46_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M43_M44_M46_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M43_M44_M46_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M43_M44_M46_E1_descriptor(), enum_t_value);
}
inline bool M43_M44_M46_E1_Parse(
    const std::string& name, M43_M44_M46_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M43_M44_M46_E1>(
    M43_M44_M46_E1_descriptor(), name, value);
}
enum M43_M48_M50_M51_E1 : int {
  M43_M48_M50_M51_E1_E1_CONST_1 = 102,
  M43_M48_M50_M51_E1_E1_CONST_2 = 40,
  M43_M48_M50_M51_E1_E1_CONST_3 = 82,
  M43_M48_M50_M51_E1_E1_CONST_4 = 52,
  M43_M48_M50_M51_E1_E1_CONST_5 = 24
};
bool M43_M48_M50_M51_E1_IsValid(int value);
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51_E1_E1_MIN = M43_M48_M50_M51_E1_E1_CONST_5;
constexpr M43_M48_M50_M51_E1 M43_M48_M50_M51_E1_E1_MAX = M43_M48_M50_M51_E1_E1_CONST_1;
constexpr int M43_M48_M50_M51_E1_E1_ARRAYSIZE = M43_M48_M50_M51_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M48_M50_M51_E1_descriptor();
template<typename T>
inline const std::string& M43_M48_M50_M51_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M43_M48_M50_M51_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M43_M48_M50_M51_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M43_M48_M50_M51_E1_descriptor(), enum_t_value);
}
inline bool M43_M48_M50_M51_E1_Parse(
    const std::string& name, M43_M48_M50_M51_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M43_M48_M50_M51_E1>(
    M43_M48_M50_M51_E1_descriptor(), name, value);
}
enum M43_M48_E1 : int {
  M43_M48_E1_E1_CONST_1 = 5,
  M43_M48_E1_E1_CONST_2 = 75,
  M43_M48_E1_E1_CONST_3 = 107,
  M43_M48_E1_E1_CONST_4 = 77,
  M43_M48_E1_E1_CONST_5 = 78
};
bool M43_M48_E1_IsValid(int value);
constexpr M43_M48_E1 M43_M48_E1_E1_MIN = M43_M48_E1_E1_CONST_1;
constexpr M43_M48_E1 M43_M48_E1_E1_MAX = M43_M48_E1_E1_CONST_3;
constexpr int M43_M48_E1_E1_ARRAYSIZE = M43_M48_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_M48_E1_descriptor();
template<typename T>
inline const std::string& M43_M48_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M43_M48_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M43_M48_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M43_M48_E1_descriptor(), enum_t_value);
}
inline bool M43_M48_E1_Parse(
    const std::string& name, M43_M48_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M43_M48_E1>(
    M43_M48_E1_descriptor(), name, value);
}
enum M54_M55_E1 : int {
  M54_M55_E1_E1_CONST_1 = 1,
  M54_M55_E1_E1_CONST_2 = 41,
  M54_M55_E1_E1_CONST_3 = 118,
  M54_M55_E1_E1_CONST_4 = 61,
  M54_M55_E1_E1_CONST_5 = 95
};
bool M54_M55_E1_IsValid(int value);
constexpr M54_M55_E1 M54_M55_E1_E1_MIN = M54_M55_E1_E1_CONST_1;
constexpr M54_M55_E1 M54_M55_E1_E1_MAX = M54_M55_E1_E1_CONST_3;
constexpr int M54_M55_E1_E1_ARRAYSIZE = M54_M55_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M54_M55_E1_descriptor();
template<typename T>
inline const std::string& M54_M55_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M54_M55_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M54_M55_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M54_M55_E1_descriptor(), enum_t_value);
}
inline bool M54_M55_E1_Parse(
    const std::string& name, M54_M55_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M54_M55_E1>(
    M54_M55_E1_descriptor(), name, value);
}
enum M54_M61_E1 : int {
  M54_M61_E1_E1_CONST_1 = 67,
  M54_M61_E1_E1_CONST_2 = 38,
  M54_M61_E1_E1_CONST_3 = 40,
  M54_M61_E1_E1_CONST_4 = 43,
  M54_M61_E1_E1_CONST_5 = 78
};
bool M54_M61_E1_IsValid(int value);
constexpr M54_M61_E1 M54_M61_E1_E1_MIN = M54_M61_E1_E1_CONST_2;
constexpr M54_M61_E1 M54_M61_E1_E1_MAX = M54_M61_E1_E1_CONST_5;
constexpr int M54_M61_E1_E1_ARRAYSIZE = M54_M61_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M54_M61_E1_descriptor();
template<typename T>
inline const std::string& M54_M61_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M54_M61_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M54_M61_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M54_M61_E1_descriptor(), enum_t_value);
}
inline bool M54_M61_E1_Parse(
    const std::string& name, M54_M61_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M54_M61_E1>(
    M54_M61_E1_descriptor(), name, value);
}
enum M64_E1 : int {
  M64_E1_E1_CONST_1 = 49,
  M64_E1_E1_CONST_2 = 18,
  M64_E1_E1_CONST_3 = 85,
  M64_E1_E1_CONST_4 = 122,
  M64_E1_E1_CONST_5 = 94
};
bool M64_E1_IsValid(int value);
constexpr M64_E1 M64_E1_E1_MIN = M64_E1_E1_CONST_2;
constexpr M64_E1 M64_E1_E1_MAX = M64_E1_E1_CONST_4;
constexpr int M64_E1_E1_ARRAYSIZE = M64_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M64_E1_descriptor();
template<typename T>
inline const std::string& M64_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M64_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M64_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M64_E1_descriptor(), enum_t_value);
}
inline bool M64_E1_Parse(
    const std::string& name, M64_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M64_E1>(
    M64_E1_descriptor(), name, value);
}
enum M72_M76_E1 : int {
  M72_M76_E1_E1_CONST_1 = 4,
  M72_M76_E1_E1_CONST_2 = 104,
  M72_M76_E1_E1_CONST_3 = 14,
  M72_M76_E1_E1_CONST_4 = 53,
  M72_M76_E1_E1_CONST_5 = 91
};
bool M72_M76_E1_IsValid(int value);
constexpr M72_M76_E1 M72_M76_E1_E1_MIN = M72_M76_E1_E1_CONST_1;
constexpr M72_M76_E1 M72_M76_E1_E1_MAX = M72_M76_E1_E1_CONST_2;
constexpr int M72_M76_E1_E1_ARRAYSIZE = M72_M76_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M72_M76_E1_descriptor();
template<typename T>
inline const std::string& M72_M76_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M72_M76_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M72_M76_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M72_M76_E1_descriptor(), enum_t_value);
}
inline bool M72_M76_E1_Parse(
    const std::string& name, M72_M76_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M72_M76_E1>(
    M72_M76_E1_descriptor(), name, value);
}
enum M72_M77_E1 : int {
  M72_M77_E1_E1_CONST_1 = 4,
  M72_M77_E1_E1_CONST_2 = 37,
  M72_M77_E1_E1_CONST_3 = 40,
  M72_M77_E1_E1_CONST_4 = 53,
  M72_M77_E1_E1_CONST_5 = 122
};
bool M72_M77_E1_IsValid(int value);
constexpr M72_M77_E1 M72_M77_E1_E1_MIN = M72_M77_E1_E1_CONST_1;
constexpr M72_M77_E1 M72_M77_E1_E1_MAX = M72_M77_E1_E1_CONST_5;
constexpr int M72_M77_E1_E1_ARRAYSIZE = M72_M77_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M72_M77_E1_descriptor();
template<typename T>
inline const std::string& M72_M77_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M72_M77_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M72_M77_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M72_M77_E1_descriptor(), enum_t_value);
}
inline bool M72_M77_E1_Parse(
    const std::string& name, M72_M77_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M72_M77_E1>(
    M72_M77_E1_descriptor(), name, value);
}
enum M82_M84_M85_M86_M87_E1 : int {
  M82_M84_M85_M86_M87_E1_E1_CONST_1 = 38,
  M82_M84_M85_M86_M87_E1_E1_CONST_2 = 18,
  M82_M84_M85_M86_M87_E1_E1_CONST_3 = 20,
  M82_M84_M85_M86_M87_E1_E1_CONST_4 = 25,
  M82_M84_M85_M86_M87_E1_E1_CONST_5 = 122
};
bool M82_M84_M85_M86_M87_E1_IsValid(int value);
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87_E1_E1_MIN = M82_M84_M85_M86_M87_E1_E1_CONST_2;
constexpr M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87_E1_E1_MAX = M82_M84_M85_M86_M87_E1_E1_CONST_5;
constexpr int M82_M84_M85_M86_M87_E1_E1_ARRAYSIZE = M82_M84_M85_M86_M87_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_M84_M85_M86_M87_E1_descriptor();
template<typename T>
inline const std::string& M82_M84_M85_M86_M87_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M82_M84_M85_M86_M87_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M82_M84_M85_M86_M87_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M82_M84_M85_M86_M87_E1_descriptor(), enum_t_value);
}
inline bool M82_M84_M85_M86_M87_E1_Parse(
    const std::string& name, M82_M84_M85_M86_M87_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M82_M84_M85_M86_M87_E1>(
    M82_M84_M85_M86_M87_E1_descriptor(), name, value);
}
enum M82_M84_M85_M86_E1 : int {
  M82_M84_M85_M86_E1_E1_CONST_1 = 68,
  M82_M84_M85_M86_E1_E1_CONST_2 = 103,
  M82_M84_M85_M86_E1_E1_CONST_3 = 73,
  M82_M84_M85_M86_E1_E1_CONST_4 = 44,
  M82_M84_M85_M86_E1_E1_CONST_5 = 91
};
bool M82_M84_M85_M86_E1_IsValid(int value);
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86_E1_E1_MIN = M82_M84_M85_M86_E1_E1_CONST_4;
constexpr M82_M84_M85_M86_E1 M82_M84_M85_M86_E1_E1_MAX = M82_M84_M85_M86_E1_E1_CONST_2;
constexpr int M82_M84_M85_M86_E1_E1_ARRAYSIZE = M82_M84_M85_M86_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_M84_M85_M86_E1_descriptor();
template<typename T>
inline const std::string& M82_M84_M85_M86_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M82_M84_M85_M86_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M82_M84_M85_M86_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M82_M84_M85_M86_E1_descriptor(), enum_t_value);
}
inline bool M82_M84_M85_M86_E1_Parse(
    const std::string& name, M82_M84_M85_M86_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M82_M84_M85_M86_E1>(
    M82_M84_M85_M86_E1_descriptor(), name, value);
}
enum M82_E1 : int {
  M82_E1_E1_CONST_1 = 0,
  M82_E1_E1_CONST_2 = 67,
  M82_E1_E1_CONST_3 = 43,
  M82_E1_E1_CONST_4 = 78,
  M82_E1_E1_CONST_5 = 92
};
bool M82_E1_IsValid(int value);
constexpr M82_E1 M82_E1_E1_MIN = M82_E1_E1_CONST_1;
constexpr M82_E1 M82_E1_E1_MAX = M82_E1_E1_CONST_5;
constexpr int M82_E1_E1_ARRAYSIZE = M82_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M82_E1_descriptor();
template<typename T>
inline const std::string& M82_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M82_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M82_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M82_E1_descriptor(), enum_t_value);
}
inline bool M82_E1_Parse(
    const std::string& name, M82_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M82_E1>(
    M82_E1_descriptor(), name, value);
}
// ===================================================================

class M1_M2_M3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2.M3) */ {
 public:
  M1_M2_M3();
  virtual ~M1_M2_M3();

  M1_M2_M3(const M1_M2_M3& from);
  M1_M2_M3(M1_M2_M3&& from) noexcept
    : M1_M2_M3() {
    *this = ::std::move(from);
  }

  inline M1_M2_M3& operator=(const M1_M2_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2_M3& operator=(M1_M2_M3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2_M3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2_M3* internal_default_instance() {
    return reinterpret_cast<const M1_M2_M3*>(
               &_M1_M2_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(M1_M2_M3& a, M1_M2_M3& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2_M3* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2_M3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2_M3* New() const final {
    return CreateMaybeMessage<M1_M2_M3>(nullptr);
  }

  M1_M2_M3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2_M3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2_M3& from);
  void MergeFrom(const M1_M2_M3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2_M3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2.M3";
  }
  protected:
  explicit M1_M2_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2.M3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M2_M4_M5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2.M4.M5) */ {
 public:
  M1_M2_M4_M5();
  virtual ~M1_M2_M4_M5();

  M1_M2_M4_M5(const M1_M2_M4_M5& from);
  M1_M2_M4_M5(M1_M2_M4_M5&& from) noexcept
    : M1_M2_M4_M5() {
    *this = ::std::move(from);
  }

  inline M1_M2_M4_M5& operator=(const M1_M2_M4_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2_M4_M5& operator=(M1_M2_M4_M5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2_M4_M5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2_M4_M5* internal_default_instance() {
    return reinterpret_cast<const M1_M2_M4_M5*>(
               &_M1_M2_M4_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(M1_M2_M4_M5& a, M1_M2_M4_M5& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2_M4_M5* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2_M4_M5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2_M4_M5* New() const final {
    return CreateMaybeMessage<M1_M2_M4_M5>(nullptr);
  }

  M1_M2_M4_M5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2_M4_M5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2_M4_M5& from);
  void MergeFrom(const M1_M2_M4_M5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2_M4_M5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2.M4.M5";
  }
  protected:
  explicit M1_M2_M4_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2.M4.M5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_M4_M5_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M2_M4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2.M4) */ {
 public:
  M1_M2_M4();
  virtual ~M1_M2_M4();

  M1_M2_M4(const M1_M2_M4& from);
  M1_M2_M4(M1_M2_M4&& from) noexcept
    : M1_M2_M4() {
    *this = ::std::move(from);
  }

  inline M1_M2_M4& operator=(const M1_M2_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2_M4& operator=(M1_M2_M4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2_M4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2_M4* internal_default_instance() {
    return reinterpret_cast<const M1_M2_M4*>(
               &_M1_M2_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(M1_M2_M4& a, M1_M2_M4& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2_M4* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2_M4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2_M4* New() const final {
    return CreateMaybeMessage<M1_M2_M4>(nullptr);
  }

  M1_M2_M4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2_M4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2_M4& from);
  void MergeFrom(const M1_M2_M4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2_M4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2.M4";
  }
  protected:
  explicit M1_M2_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2_M4_M5 M5;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional .hyperprotobench.M1.M2.M4.M5 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M2_M4_M5& f1() const;
  ::hyperprotobench::M1_M2_M4_M5* release_f1();
  ::hyperprotobench::M1_M2_M4_M5* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M2_M4_M5* f1);
  private:
  const ::hyperprotobench::M1_M2_M4_M5& _internal_f1() const;
  ::hyperprotobench::M1_M2_M4_M5* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M2_M4_M5* f1);
  ::hyperprotobench::M1_M2_M4_M5* unsafe_arena_release_f1();

  // optional fixed64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2.M4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M2_M4_M5* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_M4_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2) */ {
 public:
  M1_M2();
  virtual ~M1_M2();

  M1_M2(const M1_M2& from);
  M1_M2(M1_M2&& from) noexcept
    : M1_M2() {
    *this = ::std::move(from);
  }

  inline M1_M2& operator=(const M1_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2& operator=(M1_M2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2* internal_default_instance() {
    return reinterpret_cast<const M1_M2*>(
               &_M1_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(M1_M2& a, M1_M2& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2* New() const final {
    return CreateMaybeMessage<M1_M2>(nullptr);
  }

  M1_M2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2& from);
  void MergeFrom(const M1_M2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2";
  }
  protected:
  explicit M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2_M3 M3;
  typedef M1_M2_M4 M4;

  typedef M1_M2_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M1_M2_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M1_M2_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M1_M2_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M1_M2_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M1_M2_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M1_M2_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M1_M2_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M1_M2_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M1_M2_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M1_M2_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M1_M2_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M1_M2_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF10FieldNumber = 12,
    kF1FieldNumber = 1,
    kF8FieldNumber = 9,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF5FieldNumber = 5,
    kF6FieldNumber = 7,
    kF7FieldNumber = 8,
    kF9FieldNumber = 10,
    kF4FieldNumber = 4,
  };
  // optional bytes f10 = 12;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const void* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional .hyperprotobench.M1.M2.M3 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M2_M3& f1() const;
  ::hyperprotobench::M1_M2_M3* release_f1();
  ::hyperprotobench::M1_M2_M3* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M2_M3* f1);
  private:
  const ::hyperprotobench::M1_M2_M3& _internal_f1() const;
  ::hyperprotobench::M1_M2_M3* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M2_M3* f1);
  ::hyperprotobench::M1_M2_M3* unsafe_arena_release_f1();

  // optional .hyperprotobench.M1.M2.M4 f8 = 9;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M1_M2_M4& f8() const;
  ::hyperprotobench::M1_M2_M4* release_f8();
  ::hyperprotobench::M1_M2_M4* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M1_M2_M4* f8);
  private:
  const ::hyperprotobench::M1_M2_M4& _internal_f8() const;
  ::hyperprotobench::M1_M2_M4* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M1_M2_M4* f8);
  ::hyperprotobench::M1_M2_M4* unsafe_arena_release_f8();

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  float f3() const;
  void set_f3(float value);
  private:
  float _internal_f3() const;
  void _internal_set_f3(float value);
  public:

  // optional float f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional float f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  float f6() const;
  void set_f6(float value);
  private:
  float _internal_f6() const;
  void _internal_set_f6(float value);
  public:

  // optional int32 f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f9 = 10;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M1.M2.E1 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::hyperprotobench::M1_M2_E1 f4() const;
  void set_f4(::hyperprotobench::M1_M2_E1 value);
  private:
  ::hyperprotobench::M1_M2_E1 _internal_f4() const;
  void _internal_set_f4(::hyperprotobench::M1_M2_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::hyperprotobench::M1_M2_M3* f1_;
  ::hyperprotobench::M1_M2_M4* f8_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  float f3_;
  float f5_;
  float f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  int f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6_M7 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6.M7) */ {
 public:
  M1_M6_M7();
  virtual ~M1_M6_M7();

  M1_M6_M7(const M1_M6_M7& from);
  M1_M6_M7(M1_M6_M7&& from) noexcept
    : M1_M6_M7() {
    *this = ::std::move(from);
  }

  inline M1_M6_M7& operator=(const M1_M6_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6_M7& operator=(M1_M6_M7&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6_M7& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6_M7* internal_default_instance() {
    return reinterpret_cast<const M1_M6_M7*>(
               &_M1_M6_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(M1_M6_M7& a, M1_M6_M7& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6_M7* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6_M7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6_M7* New() const final {
    return CreateMaybeMessage<M1_M6_M7>(nullptr);
  }

  M1_M6_M7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6_M7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6_M7& from);
  void MergeFrom(const M1_M6_M7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6_M7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6.M7";
  }
  protected:
  explicit M1_M6_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional float f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6.M7)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_M7_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6_M8 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6.M8) */ {
 public:
  M1_M6_M8();
  virtual ~M1_M6_M8();

  M1_M6_M8(const M1_M6_M8& from);
  M1_M6_M8(M1_M6_M8&& from) noexcept
    : M1_M6_M8() {
    *this = ::std::move(from);
  }

  inline M1_M6_M8& operator=(const M1_M6_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6_M8& operator=(M1_M6_M8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6_M8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6_M8* internal_default_instance() {
    return reinterpret_cast<const M1_M6_M8*>(
               &_M1_M6_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(M1_M6_M8& a, M1_M6_M8& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6_M8* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6_M8* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6_M8* New() const final {
    return CreateMaybeMessage<M1_M6_M8>(nullptr);
  }

  M1_M6_M8* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6_M8>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6_M8& from);
  void MergeFrom(const M1_M6_M8& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6_M8* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6.M8";
  }
  protected:
  explicit M1_M6_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 6,
    kF2FieldNumber = 7,
  };
  // optional bool f1 = 6;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional int32 f2 = 7;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6.M8)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_M8_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6_M9_M10_M11 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6.M9.M10.M11) */ {
 public:
  M1_M6_M9_M10_M11();
  virtual ~M1_M6_M9_M10_M11();

  M1_M6_M9_M10_M11(const M1_M6_M9_M10_M11& from);
  M1_M6_M9_M10_M11(M1_M6_M9_M10_M11&& from) noexcept
    : M1_M6_M9_M10_M11() {
    *this = ::std::move(from);
  }

  inline M1_M6_M9_M10_M11& operator=(const M1_M6_M9_M10_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6_M9_M10_M11& operator=(M1_M6_M9_M10_M11&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6_M9_M10_M11& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6_M9_M10_M11* internal_default_instance() {
    return reinterpret_cast<const M1_M6_M9_M10_M11*>(
               &_M1_M6_M9_M10_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(M1_M6_M9_M10_M11& a, M1_M6_M9_M10_M11& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6_M9_M10_M11* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6_M9_M10_M11* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6_M9_M10_M11* New() const final {
    return CreateMaybeMessage<M1_M6_M9_M10_M11>(nullptr);
  }

  M1_M6_M9_M10_M11* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6_M9_M10_M11>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6_M9_M10_M11& from);
  void MergeFrom(const M1_M6_M9_M10_M11& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6_M9_M10_M11* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6.M9.M10.M11";
  }
  protected:
  explicit M1_M6_M9_M10_M11(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6.M9.M10.M11)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_M9_M10_M11_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6_M9_M10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6.M9.M10) */ {
 public:
  M1_M6_M9_M10();
  virtual ~M1_M6_M9_M10();

  M1_M6_M9_M10(const M1_M6_M9_M10& from);
  M1_M6_M9_M10(M1_M6_M9_M10&& from) noexcept
    : M1_M6_M9_M10() {
    *this = ::std::move(from);
  }

  inline M1_M6_M9_M10& operator=(const M1_M6_M9_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6_M9_M10& operator=(M1_M6_M9_M10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6_M9_M10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6_M9_M10* internal_default_instance() {
    return reinterpret_cast<const M1_M6_M9_M10*>(
               &_M1_M6_M9_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(M1_M6_M9_M10& a, M1_M6_M9_M10& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6_M9_M10* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6_M9_M10* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6_M9_M10* New() const final {
    return CreateMaybeMessage<M1_M6_M9_M10>(nullptr);
  }

  M1_M6_M9_M10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6_M9_M10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6_M9_M10& from);
  void MergeFrom(const M1_M6_M9_M10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6_M9_M10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6.M9.M10";
  }
  protected:
  explicit M1_M6_M9_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M6_M9_M10_M11 M11;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional .hyperprotobench.M1.M6.M9.M10.M11 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M6_M9_M10_M11& f1() const;
  ::hyperprotobench::M1_M6_M9_M10_M11* release_f1();
  ::hyperprotobench::M1_M6_M9_M10_M11* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M6_M9_M10_M11* f1);
  private:
  const ::hyperprotobench::M1_M6_M9_M10_M11& _internal_f1() const;
  ::hyperprotobench::M1_M6_M9_M10_M11* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M6_M9_M10_M11* f1);
  ::hyperprotobench::M1_M6_M9_M10_M11* unsafe_arena_release_f1();

  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6.M9.M10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M6_M9_M10_M11* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_M9_M10_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6_M9 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6.M9) */ {
 public:
  M1_M6_M9();
  virtual ~M1_M6_M9();

  M1_M6_M9(const M1_M6_M9& from);
  M1_M6_M9(M1_M6_M9&& from) noexcept
    : M1_M6_M9() {
    *this = ::std::move(from);
  }

  inline M1_M6_M9& operator=(const M1_M6_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6_M9& operator=(M1_M6_M9&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6_M9& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6_M9* internal_default_instance() {
    return reinterpret_cast<const M1_M6_M9*>(
               &_M1_M6_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(M1_M6_M9& a, M1_M6_M9& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6_M9* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6_M9* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6_M9* New() const final {
    return CreateMaybeMessage<M1_M6_M9>(nullptr);
  }

  M1_M6_M9* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6_M9>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6_M9& from);
  void MergeFrom(const M1_M6_M9& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6_M9* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6.M9";
  }
  protected:
  explicit M1_M6_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M6_M9_M10 M10;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 6,
    kF1FieldNumber = 2,
  };
  // optional .hyperprotobench.M1.M6.M9.M10 f2 = 6;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M1_M6_M9_M10& f2() const;
  ::hyperprotobench::M1_M6_M9_M10* release_f2();
  ::hyperprotobench::M1_M6_M9_M10* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M1_M6_M9_M10* f2);
  private:
  const ::hyperprotobench::M1_M6_M9_M10& _internal_f2() const;
  ::hyperprotobench::M1_M6_M9_M10* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M1_M6_M9_M10* f2);
  ::hyperprotobench::M1_M6_M9_M10* unsafe_arena_release_f2();

  // optional bool f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6.M9)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M6_M9_M10* f2_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_M9_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M6) */ {
 public:
  M1_M6();
  virtual ~M1_M6();

  M1_M6(const M1_M6& from);
  M1_M6(M1_M6&& from) noexcept
    : M1_M6() {
    *this = ::std::move(from);
  }

  inline M1_M6& operator=(const M1_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M6& operator=(M1_M6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M6* internal_default_instance() {
    return reinterpret_cast<const M1_M6*>(
               &_M1_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(M1_M6& a, M1_M6& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M6* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M6* New() const final {
    return CreateMaybeMessage<M1_M6>(nullptr);
  }

  M1_M6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M6& from);
  void MergeFrom(const M1_M6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M6";
  }
  protected:
  explicit M1_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M6_M7 M7;
  typedef M1_M6_M8 M8;
  typedef M1_M6_M9 M9;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
    kF2FieldNumber = 4,
  };
  // optional .hyperprotobench.M1.M6.M7 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M6_M7& f1() const;
  ::hyperprotobench::M1_M6_M7* release_f1();
  ::hyperprotobench::M1_M6_M7* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M6_M7* f1);
  private:
  const ::hyperprotobench::M1_M6_M7& _internal_f1() const;
  ::hyperprotobench::M1_M6_M7* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M6_M7* f1);
  ::hyperprotobench::M1_M6_M7* unsafe_arena_release_f1();

  // optional .hyperprotobench.M1.M6.M8 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M1_M6_M8& f3() const;
  ::hyperprotobench::M1_M6_M8* release_f3();
  ::hyperprotobench::M1_M6_M8* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M1_M6_M8* f3);
  private:
  const ::hyperprotobench::M1_M6_M8& _internal_f3() const;
  ::hyperprotobench::M1_M6_M8* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M1_M6_M8* f3);
  ::hyperprotobench::M1_M6_M8* unsafe_arena_release_f3();

  // optional .hyperprotobench.M1.M6.M9 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M1_M6_M9& f4() const;
  ::hyperprotobench::M1_M6_M9* release_f4();
  ::hyperprotobench::M1_M6_M9* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M1_M6_M9* f4);
  private:
  const ::hyperprotobench::M1_M6_M9& _internal_f4() const;
  ::hyperprotobench::M1_M6_M9* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M1_M6_M9* f4);
  ::hyperprotobench::M1_M6_M9* unsafe_arena_release_f4();

  // optional uint64 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M6_M7* f1_;
  ::hyperprotobench::M1_M6_M8* f3_;
  ::hyperprotobench::M1_M6_M9* f4_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M6_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1) */ {
 public:
  M1();
  virtual ~M1();

  M1(const M1& from);
  M1(M1&& from) noexcept
    : M1() {
    *this = ::std::move(from);
  }

  inline M1& operator=(const M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1& operator=(M1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1* internal_default_instance() {
    return reinterpret_cast<const M1*>(
               &_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(M1& a, M1& b) {
    a.Swap(&b);
  }
  inline void Swap(M1* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1* New() const final {
    return CreateMaybeMessage<M1>(nullptr);
  }

  M1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1& from);
  void MergeFrom(const M1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1";
  }
  protected:
  explicit M1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2 M2;
  typedef M1_M6 M6;

  typedef M1_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M1_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M1_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M1_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M1_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M1_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M1_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M1_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M1_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M1_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M1_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M1_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M1_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 13,
    kF7FieldNumber = 15,
    kF8FieldNumber = 16,
    kF3FieldNumber = 11,
    kF11FieldNumber = 22,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 12,
    kF6FieldNumber = 14,
    kF9FieldNumber = 17,
    kF10FieldNumber = 18,
  };
  // optional string f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional string f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional string f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const char* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional .hyperprotobench.M1.M2 f3 = 11;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M1_M2& f3() const;
  ::hyperprotobench::M1_M2* release_f3();
  ::hyperprotobench::M1_M2* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M1_M2* f3);
  private:
  const ::hyperprotobench::M1_M2& _internal_f3() const;
  ::hyperprotobench::M1_M2* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M1_M2* f3);
  ::hyperprotobench::M1_M2* unsafe_arena_release_f3();

  // optional .hyperprotobench.M1.M6 f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const ::hyperprotobench::M1_M6& f11() const;
  ::hyperprotobench::M1_M6* release_f11();
  ::hyperprotobench::M1_M6* mutable_f11();
  void set_allocated_f11(::hyperprotobench::M1_M6* f11);
  private:
  const ::hyperprotobench::M1_M6& _internal_f11() const;
  ::hyperprotobench::M1_M6* _internal_mutable_f11();
  public:
  void unsafe_arena_set_allocated_f11(
      ::hyperprotobench::M1_M6* f11);
  ::hyperprotobench::M1_M6* unsafe_arena_release_f11();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f4 = 12;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional bool f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional .hyperprotobench.M1.E1 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::hyperprotobench::M1_E1 f9() const;
  void set_f9(::hyperprotobench::M1_E1 value);
  private:
  ::hyperprotobench::M1_E1 _internal_f9() const;
  void _internal_set_f9(::hyperprotobench::M1_E1 value);
  public:

  // optional fixed32 f10 = 18;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::hyperprotobench::M1_M2* f3_;
  ::hyperprotobench::M1_M6* f11_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  float f4_;
  bool f6_;
  int f9_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M13_M14_M15 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M13.M14.M15) */ {
 public:
  M12_M13_M14_M15();
  virtual ~M12_M13_M14_M15();

  M12_M13_M14_M15(const M12_M13_M14_M15& from);
  M12_M13_M14_M15(M12_M13_M14_M15&& from) noexcept
    : M12_M13_M14_M15() {
    *this = ::std::move(from);
  }

  inline M12_M13_M14_M15& operator=(const M12_M13_M14_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M13_M14_M15& operator=(M12_M13_M14_M15&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M13_M14_M15& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M13_M14_M15* internal_default_instance() {
    return reinterpret_cast<const M12_M13_M14_M15*>(
               &_M12_M13_M14_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(M12_M13_M14_M15& a, M12_M13_M14_M15& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M13_M14_M15* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M13_M14_M15* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M13_M14_M15* New() const final {
    return CreateMaybeMessage<M12_M13_M14_M15>(nullptr);
  }

  M12_M13_M14_M15* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M13_M14_M15>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M13_M14_M15& from);
  void MergeFrom(const M12_M13_M14_M15& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M13_M14_M15* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M13.M14.M15";
  }
  protected:
  explicit M12_M13_M14_M15(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M13.M14.M15)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M13_M14_M15_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M13_M14 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M13.M14) */ {
 public:
  M12_M13_M14();
  virtual ~M12_M13_M14();

  M12_M13_M14(const M12_M13_M14& from);
  M12_M13_M14(M12_M13_M14&& from) noexcept
    : M12_M13_M14() {
    *this = ::std::move(from);
  }

  inline M12_M13_M14& operator=(const M12_M13_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M13_M14& operator=(M12_M13_M14&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M13_M14& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M13_M14* internal_default_instance() {
    return reinterpret_cast<const M12_M13_M14*>(
               &_M12_M13_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(M12_M13_M14& a, M12_M13_M14& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M13_M14* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M13_M14* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M13_M14* New() const final {
    return CreateMaybeMessage<M12_M13_M14>(nullptr);
  }

  M12_M13_M14* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M13_M14>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M13_M14& from);
  void MergeFrom(const M12_M13_M14& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M13_M14* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M13.M14";
  }
  protected:
  explicit M12_M13_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M13_M14_M15 M15;

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 15,
    kF2FieldNumber = 9,
    kF1FieldNumber = 2,
    kF3FieldNumber = 13,
    kF4FieldNumber = 14,
    kF6FieldNumber = 17,
  };
  // optional string f5 = 15;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional .hyperprotobench.M12.M13.M14.M15 f2 = 9;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M12_M13_M14_M15& f2() const;
  ::hyperprotobench::M12_M13_M14_M15* release_f2();
  ::hyperprotobench::M12_M13_M14_M15* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M12_M13_M14_M15* f2);
  private:
  const ::hyperprotobench::M12_M13_M14_M15& _internal_f2() const;
  ::hyperprotobench::M12_M13_M14_M15* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M12_M13_M14_M15* f2);
  ::hyperprotobench::M12_M13_M14_M15* unsafe_arena_release_f2();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f3 = 13;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional int32 f4 = 14;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f6 = 17;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  float f6() const;
  void set_f6(float value);
  private:
  float _internal_f6() const;
  void _internal_set_f6(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M13.M14)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::hyperprotobench::M12_M13_M14_M15* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  float f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M13_M14_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M13 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M13) */ {
 public:
  M12_M13();
  virtual ~M12_M13();

  M12_M13(const M12_M13& from);
  M12_M13(M12_M13&& from) noexcept
    : M12_M13() {
    *this = ::std::move(from);
  }

  inline M12_M13& operator=(const M12_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M13& operator=(M12_M13&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M13& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M13* internal_default_instance() {
    return reinterpret_cast<const M12_M13*>(
               &_M12_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(M12_M13& a, M12_M13& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M13* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M13* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M13* New() const final {
    return CreateMaybeMessage<M12_M13>(nullptr);
  }

  M12_M13* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M13>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M13& from);
  void MergeFrom(const M12_M13& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M13* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M13";
  }
  protected:
  explicit M12_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M13_M14 M14;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M12.M13.M14 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M12_M13_M14& f1() const;
  ::hyperprotobench::M12_M13_M14* release_f1();
  ::hyperprotobench::M12_M13_M14* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M12_M13_M14* f1);
  private:
  const ::hyperprotobench::M12_M13_M14& _internal_f1() const;
  ::hyperprotobench::M12_M13_M14* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M12_M13_M14* f1);
  ::hyperprotobench::M12_M13_M14* unsafe_arena_release_f1();

  // optional int32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M13)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M12_M13_M14* f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M13_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M16 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M16) */ {
 public:
  M12_M16();
  virtual ~M12_M16();

  M12_M16(const M12_M16& from);
  M12_M16(M12_M16&& from) noexcept
    : M12_M16() {
    *this = ::std::move(from);
  }

  inline M12_M16& operator=(const M12_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M16& operator=(M12_M16&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M16& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M16* internal_default_instance() {
    return reinterpret_cast<const M12_M16*>(
               &_M12_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(M12_M16& a, M12_M16& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M16* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M16* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M16* New() const final {
    return CreateMaybeMessage<M12_M16>(nullptr);
  }

  M12_M16* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M16>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M16& from);
  void MergeFrom(const M12_M16& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M16* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M16";
  }
  protected:
  explicit M12_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M16)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M16_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17_M18_M19_M20_M21 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17.M18.M19.M20.M21) */ {
 public:
  M12_M17_M18_M19_M20_M21();
  virtual ~M12_M17_M18_M19_M20_M21();

  M12_M17_M18_M19_M20_M21(const M12_M17_M18_M19_M20_M21& from);
  M12_M17_M18_M19_M20_M21(M12_M17_M18_M19_M20_M21&& from) noexcept
    : M12_M17_M18_M19_M20_M21() {
    *this = ::std::move(from);
  }

  inline M12_M17_M18_M19_M20_M21& operator=(const M12_M17_M18_M19_M20_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17_M18_M19_M20_M21& operator=(M12_M17_M18_M19_M20_M21&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17_M18_M19_M20_M21& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17_M18_M19_M20_M21* internal_default_instance() {
    return reinterpret_cast<const M12_M17_M18_M19_M20_M21*>(
               &_M12_M17_M18_M19_M20_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(M12_M17_M18_M19_M20_M21& a, M12_M17_M18_M19_M20_M21& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17_M18_M19_M20_M21* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17_M18_M19_M20_M21* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17_M18_M19_M20_M21* New() const final {
    return CreateMaybeMessage<M12_M17_M18_M19_M20_M21>(nullptr);
  }

  M12_M17_M18_M19_M20_M21* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17_M18_M19_M20_M21>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17_M18_M19_M20_M21& from);
  void MergeFrom(const M12_M17_M18_M19_M20_M21& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17_M18_M19_M20_M21* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17.M18.M19.M20.M21";
  }
  protected:
  explicit M12_M17_M18_M19_M20_M21(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M17_M18_M19_M20_M21_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M12_M17_M18_M19_M20_M21_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M12_M17_M18_M19_M20_M21_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M12_M17_M18_M19_M20_M21_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M12_M17_M18_M19_M20_M21_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M12_M17_M18_M19_M20_M21_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M12_M17_M18_M19_M20_M21_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M12_M17_M18_M19_M20_M21_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M12_M17_M18_M19_M20_M21_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M12_M17_M18_M19_M20_M21_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M12_M17_M18_M19_M20_M21_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M12_M17_M18_M19_M20_M21_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M12_M17_M18_M19_M20_M21_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M12.M17.M18.M19.M20.M21.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 f2() const;
  void set_f2(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 value);
  private:
  ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17.M18.M19.M20.M21)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_M21_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17_M18_M19_M20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17.M18.M19.M20) */ {
 public:
  M12_M17_M18_M19_M20();
  virtual ~M12_M17_M18_M19_M20();

  M12_M17_M18_M19_M20(const M12_M17_M18_M19_M20& from);
  M12_M17_M18_M19_M20(M12_M17_M18_M19_M20&& from) noexcept
    : M12_M17_M18_M19_M20() {
    *this = ::std::move(from);
  }

  inline M12_M17_M18_M19_M20& operator=(const M12_M17_M18_M19_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17_M18_M19_M20& operator=(M12_M17_M18_M19_M20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17_M18_M19_M20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17_M18_M19_M20* internal_default_instance() {
    return reinterpret_cast<const M12_M17_M18_M19_M20*>(
               &_M12_M17_M18_M19_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(M12_M17_M18_M19_M20& a, M12_M17_M18_M19_M20& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17_M18_M19_M20* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17_M18_M19_M20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17_M18_M19_M20* New() const final {
    return CreateMaybeMessage<M12_M17_M18_M19_M20>(nullptr);
  }

  M12_M17_M18_M19_M20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17_M18_M19_M20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17_M18_M19_M20& from);
  void MergeFrom(const M12_M17_M18_M19_M20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17_M18_M19_M20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17.M18.M19.M20";
  }
  protected:
  explicit M12_M17_M18_M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M17_M18_M19_M20_M21 M21;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 4,
  };
  // optional .hyperprotobench.M12.M17.M18.M19.M20.M21 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M12_M17_M18_M19_M20_M21& f1() const;
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* release_f1();
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M12_M17_M18_M19_M20_M21* f1);
  private:
  const ::hyperprotobench::M12_M17_M18_M19_M20_M21& _internal_f1() const;
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M12_M17_M18_M19_M20_M21* f1);
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* unsafe_arena_release_f1();

  // optional int32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17.M18.M19.M20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_M18_M19_M20_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17_M18_M19 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17.M18.M19) */ {
 public:
  M12_M17_M18_M19();
  virtual ~M12_M17_M18_M19();

  M12_M17_M18_M19(const M12_M17_M18_M19& from);
  M12_M17_M18_M19(M12_M17_M18_M19&& from) noexcept
    : M12_M17_M18_M19() {
    *this = ::std::move(from);
  }

  inline M12_M17_M18_M19& operator=(const M12_M17_M18_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17_M18_M19& operator=(M12_M17_M18_M19&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17_M18_M19& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17_M18_M19* internal_default_instance() {
    return reinterpret_cast<const M12_M17_M18_M19*>(
               &_M12_M17_M18_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(M12_M17_M18_M19& a, M12_M17_M18_M19& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17_M18_M19* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17_M18_M19* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17_M18_M19* New() const final {
    return CreateMaybeMessage<M12_M17_M18_M19>(nullptr);
  }

  M12_M17_M18_M19* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17_M18_M19>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17_M18_M19& from);
  void MergeFrom(const M12_M17_M18_M19& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17_M18_M19* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17.M18.M19";
  }
  protected:
  explicit M12_M17_M18_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M17_M18_M19_M20 M20;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M12.M17.M18.M19.M20 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M12_M17_M18_M19_M20& f2() const;
  ::hyperprotobench::M12_M17_M18_M19_M20* release_f2();
  ::hyperprotobench::M12_M17_M18_M19_M20* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M12_M17_M18_M19_M20* f2);
  private:
  const ::hyperprotobench::M12_M17_M18_M19_M20& _internal_f2() const;
  ::hyperprotobench::M12_M17_M18_M19_M20* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M12_M17_M18_M19_M20* f2);
  ::hyperprotobench::M12_M17_M18_M19_M20* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17.M18.M19)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M12_M17_M18_M19_M20* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_M18_M19_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17_M18 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17.M18) */ {
 public:
  M12_M17_M18();
  virtual ~M12_M17_M18();

  M12_M17_M18(const M12_M17_M18& from);
  M12_M17_M18(M12_M17_M18&& from) noexcept
    : M12_M17_M18() {
    *this = ::std::move(from);
  }

  inline M12_M17_M18& operator=(const M12_M17_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17_M18& operator=(M12_M17_M18&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17_M18& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17_M18* internal_default_instance() {
    return reinterpret_cast<const M12_M17_M18*>(
               &_M12_M17_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(M12_M17_M18& a, M12_M17_M18& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17_M18* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17_M18* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17_M18* New() const final {
    return CreateMaybeMessage<M12_M17_M18>(nullptr);
  }

  M12_M17_M18* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17_M18>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17_M18& from);
  void MergeFrom(const M12_M17_M18& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17_M18* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17.M18";
  }
  protected:
  explicit M12_M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M17_M18_M19 M19;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M12.M17.M18.M19 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M12_M17_M18_M19& f2() const;
  ::hyperprotobench::M12_M17_M18_M19* release_f2();
  ::hyperprotobench::M12_M17_M18_M19* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M12_M17_M18_M19* f2);
  private:
  const ::hyperprotobench::M12_M17_M18_M19& _internal_f2() const;
  ::hyperprotobench::M12_M17_M18_M19* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M12_M17_M18_M19* f2);
  ::hyperprotobench::M12_M17_M18_M19* unsafe_arena_release_f2();

  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17.M18)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M12_M17_M18_M19* f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_M18_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17_M22 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17.M22) */ {
 public:
  M12_M17_M22();
  virtual ~M12_M17_M22();

  M12_M17_M22(const M12_M17_M22& from);
  M12_M17_M22(M12_M17_M22&& from) noexcept
    : M12_M17_M22() {
    *this = ::std::move(from);
  }

  inline M12_M17_M22& operator=(const M12_M17_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17_M22& operator=(M12_M17_M22&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17_M22& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17_M22* internal_default_instance() {
    return reinterpret_cast<const M12_M17_M22*>(
               &_M12_M17_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(M12_M17_M22& a, M12_M17_M22& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17_M22* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17_M22* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17_M22* New() const final {
    return CreateMaybeMessage<M12_M17_M22>(nullptr);
  }

  M12_M17_M22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17_M22>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17_M22& from);
  void MergeFrom(const M12_M17_M22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17_M22* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17.M22";
  }
  protected:
  explicit M12_M17_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 5,
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
  };
  // optional bytes f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional float f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional int32 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17.M22)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  float f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_M22_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12_M17 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12.M17) */ {
 public:
  M12_M17();
  virtual ~M12_M17();

  M12_M17(const M12_M17& from);
  M12_M17(M12_M17&& from) noexcept
    : M12_M17() {
    *this = ::std::move(from);
  }

  inline M12_M17& operator=(const M12_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12_M17& operator=(M12_M17&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12_M17& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12_M17* internal_default_instance() {
    return reinterpret_cast<const M12_M17*>(
               &_M12_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(M12_M17& a, M12_M17& b) {
    a.Swap(&b);
  }
  inline void Swap(M12_M17* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12_M17* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12_M17* New() const final {
    return CreateMaybeMessage<M12_M17>(nullptr);
  }

  M12_M17* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12_M17>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12_M17& from);
  void MergeFrom(const M12_M17& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12_M17* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12.M17";
  }
  protected:
  explicit M12_M17(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M17_M18 M18;
  typedef M12_M17_M22 M22;

  typedef M12_M17_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M12_M17_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M12_M17_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M12_M17_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M12_M17_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M12_M17_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M12_M17_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M12_M17_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M12_M17_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M12_M17_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M12_M17_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M12_M17_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M12_M17_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 10,
    kF5FieldNumber = 11,
    kF1FieldNumber = 2,
    kF7FieldNumber = 17,
    kF3FieldNumber = 4,
    kF6FieldNumber = 16,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M12.M17.M18 f4 = 10;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M12_M17_M18& f4() const;
  ::hyperprotobench::M12_M17_M18* release_f4();
  ::hyperprotobench::M12_M17_M18* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M12_M17_M18* f4);
  private:
  const ::hyperprotobench::M12_M17_M18& _internal_f4() const;
  ::hyperprotobench::M12_M17_M18* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M12_M17_M18* f4);
  ::hyperprotobench::M12_M17_M18* unsafe_arena_release_f4();

  // optional .hyperprotobench.M12.M17.M22 f5 = 11;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M12_M17_M22& f5() const;
  ::hyperprotobench::M12_M17_M22* release_f5();
  ::hyperprotobench::M12_M17_M22* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M12_M17_M22* f5);
  private:
  const ::hyperprotobench::M12_M17_M22& _internal_f5() const;
  ::hyperprotobench::M12_M17_M22* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M12_M17_M22* f5);
  ::hyperprotobench::M12_M17_M22* unsafe_arena_release_f5();

  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f7 = 17;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional sint32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 16;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M12.M17.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M12_M17_E1 f2() const;
  void set_f2(::hyperprotobench::M12_M17_E1 value);
  private:
  ::hyperprotobench::M12_M17_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M12_M17_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12.M17)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M12_M17_M18* f4_;
  ::hyperprotobench::M12_M17_M22* f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_M17_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M12 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M12) */ {
 public:
  M12();
  virtual ~M12();

  M12(const M12& from);
  M12(M12&& from) noexcept
    : M12() {
    *this = ::std::move(from);
  }

  inline M12& operator=(const M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline M12& operator=(M12&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M12& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M12* internal_default_instance() {
    return reinterpret_cast<const M12*>(
               &_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(M12& a, M12& b) {
    a.Swap(&b);
  }
  inline void Swap(M12* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M12* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M12* New() const final {
    return CreateMaybeMessage<M12>(nullptr);
  }

  M12* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M12>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M12& from);
  void MergeFrom(const M12& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M12* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M12";
  }
  protected:
  explicit M12(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M12_M13 M13;
  typedef M12_M16 M16;
  typedef M12_M17 M17;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF7FieldNumber = 14,
    kF12FieldNumber = 20,
    kF1FieldNumber = 2,
    kF3FieldNumber = 6,
    kF5FieldNumber = 11,
    kF4FieldNumber = 10,
    kF6FieldNumber = 12,
    kF8FieldNumber = 15,
    kF10FieldNumber = 18,
    kF11FieldNumber = 19,
    kF9FieldNumber = 17,
    kF13FieldNumber = 21,
  };
  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f7 = 14;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional bytes f12 = 20;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const std::string& f12() const;
  void set_f12(const std::string& value);
  void set_f12(std::string&& value);
  void set_f12(const char* value);
  void set_f12(const void* value, size_t size);
  std::string* mutable_f12();
  std::string* release_f12();
  void set_allocated_f12(std::string* f12);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f12();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f12(
      std::string* f12);
  private:
  const std::string& _internal_f12() const;
  void _internal_set_f12(const std::string& value);
  std::string* _internal_mutable_f12();
  public:

  // optional .hyperprotobench.M12.M13 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M12_M13& f1() const;
  ::hyperprotobench::M12_M13* release_f1();
  ::hyperprotobench::M12_M13* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M12_M13* f1);
  private:
  const ::hyperprotobench::M12_M13& _internal_f1() const;
  ::hyperprotobench::M12_M13* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M12_M13* f1);
  ::hyperprotobench::M12_M13* unsafe_arena_release_f1();

  // optional .hyperprotobench.M12.M16 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M12_M16& f3() const;
  ::hyperprotobench::M12_M16* release_f3();
  ::hyperprotobench::M12_M16* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M12_M16* f3);
  private:
  const ::hyperprotobench::M12_M16& _internal_f3() const;
  ::hyperprotobench::M12_M16* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M12_M16* f3);
  ::hyperprotobench::M12_M16* unsafe_arena_release_f3();

  // optional .hyperprotobench.M12.M17 f5 = 11;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M12_M17& f5() const;
  ::hyperprotobench::M12_M17* release_f5();
  ::hyperprotobench::M12_M17* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M12_M17* f5);
  private:
  const ::hyperprotobench::M12_M17& _internal_f5() const;
  ::hyperprotobench::M12_M17* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M12_M17* f5);
  ::hyperprotobench::M12_M17* unsafe_arena_release_f5();

  // optional fixed64 f4 = 10;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f6 = 12;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional int32 f8 = 15;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f10 = 18;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f11 = 19;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::uint64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f13 = 21;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  ::PROTOBUF_NAMESPACE_ID::int32 f13() const;
  void set_f13(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f13() const;
  void _internal_set_f13(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M12)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f12_;
  ::hyperprotobench::M12_M13* f1_;
  ::hyperprotobench::M12_M16* f3_;
  ::hyperprotobench::M12_M17* f5_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  bool f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f11_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f13_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M12_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M24_M25 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M24.M25) */ {
 public:
  M23_M24_M25();
  virtual ~M23_M24_M25();

  M23_M24_M25(const M23_M24_M25& from);
  M23_M24_M25(M23_M24_M25&& from) noexcept
    : M23_M24_M25() {
    *this = ::std::move(from);
  }

  inline M23_M24_M25& operator=(const M23_M24_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M24_M25& operator=(M23_M24_M25&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M24_M25& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M24_M25* internal_default_instance() {
    return reinterpret_cast<const M23_M24_M25*>(
               &_M23_M24_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(M23_M24_M25& a, M23_M24_M25& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M24_M25* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M24_M25* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M24_M25* New() const final {
    return CreateMaybeMessage<M23_M24_M25>(nullptr);
  }

  M23_M24_M25* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M24_M25>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M24_M25& from);
  void MergeFrom(const M23_M24_M25& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M24_M25* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M24.M25";
  }
  protected:
  explicit M23_M24_M25(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M24.M25)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M24_M25_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M24_M26 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M24.M26) */ {
 public:
  M23_M24_M26();
  virtual ~M23_M24_M26();

  M23_M24_M26(const M23_M24_M26& from);
  M23_M24_M26(M23_M24_M26&& from) noexcept
    : M23_M24_M26() {
    *this = ::std::move(from);
  }

  inline M23_M24_M26& operator=(const M23_M24_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M24_M26& operator=(M23_M24_M26&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M24_M26& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M24_M26* internal_default_instance() {
    return reinterpret_cast<const M23_M24_M26*>(
               &_M23_M24_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(M23_M24_M26& a, M23_M24_M26& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M24_M26* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M24_M26* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M24_M26* New() const final {
    return CreateMaybeMessage<M23_M24_M26>(nullptr);
  }

  M23_M24_M26* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M24_M26>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M24_M26& from);
  void MergeFrom(const M23_M24_M26& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M24_M26* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M24.M26";
  }
  protected:
  explicit M23_M24_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M24.M26)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M24_M26_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M24_M27 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M24.M27) */ {
 public:
  M23_M24_M27();
  virtual ~M23_M24_M27();

  M23_M24_M27(const M23_M24_M27& from);
  M23_M24_M27(M23_M24_M27&& from) noexcept
    : M23_M24_M27() {
    *this = ::std::move(from);
  }

  inline M23_M24_M27& operator=(const M23_M24_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M24_M27& operator=(M23_M24_M27&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M24_M27& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M24_M27* internal_default_instance() {
    return reinterpret_cast<const M23_M24_M27*>(
               &_M23_M24_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(M23_M24_M27& a, M23_M24_M27& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M24_M27* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M24_M27* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M24_M27* New() const final {
    return CreateMaybeMessage<M23_M24_M27>(nullptr);
  }

  M23_M24_M27* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M24_M27>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M24_M27& from);
  void MergeFrom(const M23_M24_M27& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M24_M27* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M24.M27";
  }
  protected:
  explicit M23_M24_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // repeated bool f1 = 2;
  int f1_size() const;
  private:
  int _internal_f1_size() const;
  public:
  void clear_f1();
  private:
  bool _internal_f1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_f1() const;
  void _internal_add_f1(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_f1();
  public:
  bool f1(int index) const;
  void set_f1(int index, bool value);
  void add_f1(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      f1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M24.M27)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M24_M27_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M24 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M24) */ {
 public:
  M23_M24();
  virtual ~M23_M24();

  M23_M24(const M23_M24& from);
  M23_M24(M23_M24&& from) noexcept
    : M23_M24() {
    *this = ::std::move(from);
  }

  inline M23_M24& operator=(const M23_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M24& operator=(M23_M24&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M24& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M24* internal_default_instance() {
    return reinterpret_cast<const M23_M24*>(
               &_M23_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(M23_M24& a, M23_M24& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M24* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M24* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M24* New() const final {
    return CreateMaybeMessage<M23_M24>(nullptr);
  }

  M23_M24* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M24>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M24& from);
  void MergeFrom(const M23_M24& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M24* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M24";
  }
  protected:
  explicit M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M24_M25 M25;
  typedef M23_M24_M26 M26;
  typedef M23_M24_M27 M27;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF1FieldNumber = 1,
    kF5FieldNumber = 6,
  };
  // optional .hyperprotobench.M23.M24.M25 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M23_M24_M25& f2() const;
  ::hyperprotobench::M23_M24_M25* release_f2();
  ::hyperprotobench::M23_M24_M25* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M23_M24_M25* f2);
  private:
  const ::hyperprotobench::M23_M24_M25& _internal_f2() const;
  ::hyperprotobench::M23_M24_M25* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M23_M24_M25* f2);
  ::hyperprotobench::M23_M24_M25* unsafe_arena_release_f2();

  // optional .hyperprotobench.M23.M24.M26 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M23_M24_M26& f3() const;
  ::hyperprotobench::M23_M24_M26* release_f3();
  ::hyperprotobench::M23_M24_M26* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M23_M24_M26* f3);
  private:
  const ::hyperprotobench::M23_M24_M26& _internal_f3() const;
  ::hyperprotobench::M23_M24_M26* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M23_M24_M26* f3);
  ::hyperprotobench::M23_M24_M26* unsafe_arena_release_f3();

  // optional .hyperprotobench.M23.M24.M27 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M23_M24_M27& f4() const;
  ::hyperprotobench::M23_M24_M27* release_f4();
  ::hyperprotobench::M23_M24_M27* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M23_M24_M27* f4);
  private:
  const ::hyperprotobench::M23_M24_M27& _internal_f4() const;
  ::hyperprotobench::M23_M24_M27* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M23_M24_M27* f4);
  ::hyperprotobench::M23_M24_M27* unsafe_arena_release_f4();

  // optional double f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  double f1() const;
  void set_f1(double value);
  private:
  double _internal_f1() const;
  void _internal_set_f1(double value);
  public:

  // optional int32 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M24)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M23_M24_M25* f2_;
  ::hyperprotobench::M23_M24_M26* f3_;
  ::hyperprotobench::M23_M24_M27* f4_;
  double f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M28 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M28) */ {
 public:
  M23_M28();
  virtual ~M23_M28();

  M23_M28(const M23_M28& from);
  M23_M28(M23_M28&& from) noexcept
    : M23_M28() {
    *this = ::std::move(from);
  }

  inline M23_M28& operator=(const M23_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M28& operator=(M23_M28&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M28& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M28* internal_default_instance() {
    return reinterpret_cast<const M23_M28*>(
               &_M23_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(M23_M28& a, M23_M28& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M28* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M28* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M28* New() const final {
    return CreateMaybeMessage<M23_M28>(nullptr);
  }

  M23_M28* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M28>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M28& from);
  void MergeFrom(const M23_M28& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M28* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M28";
  }
  protected:
  explicit M23_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M28)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M28_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M29_M30_M31_M32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M29.M30.M31.M32) */ {
 public:
  M23_M29_M30_M31_M32();
  virtual ~M23_M29_M30_M31_M32();

  M23_M29_M30_M31_M32(const M23_M29_M30_M31_M32& from);
  M23_M29_M30_M31_M32(M23_M29_M30_M31_M32&& from) noexcept
    : M23_M29_M30_M31_M32() {
    *this = ::std::move(from);
  }

  inline M23_M29_M30_M31_M32& operator=(const M23_M29_M30_M31_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M29_M30_M31_M32& operator=(M23_M29_M30_M31_M32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M29_M30_M31_M32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M29_M30_M31_M32* internal_default_instance() {
    return reinterpret_cast<const M23_M29_M30_M31_M32*>(
               &_M23_M29_M30_M31_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(M23_M29_M30_M31_M32& a, M23_M29_M30_M31_M32& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M29_M30_M31_M32* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M29_M30_M31_M32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M29_M30_M31_M32* New() const final {
    return CreateMaybeMessage<M23_M29_M30_M31_M32>(nullptr);
  }

  M23_M29_M30_M31_M32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M29_M30_M31_M32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M29_M30_M31_M32& from);
  void MergeFrom(const M23_M29_M30_M31_M32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M29_M30_M31_M32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M29.M30.M31.M32";
  }
  protected:
  explicit M23_M29_M30_M31_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M29_M30_M31_M32_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M23_M29_M30_M31_M32_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M23_M29_M30_M31_M32_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M23_M29_M30_M31_M32_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M23_M29_M30_M31_M32_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M23_M29_M30_M31_M32_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M23_M29_M30_M31_M32_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M23_M29_M30_M31_M32_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M23_M29_M30_M31_M32_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M23_M29_M30_M31_M32_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M23_M29_M30_M31_M32_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M23_M29_M30_M31_M32_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M23_M29_M30_M31_M32_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 6,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF1FieldNumber = 2,
  };
  // optional bytes f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bool f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  bool f2() const;
  void set_f2(bool value);
  private:
  bool _internal_f2() const;
  void _internal_set_f2(bool value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M23.M29.M30.M31.M32.E1 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::hyperprotobench::M23_M29_M30_M31_M32_E1 f1() const;
  void set_f1(::hyperprotobench::M23_M29_M30_M31_M32_E1 value);
  private:
  ::hyperprotobench::M23_M29_M30_M31_M32_E1 _internal_f1() const;
  void _internal_set_f1(::hyperprotobench::M23_M29_M30_M31_M32_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M29.M30.M31.M32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  bool f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  int f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M29_M30_M31_M32_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M29_M30_M31 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M29.M30.M31) */ {
 public:
  M23_M29_M30_M31();
  virtual ~M23_M29_M30_M31();

  M23_M29_M30_M31(const M23_M29_M30_M31& from);
  M23_M29_M30_M31(M23_M29_M30_M31&& from) noexcept
    : M23_M29_M30_M31() {
    *this = ::std::move(from);
  }

  inline M23_M29_M30_M31& operator=(const M23_M29_M30_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M29_M30_M31& operator=(M23_M29_M30_M31&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M29_M30_M31& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M29_M30_M31* internal_default_instance() {
    return reinterpret_cast<const M23_M29_M30_M31*>(
               &_M23_M29_M30_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(M23_M29_M30_M31& a, M23_M29_M30_M31& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M29_M30_M31* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M29_M30_M31* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M29_M30_M31* New() const final {
    return CreateMaybeMessage<M23_M29_M30_M31>(nullptr);
  }

  M23_M29_M30_M31* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M29_M30_M31>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M29_M30_M31& from);
  void MergeFrom(const M23_M29_M30_M31& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M29_M30_M31* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M29.M30.M31";
  }
  protected:
  explicit M23_M29_M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M29_M30_M31_M32 M32;

  // accessors -------------------------------------------------------

  enum : int {
    kF6FieldNumber = 13,
    kF7FieldNumber = 14,
    kF1FieldNumber = 2,
    kF2FieldNumber = 8,
    kF5FieldNumber = 11,
    kF3FieldNumber = 9,
    kF4FieldNumber = 10,
  };
  // optional string f6 = 13;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M23.M29.M30.M31.M32 f7 = 14;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M23_M29_M30_M31_M32& f7() const;
  ::hyperprotobench::M23_M29_M30_M31_M32* release_f7();
  ::hyperprotobench::M23_M29_M30_M31_M32* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M23_M29_M30_M31_M32* f7);
  private:
  const ::hyperprotobench::M23_M29_M30_M31_M32& _internal_f7() const;
  ::hyperprotobench::M23_M29_M30_M31_M32* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M23_M29_M30_M31_M32* f7);
  ::hyperprotobench::M23_M29_M30_M31_M32* unsafe_arena_release_f7();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f2 = 8;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional bool f5 = 11;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional int32 f3 = 9;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 10;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M29.M30.M31)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M23_M29_M30_M31_M32* f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  float f2_;
  bool f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M29_M30_M31_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M29_M30 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M29.M30) */ {
 public:
  M23_M29_M30();
  virtual ~M23_M29_M30();

  M23_M29_M30(const M23_M29_M30& from);
  M23_M29_M30(M23_M29_M30&& from) noexcept
    : M23_M29_M30() {
    *this = ::std::move(from);
  }

  inline M23_M29_M30& operator=(const M23_M29_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M29_M30& operator=(M23_M29_M30&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M29_M30& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M29_M30* internal_default_instance() {
    return reinterpret_cast<const M23_M29_M30*>(
               &_M23_M29_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(M23_M29_M30& a, M23_M29_M30& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M29_M30* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M29_M30* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M29_M30* New() const final {
    return CreateMaybeMessage<M23_M29_M30>(nullptr);
  }

  M23_M29_M30* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M29_M30>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M29_M30& from);
  void MergeFrom(const M23_M29_M30& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M29_M30* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M29.M30";
  }
  protected:
  explicit M23_M29_M30(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M29_M30_M31 M31;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
  };
  // optional .hyperprotobench.M23.M29.M30.M31 f1 = 4;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M23_M29_M30_M31& f1() const;
  ::hyperprotobench::M23_M29_M30_M31* release_f1();
  ::hyperprotobench::M23_M29_M30_M31* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M23_M29_M30_M31* f1);
  private:
  const ::hyperprotobench::M23_M29_M30_M31& _internal_f1() const;
  ::hyperprotobench::M23_M29_M30_M31* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M23_M29_M30_M31* f1);
  ::hyperprotobench::M23_M29_M30_M31* unsafe_arena_release_f1();

  // optional uint64 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M29.M30)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M23_M29_M30_M31* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M29_M30_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M29_M33 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M29.M33) */ {
 public:
  M23_M29_M33();
  virtual ~M23_M29_M33();

  M23_M29_M33(const M23_M29_M33& from);
  M23_M29_M33(M23_M29_M33&& from) noexcept
    : M23_M29_M33() {
    *this = ::std::move(from);
  }

  inline M23_M29_M33& operator=(const M23_M29_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M29_M33& operator=(M23_M29_M33&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M29_M33& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M29_M33* internal_default_instance() {
    return reinterpret_cast<const M23_M29_M33*>(
               &_M23_M29_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(M23_M29_M33& a, M23_M29_M33& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M29_M33* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M29_M33* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M29_M33* New() const final {
    return CreateMaybeMessage<M23_M29_M33>(nullptr);
  }

  M23_M29_M33* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M29_M33>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M29_M33& from);
  void MergeFrom(const M23_M29_M33& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M29_M33* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M29.M33";
  }
  protected:
  explicit M23_M29_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF2FieldNumber = 2,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M29.M33)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M29_M33_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M29 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M29) */ {
 public:
  M23_M29();
  virtual ~M23_M29();

  M23_M29(const M23_M29& from);
  M23_M29(M23_M29&& from) noexcept
    : M23_M29() {
    *this = ::std::move(from);
  }

  inline M23_M29& operator=(const M23_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M29& operator=(M23_M29&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M29& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M29* internal_default_instance() {
    return reinterpret_cast<const M23_M29*>(
               &_M23_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(M23_M29& a, M23_M29& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M29* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M29* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M29* New() const final {
    return CreateMaybeMessage<M23_M29>(nullptr);
  }

  M23_M29* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M29>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M29& from);
  void MergeFrom(const M23_M29& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M29* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M29";
  }
  protected:
  explicit M23_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M29_M30 M30;
  typedef M23_M29_M33 M33;

  // accessors -------------------------------------------------------

  enum : int {
    kF6FieldNumber = 9,
    kF2FieldNumber = 4,
    kF4FieldNumber = 6,
    kF1FieldNumber = 1,
    kF3FieldNumber = 5,
    kF5FieldNumber = 7,
  };
  // optional string f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M23.M29.M30 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M23_M29_M30& f2() const;
  ::hyperprotobench::M23_M29_M30* release_f2();
  ::hyperprotobench::M23_M29_M30* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M23_M29_M30* f2);
  private:
  const ::hyperprotobench::M23_M29_M30& _internal_f2() const;
  ::hyperprotobench::M23_M29_M30* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M23_M29_M30* f2);
  ::hyperprotobench::M23_M29_M30* unsafe_arena_release_f2();

  // optional .hyperprotobench.M23.M29.M33 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M23_M29_M33& f4() const;
  ::hyperprotobench::M23_M29_M33* release_f4();
  ::hyperprotobench::M23_M29_M33* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M23_M29_M33* f4);
  private:
  const ::hyperprotobench::M23_M29_M33& _internal_f4() const;
  ::hyperprotobench::M23_M29_M33* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M23_M29_M33* f4);
  ::hyperprotobench::M23_M29_M33* unsafe_arena_release_f4();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M29)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M23_M29_M30* f2_;
  ::hyperprotobench::M23_M29_M33* f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  float f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M29_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23) */ {
 public:
  M23();
  virtual ~M23();

  M23(const M23& from);
  M23(M23&& from) noexcept
    : M23() {
    *this = ::std::move(from);
  }

  inline M23& operator=(const M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23& operator=(M23&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23* internal_default_instance() {
    return reinterpret_cast<const M23*>(
               &_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(M23& a, M23& b) {
    a.Swap(&b);
  }
  inline void Swap(M23* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23* New() const final {
    return CreateMaybeMessage<M23>(nullptr);
  }

  M23* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23& from);
  void MergeFrom(const M23& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23";
  }
  protected:
  explicit M23(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M24 M24;
  typedef M23_M28 M28;
  typedef M23_M29 M29;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF8FieldNumber = 13,
    kF9FieldNumber = 14,
    kF10FieldNumber = 15,
  };
  // optional .hyperprotobench.M23.M24 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M23_M24& f2() const;
  ::hyperprotobench::M23_M24* release_f2();
  ::hyperprotobench::M23_M24* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M23_M24* f2);
  private:
  const ::hyperprotobench::M23_M24& _internal_f2() const;
  ::hyperprotobench::M23_M24* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M23_M24* f2);
  ::hyperprotobench::M23_M24* unsafe_arena_release_f2();

  // optional .hyperprotobench.M23.M28 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M23_M28& f6() const;
  ::hyperprotobench::M23_M28* release_f6();
  ::hyperprotobench::M23_M28* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M23_M28* f6);
  private:
  const ::hyperprotobench::M23_M28& _internal_f6() const;
  ::hyperprotobench::M23_M28* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M23_M28* f6);
  ::hyperprotobench::M23_M28* unsafe_arena_release_f6();

  // optional .hyperprotobench.M23.M29 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M23_M29& f7() const;
  ::hyperprotobench::M23_M29* release_f7();
  ::hyperprotobench::M23_M29* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M23_M29* f7);
  private:
  const ::hyperprotobench::M23_M29& _internal_f7() const;
  ::hyperprotobench::M23_M29* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M23_M29* f7);
  ::hyperprotobench::M23_M29* unsafe_arena_release_f7();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional int32 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  float f9() const;
  void set_f9(float value);
  private:
  float _internal_f9() const;
  void _internal_set_f9(float value);
  public:

  // optional int32 f10 = 15;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M23_M24* f2_;
  ::hyperprotobench::M23_M28* f6_;
  ::hyperprotobench::M23_M29* f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  float f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  float f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M35 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M35) */ {
 public:
  M34_M35();
  virtual ~M34_M35();

  M34_M35(const M34_M35& from);
  M34_M35(M34_M35&& from) noexcept
    : M34_M35() {
    *this = ::std::move(from);
  }

  inline M34_M35& operator=(const M34_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M35& operator=(M34_M35&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M35& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M35* internal_default_instance() {
    return reinterpret_cast<const M34_M35*>(
               &_M34_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(M34_M35& a, M34_M35& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M35* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M35* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M35* New() const final {
    return CreateMaybeMessage<M34_M35>(nullptr);
  }

  M34_M35* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M35>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M35& from);
  void MergeFrom(const M34_M35& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M35* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M35";
  }
  protected:
  explicit M34_M35(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M35)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M35_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M36 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M36) */ {
 public:
  M34_M36();
  virtual ~M34_M36();

  M34_M36(const M34_M36& from);
  M34_M36(M34_M36&& from) noexcept
    : M34_M36() {
    *this = ::std::move(from);
  }

  inline M34_M36& operator=(const M34_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M36& operator=(M34_M36&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M36& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M36* internal_default_instance() {
    return reinterpret_cast<const M34_M36*>(
               &_M34_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(M34_M36& a, M34_M36& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M36* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M36* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M36* New() const final {
    return CreateMaybeMessage<M34_M36>(nullptr);
  }

  M34_M36* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M36>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M36& from);
  void MergeFrom(const M34_M36& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M36* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M36";
  }
  protected:
  explicit M34_M36(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 1,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 6,
  };
  // optional bytes f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M36)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M36_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M37_M38_M39_M40_M41 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M37.M38.M39.M40.M41) */ {
 public:
  M34_M37_M38_M39_M40_M41();
  virtual ~M34_M37_M38_M39_M40_M41();

  M34_M37_M38_M39_M40_M41(const M34_M37_M38_M39_M40_M41& from);
  M34_M37_M38_M39_M40_M41(M34_M37_M38_M39_M40_M41&& from) noexcept
    : M34_M37_M38_M39_M40_M41() {
    *this = ::std::move(from);
  }

  inline M34_M37_M38_M39_M40_M41& operator=(const M34_M37_M38_M39_M40_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M37_M38_M39_M40_M41& operator=(M34_M37_M38_M39_M40_M41&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M37_M38_M39_M40_M41& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M37_M38_M39_M40_M41* internal_default_instance() {
    return reinterpret_cast<const M34_M37_M38_M39_M40_M41*>(
               &_M34_M37_M38_M39_M40_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(M34_M37_M38_M39_M40_M41& a, M34_M37_M38_M39_M40_M41& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M37_M38_M39_M40_M41* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M37_M38_M39_M40_M41* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M37_M38_M39_M40_M41* New() const final {
    return CreateMaybeMessage<M34_M37_M38_M39_M40_M41>(nullptr);
  }

  M34_M37_M38_M39_M40_M41* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M37_M38_M39_M40_M41>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M37_M38_M39_M40_M41& from);
  void MergeFrom(const M34_M37_M38_M39_M40_M41& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M37_M38_M39_M40_M41* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M37.M38.M39.M40.M41";
  }
  protected:
  explicit M34_M37_M38_M39_M40_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF8FieldNumber = 13,
    kF3FieldNumber = 4,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF9FieldNumber = 14,
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF6FieldNumber = 11,
    kF7FieldNumber = 12,
    kF10FieldNumber = 15,
  };
  // repeated string f8 = 13;
  int f8_size() const;
  private:
  int _internal_f8_size() const;
  public:
  void clear_f8();
  const std::string& f8(int index) const;
  std::string* mutable_f8(int index);
  void set_f8(int index, const std::string& value);
  void set_f8(int index, std::string&& value);
  void set_f8(int index, const char* value);
  void set_f8(int index, const char* value, size_t size);
  std::string* add_f8();
  void add_f8(const std::string& value);
  void add_f8(std::string&& value);
  void add_f8(const char* value);
  void add_f8(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f8();
  private:
  const std::string& _internal_f8(int index) const;
  std::string* _internal_add_f8();
  public:

  // optional string f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional int32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  float f6() const;
  void set_f6(float value);
  private:
  float _internal_f6() const;
  void _internal_set_f6(float value);
  public:

  // optional int32 f7 = 12;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f10 = 15;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M37.M38.M39.M40.M41)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  float f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  float f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_M41_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M37_M38_M39_M40 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M37.M38.M39.M40) */ {
 public:
  M34_M37_M38_M39_M40();
  virtual ~M34_M37_M38_M39_M40();

  M34_M37_M38_M39_M40(const M34_M37_M38_M39_M40& from);
  M34_M37_M38_M39_M40(M34_M37_M38_M39_M40&& from) noexcept
    : M34_M37_M38_M39_M40() {
    *this = ::std::move(from);
  }

  inline M34_M37_M38_M39_M40& operator=(const M34_M37_M38_M39_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M37_M38_M39_M40& operator=(M34_M37_M38_M39_M40&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M37_M38_M39_M40& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M37_M38_M39_M40* internal_default_instance() {
    return reinterpret_cast<const M34_M37_M38_M39_M40*>(
               &_M34_M37_M38_M39_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(M34_M37_M38_M39_M40& a, M34_M37_M38_M39_M40& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M37_M38_M39_M40* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M37_M38_M39_M40* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M37_M38_M39_M40* New() const final {
    return CreateMaybeMessage<M34_M37_M38_M39_M40>(nullptr);
  }

  M34_M37_M38_M39_M40* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M37_M38_M39_M40>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M37_M38_M39_M40& from);
  void MergeFrom(const M34_M37_M38_M39_M40& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M37_M38_M39_M40* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M37.M38.M39.M40";
  }
  protected:
  explicit M34_M37_M38_M39_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M34_M37_M38_M39_M40_M41 M41;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M34.M37.M38.M39.M40.M41 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M34_M37_M38_M39_M40_M41& f2() const;
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* release_f2();
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M34_M37_M38_M39_M40_M41* f2);
  private:
  const ::hyperprotobench::M34_M37_M38_M39_M40_M41& _internal_f2() const;
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M34_M37_M38_M39_M40_M41* f2);
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M37.M38.M39.M40)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M37_M38_M39_M40_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M37_M38_M39 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M37.M38.M39) */ {
 public:
  M34_M37_M38_M39();
  virtual ~M34_M37_M38_M39();

  M34_M37_M38_M39(const M34_M37_M38_M39& from);
  M34_M37_M38_M39(M34_M37_M38_M39&& from) noexcept
    : M34_M37_M38_M39() {
    *this = ::std::move(from);
  }

  inline M34_M37_M38_M39& operator=(const M34_M37_M38_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M37_M38_M39& operator=(M34_M37_M38_M39&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M37_M38_M39& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M37_M38_M39* internal_default_instance() {
    return reinterpret_cast<const M34_M37_M38_M39*>(
               &_M34_M37_M38_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(M34_M37_M38_M39& a, M34_M37_M38_M39& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M37_M38_M39* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M37_M38_M39* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M37_M38_M39* New() const final {
    return CreateMaybeMessage<M34_M37_M38_M39>(nullptr);
  }

  M34_M37_M38_M39* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M37_M38_M39>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M37_M38_M39& from);
  void MergeFrom(const M34_M37_M38_M39& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M37_M38_M39* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M37.M38.M39";
  }
  protected:
  explicit M34_M37_M38_M39(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M34_M37_M38_M39_M40 M40;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M34.M37.M38.M39.M40 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M34_M37_M38_M39_M40& f2() const;
  ::hyperprotobench::M34_M37_M38_M39_M40* release_f2();
  ::hyperprotobench::M34_M37_M38_M39_M40* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M34_M37_M38_M39_M40* f2);
  private:
  const ::hyperprotobench::M34_M37_M38_M39_M40& _internal_f2() const;
  ::hyperprotobench::M34_M37_M38_M39_M40* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M34_M37_M38_M39_M40* f2);
  ::hyperprotobench::M34_M37_M38_M39_M40* unsafe_arena_release_f2();

  // optional int32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M37.M38.M39)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M34_M37_M38_M39_M40* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M37_M38_M39_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M37_M38 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M37.M38) */ {
 public:
  M34_M37_M38();
  virtual ~M34_M37_M38();

  M34_M37_M38(const M34_M37_M38& from);
  M34_M37_M38(M34_M37_M38&& from) noexcept
    : M34_M37_M38() {
    *this = ::std::move(from);
  }

  inline M34_M37_M38& operator=(const M34_M37_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M37_M38& operator=(M34_M37_M38&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M37_M38& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M37_M38* internal_default_instance() {
    return reinterpret_cast<const M34_M37_M38*>(
               &_M34_M37_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(M34_M37_M38& a, M34_M37_M38& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M37_M38* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M37_M38* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M37_M38* New() const final {
    return CreateMaybeMessage<M34_M37_M38>(nullptr);
  }

  M34_M37_M38* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M37_M38>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M37_M38& from);
  void MergeFrom(const M34_M37_M38& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M37_M38* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M37.M38";
  }
  protected:
  explicit M34_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M34_M37_M38_M39 M39;

  typedef M34_M37_M38_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M34_M37_M38_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M34_M37_M38_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M34_M37_M38_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M34_M37_M38_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M34_M37_M38_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M34_M37_M38_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M34_M37_M38_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M34_M37_M38_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M34_M37_M38_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M34_M37_M38_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M34_M37_M38_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M34_M37_M38_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF2FieldNumber = 2,
    kF4FieldNumber = 4,
    kF5FieldNumber = 5,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF6FieldNumber = 9,
  };
  // optional .hyperprotobench.M34.M37.M38.M39 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M34_M37_M38_M39& f1() const;
  ::hyperprotobench::M34_M37_M38_M39* release_f1();
  ::hyperprotobench::M34_M37_M38_M39* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M34_M37_M38_M39* f1);
  private:
  const ::hyperprotobench::M34_M37_M38_M39& _internal_f1() const;
  ::hyperprotobench::M34_M37_M38_M39* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M34_M37_M38_M39* f1);
  ::hyperprotobench::M34_M37_M38_M39* unsafe_arena_release_f1();

  // optional int64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .hyperprotobench.M34.M37.M38.E1 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::hyperprotobench::M34_M37_M38_E1 f6() const;
  void set_f6(::hyperprotobench::M34_M37_M38_E1 value);
  private:
  ::hyperprotobench::M34_M37_M38_E1 _internal_f6() const;
  void _internal_set_f6(::hyperprotobench::M34_M37_M38_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M37.M38)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M34_M37_M38_M39* f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  int f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M37_M38_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M37 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M37) */ {
 public:
  M34_M37();
  virtual ~M34_M37();

  M34_M37(const M34_M37& from);
  M34_M37(M34_M37&& from) noexcept
    : M34_M37() {
    *this = ::std::move(from);
  }

  inline M34_M37& operator=(const M34_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M37& operator=(M34_M37&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M37& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M37* internal_default_instance() {
    return reinterpret_cast<const M34_M37*>(
               &_M34_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(M34_M37& a, M34_M37& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M37* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M37* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M37* New() const final {
    return CreateMaybeMessage<M34_M37>(nullptr);
  }

  M34_M37* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M37>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M37& from);
  void MergeFrom(const M34_M37& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M37* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M37";
  }
  protected:
  explicit M34_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M34_M37_M38 M38;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 4,
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M34.M37.M38 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M34_M37_M38& f3() const;
  ::hyperprotobench::M34_M37_M38* release_f3();
  ::hyperprotobench::M34_M37_M38* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M34_M37_M38* f3);
  private:
  const ::hyperprotobench::M34_M37_M38& _internal_f3() const;
  ::hyperprotobench::M34_M37_M38* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M34_M37_M38* f3);
  ::hyperprotobench::M34_M37_M38* unsafe_arena_release_f3();

  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional float f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M37)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M34_M37_M38* f3_;
  float f1_;
  float f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M37_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34_M42 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34.M42) */ {
 public:
  M34_M42();
  virtual ~M34_M42();

  M34_M42(const M34_M42& from);
  M34_M42(M34_M42&& from) noexcept
    : M34_M42() {
    *this = ::std::move(from);
  }

  inline M34_M42& operator=(const M34_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34_M42& operator=(M34_M42&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34_M42& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34_M42* internal_default_instance() {
    return reinterpret_cast<const M34_M42*>(
               &_M34_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(M34_M42& a, M34_M42& b) {
    a.Swap(&b);
  }
  inline void Swap(M34_M42* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34_M42* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34_M42* New() const final {
    return CreateMaybeMessage<M34_M42>(nullptr);
  }

  M34_M42* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34_M42>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34_M42& from);
  void MergeFrom(const M34_M42& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34_M42* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34.M42";
  }
  protected:
  explicit M34_M42(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34.M42)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_M42_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M34 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M34) */ {
 public:
  M34();
  virtual ~M34();

  M34(const M34& from);
  M34(M34&& from) noexcept
    : M34() {
    *this = ::std::move(from);
  }

  inline M34& operator=(const M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline M34& operator=(M34&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M34& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M34* internal_default_instance() {
    return reinterpret_cast<const M34*>(
               &_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(M34& a, M34& b) {
    a.Swap(&b);
  }
  inline void Swap(M34* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M34* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M34* New() const final {
    return CreateMaybeMessage<M34>(nullptr);
  }

  M34* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M34>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M34& from);
  void MergeFrom(const M34& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M34* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M34";
  }
  protected:
  explicit M34(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M34_M35 M35;
  typedef M34_M36 M36;
  typedef M34_M37 M37;
  typedef M34_M42 M42;

  typedef M34_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M34_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M34_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M34_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M34_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M34_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M34_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M34_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M34_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M34_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M34_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M34_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M34_E1_Parse(name, value);
  }

  typedef M34_E2 E2;
  static constexpr E2 E2_CONST_1 =
    M34_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 =
    M34_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 =
    M34_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 =
    M34_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 =
    M34_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return M34_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN =
    M34_E2_E2_MIN;
  static constexpr E2 E2_MAX =
    M34_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE =
    M34_E2_E2_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E2_descriptor() {
    return M34_E2_descriptor();
  }
  template<typename T>
  static inline const std::string& E2_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E2>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E2_Name.");
    return M34_E2_Name(enum_t_value);
  }
  static inline bool E2_Parse(const std::string& name,
      E2* value) {
    return M34_E2_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 6,
    kF2FieldNumber = 3,
    kF10FieldNumber = 14,
    kF11FieldNumber = 16,
    kF14FieldNumber = 21,
    kF3FieldNumber = 5,
    kF5FieldNumber = 7,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF12FieldNumber = 17,
    kF13FieldNumber = 20,
    kF1FieldNumber = 2,
    kF9FieldNumber = 13,
  };
  // optional string f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional .hyperprotobench.M34.M35 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M34_M35& f2() const;
  ::hyperprotobench::M34_M35* release_f2();
  ::hyperprotobench::M34_M35* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M34_M35* f2);
  private:
  const ::hyperprotobench::M34_M35& _internal_f2() const;
  ::hyperprotobench::M34_M35* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M34_M35* f2);
  ::hyperprotobench::M34_M35* unsafe_arena_release_f2();

  // optional .hyperprotobench.M34.M36 f10 = 14;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M34_M36& f10() const;
  ::hyperprotobench::M34_M36* release_f10();
  ::hyperprotobench::M34_M36* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M34_M36* f10);
  private:
  const ::hyperprotobench::M34_M36& _internal_f10() const;
  ::hyperprotobench::M34_M36* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M34_M36* f10);
  ::hyperprotobench::M34_M36* unsafe_arena_release_f10();

  // optional .hyperprotobench.M34.M37 f11 = 16;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const ::hyperprotobench::M34_M37& f11() const;
  ::hyperprotobench::M34_M37* release_f11();
  ::hyperprotobench::M34_M37* mutable_f11();
  void set_allocated_f11(::hyperprotobench::M34_M37* f11);
  private:
  const ::hyperprotobench::M34_M37& _internal_f11() const;
  ::hyperprotobench::M34_M37* _internal_mutable_f11();
  public:
  void unsafe_arena_set_allocated_f11(
      ::hyperprotobench::M34_M37* f11);
  ::hyperprotobench::M34_M37* unsafe_arena_release_f11();

  // optional .hyperprotobench.M34.M42 f14 = 21;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  const ::hyperprotobench::M34_M42& f14() const;
  ::hyperprotobench::M34_M42* release_f14();
  ::hyperprotobench::M34_M42* mutable_f14();
  void set_allocated_f14(::hyperprotobench::M34_M42* f14);
  private:
  const ::hyperprotobench::M34_M42& _internal_f14() const;
  ::hyperprotobench::M34_M42* _internal_mutable_f14();
  public:
  void unsafe_arena_set_allocated_f14(
      ::hyperprotobench::M34_M42* f14);
  ::hyperprotobench::M34_M42* unsafe_arena_release_f14();

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f12 = 17;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int32 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f13 = 20;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  ::PROTOBUF_NAMESPACE_ID::uint64 f13() const;
  void set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f13() const;
  void _internal_set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .hyperprotobench.M34.E1 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::hyperprotobench::M34_E1 f1() const;
  void set_f1(::hyperprotobench::M34_E1 value);
  private:
  ::hyperprotobench::M34_E1 _internal_f1() const;
  void _internal_set_f1(::hyperprotobench::M34_E1 value);
  public:

  // optional .hyperprotobench.M34.E2 f9 = 13;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::hyperprotobench::M34_E2 f9() const;
  void set_f9(::hyperprotobench::M34_E2 value);
  private:
  ::hyperprotobench::M34_E2 _internal_f9() const;
  void _internal_set_f9(::hyperprotobench::M34_E2 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M34)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::hyperprotobench::M34_M35* f2_;
  ::hyperprotobench::M34_M36* f10_;
  ::hyperprotobench::M34_M37* f11_;
  ::hyperprotobench::M34_M42* f14_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  ::PROTOBUF_NAMESPACE_ID::int32 f12_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f13_;
  int f1_;
  int f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M34_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44_M45 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44.M45) */ {
 public:
  M43_M44_M45();
  virtual ~M43_M44_M45();

  M43_M44_M45(const M43_M44_M45& from);
  M43_M44_M45(M43_M44_M45&& from) noexcept
    : M43_M44_M45() {
    *this = ::std::move(from);
  }

  inline M43_M44_M45& operator=(const M43_M44_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44_M45& operator=(M43_M44_M45&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44_M45& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44_M45* internal_default_instance() {
    return reinterpret_cast<const M43_M44_M45*>(
               &_M43_M44_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(M43_M44_M45& a, M43_M44_M45& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44_M45* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44_M45* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44_M45* New() const final {
    return CreateMaybeMessage<M43_M44_M45>(nullptr);
  }

  M43_M44_M45* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44_M45>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44_M45& from);
  void MergeFrom(const M43_M44_M45& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44_M45* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44.M45";
  }
  protected:
  explicit M43_M44_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44.M45)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44_M46 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44.M46) */ {
 public:
  M43_M44_M46();
  virtual ~M43_M44_M46();

  M43_M44_M46(const M43_M44_M46& from);
  M43_M44_M46(M43_M44_M46&& from) noexcept
    : M43_M44_M46() {
    *this = ::std::move(from);
  }

  inline M43_M44_M46& operator=(const M43_M44_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44_M46& operator=(M43_M44_M46&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44_M46& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44_M46* internal_default_instance() {
    return reinterpret_cast<const M43_M44_M46*>(
               &_M43_M44_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(M43_M44_M46& a, M43_M44_M46& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44_M46* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44_M46* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44_M46* New() const final {
    return CreateMaybeMessage<M43_M44_M46>(nullptr);
  }

  M43_M44_M46* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44_M46>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44_M46& from);
  void MergeFrom(const M43_M44_M46& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44_M46* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44.M46";
  }
  protected:
  explicit M43_M44_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44_M46_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M43_M44_M46_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M43_M44_M46_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M43_M44_M46_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M43_M44_M46_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M43_M44_M46_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M43_M44_M46_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M43_M44_M46_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M43_M44_M46_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M43_M44_M46_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M43_M44_M46_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M43_M44_M46_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M43_M44_M46_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
    kF3FieldNumber = 5,
  };
  // repeated .hyperprotobench.M43.M44.M46.E1 f2 = 2;
  int f2_size() const;
  private:
  int _internal_f2_size() const;
  public:
  void clear_f2();
  private:
  ::hyperprotobench::M43_M44_M46_E1 _internal_f2(int index) const;
  void _internal_add_f2(::hyperprotobench::M43_M44_M46_E1 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_f2();
  public:
  ::hyperprotobench::M43_M44_M46_E1 f2(int index) const;
  void set_f2(int index, ::hyperprotobench::M43_M44_M46_E1 value);
  void add_f2(::hyperprotobench::M43_M44_M46_E1 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& f2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44.M46)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_M46_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44_M47 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44.M47) */ {
 public:
  M43_M44_M47();
  virtual ~M43_M44_M47();

  M43_M44_M47(const M43_M44_M47& from);
  M43_M44_M47(M43_M44_M47&& from) noexcept
    : M43_M44_M47() {
    *this = ::std::move(from);
  }

  inline M43_M44_M47& operator=(const M43_M44_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44_M47& operator=(M43_M44_M47&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44_M47& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44_M47* internal_default_instance() {
    return reinterpret_cast<const M43_M44_M47*>(
               &_M43_M44_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(M43_M44_M47& a, M43_M44_M47& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44_M47* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44_M47* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44_M47* New() const final {
    return CreateMaybeMessage<M43_M44_M47>(nullptr);
  }

  M43_M44_M47* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44_M47>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44_M47& from);
  void MergeFrom(const M43_M44_M47& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44_M47* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44.M47";
  }
  protected:
  explicit M43_M44_M47(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44.M47)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_M47_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44) */ {
 public:
  M43_M44();
  virtual ~M43_M44();

  M43_M44(const M43_M44& from);
  M43_M44(M43_M44&& from) noexcept
    : M43_M44() {
    *this = ::std::move(from);
  }

  inline M43_M44& operator=(const M43_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44& operator=(M43_M44&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44* internal_default_instance() {
    return reinterpret_cast<const M43_M44*>(
               &_M43_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(M43_M44& a, M43_M44& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44* New() const final {
    return CreateMaybeMessage<M43_M44>(nullptr);
  }

  M43_M44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44& from);
  void MergeFrom(const M43_M44& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44";
  }
  protected:
  explicit M43_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44_M45 M45;
  typedef M43_M44_M46 M46;
  typedef M43_M44_M47 M47;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 10,
    kF4FieldNumber = 11,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M43.M44.M45 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M43_M44_M45& f2() const;
  ::hyperprotobench::M43_M44_M45* release_f2();
  ::hyperprotobench::M43_M44_M45* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M43_M44_M45* f2);
  private:
  const ::hyperprotobench::M43_M44_M45& _internal_f2() const;
  ::hyperprotobench::M43_M44_M45* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M43_M44_M45* f2);
  ::hyperprotobench::M43_M44_M45* unsafe_arena_release_f2();

  // optional .hyperprotobench.M43.M44.M46 f3 = 10;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M43_M44_M46& f3() const;
  ::hyperprotobench::M43_M44_M46* release_f3();
  ::hyperprotobench::M43_M44_M46* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M43_M44_M46* f3);
  private:
  const ::hyperprotobench::M43_M44_M46& _internal_f3() const;
  ::hyperprotobench::M43_M44_M46* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M43_M44_M46* f3);
  ::hyperprotobench::M43_M44_M46* unsafe_arena_release_f3();

  // optional .hyperprotobench.M43.M44.M47 f4 = 11;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M43_M44_M47& f4() const;
  ::hyperprotobench::M43_M44_M47* release_f4();
  ::hyperprotobench::M43_M44_M47* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M43_M44_M47* f4);
  private:
  const ::hyperprotobench::M43_M44_M47& _internal_f4() const;
  ::hyperprotobench::M43_M44_M47* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M43_M44_M47* f4);
  ::hyperprotobench::M43_M44_M47* unsafe_arena_release_f4();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M43_M44_M45* f2_;
  ::hyperprotobench::M43_M44_M46* f3_;
  ::hyperprotobench::M43_M44_M47* f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48_M49 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48.M49) */ {
 public:
  M43_M48_M49();
  virtual ~M43_M48_M49();

  M43_M48_M49(const M43_M48_M49& from);
  M43_M48_M49(M43_M48_M49&& from) noexcept
    : M43_M48_M49() {
    *this = ::std::move(from);
  }

  inline M43_M48_M49& operator=(const M43_M48_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48_M49& operator=(M43_M48_M49&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48_M49& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48_M49* internal_default_instance() {
    return reinterpret_cast<const M43_M48_M49*>(
               &_M43_M48_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(M43_M48_M49& a, M43_M48_M49& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48_M49* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48_M49* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48_M49* New() const final {
    return CreateMaybeMessage<M43_M48_M49>(nullptr);
  }

  M43_M48_M49* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48_M49>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48_M49& from);
  void MergeFrom(const M43_M48_M49& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48_M49* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48.M49";
  }
  protected:
  explicit M43_M48_M49(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48.M49)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_M49_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48_M50_M51_M52_M53 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48.M50.M51.M52.M53) */ {
 public:
  M43_M48_M50_M51_M52_M53();
  virtual ~M43_M48_M50_M51_M52_M53();

  M43_M48_M50_M51_M52_M53(const M43_M48_M50_M51_M52_M53& from);
  M43_M48_M50_M51_M52_M53(M43_M48_M50_M51_M52_M53&& from) noexcept
    : M43_M48_M50_M51_M52_M53() {
    *this = ::std::move(from);
  }

  inline M43_M48_M50_M51_M52_M53& operator=(const M43_M48_M50_M51_M52_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48_M50_M51_M52_M53& operator=(M43_M48_M50_M51_M52_M53&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48_M50_M51_M52_M53& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48_M50_M51_M52_M53* internal_default_instance() {
    return reinterpret_cast<const M43_M48_M50_M51_M52_M53*>(
               &_M43_M48_M50_M51_M52_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(M43_M48_M50_M51_M52_M53& a, M43_M48_M50_M51_M52_M53& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48_M50_M51_M52_M53* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48_M50_M51_M52_M53* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48_M50_M51_M52_M53* New() const final {
    return CreateMaybeMessage<M43_M48_M50_M51_M52_M53>(nullptr);
  }

  M43_M48_M50_M51_M52_M53* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48_M50_M51_M52_M53>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48_M50_M51_M52_M53& from);
  void MergeFrom(const M43_M48_M50_M51_M52_M53& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48_M50_M51_M52_M53* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48.M50.M51.M52.M53";
  }
  protected:
  explicit M43_M48_M50_M51_M52_M53(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48.M50.M51.M52.M53)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  float f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_M53_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48_M50_M51_M52 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48.M50.M51.M52) */ {
 public:
  M43_M48_M50_M51_M52();
  virtual ~M43_M48_M50_M51_M52();

  M43_M48_M50_M51_M52(const M43_M48_M50_M51_M52& from);
  M43_M48_M50_M51_M52(M43_M48_M50_M51_M52&& from) noexcept
    : M43_M48_M50_M51_M52() {
    *this = ::std::move(from);
  }

  inline M43_M48_M50_M51_M52& operator=(const M43_M48_M50_M51_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48_M50_M51_M52& operator=(M43_M48_M50_M51_M52&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48_M50_M51_M52& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48_M50_M51_M52* internal_default_instance() {
    return reinterpret_cast<const M43_M48_M50_M51_M52*>(
               &_M43_M48_M50_M51_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(M43_M48_M50_M51_M52& a, M43_M48_M50_M51_M52& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48_M50_M51_M52* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48_M50_M51_M52* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48_M50_M51_M52* New() const final {
    return CreateMaybeMessage<M43_M48_M50_M51_M52>(nullptr);
  }

  M43_M48_M50_M51_M52* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48_M50_M51_M52>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48_M50_M51_M52& from);
  void MergeFrom(const M43_M48_M50_M51_M52& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48_M50_M51_M52* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48.M50.M51.M52";
  }
  protected:
  explicit M43_M48_M50_M51_M52(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M48_M50_M51_M52_M53 M53;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF5FieldNumber = 8,
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M43.M48.M50.M51.M52.M53 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M43_M48_M50_M51_M52_M53& f5() const;
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* release_f5();
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M43_M48_M50_M51_M52_M53* f5);
  private:
  const ::hyperprotobench::M43_M48_M50_M51_M52_M53& _internal_f5() const;
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M43_M48_M50_M51_M52_M53* f5);
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* unsafe_arena_release_f5();

  // optional int32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48.M50.M51.M52)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  float f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_M50_M51_M52_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48_M50_M51 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48.M50.M51) */ {
 public:
  M43_M48_M50_M51();
  virtual ~M43_M48_M50_M51();

  M43_M48_M50_M51(const M43_M48_M50_M51& from);
  M43_M48_M50_M51(M43_M48_M50_M51&& from) noexcept
    : M43_M48_M50_M51() {
    *this = ::std::move(from);
  }

  inline M43_M48_M50_M51& operator=(const M43_M48_M50_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48_M50_M51& operator=(M43_M48_M50_M51&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48_M50_M51& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48_M50_M51* internal_default_instance() {
    return reinterpret_cast<const M43_M48_M50_M51*>(
               &_M43_M48_M50_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(M43_M48_M50_M51& a, M43_M48_M50_M51& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48_M50_M51* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48_M50_M51* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48_M50_M51* New() const final {
    return CreateMaybeMessage<M43_M48_M50_M51>(nullptr);
  }

  M43_M48_M50_M51* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48_M50_M51>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48_M50_M51& from);
  void MergeFrom(const M43_M48_M50_M51& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48_M50_M51* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48.M50.M51";
  }
  protected:
  explicit M43_M48_M50_M51(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M48_M50_M51_M52 M52;

  typedef M43_M48_M50_M51_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M43_M48_M50_M51_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M43_M48_M50_M51_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M43_M48_M50_M51_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M43_M48_M50_M51_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M43_M48_M50_M51_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M43_M48_M50_M51_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M43_M48_M50_M51_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M43_M48_M50_M51_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M43_M48_M50_M51_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M43_M48_M50_M51_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M43_M48_M50_M51_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M43_M48_M50_M51_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF11FieldNumber = 20,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF10FieldNumber = 18,
    kF6FieldNumber = 9,
    kF3FieldNumber = 4,
    kF5FieldNumber = 8,
    kF8FieldNumber = 13,
    kF7FieldNumber = 12,
    kF9FieldNumber = 14,
    kF4FieldNumber = 7,
  };
  // repeated bytes f11 = 20;
  int f11_size() const;
  private:
  int _internal_f11_size() const;
  public:
  void clear_f11();
  const std::string& f11(int index) const;
  std::string* mutable_f11(int index);
  void set_f11(int index, const std::string& value);
  void set_f11(int index, std::string&& value);
  void set_f11(int index, const char* value);
  void set_f11(int index, const void* value, size_t size);
  std::string* add_f11();
  void add_f11(const std::string& value);
  void add_f11(std::string&& value);
  void add_f11(const char* value);
  void add_f11(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f11() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f11();
  private:
  const std::string& _internal_f11(int index) const;
  std::string* _internal_add_f11();
  public:

  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f10 = 18;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const void* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional .hyperprotobench.M43.M48.M50.M51.M52 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M43_M48_M50_M51_M52& f6() const;
  ::hyperprotobench::M43_M48_M50_M51_M52* release_f6();
  ::hyperprotobench::M43_M48_M50_M51_M52* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M43_M48_M50_M51_M52* f6);
  private:
  const ::hyperprotobench::M43_M48_M50_M51_M52& _internal_f6() const;
  ::hyperprotobench::M43_M48_M50_M51_M52* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M43_M48_M50_M51_M52* f6);
  ::hyperprotobench::M43_M48_M50_M51_M52* unsafe_arena_release_f6();

  // optional double f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  double f3() const;
  void set_f3(double value);
  private:
  double _internal_f3() const;
  void _internal_set_f3(double value);
  public:

  // optional float f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional float f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  float f8() const;
  void set_f8(float value);
  private:
  float _internal_f8() const;
  void _internal_set_f8(float value);
  public:

  // optional uint64 f7 = 12;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M43.M48.M50.M51.E1 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::hyperprotobench::M43_M48_M50_M51_E1 f4() const;
  void set_f4(::hyperprotobench::M43_M48_M50_M51_E1 value);
  private:
  ::hyperprotobench::M43_M48_M50_M51_E1 _internal_f4() const;
  void _internal_set_f4(::hyperprotobench::M43_M48_M50_M51_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48.M50.M51)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f11_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::hyperprotobench::M43_M48_M50_M51_M52* f6_;
  double f3_;
  float f5_;
  float f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  int f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_M50_M51_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48_M50 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48.M50) */ {
 public:
  M43_M48_M50();
  virtual ~M43_M48_M50();

  M43_M48_M50(const M43_M48_M50& from);
  M43_M48_M50(M43_M48_M50&& from) noexcept
    : M43_M48_M50() {
    *this = ::std::move(from);
  }

  inline M43_M48_M50& operator=(const M43_M48_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48_M50& operator=(M43_M48_M50&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48_M50& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48_M50* internal_default_instance() {
    return reinterpret_cast<const M43_M48_M50*>(
               &_M43_M48_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(M43_M48_M50& a, M43_M48_M50& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48_M50* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48_M50* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48_M50* New() const final {
    return CreateMaybeMessage<M43_M48_M50>(nullptr);
  }

  M43_M48_M50* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48_M50>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48_M50& from);
  void MergeFrom(const M43_M48_M50& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48_M50* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48.M50";
  }
  protected:
  explicit M43_M48_M50(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M48_M50_M51 M51;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M43.M48.M50.M51 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M43_M48_M50_M51& f1() const;
  ::hyperprotobench::M43_M48_M50_M51* release_f1();
  ::hyperprotobench::M43_M48_M50_M51* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M43_M48_M50_M51* f1);
  private:
  const ::hyperprotobench::M43_M48_M50_M51& _internal_f1() const;
  ::hyperprotobench::M43_M48_M50_M51* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M43_M48_M50_M51* f1);
  ::hyperprotobench::M43_M48_M50_M51* unsafe_arena_release_f1();

  // optional int64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48.M50)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M43_M48_M50_M51* f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_M50_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M48 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M48) */ {
 public:
  M43_M48();
  virtual ~M43_M48();

  M43_M48(const M43_M48& from);
  M43_M48(M43_M48&& from) noexcept
    : M43_M48() {
    *this = ::std::move(from);
  }

  inline M43_M48& operator=(const M43_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M48& operator=(M43_M48&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M48& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M48* internal_default_instance() {
    return reinterpret_cast<const M43_M48*>(
               &_M43_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(M43_M48& a, M43_M48& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M48* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M48* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M48* New() const final {
    return CreateMaybeMessage<M43_M48>(nullptr);
  }

  M43_M48* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M48>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M48& from);
  void MergeFrom(const M43_M48& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M48* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M48";
  }
  protected:
  explicit M43_M48(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M48_M49 M49;
  typedef M43_M48_M50 M50;

  typedef M43_M48_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M43_M48_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M43_M48_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M43_M48_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M43_M48_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M43_M48_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M43_M48_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M43_M48_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M43_M48_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M43_M48_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M43_M48_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M43_M48_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M43_M48_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF6FieldNumber = 21,
    kF8FieldNumber = 23,
    kF1FieldNumber = 2,
    kF10FieldNumber = 25,
    kF5FieldNumber = 19,
    kF3FieldNumber = 13,
    kF4FieldNumber = 16,
    kF7FieldNumber = 22,
    kF9FieldNumber = 24,
    kF2FieldNumber = 3,
  };
  // optional string f6 = 21;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional string f8 = 23;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const char* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional .hyperprotobench.M43.M48.M49 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M43_M48_M49& f1() const;
  ::hyperprotobench::M43_M48_M49* release_f1();
  ::hyperprotobench::M43_M48_M49* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M43_M48_M49* f1);
  private:
  const ::hyperprotobench::M43_M48_M49& _internal_f1() const;
  ::hyperprotobench::M43_M48_M49* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M43_M48_M49* f1);
  ::hyperprotobench::M43_M48_M49* unsafe_arena_release_f1();

  // optional .hyperprotobench.M43.M48.M50 f10 = 25;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M43_M48_M50& f10() const;
  ::hyperprotobench::M43_M48_M50* release_f10();
  ::hyperprotobench::M43_M48_M50* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M43_M48_M50* f10);
  private:
  const ::hyperprotobench::M43_M48_M50& _internal_f10() const;
  ::hyperprotobench::M43_M48_M50* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M43_M48_M50* f10);
  ::hyperprotobench::M43_M48_M50* unsafe_arena_release_f10();

  // optional float f5 = 19;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional int32 f3 = 13;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f4 = 16;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional fixed64 f7 = 22;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double f9 = 24;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  double f9() const;
  void set_f9(double value);
  private:
  double _internal_f9() const;
  void _internal_set_f9(double value);
  public:

  // optional .hyperprotobench.M43.M48.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M43_M48_E1 f2() const;
  void set_f2(::hyperprotobench::M43_M48_E1 value);
  private:
  ::hyperprotobench::M43_M48_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M43_M48_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M48)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::hyperprotobench::M43_M48_M49* f1_;
  ::hyperprotobench::M43_M48_M50* f10_;
  float f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  float f4_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  double f9_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M48_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43) */ {
 public:
  M43();
  virtual ~M43();

  M43(const M43& from);
  M43(M43&& from) noexcept
    : M43() {
    *this = ::std::move(from);
  }

  inline M43& operator=(const M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43& operator=(M43&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43* internal_default_instance() {
    return reinterpret_cast<const M43*>(
               &_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(M43& a, M43& b) {
    a.Swap(&b);
  }
  inline void Swap(M43* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43* New() const final {
    return CreateMaybeMessage<M43>(nullptr);
  }

  M43* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43& from);
  void MergeFrom(const M43& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43";
  }
  protected:
  explicit M43(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44 M44;
  typedef M43_M48 M48;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF12FieldNumber = 27,
    kF2FieldNumber = 3,
    kF4FieldNumber = 6,
    kF5FieldNumber = 8,
    kF7FieldNumber = 11,
    kF6FieldNumber = 10,
    kF8FieldNumber = 18,
    kF9FieldNumber = 19,
    kF10FieldNumber = 21,
    kF11FieldNumber = 26,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M43.M44 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M43_M44& f3() const;
  ::hyperprotobench::M43_M44* release_f3();
  ::hyperprotobench::M43_M44* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M43_M44* f3);
  private:
  const ::hyperprotobench::M43_M44& _internal_f3() const;
  ::hyperprotobench::M43_M44* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M43_M44* f3);
  ::hyperprotobench::M43_M44* unsafe_arena_release_f3();

  // optional .hyperprotobench.M43.M48 f12 = 27;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M43_M48& f12() const;
  ::hyperprotobench::M43_M48* release_f12();
  ::hyperprotobench::M43_M48* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M43_M48* f12);
  private:
  const ::hyperprotobench::M43_M48& _internal_f12() const;
  ::hyperprotobench::M43_M48* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M43_M48* f12);
  ::hyperprotobench::M43_M48* unsafe_arena_release_f12();

  // optional float f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional int32 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f8 = 18;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f9 = 19;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f10 = 21;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f11 = 26;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::uint64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M43_M44* f3_;
  ::hyperprotobench::M43_M48* f12_;
  float f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f10_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M55_M56_M57_M58 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M55.M56.M57.M58) */ {
 public:
  M54_M55_M56_M57_M58();
  virtual ~M54_M55_M56_M57_M58();

  M54_M55_M56_M57_M58(const M54_M55_M56_M57_M58& from);
  M54_M55_M56_M57_M58(M54_M55_M56_M57_M58&& from) noexcept
    : M54_M55_M56_M57_M58() {
    *this = ::std::move(from);
  }

  inline M54_M55_M56_M57_M58& operator=(const M54_M55_M56_M57_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M55_M56_M57_M58& operator=(M54_M55_M56_M57_M58&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M55_M56_M57_M58& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M55_M56_M57_M58* internal_default_instance() {
    return reinterpret_cast<const M54_M55_M56_M57_M58*>(
               &_M54_M55_M56_M57_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(M54_M55_M56_M57_M58& a, M54_M55_M56_M57_M58& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M55_M56_M57_M58* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M55_M56_M57_M58* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M55_M56_M57_M58* New() const final {
    return CreateMaybeMessage<M54_M55_M56_M57_M58>(nullptr);
  }

  M54_M55_M56_M57_M58* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M55_M56_M57_M58>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M55_M56_M57_M58& from);
  void MergeFrom(const M54_M55_M56_M57_M58& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M55_M56_M57_M58* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M55.M56.M57.M58";
  }
  protected:
  explicit M54_M55_M56_M57_M58(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M55.M56.M57.M58)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M55_M56_M57_M58_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M55_M56_M57 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M55.M56.M57) */ {
 public:
  M54_M55_M56_M57();
  virtual ~M54_M55_M56_M57();

  M54_M55_M56_M57(const M54_M55_M56_M57& from);
  M54_M55_M56_M57(M54_M55_M56_M57&& from) noexcept
    : M54_M55_M56_M57() {
    *this = ::std::move(from);
  }

  inline M54_M55_M56_M57& operator=(const M54_M55_M56_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M55_M56_M57& operator=(M54_M55_M56_M57&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M55_M56_M57& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M55_M56_M57* internal_default_instance() {
    return reinterpret_cast<const M54_M55_M56_M57*>(
               &_M54_M55_M56_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(M54_M55_M56_M57& a, M54_M55_M56_M57& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M55_M56_M57* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M55_M56_M57* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M55_M56_M57* New() const final {
    return CreateMaybeMessage<M54_M55_M56_M57>(nullptr);
  }

  M54_M55_M56_M57* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M55_M56_M57>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M55_M56_M57& from);
  void MergeFrom(const M54_M55_M56_M57& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M55_M56_M57* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M55.M56.M57";
  }
  protected:
  explicit M54_M55_M56_M57(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M55_M56_M57_M58 M58;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M54.M55.M56.M57.M58 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M54_M55_M56_M57_M58& f1() const;
  ::hyperprotobench::M54_M55_M56_M57_M58* release_f1();
  ::hyperprotobench::M54_M55_M56_M57_M58* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M54_M55_M56_M57_M58* f1);
  private:
  const ::hyperprotobench::M54_M55_M56_M57_M58& _internal_f1() const;
  ::hyperprotobench::M54_M55_M56_M57_M58* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M54_M55_M56_M57_M58* f1);
  ::hyperprotobench::M54_M55_M56_M57_M58* unsafe_arena_release_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M55.M56.M57)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M54_M55_M56_M57_M58* f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M55_M56_M57_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M55_M56 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M55.M56) */ {
 public:
  M54_M55_M56();
  virtual ~M54_M55_M56();

  M54_M55_M56(const M54_M55_M56& from);
  M54_M55_M56(M54_M55_M56&& from) noexcept
    : M54_M55_M56() {
    *this = ::std::move(from);
  }

  inline M54_M55_M56& operator=(const M54_M55_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M55_M56& operator=(M54_M55_M56&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M55_M56& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M55_M56* internal_default_instance() {
    return reinterpret_cast<const M54_M55_M56*>(
               &_M54_M55_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(M54_M55_M56& a, M54_M55_M56& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M55_M56* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M55_M56* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M55_M56* New() const final {
    return CreateMaybeMessage<M54_M55_M56>(nullptr);
  }

  M54_M55_M56* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M55_M56>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M55_M56& from);
  void MergeFrom(const M54_M55_M56& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M55_M56* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M55.M56";
  }
  protected:
  explicit M54_M55_M56(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M55_M56_M57 M57;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M54.M55.M56.M57 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M54_M55_M56_M57& f2() const;
  ::hyperprotobench::M54_M55_M56_M57* release_f2();
  ::hyperprotobench::M54_M55_M56_M57* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M54_M55_M56_M57* f2);
  private:
  const ::hyperprotobench::M54_M55_M56_M57& _internal_f2() const;
  ::hyperprotobench::M54_M55_M56_M57* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M54_M55_M56_M57* f2);
  ::hyperprotobench::M54_M55_M56_M57* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M55.M56)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M54_M55_M56_M57* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M55_M56_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M55 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M55) */ {
 public:
  M54_M55();
  virtual ~M54_M55();

  M54_M55(const M54_M55& from);
  M54_M55(M54_M55&& from) noexcept
    : M54_M55() {
    *this = ::std::move(from);
  }

  inline M54_M55& operator=(const M54_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M55& operator=(M54_M55&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M55& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M55* internal_default_instance() {
    return reinterpret_cast<const M54_M55*>(
               &_M54_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(M54_M55& a, M54_M55& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M55* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M55* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M55* New() const final {
    return CreateMaybeMessage<M54_M55>(nullptr);
  }

  M54_M55* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M55>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M55& from);
  void MergeFrom(const M54_M55& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M55* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M55";
  }
  protected:
  explicit M54_M55(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M55_M56 M56;

  typedef M54_M55_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M54_M55_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M54_M55_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M54_M55_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M54_M55_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M54_M55_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M54_M55_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M54_M55_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M54_M55_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M54_M55_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M54_M55_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M54_M55_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M54_M55_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 14,
    kF1FieldNumber = 9,
    kF2FieldNumber = 10,
  };
  // optional .hyperprotobench.M54.M55.M56 f3 = 14;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M54_M55_M56& f3() const;
  ::hyperprotobench::M54_M55_M56* release_f3();
  ::hyperprotobench::M54_M55_M56* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M54_M55_M56* f3);
  private:
  const ::hyperprotobench::M54_M55_M56& _internal_f3() const;
  ::hyperprotobench::M54_M55_M56* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M54_M55_M56* f3);
  ::hyperprotobench::M54_M55_M56* unsafe_arena_release_f3();

  // optional float f1 = 9;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional .hyperprotobench.M54.M55.E1 f2 = 10;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M54_M55_E1 f2() const;
  void set_f2(::hyperprotobench::M54_M55_E1 value);
  private:
  ::hyperprotobench::M54_M55_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M54_M55_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M55)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M54_M55_M56* f3_;
  float f1_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M55_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M59_M60 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M59.M60) */ {
 public:
  M54_M59_M60();
  virtual ~M54_M59_M60();

  M54_M59_M60(const M54_M59_M60& from);
  M54_M59_M60(M54_M59_M60&& from) noexcept
    : M54_M59_M60() {
    *this = ::std::move(from);
  }

  inline M54_M59_M60& operator=(const M54_M59_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M59_M60& operator=(M54_M59_M60&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M59_M60& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M59_M60* internal_default_instance() {
    return reinterpret_cast<const M54_M59_M60*>(
               &_M54_M59_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(M54_M59_M60& a, M54_M59_M60& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M59_M60* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M59_M60* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M59_M60* New() const final {
    return CreateMaybeMessage<M54_M59_M60>(nullptr);
  }

  M54_M59_M60* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M59_M60>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M59_M60& from);
  void MergeFrom(const M54_M59_M60& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M59_M60* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M59.M60";
  }
  protected:
  explicit M54_M59_M60(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF2FieldNumber = 2,
    kF4FieldNumber = 4,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M59.M60)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M59_M60_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M59 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M59) */ {
 public:
  M54_M59();
  virtual ~M54_M59();

  M54_M59(const M54_M59& from);
  M54_M59(M54_M59&& from) noexcept
    : M54_M59() {
    *this = ::std::move(from);
  }

  inline M54_M59& operator=(const M54_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M59& operator=(M54_M59&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M59& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M59* internal_default_instance() {
    return reinterpret_cast<const M54_M59*>(
               &_M54_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(M54_M59& a, M54_M59& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M59* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M59* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M59* New() const final {
    return CreateMaybeMessage<M54_M59>(nullptr);
  }

  M54_M59* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M59>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M59& from);
  void MergeFrom(const M54_M59& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M59* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M59";
  }
  protected:
  explicit M54_M59(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M59_M60 M60;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional .hyperprotobench.M54.M59.M60 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M54_M59_M60& f1() const;
  ::hyperprotobench::M54_M59_M60* release_f1();
  ::hyperprotobench::M54_M59_M60* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M54_M59_M60* f1);
  private:
  const ::hyperprotobench::M54_M59_M60& _internal_f1() const;
  ::hyperprotobench::M54_M59_M60* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M54_M59_M60* f1);
  ::hyperprotobench::M54_M59_M60* unsafe_arena_release_f1();

  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M59)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M54_M59_M60* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M59_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M61 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M61) */ {
 public:
  M54_M61();
  virtual ~M54_M61();

  M54_M61(const M54_M61& from);
  M54_M61(M54_M61&& from) noexcept
    : M54_M61() {
    *this = ::std::move(from);
  }

  inline M54_M61& operator=(const M54_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M61& operator=(M54_M61&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M61& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M61* internal_default_instance() {
    return reinterpret_cast<const M54_M61*>(
               &_M54_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(M54_M61& a, M54_M61& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M61* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M61* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M61* New() const final {
    return CreateMaybeMessage<M54_M61>(nullptr);
  }

  M54_M61* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M61>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M61& from);
  void MergeFrom(const M54_M61& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M61* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M61";
  }
  protected:
  explicit M54_M61(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M61_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M54_M61_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M54_M61_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M54_M61_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M54_M61_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M54_M61_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M54_M61_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M54_M61_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M54_M61_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M54_M61_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M54_M61_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M54_M61_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M54_M61_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 5,
    kF1FieldNumber = 2,
  };
  // repeated .hyperprotobench.M54.M61.E1 f2 = 5;
  int f2_size() const;
  private:
  int _internal_f2_size() const;
  public:
  void clear_f2();
  private:
  ::hyperprotobench::M54_M61_E1 _internal_f2(int index) const;
  void _internal_add_f2(::hyperprotobench::M54_M61_E1 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_f2();
  public:
  ::hyperprotobench::M54_M61_E1 f2(int index) const;
  void set_f2(int index, ::hyperprotobench::M54_M61_E1 value);
  void add_f2(::hyperprotobench::M54_M61_E1 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& f2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_f2();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M61)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M61_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M62_M63 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M62.M63) */ {
 public:
  M54_M62_M63();
  virtual ~M54_M62_M63();

  M54_M62_M63(const M54_M62_M63& from);
  M54_M62_M63(M54_M62_M63&& from) noexcept
    : M54_M62_M63() {
    *this = ::std::move(from);
  }

  inline M54_M62_M63& operator=(const M54_M62_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M62_M63& operator=(M54_M62_M63&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M62_M63& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M62_M63* internal_default_instance() {
    return reinterpret_cast<const M54_M62_M63*>(
               &_M54_M62_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(M54_M62_M63& a, M54_M62_M63& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M62_M63* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M62_M63* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M62_M63* New() const final {
    return CreateMaybeMessage<M54_M62_M63>(nullptr);
  }

  M54_M62_M63* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M62_M63>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M62_M63& from);
  void MergeFrom(const M54_M62_M63& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M62_M63* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M62.M63";
  }
  protected:
  explicit M54_M62_M63(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional uint32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M62.M63)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M62_M63_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54_M62 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54.M62) */ {
 public:
  M54_M62();
  virtual ~M54_M62();

  M54_M62(const M54_M62& from);
  M54_M62(M54_M62&& from) noexcept
    : M54_M62() {
    *this = ::std::move(from);
  }

  inline M54_M62& operator=(const M54_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54_M62& operator=(M54_M62&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54_M62& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54_M62* internal_default_instance() {
    return reinterpret_cast<const M54_M62*>(
               &_M54_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(M54_M62& a, M54_M62& b) {
    a.Swap(&b);
  }
  inline void Swap(M54_M62* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54_M62* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54_M62* New() const final {
    return CreateMaybeMessage<M54_M62>(nullptr);
  }

  M54_M62* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54_M62>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54_M62& from);
  void MergeFrom(const M54_M62& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54_M62* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54.M62";
  }
  protected:
  explicit M54_M62(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M62_M63 M63;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M54.M62.M63 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M54_M62_M63& f2() const;
  ::hyperprotobench::M54_M62_M63* release_f2();
  ::hyperprotobench::M54_M62_M63* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M54_M62_M63* f2);
  private:
  const ::hyperprotobench::M54_M62_M63& _internal_f2() const;
  ::hyperprotobench::M54_M62_M63* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M54_M62_M63* f2);
  ::hyperprotobench::M54_M62_M63* unsafe_arena_release_f2();

  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54.M62)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M54_M62_M63* f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_M62_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M54 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M54) */ {
 public:
  M54();
  virtual ~M54();

  M54(const M54& from);
  M54(M54&& from) noexcept
    : M54() {
    *this = ::std::move(from);
  }

  inline M54& operator=(const M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline M54& operator=(M54&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M54& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M54* internal_default_instance() {
    return reinterpret_cast<const M54*>(
               &_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(M54& a, M54& b) {
    a.Swap(&b);
  }
  inline void Swap(M54* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M54* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M54* New() const final {
    return CreateMaybeMessage<M54>(nullptr);
  }

  M54* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M54>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M54& from);
  void MergeFrom(const M54& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M54* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M54";
  }
  protected:
  explicit M54(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M54_M55 M55;
  typedef M54_M59 M59;
  typedef M54_M61 M61;
  typedef M54_M62 M62;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 6,
    kF6FieldNumber = 23,
    kF3FieldNumber = 10,
    kF5FieldNumber = 21,
    kF2FieldNumber = 8,
    kF4FieldNumber = 20,
    kF7FieldNumber = 25,
    kF9FieldNumber = 27,
    kF8FieldNumber = 26,
  };
  // repeated string f1 = 6;
  int f1_size() const;
  private:
  int _internal_f1_size() const;
  public:
  void clear_f1();
  const std::string& f1(int index) const;
  std::string* mutable_f1(int index);
  void set_f1(int index, const std::string& value);
  void set_f1(int index, std::string&& value);
  void set_f1(int index, const char* value);
  void set_f1(int index, const char* value, size_t size);
  std::string* add_f1();
  void add_f1(const std::string& value);
  void add_f1(std::string&& value);
  void add_f1(const char* value);
  void add_f1(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f1();
  private:
  const std::string& _internal_f1(int index) const;
  std::string* _internal_add_f1();
  public:

  // repeated string f6 = 23;
  int f6_size() const;
  private:
  int _internal_f6_size() const;
  public:
  void clear_f6();
  const std::string& f6(int index) const;
  std::string* mutable_f6(int index);
  void set_f6(int index, const std::string& value);
  void set_f6(int index, std::string&& value);
  void set_f6(int index, const char* value);
  void set_f6(int index, const char* value, size_t size);
  std::string* add_f6();
  void add_f6(const std::string& value);
  void add_f6(std::string&& value);
  void add_f6(const char* value);
  void add_f6(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f6() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f6();
  private:
  const std::string& _internal_f6(int index) const;
  std::string* _internal_add_f6();
  public:

  // optional bytes f3 = 10;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f5 = 21;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional .hyperprotobench.M54.M55 f2 = 8;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M54_M55& f2() const;
  ::hyperprotobench::M54_M55* release_f2();
  ::hyperprotobench::M54_M55* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M54_M55* f2);
  private:
  const ::hyperprotobench::M54_M55& _internal_f2() const;
  ::hyperprotobench::M54_M55* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M54_M55* f2);
  ::hyperprotobench::M54_M55* unsafe_arena_release_f2();

  // optional .hyperprotobench.M54.M59 f4 = 20;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M54_M59& f4() const;
  ::hyperprotobench::M54_M59* release_f4();
  ::hyperprotobench::M54_M59* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M54_M59* f4);
  private:
  const ::hyperprotobench::M54_M59& _internal_f4() const;
  ::hyperprotobench::M54_M59* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M54_M59* f4);
  ::hyperprotobench::M54_M59* unsafe_arena_release_f4();

  // optional .hyperprotobench.M54.M61 f7 = 25;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M54_M61& f7() const;
  ::hyperprotobench::M54_M61* release_f7();
  ::hyperprotobench::M54_M61* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M54_M61* f7);
  private:
  const ::hyperprotobench::M54_M61& _internal_f7() const;
  ::hyperprotobench::M54_M61* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M54_M61* f7);
  ::hyperprotobench::M54_M61* unsafe_arena_release_f7();

  // optional .hyperprotobench.M54.M62 f9 = 27;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M54_M62& f9() const;
  ::hyperprotobench::M54_M62* release_f9();
  ::hyperprotobench::M54_M62* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M54_M62* f9);
  private:
  const ::hyperprotobench::M54_M62& _internal_f9() const;
  ::hyperprotobench::M54_M62* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M54_M62* f9);
  ::hyperprotobench::M54_M62* unsafe_arena_release_f9();

  // optional int32 f8 = 26;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M54)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::hyperprotobench::M54_M55* f2_;
  ::hyperprotobench::M54_M59* f4_;
  ::hyperprotobench::M54_M61* f7_;
  ::hyperprotobench::M54_M62* f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M54_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M65 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M65) */ {
 public:
  M64_M65();
  virtual ~M64_M65();

  M64_M65(const M64_M65& from);
  M64_M65(M64_M65&& from) noexcept
    : M64_M65() {
    *this = ::std::move(from);
  }

  inline M64_M65& operator=(const M64_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M65& operator=(M64_M65&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M65& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M65* internal_default_instance() {
    return reinterpret_cast<const M64_M65*>(
               &_M64_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(M64_M65& a, M64_M65& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M65* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M65* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M65* New() const final {
    return CreateMaybeMessage<M64_M65>(nullptr);
  }

  M64_M65* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M65>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M65& from);
  void MergeFrom(const M64_M65& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M65* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M65";
  }
  protected:
  explicit M64_M65(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M65)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M65_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M66 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M66) */ {
 public:
  M64_M66();
  virtual ~M64_M66();

  M64_M66(const M64_M66& from);
  M64_M66(M64_M66&& from) noexcept
    : M64_M66() {
    *this = ::std::move(from);
  }

  inline M64_M66& operator=(const M64_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M66& operator=(M64_M66&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M66& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M66* internal_default_instance() {
    return reinterpret_cast<const M64_M66*>(
               &_M64_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(M64_M66& a, M64_M66& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M66* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M66* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M66* New() const final {
    return CreateMaybeMessage<M64_M66>(nullptr);
  }

  M64_M66* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M66>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M66& from);
  void MergeFrom(const M64_M66& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M66* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M66";
  }
  protected:
  explicit M64_M66(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M66)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M66_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M67 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M67) */ {
 public:
  M64_M67();
  virtual ~M64_M67();

  M64_M67(const M64_M67& from);
  M64_M67(M64_M67&& from) noexcept
    : M64_M67() {
    *this = ::std::move(from);
  }

  inline M64_M67& operator=(const M64_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M67& operator=(M64_M67&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M67& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M67* internal_default_instance() {
    return reinterpret_cast<const M64_M67*>(
               &_M64_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(M64_M67& a, M64_M67& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M67* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M67* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M67* New() const final {
    return CreateMaybeMessage<M64_M67>(nullptr);
  }

  M64_M67* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M67>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M67& from);
  void MergeFrom(const M64_M67& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M67* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M67";
  }
  protected:
  explicit M64_M67(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional float f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M67)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M67_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M68_M69_M70_M71 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M68.M69.M70.M71) */ {
 public:
  M64_M68_M69_M70_M71();
  virtual ~M64_M68_M69_M70_M71();

  M64_M68_M69_M70_M71(const M64_M68_M69_M70_M71& from);
  M64_M68_M69_M70_M71(M64_M68_M69_M70_M71&& from) noexcept
    : M64_M68_M69_M70_M71() {
    *this = ::std::move(from);
  }

  inline M64_M68_M69_M70_M71& operator=(const M64_M68_M69_M70_M71& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M68_M69_M70_M71& operator=(M64_M68_M69_M70_M71&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M68_M69_M70_M71& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M68_M69_M70_M71* internal_default_instance() {
    return reinterpret_cast<const M64_M68_M69_M70_M71*>(
               &_M64_M68_M69_M70_M71_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(M64_M68_M69_M70_M71& a, M64_M68_M69_M70_M71& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M68_M69_M70_M71* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M68_M69_M70_M71* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M68_M69_M70_M71* New() const final {
    return CreateMaybeMessage<M64_M68_M69_M70_M71>(nullptr);
  }

  M64_M68_M69_M70_M71* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M68_M69_M70_M71>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M68_M69_M70_M71& from);
  void MergeFrom(const M64_M68_M69_M70_M71& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M68_M69_M70_M71* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M68.M69.M70.M71";
  }
  protected:
  explicit M64_M68_M69_M70_M71(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
  };
  // repeated int32 f2 = 3;
  int f2_size() const;
  private:
  int _internal_f2_size() const;
  public:
  void clear_f2();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_f2() const;
  void _internal_add_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_f2();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 f2(int index) const;
  void set_f2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      f2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_f2();

  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M68.M69.M70.M71)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M68_M69_M70_M71_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M68_M69_M70 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M68.M69.M70) */ {
 public:
  M64_M68_M69_M70();
  virtual ~M64_M68_M69_M70();

  M64_M68_M69_M70(const M64_M68_M69_M70& from);
  M64_M68_M69_M70(M64_M68_M69_M70&& from) noexcept
    : M64_M68_M69_M70() {
    *this = ::std::move(from);
  }

  inline M64_M68_M69_M70& operator=(const M64_M68_M69_M70& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M68_M69_M70& operator=(M64_M68_M69_M70&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M68_M69_M70& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M68_M69_M70* internal_default_instance() {
    return reinterpret_cast<const M64_M68_M69_M70*>(
               &_M64_M68_M69_M70_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(M64_M68_M69_M70& a, M64_M68_M69_M70& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M68_M69_M70* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M68_M69_M70* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M68_M69_M70* New() const final {
    return CreateMaybeMessage<M64_M68_M69_M70>(nullptr);
  }

  M64_M68_M69_M70* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M68_M69_M70>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M68_M69_M70& from);
  void MergeFrom(const M64_M68_M69_M70& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M68_M69_M70* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M68.M69.M70";
  }
  protected:
  explicit M64_M68_M69_M70(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M64_M68_M69_M70_M71 M71;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M64.M68.M69.M70.M71 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M64_M68_M69_M70_M71& f2() const;
  ::hyperprotobench::M64_M68_M69_M70_M71* release_f2();
  ::hyperprotobench::M64_M68_M69_M70_M71* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M64_M68_M69_M70_M71* f2);
  private:
  const ::hyperprotobench::M64_M68_M69_M70_M71& _internal_f2() const;
  ::hyperprotobench::M64_M68_M69_M70_M71* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M64_M68_M69_M70_M71* f2);
  ::hyperprotobench::M64_M68_M69_M70_M71* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M68.M69.M70)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M64_M68_M69_M70_M71* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M68_M69_M70_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M68_M69 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M68.M69) */ {
 public:
  M64_M68_M69();
  virtual ~M64_M68_M69();

  M64_M68_M69(const M64_M68_M69& from);
  M64_M68_M69(M64_M68_M69&& from) noexcept
    : M64_M68_M69() {
    *this = ::std::move(from);
  }

  inline M64_M68_M69& operator=(const M64_M68_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M68_M69& operator=(M64_M68_M69&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M68_M69& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M68_M69* internal_default_instance() {
    return reinterpret_cast<const M64_M68_M69*>(
               &_M64_M68_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(M64_M68_M69& a, M64_M68_M69& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M68_M69* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M68_M69* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M68_M69* New() const final {
    return CreateMaybeMessage<M64_M68_M69>(nullptr);
  }

  M64_M68_M69* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M68_M69>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M68_M69& from);
  void MergeFrom(const M64_M68_M69& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M68_M69* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M68.M69";
  }
  protected:
  explicit M64_M68_M69(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M64_M68_M69_M70 M70;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 8,
    kF1FieldNumber = 1,
    kF3FieldNumber = 6,
    kF5FieldNumber = 9,
  };
  // optional bytes f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M64.M68.M69.M70 f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M64_M68_M69_M70& f4() const;
  ::hyperprotobench::M64_M68_M69_M70* release_f4();
  ::hyperprotobench::M64_M68_M69_M70* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M64_M68_M69_M70* f4);
  private:
  const ::hyperprotobench::M64_M68_M69_M70& _internal_f4() const;
  ::hyperprotobench::M64_M68_M69_M70* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M64_M68_M69_M70* f4);
  ::hyperprotobench::M64_M68_M69_M70* unsafe_arena_release_f4();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M68.M69)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M64_M68_M69_M70* f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M68_M69_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64_M68 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64.M68) */ {
 public:
  M64_M68();
  virtual ~M64_M68();

  M64_M68(const M64_M68& from);
  M64_M68(M64_M68&& from) noexcept
    : M64_M68() {
    *this = ::std::move(from);
  }

  inline M64_M68& operator=(const M64_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64_M68& operator=(M64_M68&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64_M68& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64_M68* internal_default_instance() {
    return reinterpret_cast<const M64_M68*>(
               &_M64_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(M64_M68& a, M64_M68& b) {
    a.Swap(&b);
  }
  inline void Swap(M64_M68* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64_M68* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64_M68* New() const final {
    return CreateMaybeMessage<M64_M68>(nullptr);
  }

  M64_M68* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64_M68>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64_M68& from);
  void MergeFrom(const M64_M68& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64_M68* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64.M68";
  }
  protected:
  explicit M64_M68(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M64_M68_M69 M69;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 1,
  };
  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M64.M68.M69 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M64_M68_M69& f1() const;
  ::hyperprotobench::M64_M68_M69* release_f1();
  ::hyperprotobench::M64_M68_M69* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M64_M68_M69* f1);
  private:
  const ::hyperprotobench::M64_M68_M69& _internal_f1() const;
  ::hyperprotobench::M64_M68_M69* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M64_M68_M69* f1);
  ::hyperprotobench::M64_M68_M69* unsafe_arena_release_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64.M68)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M64_M68_M69* f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_M68_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M64 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M64) */ {
 public:
  M64();
  virtual ~M64();

  M64(const M64& from);
  M64(M64&& from) noexcept
    : M64() {
    *this = ::std::move(from);
  }

  inline M64& operator=(const M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline M64& operator=(M64&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M64& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M64* internal_default_instance() {
    return reinterpret_cast<const M64*>(
               &_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(M64& a, M64& b) {
    a.Swap(&b);
  }
  inline void Swap(M64* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M64* New() const final {
    return CreateMaybeMessage<M64>(nullptr);
  }

  M64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M64>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M64& from);
  void MergeFrom(const M64& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M64* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M64";
  }
  protected:
  explicit M64(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M64_M65 M65;
  typedef M64_M66 M66;
  typedef M64_M67 M67;
  typedef M64_M68 M68;

  typedef M64_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M64_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M64_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M64_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M64_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M64_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M64_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M64_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M64_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M64_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M64_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M64_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M64_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 7,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF6FieldNumber = 10,
    kF7FieldNumber = 11,
    kF1FieldNumber = 2,
    kF8FieldNumber = 12,
    kF5FieldNumber = 8,
  };
  // optional string f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional .hyperprotobench.M64.M65 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M64_M65& f2() const;
  ::hyperprotobench::M64_M65* release_f2();
  ::hyperprotobench::M64_M65* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M64_M65* f2);
  private:
  const ::hyperprotobench::M64_M65& _internal_f2() const;
  ::hyperprotobench::M64_M65* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M64_M65* f2);
  ::hyperprotobench::M64_M65* unsafe_arena_release_f2();

  // optional .hyperprotobench.M64.M66 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M64_M66& f3() const;
  ::hyperprotobench::M64_M66* release_f3();
  ::hyperprotobench::M64_M66* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M64_M66* f3);
  private:
  const ::hyperprotobench::M64_M66& _internal_f3() const;
  ::hyperprotobench::M64_M66* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M64_M66* f3);
  ::hyperprotobench::M64_M66* unsafe_arena_release_f3();

  // optional .hyperprotobench.M64.M67 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M64_M67& f6() const;
  ::hyperprotobench::M64_M67* release_f6();
  ::hyperprotobench::M64_M67* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M64_M67* f6);
  private:
  const ::hyperprotobench::M64_M67& _internal_f6() const;
  ::hyperprotobench::M64_M67* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M64_M67* f6);
  ::hyperprotobench::M64_M67* unsafe_arena_release_f6();

  // optional .hyperprotobench.M64.M68 f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M64_M68& f7() const;
  ::hyperprotobench::M64_M68* release_f7();
  ::hyperprotobench::M64_M68* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M64_M68* f7);
  private:
  const ::hyperprotobench::M64_M68& _internal_f7() const;
  ::hyperprotobench::M64_M68* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M64_M68* f7);
  ::hyperprotobench::M64_M68* unsafe_arena_release_f7();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f8 = 12;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .hyperprotobench.M64.E1 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::hyperprotobench::M64_E1 f5() const;
  void set_f5(::hyperprotobench::M64_E1 value);
  private:
  ::hyperprotobench::M64_E1 _internal_f5() const;
  void _internal_set_f5(::hyperprotobench::M64_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M64)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::hyperprotobench::M64_M65* f2_;
  ::hyperprotobench::M64_M66* f3_;
  ::hyperprotobench::M64_M67* f6_;
  ::hyperprotobench::M64_M68* f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  int f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M64_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M73_M74 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M73.M74) */ {
 public:
  M72_M73_M74();
  virtual ~M72_M73_M74();

  M72_M73_M74(const M72_M73_M74& from);
  M72_M73_M74(M72_M73_M74&& from) noexcept
    : M72_M73_M74() {
    *this = ::std::move(from);
  }

  inline M72_M73_M74& operator=(const M72_M73_M74& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M73_M74& operator=(M72_M73_M74&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M73_M74& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M73_M74* internal_default_instance() {
    return reinterpret_cast<const M72_M73_M74*>(
               &_M72_M73_M74_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(M72_M73_M74& a, M72_M73_M74& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M73_M74* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M73_M74* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M73_M74* New() const final {
    return CreateMaybeMessage<M72_M73_M74>(nullptr);
  }

  M72_M73_M74* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M73_M74>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M73_M74& from);
  void MergeFrom(const M72_M73_M74& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M73_M74* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M73.M74";
  }
  protected:
  explicit M72_M73_M74(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M73.M74)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M73_M74_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M73_M75 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M73.M75) */ {
 public:
  M72_M73_M75();
  virtual ~M72_M73_M75();

  M72_M73_M75(const M72_M73_M75& from);
  M72_M73_M75(M72_M73_M75&& from) noexcept
    : M72_M73_M75() {
    *this = ::std::move(from);
  }

  inline M72_M73_M75& operator=(const M72_M73_M75& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M73_M75& operator=(M72_M73_M75&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M73_M75& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M73_M75* internal_default_instance() {
    return reinterpret_cast<const M72_M73_M75*>(
               &_M72_M73_M75_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(M72_M73_M75& a, M72_M73_M75& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M73_M75* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M73_M75* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M73_M75* New() const final {
    return CreateMaybeMessage<M72_M73_M75>(nullptr);
  }

  M72_M73_M75* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M73_M75>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M73_M75& from);
  void MergeFrom(const M72_M73_M75& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M73_M75* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M73.M75";
  }
  protected:
  explicit M72_M73_M75(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional double f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M73.M75)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  double f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M73_M75_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M73 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M73) */ {
 public:
  M72_M73();
  virtual ~M72_M73();

  M72_M73(const M72_M73& from);
  M72_M73(M72_M73&& from) noexcept
    : M72_M73() {
    *this = ::std::move(from);
  }

  inline M72_M73& operator=(const M72_M73& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M73& operator=(M72_M73&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M73& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M73* internal_default_instance() {
    return reinterpret_cast<const M72_M73*>(
               &_M72_M73_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(M72_M73& a, M72_M73& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M73* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M73* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M73* New() const final {
    return CreateMaybeMessage<M72_M73>(nullptr);
  }

  M72_M73* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M73>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M73& from);
  void MergeFrom(const M72_M73& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M73* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M73";
  }
  protected:
  explicit M72_M73(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M73_M74 M74;
  typedef M72_M73_M75 M75;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 4,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional bytes f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M72.M73.M74 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M72_M73_M74& f1() const;
  ::hyperprotobench::M72_M73_M74* release_f1();
  ::hyperprotobench::M72_M73_M74* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M72_M73_M74* f1);
  private:
  const ::hyperprotobench::M72_M73_M74& _internal_f1() const;
  ::hyperprotobench::M72_M73_M74* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M72_M73_M74* f1);
  ::hyperprotobench::M72_M73_M74* unsafe_arena_release_f1();

  // optional .hyperprotobench.M72.M73.M75 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M72_M73_M75& f2() const;
  ::hyperprotobench::M72_M73_M75* release_f2();
  ::hyperprotobench::M72_M73_M75* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M72_M73_M75* f2);
  private:
  const ::hyperprotobench::M72_M73_M75& _internal_f2() const;
  ::hyperprotobench::M72_M73_M75* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M72_M73_M75* f2);
  ::hyperprotobench::M72_M73_M75* unsafe_arena_release_f2();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M73)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M72_M73_M74* f1_;
  ::hyperprotobench::M72_M73_M75* f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M73_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M76 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M76) */ {
 public:
  M72_M76();
  virtual ~M72_M76();

  M72_M76(const M72_M76& from);
  M72_M76(M72_M76&& from) noexcept
    : M72_M76() {
    *this = ::std::move(from);
  }

  inline M72_M76& operator=(const M72_M76& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M76& operator=(M72_M76&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M76& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M76* internal_default_instance() {
    return reinterpret_cast<const M72_M76*>(
               &_M72_M76_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(M72_M76& a, M72_M76& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M76* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M76* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M76* New() const final {
    return CreateMaybeMessage<M72_M76>(nullptr);
  }

  M72_M76* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M76>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M76& from);
  void MergeFrom(const M72_M76& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M76* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M76";
  }
  protected:
  explicit M72_M76(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M76_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M72_M76_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M72_M76_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M72_M76_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M72_M76_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M72_M76_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M72_M76_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M72_M76_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M72_M76_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M72_M76_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M72_M76_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M72_M76_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M72_M76_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
  };
  // optional bool f1 = 4;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional uint32 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M72.M76.E1 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::hyperprotobench::M72_M76_E1 f4() const;
  void set_f4(::hyperprotobench::M72_M76_E1 value);
  private:
  ::hyperprotobench::M72_M76_E1 _internal_f4() const;
  void _internal_set_f4(::hyperprotobench::M72_M76_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M76)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  int f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M76_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M77 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M77) */ {
 public:
  M72_M77();
  virtual ~M72_M77();

  M72_M77(const M72_M77& from);
  M72_M77(M72_M77&& from) noexcept
    : M72_M77() {
    *this = ::std::move(from);
  }

  inline M72_M77& operator=(const M72_M77& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M77& operator=(M72_M77&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M77& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M77* internal_default_instance() {
    return reinterpret_cast<const M72_M77*>(
               &_M72_M77_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(M72_M77& a, M72_M77& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M77* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M77* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M77* New() const final {
    return CreateMaybeMessage<M72_M77>(nullptr);
  }

  M72_M77* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M77>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M77& from);
  void MergeFrom(const M72_M77& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M77* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M77";
  }
  protected:
  explicit M72_M77(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M77_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M72_M77_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M72_M77_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M72_M77_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M72_M77_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M72_M77_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M72_M77_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M72_M77_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M72_M77_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M72_M77_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M72_M77_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M72_M77_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M72_M77_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 6,
    kF1FieldNumber = 2,
  };
  // optional float f2 = 6;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional .hyperprotobench.M72.M77.E1 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::hyperprotobench::M72_M77_E1 f1() const;
  void set_f1(::hyperprotobench::M72_M77_E1 value);
  private:
  ::hyperprotobench::M72_M77_E1 _internal_f1() const;
  void _internal_set_f1(::hyperprotobench::M72_M77_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M77)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float f2_;
  int f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M77_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M78_M79_M80_M81 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M78.M79.M80.M81) */ {
 public:
  M72_M78_M79_M80_M81();
  virtual ~M72_M78_M79_M80_M81();

  M72_M78_M79_M80_M81(const M72_M78_M79_M80_M81& from);
  M72_M78_M79_M80_M81(M72_M78_M79_M80_M81&& from) noexcept
    : M72_M78_M79_M80_M81() {
    *this = ::std::move(from);
  }

  inline M72_M78_M79_M80_M81& operator=(const M72_M78_M79_M80_M81& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M78_M79_M80_M81& operator=(M72_M78_M79_M80_M81&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M78_M79_M80_M81& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M78_M79_M80_M81* internal_default_instance() {
    return reinterpret_cast<const M72_M78_M79_M80_M81*>(
               &_M72_M78_M79_M80_M81_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(M72_M78_M79_M80_M81& a, M72_M78_M79_M80_M81& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M78_M79_M80_M81* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M78_M79_M80_M81* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M78_M79_M80_M81* New() const final {
    return CreateMaybeMessage<M72_M78_M79_M80_M81>(nullptr);
  }

  M72_M78_M79_M80_M81* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M78_M79_M80_M81>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M78_M79_M80_M81& from);
  void MergeFrom(const M72_M78_M79_M80_M81& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M78_M79_M80_M81* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M78.M79.M80.M81";
  }
  protected:
  explicit M72_M78_M79_M80_M81(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M78.M79.M80.M81)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M78_M79_M80_M81_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M78_M79_M80 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M78.M79.M80) */ {
 public:
  M72_M78_M79_M80();
  virtual ~M72_M78_M79_M80();

  M72_M78_M79_M80(const M72_M78_M79_M80& from);
  M72_M78_M79_M80(M72_M78_M79_M80&& from) noexcept
    : M72_M78_M79_M80() {
    *this = ::std::move(from);
  }

  inline M72_M78_M79_M80& operator=(const M72_M78_M79_M80& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M78_M79_M80& operator=(M72_M78_M79_M80&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M78_M79_M80& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M78_M79_M80* internal_default_instance() {
    return reinterpret_cast<const M72_M78_M79_M80*>(
               &_M72_M78_M79_M80_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(M72_M78_M79_M80& a, M72_M78_M79_M80& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M78_M79_M80* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M78_M79_M80* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M78_M79_M80* New() const final {
    return CreateMaybeMessage<M72_M78_M79_M80>(nullptr);
  }

  M72_M78_M79_M80* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M78_M79_M80>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M78_M79_M80& from);
  void MergeFrom(const M72_M78_M79_M80& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M78_M79_M80* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M78.M79.M80";
  }
  protected:
  explicit M72_M78_M79_M80(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M78_M79_M80_M81 M81;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
  };
  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M72.M78.M79.M80.M81 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M72_M78_M79_M80_M81& f1() const;
  ::hyperprotobench::M72_M78_M79_M80_M81* release_f1();
  ::hyperprotobench::M72_M78_M79_M80_M81* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M72_M78_M79_M80_M81* f1);
  private:
  const ::hyperprotobench::M72_M78_M79_M80_M81& _internal_f1() const;
  ::hyperprotobench::M72_M78_M79_M80_M81* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M72_M78_M79_M80_M81* f1);
  ::hyperprotobench::M72_M78_M79_M80_M81* unsafe_arena_release_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M78.M79.M80)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M72_M78_M79_M80_M81* f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M78_M79_M80_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M78_M79 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M78.M79) */ {
 public:
  M72_M78_M79();
  virtual ~M72_M78_M79();

  M72_M78_M79(const M72_M78_M79& from);
  M72_M78_M79(M72_M78_M79&& from) noexcept
    : M72_M78_M79() {
    *this = ::std::move(from);
  }

  inline M72_M78_M79& operator=(const M72_M78_M79& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M78_M79& operator=(M72_M78_M79&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M78_M79& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M78_M79* internal_default_instance() {
    return reinterpret_cast<const M72_M78_M79*>(
               &_M72_M78_M79_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(M72_M78_M79& a, M72_M78_M79& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M78_M79* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M78_M79* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M78_M79* New() const final {
    return CreateMaybeMessage<M72_M78_M79>(nullptr);
  }

  M72_M78_M79* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M78_M79>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M78_M79& from);
  void MergeFrom(const M72_M78_M79& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M78_M79* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M78.M79";
  }
  protected:
  explicit M72_M78_M79(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M78_M79_M80 M80;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M72.M78.M79.M80 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M72_M78_M79_M80& f2() const;
  ::hyperprotobench::M72_M78_M79_M80* release_f2();
  ::hyperprotobench::M72_M78_M79_M80* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M72_M78_M79_M80* f2);
  private:
  const ::hyperprotobench::M72_M78_M79_M80& _internal_f2() const;
  ::hyperprotobench::M72_M78_M79_M80* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M72_M78_M79_M80* f2);
  ::hyperprotobench::M72_M78_M79_M80* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M78.M79)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M72_M78_M79_M80* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M78_M79_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72_M78 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72.M78) */ {
 public:
  M72_M78();
  virtual ~M72_M78();

  M72_M78(const M72_M78& from);
  M72_M78(M72_M78&& from) noexcept
    : M72_M78() {
    *this = ::std::move(from);
  }

  inline M72_M78& operator=(const M72_M78& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72_M78& operator=(M72_M78&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72_M78& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72_M78* internal_default_instance() {
    return reinterpret_cast<const M72_M78*>(
               &_M72_M78_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(M72_M78& a, M72_M78& b) {
    a.Swap(&b);
  }
  inline void Swap(M72_M78* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72_M78* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72_M78* New() const final {
    return CreateMaybeMessage<M72_M78>(nullptr);
  }

  M72_M78* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72_M78>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72_M78& from);
  void MergeFrom(const M72_M78& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72_M78* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72.M78";
  }
  protected:
  explicit M72_M78(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M78_M79 M79;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional .hyperprotobench.M72.M78.M79 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M72_M78_M79& f1() const;
  ::hyperprotobench::M72_M78_M79* release_f1();
  ::hyperprotobench::M72_M78_M79* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M72_M78_M79* f1);
  private:
  const ::hyperprotobench::M72_M78_M79& _internal_f1() const;
  ::hyperprotobench::M72_M78_M79* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M72_M78_M79* f1);
  ::hyperprotobench::M72_M78_M79* unsafe_arena_release_f1();

  // optional int32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72.M78)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M72_M78_M79* f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_M78_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M72 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M72) */ {
 public:
  M72();
  virtual ~M72();

  M72(const M72& from);
  M72(M72&& from) noexcept
    : M72() {
    *this = ::std::move(from);
  }

  inline M72& operator=(const M72& from) {
    CopyFrom(from);
    return *this;
  }
  inline M72& operator=(M72&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M72& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M72* internal_default_instance() {
    return reinterpret_cast<const M72*>(
               &_M72_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(M72& a, M72& b) {
    a.Swap(&b);
  }
  inline void Swap(M72* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M72* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M72* New() const final {
    return CreateMaybeMessage<M72>(nullptr);
  }

  M72* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M72>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M72& from);
  void MergeFrom(const M72& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M72* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M72";
  }
  protected:
  explicit M72(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M72_M73 M73;
  typedef M72_M76 M76;
  typedef M72_M77 M77;
  typedef M72_M78 M78;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF9FieldNumber = 15,
    kF6FieldNumber = 8,
    kF5FieldNumber = 7,
    kF7FieldNumber = 9,
    kF8FieldNumber = 13,
    kF10FieldNumber = 17,
  };
  // repeated fixed64 f1 = 1;
  int f1_size() const;
  private:
  int _internal_f1_size() const;
  public:
  void clear_f1();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_f1() const;
  void _internal_add_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_f1();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 f1(int index) const;
  void set_f1(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      f1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_f1();

  // optional .hyperprotobench.M72.M73 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M72_M73& f2() const;
  ::hyperprotobench::M72_M73* release_f2();
  ::hyperprotobench::M72_M73* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M72_M73* f2);
  private:
  const ::hyperprotobench::M72_M73& _internal_f2() const;
  ::hyperprotobench::M72_M73* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M72_M73* f2);
  ::hyperprotobench::M72_M73* unsafe_arena_release_f2();

  // optional .hyperprotobench.M72.M76 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M72_M76& f3() const;
  ::hyperprotobench::M72_M76* release_f3();
  ::hyperprotobench::M72_M76* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M72_M76* f3);
  private:
  const ::hyperprotobench::M72_M76& _internal_f3() const;
  ::hyperprotobench::M72_M76* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M72_M76* f3);
  ::hyperprotobench::M72_M76* unsafe_arena_release_f3();

  // optional .hyperprotobench.M72.M77 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M72_M77& f4() const;
  ::hyperprotobench::M72_M77* release_f4();
  ::hyperprotobench::M72_M77* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M72_M77* f4);
  private:
  const ::hyperprotobench::M72_M77& _internal_f4() const;
  ::hyperprotobench::M72_M77* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M72_M77* f4);
  ::hyperprotobench::M72_M77* unsafe_arena_release_f4();

  // optional .hyperprotobench.M72.M78 f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M72_M78& f9() const;
  ::hyperprotobench::M72_M78* release_f9();
  ::hyperprotobench::M72_M78* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M72_M78* f9);
  private:
  const ::hyperprotobench::M72_M78& _internal_f9() const;
  ::hyperprotobench::M72_M78* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M72_M78* f9);
  ::hyperprotobench::M72_M78* unsafe_arena_release_f9();

  // optional int64 f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional float f7 = 9;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  float f7() const;
  void set_f7(float value);
  private:
  float _internal_f7() const;
  void _internal_set_f7(float value);
  public:

  // optional int32 f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f10 = 17;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M72)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > f1_;
  ::hyperprotobench::M72_M73* f2_;
  ::hyperprotobench::M72_M76* f3_;
  ::hyperprotobench::M72_M77* f4_;
  ::hyperprotobench::M72_M78* f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  float f5_;
  float f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  ::PROTOBUF_NAMESPACE_ID::int32 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M72_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M83 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M83) */ {
 public:
  M82_M83();
  virtual ~M82_M83();

  M82_M83(const M82_M83& from);
  M82_M83(M82_M83&& from) noexcept
    : M82_M83() {
    *this = ::std::move(from);
  }

  inline M82_M83& operator=(const M82_M83& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M83& operator=(M82_M83&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M83& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M83* internal_default_instance() {
    return reinterpret_cast<const M82_M83*>(
               &_M82_M83_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(M82_M83& a, M82_M83& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M83* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M83* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M83* New() const final {
    return CreateMaybeMessage<M82_M83>(nullptr);
  }

  M82_M83* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M83>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M83& from);
  void MergeFrom(const M82_M83& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M83* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M83";
  }
  protected:
  explicit M82_M83(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
  };
  // optional int64 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M83)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M83_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M84_M85_M86_M87 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M84.M85.M86.M87) */ {
 public:
  M82_M84_M85_M86_M87();
  virtual ~M82_M84_M85_M86_M87();

  M82_M84_M85_M86_M87(const M82_M84_M85_M86_M87& from);
  M82_M84_M85_M86_M87(M82_M84_M85_M86_M87&& from) noexcept
    : M82_M84_M85_M86_M87() {
    *this = ::std::move(from);
  }

  inline M82_M84_M85_M86_M87& operator=(const M82_M84_M85_M86_M87& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M84_M85_M86_M87& operator=(M82_M84_M85_M86_M87&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M84_M85_M86_M87& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M84_M85_M86_M87* internal_default_instance() {
    return reinterpret_cast<const M82_M84_M85_M86_M87*>(
               &_M82_M84_M85_M86_M87_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(M82_M84_M85_M86_M87& a, M82_M84_M85_M86_M87& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M84_M85_M86_M87* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M84_M85_M86_M87* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M84_M85_M86_M87* New() const final {
    return CreateMaybeMessage<M82_M84_M85_M86_M87>(nullptr);
  }

  M82_M84_M85_M86_M87* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M84_M85_M86_M87>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M84_M85_M86_M87& from);
  void MergeFrom(const M82_M84_M85_M86_M87& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M84_M85_M86_M87* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M84.M85.M86.M87";
  }
  protected:
  explicit M82_M84_M85_M86_M87(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M84_M85_M86_M87_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M82_M84_M85_M86_M87_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M82_M84_M85_M86_M87_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M82_M84_M85_M86_M87_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M82_M84_M85_M86_M87_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M82_M84_M85_M86_M87_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M82_M84_M85_M86_M87_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M82_M84_M85_M86_M87_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M82_M84_M85_M86_M87_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M82_M84_M85_M86_M87_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M82_M84_M85_M86_M87_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M82_M84_M85_M86_M87_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M82_M84_M85_M86_M87_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M82.M84.M85.M86.M87.E1 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::hyperprotobench::M82_M84_M85_M86_M87_E1 f1() const;
  void set_f1(::hyperprotobench::M82_M84_M85_M86_M87_E1 value);
  private:
  ::hyperprotobench::M82_M84_M85_M86_M87_E1 _internal_f1() const;
  void _internal_set_f1(::hyperprotobench::M82_M84_M85_M86_M87_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M84.M85.M86.M87)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  int f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M84_M85_M86_M87_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M84_M85_M86 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M84.M85.M86) */ {
 public:
  M82_M84_M85_M86();
  virtual ~M82_M84_M85_M86();

  M82_M84_M85_M86(const M82_M84_M85_M86& from);
  M82_M84_M85_M86(M82_M84_M85_M86&& from) noexcept
    : M82_M84_M85_M86() {
    *this = ::std::move(from);
  }

  inline M82_M84_M85_M86& operator=(const M82_M84_M85_M86& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M84_M85_M86& operator=(M82_M84_M85_M86&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M84_M85_M86& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M84_M85_M86* internal_default_instance() {
    return reinterpret_cast<const M82_M84_M85_M86*>(
               &_M82_M84_M85_M86_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(M82_M84_M85_M86& a, M82_M84_M85_M86& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M84_M85_M86* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M84_M85_M86* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M84_M85_M86* New() const final {
    return CreateMaybeMessage<M82_M84_M85_M86>(nullptr);
  }

  M82_M84_M85_M86* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M84_M85_M86>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M84_M85_M86& from);
  void MergeFrom(const M82_M84_M85_M86& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M84_M85_M86* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M84.M85.M86";
  }
  protected:
  explicit M82_M84_M85_M86(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M84_M85_M86_M87 M87;

  typedef M82_M84_M85_M86_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M82_M84_M85_M86_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M82_M84_M85_M86_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M82_M84_M85_M86_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M82_M84_M85_M86_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M82_M84_M85_M86_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M82_M84_M85_M86_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M82_M84_M85_M86_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M82_M84_M85_M86_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M82_M84_M85_M86_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M82_M84_M85_M86_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M82_M84_M85_M86_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M82_M84_M85_M86_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF4FieldNumber = 5,
    kF3FieldNumber = 4,
    kF5FieldNumber = 6,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M82.M84.M85.M86.M87 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M82_M84_M85_M86_M87& f1() const;
  ::hyperprotobench::M82_M84_M85_M86_M87* release_f1();
  ::hyperprotobench::M82_M84_M85_M86_M87* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M82_M84_M85_M86_M87* f1);
  private:
  const ::hyperprotobench::M82_M84_M85_M86_M87& _internal_f1() const;
  ::hyperprotobench::M82_M84_M85_M86_M87* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M82_M84_M85_M86_M87* f1);
  ::hyperprotobench::M82_M84_M85_M86_M87* unsafe_arena_release_f1();

  // optional int64 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional int32 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M82.M84.M85.M86.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M82_M84_M85_M86_E1 f2() const;
  void set_f2(::hyperprotobench::M82_M84_M85_M86_E1 value);
  private:
  ::hyperprotobench::M82_M84_M85_M86_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M82_M84_M85_M86_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M84.M85.M86)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M82_M84_M85_M86_M87* f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M84_M85_M86_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M84_M85 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M84.M85) */ {
 public:
  M82_M84_M85();
  virtual ~M82_M84_M85();

  M82_M84_M85(const M82_M84_M85& from);
  M82_M84_M85(M82_M84_M85&& from) noexcept
    : M82_M84_M85() {
    *this = ::std::move(from);
  }

  inline M82_M84_M85& operator=(const M82_M84_M85& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M84_M85& operator=(M82_M84_M85&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M84_M85& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M84_M85* internal_default_instance() {
    return reinterpret_cast<const M82_M84_M85*>(
               &_M82_M84_M85_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(M82_M84_M85& a, M82_M84_M85& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M84_M85* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M84_M85* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M84_M85* New() const final {
    return CreateMaybeMessage<M82_M84_M85>(nullptr);
  }

  M82_M84_M85* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M84_M85>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M84_M85& from);
  void MergeFrom(const M82_M84_M85& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M84_M85* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M84.M85";
  }
  protected:
  explicit M82_M84_M85(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M84_M85_M86 M86;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
  };
  // optional .hyperprotobench.M82.M84.M85.M86 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M82_M84_M85_M86& f1() const;
  ::hyperprotobench::M82_M84_M85_M86* release_f1();
  ::hyperprotobench::M82_M84_M85_M86* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M82_M84_M85_M86* f1);
  private:
  const ::hyperprotobench::M82_M84_M85_M86& _internal_f1() const;
  ::hyperprotobench::M82_M84_M85_M86* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M82_M84_M85_M86* f1);
  ::hyperprotobench::M82_M84_M85_M86* unsafe_arena_release_f1();

  // optional sint32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M84.M85)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M82_M84_M85_M86* f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M84_M85_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M84 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M84) */ {
 public:
  M82_M84();
  virtual ~M82_M84();

  M82_M84(const M82_M84& from);
  M82_M84(M82_M84&& from) noexcept
    : M82_M84() {
    *this = ::std::move(from);
  }

  inline M82_M84& operator=(const M82_M84& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M84& operator=(M82_M84&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M84& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M84* internal_default_instance() {
    return reinterpret_cast<const M82_M84*>(
               &_M82_M84_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(M82_M84& a, M82_M84& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M84* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M84* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M84* New() const final {
    return CreateMaybeMessage<M82_M84>(nullptr);
  }

  M82_M84* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M84>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M84& from);
  void MergeFrom(const M82_M84& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M84* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M84";
  }
  protected:
  explicit M82_M84(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M84_M85 M85;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 12,
    kF2FieldNumber = 10,
    kF1FieldNumber = 1,
  };
  // optional string f3 = 12;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M82.M84.M85 f2 = 10;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M82_M84_M85& f2() const;
  ::hyperprotobench::M82_M84_M85* release_f2();
  ::hyperprotobench::M82_M84_M85* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M82_M84_M85* f2);
  private:
  const ::hyperprotobench::M82_M84_M85& _internal_f2() const;
  ::hyperprotobench::M82_M84_M85* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M82_M84_M85* f2);
  ::hyperprotobench::M82_M84_M85* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M84)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M82_M84_M85* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M84_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M88_M89 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M88.M89) */ {
 public:
  M82_M88_M89();
  virtual ~M82_M88_M89();

  M82_M88_M89(const M82_M88_M89& from);
  M82_M88_M89(M82_M88_M89&& from) noexcept
    : M82_M88_M89() {
    *this = ::std::move(from);
  }

  inline M82_M88_M89& operator=(const M82_M88_M89& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M88_M89& operator=(M82_M88_M89&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M88_M89& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M88_M89* internal_default_instance() {
    return reinterpret_cast<const M82_M88_M89*>(
               &_M82_M88_M89_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(M82_M88_M89& a, M82_M88_M89& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M88_M89* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M88_M89* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M88_M89* New() const final {
    return CreateMaybeMessage<M82_M88_M89>(nullptr);
  }

  M82_M88_M89* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M88_M89>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M88_M89& from);
  void MergeFrom(const M82_M88_M89& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M88_M89* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M88.M89";
  }
  protected:
  explicit M82_M88_M89(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M88.M89)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  float f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M88_M89_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M88 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M88) */ {
 public:
  M82_M88();
  virtual ~M82_M88();

  M82_M88(const M82_M88& from);
  M82_M88(M82_M88&& from) noexcept
    : M82_M88() {
    *this = ::std::move(from);
  }

  inline M82_M88& operator=(const M82_M88& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M88& operator=(M82_M88&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M88& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M88* internal_default_instance() {
    return reinterpret_cast<const M82_M88*>(
               &_M82_M88_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(M82_M88& a, M82_M88& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M88* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M88* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M88* New() const final {
    return CreateMaybeMessage<M82_M88>(nullptr);
  }

  M82_M88* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M88>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M88& from);
  void MergeFrom(const M82_M88& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M88* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M88";
  }
  protected:
  explicit M82_M88(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M88_M89 M89;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 9,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M82.M88.M89 f2 = 9;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M82_M88_M89& f2() const;
  ::hyperprotobench::M82_M88_M89* release_f2();
  ::hyperprotobench::M82_M88_M89* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M82_M88_M89* f2);
  private:
  const ::hyperprotobench::M82_M88_M89& _internal_f2() const;
  ::hyperprotobench::M82_M88_M89* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M82_M88_M89* f2);
  ::hyperprotobench::M82_M88_M89* unsafe_arena_release_f2();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M88)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M82_M88_M89* f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M88_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M90_M91 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M90.M91) */ {
 public:
  M82_M90_M91();
  virtual ~M82_M90_M91();

  M82_M90_M91(const M82_M90_M91& from);
  M82_M90_M91(M82_M90_M91&& from) noexcept
    : M82_M90_M91() {
    *this = ::std::move(from);
  }

  inline M82_M90_M91& operator=(const M82_M90_M91& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M90_M91& operator=(M82_M90_M91&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M90_M91& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M90_M91* internal_default_instance() {
    return reinterpret_cast<const M82_M90_M91*>(
               &_M82_M90_M91_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(M82_M90_M91& a, M82_M90_M91& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M90_M91* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M90_M91* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M90_M91* New() const final {
    return CreateMaybeMessage<M82_M90_M91>(nullptr);
  }

  M82_M90_M91* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M90_M91>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M90_M91& from);
  void MergeFrom(const M82_M90_M91& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M90_M91* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M90.M91";
  }
  protected:
  explicit M82_M90_M91(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M90.M91)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M90_M91_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82_M90 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82.M90) */ {
 public:
  M82_M90();
  virtual ~M82_M90();

  M82_M90(const M82_M90& from);
  M82_M90(M82_M90&& from) noexcept
    : M82_M90() {
    *this = ::std::move(from);
  }

  inline M82_M90& operator=(const M82_M90& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82_M90& operator=(M82_M90&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82_M90& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82_M90* internal_default_instance() {
    return reinterpret_cast<const M82_M90*>(
               &_M82_M90_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(M82_M90& a, M82_M90& b) {
    a.Swap(&b);
  }
  inline void Swap(M82_M90* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82_M90* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82_M90* New() const final {
    return CreateMaybeMessage<M82_M90>(nullptr);
  }

  M82_M90* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82_M90>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82_M90& from);
  void MergeFrom(const M82_M90& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82_M90* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82.M90";
  }
  protected:
  explicit M82_M90(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M90_M91 M91;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 4,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 5,
  };
  // repeated bool f3 = 4;
  int f3_size() const;
  private:
  int _internal_f3_size() const;
  public:
  void clear_f3();
  private:
  bool _internal_f3(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_f3() const;
  void _internal_add_f3(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_f3();
  public:
  bool f3(int index) const;
  void set_f3(int index, bool value);
  void add_f3(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      f3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_f3();

  // optional .hyperprotobench.M82.M90.M91 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M82_M90_M91& f1() const;
  ::hyperprotobench::M82_M90_M91* release_f1();
  ::hyperprotobench::M82_M90_M91* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M82_M90_M91* f1);
  private:
  const ::hyperprotobench::M82_M90_M91& _internal_f1() const;
  ::hyperprotobench::M82_M90_M91* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M82_M90_M91* f1);
  ::hyperprotobench::M82_M90_M91* unsafe_arena_release_f1();

  // optional float f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional float f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82.M90)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > f3_;
  ::hyperprotobench::M82_M90_M91* f1_;
  float f2_;
  float f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_M90_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M82 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M82) */ {
 public:
  M82();
  virtual ~M82();

  M82(const M82& from);
  M82(M82&& from) noexcept
    : M82() {
    *this = ::std::move(from);
  }

  inline M82& operator=(const M82& from) {
    CopyFrom(from);
    return *this;
  }
  inline M82& operator=(M82&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M82& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M82* internal_default_instance() {
    return reinterpret_cast<const M82*>(
               &_M82_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(M82& a, M82& b) {
    a.Swap(&b);
  }
  inline void Swap(M82* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M82* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M82* New() const final {
    return CreateMaybeMessage<M82>(nullptr);
  }

  M82* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M82>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M82& from);
  void MergeFrom(const M82& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M82* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M82";
  }
  protected:
  explicit M82(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M82_M83 M83;
  typedef M82_M84 M84;
  typedef M82_M88 M88;
  typedef M82_M90 M90;

  typedef M82_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M82_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M82_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M82_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M82_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M82_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M82_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M82_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M82_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M82_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M82_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M82_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M82_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 4,
    kF6FieldNumber = 18,
    kF7FieldNumber = 19,
    kF8FieldNumber = 21,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF1FieldNumber = 1,
    kF5FieldNumber = 12,
    kF9FieldNumber = 22,
    kF10FieldNumber = 23,
    kF11FieldNumber = 25,
    kF12FieldNumber = 26,
  };
  // optional .hyperprotobench.M82.M83 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M82_M83& f4() const;
  ::hyperprotobench::M82_M83* release_f4();
  ::hyperprotobench::M82_M83* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M82_M83* f4);
  private:
  const ::hyperprotobench::M82_M83& _internal_f4() const;
  ::hyperprotobench::M82_M83* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M82_M83* f4);
  ::hyperprotobench::M82_M83* unsafe_arena_release_f4();

  // optional .hyperprotobench.M82.M84 f6 = 18;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M82_M84& f6() const;
  ::hyperprotobench::M82_M84* release_f6();
  ::hyperprotobench::M82_M84* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M82_M84* f6);
  private:
  const ::hyperprotobench::M82_M84& _internal_f6() const;
  ::hyperprotobench::M82_M84* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M82_M84* f6);
  ::hyperprotobench::M82_M84* unsafe_arena_release_f6();

  // optional .hyperprotobench.M82.M88 f7 = 19;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M82_M88& f7() const;
  ::hyperprotobench::M82_M88* release_f7();
  ::hyperprotobench::M82_M88* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M82_M88* f7);
  private:
  const ::hyperprotobench::M82_M88& _internal_f7() const;
  ::hyperprotobench::M82_M88* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M82_M88* f7);
  ::hyperprotobench::M82_M88* unsafe_arena_release_f7();

  // optional .hyperprotobench.M82.M90 f8 = 21;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M82_M90& f8() const;
  ::hyperprotobench::M82_M90* release_f8();
  ::hyperprotobench::M82_M90* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M82_M90* f8);
  private:
  const ::hyperprotobench::M82_M90& _internal_f8() const;
  ::hyperprotobench::M82_M90* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M82_M90* f8);
  ::hyperprotobench::M82_M90* unsafe_arena_release_f8();

  // optional double f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // optional int64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M82.E1 f5 = 12;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::hyperprotobench::M82_E1 f5() const;
  void set_f5(::hyperprotobench::M82_E1 value);
  private:
  ::hyperprotobench::M82_E1 _internal_f5() const;
  void _internal_set_f5(::hyperprotobench::M82_E1 value);
  public:

  // optional int32 f9 = 22;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f10 = 23;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f11 = 25;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int32 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f12 = 26;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int32 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M82)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M82_M83* f4_;
  ::hyperprotobench::M82_M84* f6_;
  ::hyperprotobench::M82_M88* f7_;
  ::hyperprotobench::M82_M90* f8_;
  double f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  int f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f10_;
  ::PROTOBUF_NAMESPACE_ID::int32 f11_;
  ::PROTOBUF_NAMESPACE_ID::int32 f12_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M82_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M92_M93 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M92.M93) */ {
 public:
  M92_M93();
  virtual ~M92_M93();

  M92_M93(const M92_M93& from);
  M92_M93(M92_M93&& from) noexcept
    : M92_M93() {
    *this = ::std::move(from);
  }

  inline M92_M93& operator=(const M92_M93& from) {
    CopyFrom(from);
    return *this;
  }
  inline M92_M93& operator=(M92_M93&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M92_M93& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M92_M93* internal_default_instance() {
    return reinterpret_cast<const M92_M93*>(
               &_M92_M93_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(M92_M93& a, M92_M93& b) {
    a.Swap(&b);
  }
  inline void Swap(M92_M93* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M92_M93* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M92_M93* New() const final {
    return CreateMaybeMessage<M92_M93>(nullptr);
  }

  M92_M93* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M92_M93>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M92_M93& from);
  void MergeFrom(const M92_M93& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M92_M93* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M92.M93";
  }
  protected:
  explicit M92_M93(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M92.M93)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M92_M93_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M92_M94_M95 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M92.M94.M95) */ {
 public:
  M92_M94_M95();
  virtual ~M92_M94_M95();

  M92_M94_M95(const M92_M94_M95& from);
  M92_M94_M95(M92_M94_M95&& from) noexcept
    : M92_M94_M95() {
    *this = ::std::move(from);
  }

  inline M92_M94_M95& operator=(const M92_M94_M95& from) {
    CopyFrom(from);
    return *this;
  }
  inline M92_M94_M95& operator=(M92_M94_M95&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M92_M94_M95& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M92_M94_M95* internal_default_instance() {
    return reinterpret_cast<const M92_M94_M95*>(
               &_M92_M94_M95_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(M92_M94_M95& a, M92_M94_M95& b) {
    a.Swap(&b);
  }
  inline void Swap(M92_M94_M95* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M92_M94_M95* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M92_M94_M95* New() const final {
    return CreateMaybeMessage<M92_M94_M95>(nullptr);
  }

  M92_M94_M95* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M92_M94_M95>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M92_M94_M95& from);
  void MergeFrom(const M92_M94_M95& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M92_M94_M95* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M92.M94.M95";
  }
  protected:
  explicit M92_M94_M95(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M92.M94.M95)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M92_M94_M95_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M92_M94 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M92.M94) */ {
 public:
  M92_M94();
  virtual ~M92_M94();

  M92_M94(const M92_M94& from);
  M92_M94(M92_M94&& from) noexcept
    : M92_M94() {
    *this = ::std::move(from);
  }

  inline M92_M94& operator=(const M92_M94& from) {
    CopyFrom(from);
    return *this;
  }
  inline M92_M94& operator=(M92_M94&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M92_M94& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M92_M94* internal_default_instance() {
    return reinterpret_cast<const M92_M94*>(
               &_M92_M94_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(M92_M94& a, M92_M94& b) {
    a.Swap(&b);
  }
  inline void Swap(M92_M94* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M92_M94* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M92_M94* New() const final {
    return CreateMaybeMessage<M92_M94>(nullptr);
  }

  M92_M94* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M92_M94>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M92_M94& from);
  void MergeFrom(const M92_M94& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M92_M94* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M92.M94";
  }
  protected:
  explicit M92_M94(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M92_M94_M95 M95;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M92.M94.M95 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M92_M94_M95& f2() const;
  ::hyperprotobench::M92_M94_M95* release_f2();
  ::hyperprotobench::M92_M94_M95* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M92_M94_M95* f2);
  private:
  const ::hyperprotobench::M92_M94_M95& _internal_f2() const;
  ::hyperprotobench::M92_M94_M95* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M92_M94_M95* f2);
  ::hyperprotobench::M92_M94_M95* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M92.M94)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M92_M94_M95* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M92_M94_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M92 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M92) */ {
 public:
  M92();
  virtual ~M92();

  M92(const M92& from);
  M92(M92&& from) noexcept
    : M92() {
    *this = ::std::move(from);
  }

  inline M92& operator=(const M92& from) {
    CopyFrom(from);
    return *this;
  }
  inline M92& operator=(M92&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M92& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M92* internal_default_instance() {
    return reinterpret_cast<const M92*>(
               &_M92_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(M92& a, M92& b) {
    a.Swap(&b);
  }
  inline void Swap(M92* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M92* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M92* New() const final {
    return CreateMaybeMessage<M92>(nullptr);
  }

  M92* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M92>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M92& from);
  void MergeFrom(const M92& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M92* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M92";
  }
  protected:
  explicit M92(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M92_M93 M93;
  typedef M92_M94 M94;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
  };
  // optional .hyperprotobench.M92.M93 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M92_M93& f1() const;
  ::hyperprotobench::M92_M93* release_f1();
  ::hyperprotobench::M92_M93* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M92_M93* f1);
  private:
  const ::hyperprotobench::M92_M93& _internal_f1() const;
  ::hyperprotobench::M92_M93* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M92_M93* f1);
  ::hyperprotobench::M92_M93* unsafe_arena_release_f1();

  // optional .hyperprotobench.M92.M94 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M92_M94& f2() const;
  ::hyperprotobench::M92_M94* release_f2();
  ::hyperprotobench::M92_M94* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M92_M94* f2);
  private:
  const ::hyperprotobench::M92_M94& _internal_f2() const;
  ::hyperprotobench::M92_M94* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M92_M94* f2);
  ::hyperprotobench::M92_M94* unsafe_arena_release_f2();

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M92)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M92_M93* f1_;
  ::hyperprotobench::M92_M94* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M92_ACCEL_DESCRIPTORS;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// M1_M2_M3

// optional int32 f1 = 1;
inline bool M1_M2_M3::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2_M3::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M3::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M3::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f1)
  return _internal_f1();
}
inline void M1_M2_M3::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M2_M3::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f1)
}

// -------------------------------------------------------------------

// M1_M2_M4_M5

// optional int32 f1 = 1;
inline bool M1_M2_M4_M5::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2_M4_M5::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2_M4_M5::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M4_M5::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M4_M5::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M4.M5.f1)
  return _internal_f1();
}
inline void M1_M2_M4_M5::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M2_M4_M5::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M4.M5.f1)
}

// -------------------------------------------------------------------

// M1_M2_M4

// optional .hyperprotobench.M1.M2.M4.M5 f1 = 1;
inline bool M1_M2_M4::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M2_M4::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2_M4::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M2_M4_M5& M1_M2_M4::_internal_f1() const {
  const ::hyperprotobench::M1_M2_M4_M5* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2_M4_M5*>(
      &::hyperprotobench::_M1_M2_M4_M5_default_instance_);
}
inline const ::hyperprotobench::M1_M2_M4_M5& M1_M2_M4::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M4.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M2_M4_M5* M1_M2_M4::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2_M4_M5* M1_M2_M4::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.M4.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M2_M4_M5* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2_M4_M5* M1_M2_M4::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2_M4_M5>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M2_M4_M5* M1_M2_M4::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.M4.f1)
  return _internal_mutable_f1();
}
inline void M1_M2_M4::set_allocated_f1(::hyperprotobench::M1_M2_M4_M5* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.M4.f1)
}

// optional fixed64 f2 = 2;
inline bool M1_M2_M4::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2_M4::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2_M4::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M4::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M4::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M4.f2)
  return _internal_f2();
}
inline void M1_M2_M4::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M2_M4::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M4.f2)
}

// -------------------------------------------------------------------

// M1_M2

// optional .hyperprotobench.M1.M2.M3 f1 = 1;
inline bool M1_M2::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M2::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M2_M3& M1_M2::_internal_f1() const {
  const ::hyperprotobench::M1_M2_M3* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2_M3*>(
      &::hyperprotobench::_M1_M2_M3_default_instance_);
}
inline const ::hyperprotobench::M1_M2_M3& M1_M2::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M2_M3* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2_M3>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f1)
  return _internal_mutable_f1();
}
inline void M1_M2::set_allocated_f1(::hyperprotobench::M1_M2_M3* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f1)
}

// optional int32 f2 = 2;
inline bool M1_M2::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f2)
  return _internal_f2();
}
inline void M1_M2::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M2::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f2)
}

// optional float f3 = 3;
inline bool M1_M2::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1_M2::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float M1_M2::_internal_f3() const {
  return f3_;
}
inline float M1_M2::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f3)
  return _internal_f3();
}
inline void M1_M2::_internal_set_f3(float value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1_M2::set_f3(float value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f3)
}

// optional .hyperprotobench.M1.M2.E1 f4 = 4;
inline bool M1_M2::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1_M2::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M2::clear_f4() {
  f4_ = 35;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::hyperprotobench::M1_M2_E1 M1_M2::_internal_f4() const {
  return static_cast< ::hyperprotobench::M1_M2_E1 >(f4_);
}
inline ::hyperprotobench::M1_M2_E1 M1_M2::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f4)
  return _internal_f4();
}
inline void M1_M2::_internal_set_f4(::hyperprotobench::M1_M2_E1 value) {
  assert(::hyperprotobench::M1_M2_E1_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M1_M2::set_f4(::hyperprotobench::M1_M2_E1 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f4)
}

// optional float f5 = 5;
inline bool M1_M2::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M2::has_f5() const {
  return _internal_has_f5();
}
inline void M1_M2::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M1_M2::_internal_f5() const {
  return f5_;
}
inline float M1_M2::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f5)
  return _internal_f5();
}
inline void M1_M2::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M1_M2::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f5)
}

// optional float f6 = 7;
inline bool M1_M2::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M1_M2::has_f6() const {
  return _internal_has_f6();
}
inline void M1_M2::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M1_M2::_internal_f6() const {
  return f6_;
}
inline float M1_M2::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f6)
  return _internal_f6();
}
inline void M1_M2::_internal_set_f6(float value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M1_M2::set_f6(float value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f6)
}

// optional int32 f7 = 8;
inline bool M1_M2::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M1_M2::has_f7() const {
  return _internal_has_f7();
}
inline void M1_M2::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f7)
  return _internal_f7();
}
inline void M1_M2::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f7_ = value;
}
inline void M1_M2::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f7)
}

// optional .hyperprotobench.M1.M2.M4 f8 = 9;
inline bool M1_M2::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M1_M2::has_f8() const {
  return _internal_has_f8();
}
inline void M1_M2::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M1_M2_M4& M1_M2::_internal_f8() const {
  const ::hyperprotobench::M1_M2_M4* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2_M4*>(
      &::hyperprotobench::_M1_M2_M4_default_instance_);
}
inline const ::hyperprotobench::M1_M2_M4& M1_M2::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M1_M2_M4* M1_M2::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2_M4* M1_M2::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f8)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M1_M2_M4* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2_M4* M1_M2::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000200u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2_M4>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M1_M2_M4* M1_M2::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f8)
  return _internal_mutable_f8();
}
inline void M1_M2::set_allocated_f8(::hyperprotobench::M1_M2_M4* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f8)
}

// optional int32 f9 = 10;
inline bool M1_M2::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M1_M2::has_f9() const {
  return _internal_has_f9();
}
inline void M1_M2::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f9)
  return _internal_f9();
}
inline void M1_M2::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f9_ = value;
}
inline void M1_M2::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f9)
}

// optional bytes f10 = 12;
inline bool M1_M2::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M1_M2::has_f10() const {
  return _internal_has_f10();
}
inline void M1_M2::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& M1_M2::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f10)
  return _internal_f10();
}
inline void M1_M2::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f10)
}
inline std::string* M1_M2::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f10)
  return _internal_mutable_f10();
}
inline const std::string& M1_M2::_internal_f10() const {
  return f10_.Get();
}
inline void M1_M2::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f10)
}
inline void M1_M2::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f10)
}
inline void M1_M2::set_f10(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f10)
}
inline std::string* M1_M2::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00001000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f10)
}
inline std::string* M1_M2::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f10)
}

// -------------------------------------------------------------------

// M1_M6_M7

// optional float f1 = 2;
inline bool M1_M6_M7::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M6_M7::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6_M7::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M1_M6_M7::_internal_f1() const {
  return f1_;
}
inline float M1_M6_M7::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M7.f1)
  return _internal_f1();
}
inline void M1_M6_M7::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M6_M7::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M7.f1)
}

// -------------------------------------------------------------------

// M1_M6_M8

// optional bool f1 = 6;
inline bool M1_M6_M8::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M6_M8::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6_M8::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M1_M6_M8::_internal_f1() const {
  return f1_;
}
inline bool M1_M6_M8::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M8.f1)
  return _internal_f1();
}
inline void M1_M6_M8::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M6_M8::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M8.f1)
}

// optional int32 f2 = 7;
inline bool M1_M6_M8::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M6_M8::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M6_M8::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M6_M8::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M6_M8::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M8.f2)
  return _internal_f2();
}
inline void M1_M6_M8::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M6_M8::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M8.f2)
}

// -------------------------------------------------------------------

// M1_M6_M9_M10_M11

// optional string f1 = 1;
inline bool M1_M6_M9_M10_M11::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M6_M9_M10_M11::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6_M9_M10_M11::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M6_M9_M10_M11::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.M10.M11.f1)
  return _internal_f1();
}
inline void M1_M6_M9_M10_M11::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M9.M10.M11.f1)
}
inline std::string* M1_M6_M9_M10_M11::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.M9.M10.M11.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M6_M9_M10_M11::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M6_M9_M10_M11::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M6.M9.M10.M11.f1)
}
inline void M1_M6_M9_M10_M11::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M6.M9.M10.M11.f1)
}
inline void M1_M6_M9_M10_M11::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M6.M9.M10.M11.f1)
}
inline std::string* M1_M6_M9_M10_M11::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M6_M9_M10_M11::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.M9.M10.M11.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.M9.M10.M11.f1)
}
inline std::string* M1_M6_M9_M10_M11::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M6.M9.M10.M11.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.M9.M10.M11.f1)
}

// optional string f2 = 2;
inline bool M1_M6_M9_M10_M11::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M6_M9_M10_M11::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M6_M9_M10_M11::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1_M6_M9_M10_M11::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.M10.M11.f2)
  return _internal_f2();
}
inline void M1_M6_M9_M10_M11::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M9.M10.M11.f2)
}
inline std::string* M1_M6_M9_M10_M11::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.M9.M10.M11.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1_M6_M9_M10_M11::_internal_f2() const {
  return f2_.Get();
}
inline void M1_M6_M9_M10_M11::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M6.M9.M10.M11.f2)
}
inline void M1_M6_M9_M10_M11::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M6.M9.M10.M11.f2)
}
inline void M1_M6_M9_M10_M11::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M6.M9.M10.M11.f2)
}
inline std::string* M1_M6_M9_M10_M11::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M6_M9_M10_M11::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.M9.M10.M11.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.M9.M10.M11.f2)
}
inline std::string* M1_M6_M9_M10_M11::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M6.M9.M10.M11.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M6_M9_M10_M11::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M6.M9.M10.M11.f2)
}

// -------------------------------------------------------------------

// M1_M6_M9_M10

// optional .hyperprotobench.M1.M6.M9.M10.M11 f1 = 1;
inline bool M1_M6_M9_M10::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M6_M9_M10::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6_M9_M10::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M6_M9_M10_M11& M1_M6_M9_M10::_internal_f1() const {
  const ::hyperprotobench::M1_M6_M9_M10_M11* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6_M9_M10_M11*>(
      &::hyperprotobench::_M1_M6_M9_M10_M11_default_instance_);
}
inline const ::hyperprotobench::M1_M6_M9_M10_M11& M1_M6_M9_M10::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.M10.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M6_M9_M10_M11* M1_M6_M9_M10::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6_M9_M10_M11* M1_M6_M9_M10::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.M9.M10.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M6_M9_M10_M11* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6_M9_M10_M11* M1_M6_M9_M10::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6_M9_M10_M11>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M6_M9_M10_M11* M1_M6_M9_M10::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.M9.M10.f1)
  return _internal_mutable_f1();
}
inline void M1_M6_M9_M10::set_allocated_f1(::hyperprotobench::M1_M6_M9_M10_M11* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.M9.M10.f1)
}

// optional uint64 f2 = 2;
inline bool M1_M6_M9_M10::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M6_M9_M10::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M6_M9_M10::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M9_M10::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6_M9_M10::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.M10.f2)
  return _internal_f2();
}
inline void M1_M6_M9_M10::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M6_M9_M10::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M9.M10.f2)
}

// -------------------------------------------------------------------

// M1_M6_M9

// optional bool f1 = 2;
inline bool M1_M6_M9::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M6_M9::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6_M9::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M1_M6_M9::_internal_f1() const {
  return f1_;
}
inline bool M1_M6_M9::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.f1)
  return _internal_f1();
}
inline void M1_M6_M9::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M6_M9::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.M9.f1)
}

// optional .hyperprotobench.M1.M6.M9.M10 f2 = 6;
inline bool M1_M6_M9::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M1_M6_M9::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M6_M9::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hyperprotobench::M1_M6_M9_M10& M1_M6_M9::_internal_f2() const {
  const ::hyperprotobench::M1_M6_M9_M10* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6_M9_M10*>(
      &::hyperprotobench::_M1_M6_M9_M10_default_instance_);
}
inline const ::hyperprotobench::M1_M6_M9_M10& M1_M6_M9::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.M9.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M1_M6_M9_M10* M1_M6_M9::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6_M9_M10* M1_M6_M9::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.M9.f2)
  _has_bits_[0] &= ~0x00000020u;
  ::hyperprotobench::M1_M6_M9_M10* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6_M9_M10* M1_M6_M9::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000020u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6_M9_M10>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M1_M6_M9_M10* M1_M6_M9::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.M9.f2)
  return _internal_mutable_f2();
}
inline void M1_M6_M9::set_allocated_f2(::hyperprotobench::M1_M6_M9_M10* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.M9.f2)
}

// -------------------------------------------------------------------

// M1_M6

// optional .hyperprotobench.M1.M6.M7 f1 = 3;
inline bool M1_M6::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M6::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M6::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M6_M7& M1_M6::_internal_f1() const {
  const ::hyperprotobench::M1_M6_M7* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6_M7*>(
      &::hyperprotobench::_M1_M6_M7_default_instance_);
}
inline const ::hyperprotobench::M1_M6_M7& M1_M6::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M6_M7* M1_M6::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6_M7* M1_M6::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M6_M7* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6_M7* M1_M6::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6_M7>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M6_M7* M1_M6::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.f1)
  return _internal_mutable_f1();
}
inline void M1_M6::set_allocated_f1(::hyperprotobench::M1_M6_M7* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.f1)
}

// optional uint64 f2 = 4;
inline bool M1_M6::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M6::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M6::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M6::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.f2)
  return _internal_f2();
}
inline void M1_M6::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M6::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M6.f2)
}

// optional .hyperprotobench.M1.M6.M8 f3 = 5;
inline bool M1_M6::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M1_M6::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M6::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M1_M6_M8& M1_M6::_internal_f3() const {
  const ::hyperprotobench::M1_M6_M8* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6_M8*>(
      &::hyperprotobench::_M1_M6_M8_default_instance_);
}
inline const ::hyperprotobench::M1_M6_M8& M1_M6::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M1_M6_M8* M1_M6::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6_M8* M1_M6::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M1_M6_M8* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6_M8* M1_M6::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6_M8>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M1_M6_M8* M1_M6::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.f3)
  return _internal_mutable_f3();
}
inline void M1_M6::set_allocated_f3(::hyperprotobench::M1_M6_M8* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.f3)
}

// optional .hyperprotobench.M1.M6.M9 f4 = 7;
inline bool M1_M6::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M1_M6::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M6::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hyperprotobench::M1_M6_M9& M1_M6::_internal_f4() const {
  const ::hyperprotobench::M1_M6_M9* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6_M9*>(
      &::hyperprotobench::_M1_M6_M9_default_instance_);
}
inline const ::hyperprotobench::M1_M6_M9& M1_M6::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M6.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M1_M6_M9* M1_M6::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6_M9* M1_M6::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M6.f4)
  _has_bits_[0] &= ~0x00000020u;
  ::hyperprotobench::M1_M6_M9* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6_M9* M1_M6::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6_M9>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M1_M6_M9* M1_M6::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M6.f4)
  return _internal_mutable_f4();
}
inline void M1_M6::set_allocated_f4(::hyperprotobench::M1_M6_M9* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M6.f4)
}

// -------------------------------------------------------------------

// M1

// optional int64 f1 = 1;
inline bool M1::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1::has_f1() const {
  return _internal_has_f1();
}
inline void M1::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f1)
  return _internal_f1();
}
inline void M1::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f1)
}

// optional uint64 f2 = 2;
inline bool M1::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1::has_f2() const {
  return _internal_has_f2();
}
inline void M1::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f2)
  return _internal_f2();
}
inline void M1::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f2)
}

// optional .hyperprotobench.M1.M2 f3 = 11;
inline bool M1::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M1::has_f3() const {
  return _internal_has_f3();
}
inline void M1::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::hyperprotobench::M1_M2& M1::_internal_f3() const {
  const ::hyperprotobench::M1_M2* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2*>(
      &::hyperprotobench::_M1_M2_default_instance_);
}
inline const ::hyperprotobench::M1_M2& M1::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M1_M2* M1::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f3)
  _has_bits_[0] &= ~0x00000800u;
  ::hyperprotobench::M1_M2* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000800u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M1_M2* M1::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f3)
  return _internal_mutable_f3();
}
inline void M1::set_allocated_f3(::hyperprotobench::M1_M2* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f3)
}

// optional float f4 = 12;
inline bool M1::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M1::has_f4() const {
  return _internal_has_f4();
}
inline void M1::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float M1::_internal_f4() const {
  return f4_;
}
inline float M1::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f4)
  return _internal_f4();
}
inline void M1::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00001000u;
  f4_ = value;
}
inline void M1::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f4)
}

// optional string f5 = 13;
inline bool M1::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M1::has_f5() const {
  return _internal_has_f5();
}
inline void M1::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& M1::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f5)
  return _internal_f5();
}
inline void M1::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f5)
}
inline std::string* M1::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f5)
  return _internal_mutable_f5();
}
inline const std::string& M1::_internal_f5() const {
  return f5_.Get();
}
inline void M1::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f5)
}
inline void M1::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f5)
}
inline void M1::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f5)
}
inline std::string* M1::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00002000u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f5)
}
inline std::string* M1::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f5)
}

// optional bool f6 = 14;
inline bool M1::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M1::has_f6() const {
  return _internal_has_f6();
}
inline void M1::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool M1::_internal_f6() const {
  return f6_;
}
inline bool M1::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f6)
  return _internal_f6();
}
inline void M1::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00004000u;
  f6_ = value;
}
inline void M1::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f6)
}

// optional string f7 = 15;
inline bool M1::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M1::has_f7() const {
  return _internal_has_f7();
}
inline void M1::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& M1::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f7)
  return _internal_f7();
}
inline void M1::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f7)
}
inline std::string* M1::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f7)
  return _internal_mutable_f7();
}
inline const std::string& M1::_internal_f7() const {
  return f7_.Get();
}
inline void M1::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f7)
}
inline void M1::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f7)
}
inline void M1::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f7)
}
inline std::string* M1::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00008000u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f7)
}
inline std::string* M1::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f7)
}

// optional string f8 = 16;
inline bool M1::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M1::has_f8() const {
  return _internal_has_f8();
}
inline void M1::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& M1::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f8)
  return _internal_f8();
}
inline void M1::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f8)
}
inline std::string* M1::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f8)
  return _internal_mutable_f8();
}
inline const std::string& M1::_internal_f8() const {
  return f8_.Get();
}
inline void M1::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f8)
}
inline void M1::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f8)
}
inline void M1::set_f8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f8)
}
inline std::string* M1::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00010000u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f8)
}
inline std::string* M1::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f8)
}

// optional .hyperprotobench.M1.E1 f9 = 17;
inline bool M1::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M1::has_f9() const {
  return _internal_has_f9();
}
inline void M1::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::hyperprotobench::M1_E1 M1::_internal_f9() const {
  return static_cast< ::hyperprotobench::M1_E1 >(f9_);
}
inline ::hyperprotobench::M1_E1 M1::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f9)
  return _internal_f9();
}
inline void M1::_internal_set_f9(::hyperprotobench::M1_E1 value) {
  assert(::hyperprotobench::M1_E1_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  f9_ = value;
}
inline void M1::set_f9(::hyperprotobench::M1_E1 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f9)
}

// optional fixed32 f10 = 18;
inline bool M1::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M1::has_f10() const {
  return _internal_has_f10();
}
inline void M1::clear_f10() {
  f10_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f10)
  return _internal_f10();
}
inline void M1::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  f10_ = value;
}
inline void M1::set_f10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f10)
}

// optional .hyperprotobench.M1.M6 f11 = 22;
inline bool M1::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || f11_ != nullptr);
  return value;
}
inline bool M1::has_f11() const {
  return _internal_has_f11();
}
inline void M1::clear_f11() {
  if (f11_ != nullptr) f11_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::hyperprotobench::M1_M6& M1::_internal_f11() const {
  const ::hyperprotobench::M1_M6* p = f11_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M6*>(
      &::hyperprotobench::_M1_M6_default_instance_);
}
inline const ::hyperprotobench::M1_M6& M1::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f11)
  return _internal_f11();
}
inline ::hyperprotobench::M1_M6* M1::release_f11() {
  auto temp = unsafe_arena_release_f11();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M6* M1::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f11)
  _has_bits_[0] &= ~0x00400000u;
  ::hyperprotobench::M1_M6* temp = f11_;
  f11_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M6* M1::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00400000u;
  if (f11_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M6>(GetArenaNoVirtual());
    f11_ = p;
  }
  return f11_;
}
inline ::hyperprotobench::M1_M6* M1::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f11)
  return _internal_mutable_f11();
}
inline void M1::set_allocated_f11(::hyperprotobench::M1_M6* f11) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f11_;
  }
  if (f11) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f11);
    if (message_arena != submessage_arena) {
      f11 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f11, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f11_ = f11;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f11)
}

// -------------------------------------------------------------------

// M12_M13_M14_M15

// optional int32 f1 = 1;
inline bool M12_M13_M14_M15::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M13_M14_M15::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M13_M14_M15::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14_M15::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14_M15::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.M15.f1)
  return _internal_f1();
}
inline void M12_M13_M14_M15::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M13_M14_M15::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.M15.f1)
}

// -------------------------------------------------------------------

// M12_M13_M14

// optional int32 f1 = 2;
inline bool M12_M13_M14::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M13_M14::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M13_M14::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f1)
  return _internal_f1();
}
inline void M12_M13_M14::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M13_M14::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.f1)
}

// optional .hyperprotobench.M12.M13.M14.M15 f2 = 9;
inline bool M12_M13_M14::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M12_M13_M14::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M13_M14::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M12_M13_M14_M15& M12_M13_M14::_internal_f2() const {
  const ::hyperprotobench::M12_M13_M14_M15* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M13_M14_M15*>(
      &::hyperprotobench::_M12_M13_M14_M15_default_instance_);
}
inline const ::hyperprotobench::M12_M13_M14_M15& M12_M13_M14::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M12_M13_M14_M15* M12_M13_M14::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M13_M14_M15* M12_M13_M14::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M13.M14.f2)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M12_M13_M14_M15* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M13_M14_M15* M12_M13_M14::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000100u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M13_M14_M15>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M12_M13_M14_M15* M12_M13_M14::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M13.M14.f2)
  return _internal_mutable_f2();
}
inline void M12_M13_M14::set_allocated_f2(::hyperprotobench::M12_M13_M14_M15* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M13.M14.f2)
}

// optional bool f3 = 13;
inline bool M12_M13_M14::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M12_M13_M14::has_f3() const {
  return _internal_has_f3();
}
inline void M12_M13_M14::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool M12_M13_M14::_internal_f3() const {
  return f3_;
}
inline bool M12_M13_M14::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f3)
  return _internal_f3();
}
inline void M12_M13_M14::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00001000u;
  f3_ = value;
}
inline void M12_M13_M14::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.f3)
}

// optional int32 f4 = 14;
inline bool M12_M13_M14::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M12_M13_M14::has_f4() const {
  return _internal_has_f4();
}
inline void M12_M13_M14::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13_M14::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f4)
  return _internal_f4();
}
inline void M12_M13_M14::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  f4_ = value;
}
inline void M12_M13_M14::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.f4)
}

// optional string f5 = 15;
inline bool M12_M13_M14::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M12_M13_M14::has_f5() const {
  return _internal_has_f5();
}
inline void M12_M13_M14::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M12_M13_M14::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f5)
  return _internal_f5();
}
inline void M12_M13_M14::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.f5)
}
inline std::string* M12_M13_M14::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M13.M14.f5)
  return _internal_mutable_f5();
}
inline const std::string& M12_M13_M14::_internal_f5() const {
  return f5_.Get();
}
inline void M12_M13_M14::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12_M13_M14::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.M13.M14.f5)
}
inline void M12_M13_M14::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.M13.M14.f5)
}
inline void M12_M13_M14::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.M13.M14.f5)
}
inline std::string* M12_M13_M14::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00004000u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12_M13_M14::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M13.M14.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12_M13_M14::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M13.M14.f5)
}
inline std::string* M12_M13_M14::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.M13.M14.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12_M13_M14::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M13.M14.f5)
}

// optional float f6 = 17;
inline bool M12_M13_M14::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M12_M13_M14::has_f6() const {
  return _internal_has_f6();
}
inline void M12_M13_M14::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float M12_M13_M14::_internal_f6() const {
  return f6_;
}
inline float M12_M13_M14::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.M14.f6)
  return _internal_f6();
}
inline void M12_M13_M14::_internal_set_f6(float value) {
  _has_bits_[0] |= 0x00010000u;
  f6_ = value;
}
inline void M12_M13_M14::set_f6(float value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.M14.f6)
}

// -------------------------------------------------------------------

// M12_M13

// optional .hyperprotobench.M12.M13.M14 f1 = 1;
inline bool M12_M13::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M12_M13::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M13::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M12_M13_M14& M12_M13::_internal_f1() const {
  const ::hyperprotobench::M12_M13_M14* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M13_M14*>(
      &::hyperprotobench::_M12_M13_M14_default_instance_);
}
inline const ::hyperprotobench::M12_M13_M14& M12_M13::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M12_M13_M14* M12_M13::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M13_M14* M12_M13::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M13.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M12_M13_M14* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M13_M14* M12_M13::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M13_M14>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M12_M13_M14* M12_M13::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M13.f1)
  return _internal_mutable_f1();
}
inline void M12_M13::set_allocated_f1(::hyperprotobench::M12_M13_M14* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M13.f1)
}

// optional int32 f2 = 3;
inline bool M12_M13::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M12_M13::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M13::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M13::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M13.f2)
  return _internal_f2();
}
inline void M12_M13::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M12_M13::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M13.f2)
}

// -------------------------------------------------------------------

// M12_M16

// optional int32 f1 = 1;
inline bool M12_M16::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M16::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M16::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M16.f1)
  return _internal_f1();
}
inline void M12_M16::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M16::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M16.f1)
}

// optional int32 f2 = 2;
inline bool M12_M16::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M12_M16::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M16::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M16.f2)
  return _internal_f2();
}
inline void M12_M16::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M12_M16::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M16.f2)
}

// optional int32 f3 = 3;
inline bool M12_M16::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M12_M16::has_f3() const {
  return _internal_has_f3();
}
inline void M12_M16::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M16::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M16.f3)
  return _internal_f3();
}
inline void M12_M16::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M12_M16::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M16.f3)
}

// -------------------------------------------------------------------

// M12_M17_M18_M19_M20_M21

// optional string f1 = 2;
inline bool M12_M17_M18_M19_M20_M21::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M17_M18_M19_M20_M21::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17_M18_M19_M20_M21::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M12_M17_M18_M19_M20_M21::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
  return _internal_f1();
}
inline void M12_M17_M18_M19_M20_M21::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}
inline std::string* M12_M17_M18_M19_M20_M21::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
  return _internal_mutable_f1();
}
inline const std::string& M12_M17_M18_M19_M20_M21::_internal_f1() const {
  return f1_.Get();
}
inline void M12_M17_M18_M19_M20_M21::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12_M17_M18_M19_M20_M21::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}
inline void M12_M17_M18_M19_M20_M21::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}
inline void M12_M17_M18_M19_M20_M21::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}
inline std::string* M12_M17_M18_M19_M20_M21::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12_M17_M18_M19_M20_M21::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12_M17_M18_M19_M20_M21::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}
inline std::string* M12_M17_M18_M19_M20_M21::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12_M17_M18_M19_M20_M21::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.M18.M19.M20.M21.f1)
}

// optional .hyperprotobench.M12.M17.M18.M19.M20.M21.E1 f2 = 3;
inline bool M12_M17_M18_M19_M20_M21::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M12_M17_M18_M19_M20_M21::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17_M18_M19_M20_M21::clear_f2() {
  f2_ = 2;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::_internal_f2() const {
  return static_cast< ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 >(f2_);
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 M12_M17_M18_M19_M20_M21::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.M20.M21.f2)
  return _internal_f2();
}
inline void M12_M17_M18_M19_M20_M21::_internal_set_f2(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 value) {
  assert(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M12_M17_M18_M19_M20_M21::set_f2(::hyperprotobench::M12_M17_M18_M19_M20_M21_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M18.M19.M20.M21.f2)
}

// -------------------------------------------------------------------

// M12_M17_M18_M19_M20

// optional .hyperprotobench.M12.M17.M18.M19.M20.M21 f1 = 1;
inline bool M12_M17_M18_M19_M20::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M12_M17_M18_M19_M20::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17_M18_M19_M20::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M12_M17_M18_M19_M20_M21& M12_M17_M18_M19_M20::_internal_f1() const {
  const ::hyperprotobench::M12_M17_M18_M19_M20_M21* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17_M18_M19_M20_M21*>(
      &::hyperprotobench::_M12_M17_M18_M19_M20_M21_default_instance_);
}
inline const ::hyperprotobench::M12_M17_M18_M19_M20_M21& M12_M17_M18_M19_M20::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.M20.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21* M12_M17_M18_M19_M20::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21* M12_M17_M18_M19_M20::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.M18.M19.M20.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M12_M17_M18_M19_M20_M21* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21* M12_M17_M18_M19_M20::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19_M20_M21>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20_M21* M12_M17_M18_M19_M20::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.M18.M19.M20.f1)
  return _internal_mutable_f1();
}
inline void M12_M17_M18_M19_M20::set_allocated_f1(::hyperprotobench::M12_M17_M18_M19_M20_M21* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.M18.M19.M20.f1)
}

// optional int32 f2 = 4;
inline bool M12_M17_M18_M19_M20::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M12_M17_M18_M19_M20::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17_M18_M19_M20::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M18_M19_M20::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M18_M19_M20::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.M20.f2)
  return _internal_f2();
}
inline void M12_M17_M18_M19_M20::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f2_ = value;
}
inline void M12_M17_M18_M19_M20::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M18.M19.M20.f2)
}

// -------------------------------------------------------------------

// M12_M17_M18_M19

// optional int32 f1 = 1;
inline bool M12_M17_M18_M19::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M17_M18_M19::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17_M18_M19::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M18_M19::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M18_M19::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.f1)
  return _internal_f1();
}
inline void M12_M17_M18_M19::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M17_M18_M19::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M18.M19.f1)
}

// optional .hyperprotobench.M12.M17.M18.M19.M20 f2 = 4;
inline bool M12_M17_M18_M19::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M12_M17_M18_M19::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17_M18_M19::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M12_M17_M18_M19_M20& M12_M17_M18_M19::_internal_f2() const {
  const ::hyperprotobench::M12_M17_M18_M19_M20* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17_M18_M19_M20*>(
      &::hyperprotobench::_M12_M17_M18_M19_M20_default_instance_);
}
inline const ::hyperprotobench::M12_M17_M18_M19_M20& M12_M17_M18_M19::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.M19.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M12_M17_M18_M19_M20* M12_M17_M18_M19::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20* M12_M17_M18_M19::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.M18.M19.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M12_M17_M18_M19_M20* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20* M12_M17_M18_M19::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19_M20>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M12_M17_M18_M19_M20* M12_M17_M18_M19::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.M18.M19.f2)
  return _internal_mutable_f2();
}
inline void M12_M17_M18_M19::set_allocated_f2(::hyperprotobench::M12_M17_M18_M19_M20* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.M18.M19.f2)
}

// -------------------------------------------------------------------

// M12_M17_M18

// optional uint64 f1 = 1;
inline bool M12_M17_M18::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M17_M18::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17_M18::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12_M17_M18::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.f1)
  return _internal_f1();
}
inline void M12_M17_M18::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M17_M18::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M18.f1)
}

// optional .hyperprotobench.M12.M17.M18.M19 f2 = 3;
inline bool M12_M17_M18::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M12_M17_M18::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17_M18::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M12_M17_M18_M19& M12_M17_M18::_internal_f2() const {
  const ::hyperprotobench::M12_M17_M18_M19* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17_M18_M19*>(
      &::hyperprotobench::_M12_M17_M18_M19_default_instance_);
}
inline const ::hyperprotobench::M12_M17_M18_M19& M12_M17_M18::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M18.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M12_M17_M18_M19* M12_M17_M18::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19* M12_M17_M18::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.M18.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M12_M17_M18_M19* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17_M18_M19* M12_M17_M18::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17_M18_M19>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M12_M17_M18_M19* M12_M17_M18::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.M18.f2)
  return _internal_mutable_f2();
}
inline void M12_M17_M18::set_allocated_f2(::hyperprotobench::M12_M17_M18_M19* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.M18.f2)
}

// -------------------------------------------------------------------

// M12_M17_M22

// optional float f1 = 3;
inline bool M12_M17_M22::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M17_M22::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17_M22::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M12_M17_M22::_internal_f1() const {
  return f1_;
}
inline float M12_M17_M22::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M22.f1)
  return _internal_f1();
}
inline void M12_M17_M22::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M17_M22::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M22.f1)
}

// optional bytes f2 = 5;
inline bool M12_M17_M22::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M12_M17_M22::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17_M22::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M12_M17_M22::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M22.f2)
  return _internal_f2();
}
inline void M12_M17_M22::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M22.f2)
}
inline std::string* M12_M17_M22::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.M22.f2)
  return _internal_mutable_f2();
}
inline const std::string& M12_M17_M22::_internal_f2() const {
  return f2_.Get();
}
inline void M12_M17_M22::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12_M17_M22::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.M17.M22.f2)
}
inline void M12_M17_M22::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.M17.M22.f2)
}
inline void M12_M17_M22::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.M17.M22.f2)
}
inline std::string* M12_M17_M22::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12_M17_M22::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.M22.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12_M17_M22::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.M22.f2)
}
inline std::string* M12_M17_M22::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.M17.M22.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12_M17_M22::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.M17.M22.f2)
}

// optional int32 f3 = 6;
inline bool M12_M17_M22::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M12_M17_M22::has_f3() const {
  return _internal_has_f3();
}
inline void M12_M17_M22::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M22::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17_M22::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.M22.f3)
  return _internal_f3();
}
inline void M12_M17_M22::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M12_M17_M22::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.M22.f3)
}

// -------------------------------------------------------------------

// M12_M17

// optional int64 f1 = 2;
inline bool M12_M17::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M12_M17::has_f1() const {
  return _internal_has_f1();
}
inline void M12_M17::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M12_M17::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M12_M17::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f1)
  return _internal_f1();
}
inline void M12_M17::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M12_M17::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.f1)
}

// optional .hyperprotobench.M12.M17.E1 f2 = 3;
inline bool M12_M17::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M12_M17::has_f2() const {
  return _internal_has_f2();
}
inline void M12_M17::clear_f2() {
  f2_ = 96;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M12_M17_E1 M12_M17::_internal_f2() const {
  return static_cast< ::hyperprotobench::M12_M17_E1 >(f2_);
}
inline ::hyperprotobench::M12_M17_E1 M12_M17::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f2)
  return _internal_f2();
}
inline void M12_M17::_internal_set_f2(::hyperprotobench::M12_M17_E1 value) {
  assert(::hyperprotobench::M12_M17_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M12_M17::set_f2(::hyperprotobench::M12_M17_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.f2)
}

// optional sint32 f3 = 4;
inline bool M12_M17::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M12_M17::has_f3() const {
  return _internal_has_f3();
}
inline void M12_M17::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f3)
  return _internal_f3();
}
inline void M12_M17::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M12_M17::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.f3)
}

// optional .hyperprotobench.M12.M17.M18 f4 = 10;
inline bool M12_M17::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M12_M17::has_f4() const {
  return _internal_has_f4();
}
inline void M12_M17::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M12_M17_M18& M12_M17::_internal_f4() const {
  const ::hyperprotobench::M12_M17_M18* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17_M18*>(
      &::hyperprotobench::_M12_M17_M18_default_instance_);
}
inline const ::hyperprotobench::M12_M17_M18& M12_M17::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M12_M17_M18* M12_M17::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17_M18* M12_M17::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.f4)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M12_M17_M18* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17_M18* M12_M17::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000200u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17_M18>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M12_M17_M18* M12_M17::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.f4)
  return _internal_mutable_f4();
}
inline void M12_M17::set_allocated_f4(::hyperprotobench::M12_M17_M18* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.f4)
}

// optional .hyperprotobench.M12.M17.M22 f5 = 11;
inline bool M12_M17::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M12_M17::has_f5() const {
  return _internal_has_f5();
}
inline void M12_M17::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M12_M17_M22& M12_M17::_internal_f5() const {
  const ::hyperprotobench::M12_M17_M22* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17_M22*>(
      &::hyperprotobench::_M12_M17_M22_default_instance_);
}
inline const ::hyperprotobench::M12_M17_M22& M12_M17::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M12_M17_M22* M12_M17::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17_M22* M12_M17::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.M17.f5)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M12_M17_M22* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17_M22* M12_M17::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000400u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17_M22>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M12_M17_M22* M12_M17::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.M17.f5)
  return _internal_mutable_f5();
}
inline void M12_M17::set_allocated_f5(::hyperprotobench::M12_M17_M22* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.M17.f5)
}

// optional int32 f6 = 16;
inline bool M12_M17::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M12_M17::has_f6() const {
  return _internal_has_f6();
}
inline void M12_M17::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f6)
  return _internal_f6();
}
inline void M12_M17::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  f6_ = value;
}
inline void M12_M17::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.f6)
}

// optional int32 f7 = 17;
inline bool M12_M17::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M12_M17::has_f7() const {
  return _internal_has_f7();
}
inline void M12_M17::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12_M17::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.M17.f7)
  return _internal_f7();
}
inline void M12_M17::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  f7_ = value;
}
inline void M12_M17::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.M17.f7)
}

// -------------------------------------------------------------------

// M12

// optional .hyperprotobench.M12.M13 f1 = 2;
inline bool M12::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M12::has_f1() const {
  return _internal_has_f1();
}
inline void M12::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M12_M13& M12::_internal_f1() const {
  const ::hyperprotobench::M12_M13* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M13*>(
      &::hyperprotobench::_M12_M13_default_instance_);
}
inline const ::hyperprotobench::M12_M13& M12::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M12_M13* M12::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M13* M12::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M12_M13* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M13* M12::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M13>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M12_M13* M12::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f1)
  return _internal_mutable_f1();
}
inline void M12::set_allocated_f1(::hyperprotobench::M12_M13* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f1)
}

// optional string f2 = 3;
inline bool M12::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M12::has_f2() const {
  return _internal_has_f2();
}
inline void M12::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M12::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f2)
  return _internal_f2();
}
inline void M12::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f2)
}
inline std::string* M12::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f2)
  return _internal_mutable_f2();
}
inline const std::string& M12::_internal_f2() const {
  return f2_.Get();
}
inline void M12::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.f2)
}
inline void M12::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.f2)
}
inline void M12::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.f2)
}
inline std::string* M12::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f2)
}
inline std::string* M12::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f2)
}

// optional .hyperprotobench.M12.M16 f3 = 6;
inline bool M12::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M12::has_f3() const {
  return _internal_has_f3();
}
inline void M12::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hyperprotobench::M12_M16& M12::_internal_f3() const {
  const ::hyperprotobench::M12_M16* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M16*>(
      &::hyperprotobench::_M12_M16_default_instance_);
}
inline const ::hyperprotobench::M12_M16& M12::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M12_M16* M12::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M16* M12::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f3)
  _has_bits_[0] &= ~0x00000020u;
  ::hyperprotobench::M12_M16* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M16* M12::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000020u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M16>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M12_M16* M12::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f3)
  return _internal_mutable_f3();
}
inline void M12::set_allocated_f3(::hyperprotobench::M12_M16* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f3)
}

// optional fixed64 f4 = 10;
inline bool M12::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M12::has_f4() const {
  return _internal_has_f4();
}
inline void M12::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f4)
  return _internal_f4();
}
inline void M12::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  f4_ = value;
}
inline void M12::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f4)
}

// optional .hyperprotobench.M12.M17 f5 = 11;
inline bool M12::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M12::has_f5() const {
  return _internal_has_f5();
}
inline void M12::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M12_M17& M12::_internal_f5() const {
  const ::hyperprotobench::M12_M17* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M12_M17*>(
      &::hyperprotobench::_M12_M17_default_instance_);
}
inline const ::hyperprotobench::M12_M17& M12::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M12_M17* M12::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M12_M17* M12::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f5)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M12_M17* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M12_M17* M12::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000400u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M12_M17>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M12_M17* M12::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f5)
  return _internal_mutable_f5();
}
inline void M12::set_allocated_f5(::hyperprotobench::M12_M17* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f5)
}

// optional bool f6 = 12;
inline bool M12::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M12::has_f6() const {
  return _internal_has_f6();
}
inline void M12::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool M12::_internal_f6() const {
  return f6_;
}
inline bool M12::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f6)
  return _internal_f6();
}
inline void M12::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000800u;
  f6_ = value;
}
inline void M12::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f6)
}

// optional string f7 = 14;
inline bool M12::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M12::has_f7() const {
  return _internal_has_f7();
}
inline void M12::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& M12::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f7)
  return _internal_f7();
}
inline void M12::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f7)
}
inline std::string* M12::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f7)
  return _internal_mutable_f7();
}
inline const std::string& M12::_internal_f7() const {
  return f7_.Get();
}
inline void M12::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.f7)
}
inline void M12::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.f7)
}
inline void M12::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.f7)
}
inline std::string* M12::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00002000u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f7)
}
inline std::string* M12::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f7)
}

// optional int32 f8 = 15;
inline bool M12::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M12::has_f8() const {
  return _internal_has_f8();
}
inline void M12::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f8)
  return _internal_f8();
}
inline void M12::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  f8_ = value;
}
inline void M12::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f8)
}

// optional int32 f9 = 17;
inline bool M12::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M12::has_f9() const {
  return _internal_has_f9();
}
inline void M12::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f9)
  return _internal_f9();
}
inline void M12::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  f9_ = value;
}
inline void M12::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f9)
}

// optional fixed64 f10 = 18;
inline bool M12::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M12::has_f10() const {
  return _internal_has_f10();
}
inline void M12::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f10)
  return _internal_f10();
}
inline void M12::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  f10_ = value;
}
inline void M12::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f10)
}

// optional fixed64 f11 = 19;
inline bool M12::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M12::has_f11() const {
  return _internal_has_f11();
}
inline void M12::clear_f11() {
  f11_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M12::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f11)
  return _internal_f11();
}
inline void M12::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  f11_ = value;
}
inline void M12::set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f11)
}

// optional bytes f12 = 20;
inline bool M12::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M12::has_f12() const {
  return _internal_has_f12();
}
inline void M12::clear_f12() {
  f12_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& M12::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f12)
  return _internal_f12();
}
inline void M12::set_f12(const std::string& value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f12)
}
inline std::string* M12::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M12.f12)
  return _internal_mutable_f12();
}
inline const std::string& M12::_internal_f12() const {
  return f12_.Get();
}
inline void M12::_internal_set_f12(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M12::set_f12(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  f12_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M12.f12)
}
inline void M12::set_f12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M12.f12)
}
inline void M12::set_f12(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M12.f12)
}
inline std::string* M12::_internal_mutable_f12() {
  _has_bits_[0] |= 0x00080000u;
  return f12_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M12::release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M12.f12)
  if (!_internal_has_f12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return f12_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M12::set_allocated_f12(std::string* f12) {
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f12_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f12,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M12.f12)
}
inline std::string* M12::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M12.f12)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return f12_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M12::unsafe_arena_set_allocated_f12(
    std::string* f12) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f12_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f12, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M12.f12)
}

// optional int32 f13 = 21;
inline bool M12::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M12::has_f13() const {
  return _internal_has_f13();
}
inline void M12::clear_f13() {
  f13_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::_internal_f13() const {
  return f13_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M12::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M12.f13)
  return _internal_f13();
}
inline void M12::_internal_set_f13(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  f13_ = value;
}
inline void M12::set_f13(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M12.f13)
}

// -------------------------------------------------------------------

// M23_M24_M25

// optional int32 f1 = 1;
inline bool M23_M24_M25::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M24_M25::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M24_M25::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24_M25::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24_M25::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.M25.f1)
  return _internal_f1();
}
inline void M23_M24_M25::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M24_M25::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.M25.f1)
}

// -------------------------------------------------------------------

// M23_M24_M26

// optional bytes f1 = 1;
inline bool M23_M24_M26::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M24_M26::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M24_M26::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M23_M24_M26::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.M26.f1)
  return _internal_f1();
}
inline void M23_M24_M26::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.M26.f1)
}
inline std::string* M23_M24_M26::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M24.M26.f1)
  return _internal_mutable_f1();
}
inline const std::string& M23_M24_M26::_internal_f1() const {
  return f1_.Get();
}
inline void M23_M24_M26::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M24_M26::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M24.M26.f1)
}
inline void M23_M24_M26::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M24.M26.f1)
}
inline void M23_M24_M26::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M24.M26.f1)
}
inline std::string* M23_M24_M26::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M24_M26::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M24.M26.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M24_M26::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M24.M26.f1)
}
inline std::string* M23_M24_M26::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M24.M26.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M24_M26::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M24.M26.f1)
}

// -------------------------------------------------------------------

// M23_M24_M27

// repeated bool f1 = 2;
inline int M23_M24_M27::_internal_f1_size() const {
  return f1_.size();
}
inline int M23_M24_M27::f1_size() const {
  return _internal_f1_size();
}
inline void M23_M24_M27::clear_f1() {
  f1_.Clear();
}
inline bool M23_M24_M27::_internal_f1(int index) const {
  return f1_.Get(index);
}
inline bool M23_M24_M27::f1(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.M27.f1)
  return _internal_f1(index);
}
inline void M23_M24_M27::set_f1(int index, bool value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.M27.f1)
}
inline void M23_M24_M27::_internal_add_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add(value);
}
inline void M23_M24_M27::add_f1(bool value) {
  _internal_add_f1(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M23.M24.M27.f1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
M23_M24_M27::_internal_f1() const {
  return f1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
M23_M24_M27::f1() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M23.M24.M27.f1)
  return _internal_f1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
M23_M24_M27::_internal_mutable_f1() {
  return &f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
M23_M24_M27::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M23.M24.M27.f1)
  return _internal_mutable_f1();
}

// -------------------------------------------------------------------

// M23_M24

// optional double f1 = 1;
inline bool M23_M24::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M24::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M24::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double M23_M24::_internal_f1() const {
  return f1_;
}
inline double M23_M24::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f1)
  return _internal_f1();
}
inline void M23_M24::_internal_set_f1(double value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M24::set_f1(double value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f1)
}

// optional .hyperprotobench.M23.M24.M25 f2 = 2;
inline bool M23_M24::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M23_M24::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M24::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M23_M24_M25& M23_M24::_internal_f2() const {
  const ::hyperprotobench::M23_M24_M25* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M24_M25*>(
      &::hyperprotobench::_M23_M24_M25_default_instance_);
}
inline const ::hyperprotobench::M23_M24_M25& M23_M24::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M23_M24_M25* M23_M24::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M24_M25* M23_M24::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M24.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M23_M24_M25* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M24_M25* M23_M24::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M24_M25>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M23_M24_M25* M23_M24::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M24.f2)
  return _internal_mutable_f2();
}
inline void M23_M24::set_allocated_f2(::hyperprotobench::M23_M24_M25* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M24.f2)
}

// optional .hyperprotobench.M23.M24.M26 f3 = 3;
inline bool M23_M24::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M23_M24::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M24::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M23_M24_M26& M23_M24::_internal_f3() const {
  const ::hyperprotobench::M23_M24_M26* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M24_M26*>(
      &::hyperprotobench::_M23_M24_M26_default_instance_);
}
inline const ::hyperprotobench::M23_M24_M26& M23_M24::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M23_M24_M26* M23_M24::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M24_M26* M23_M24::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M24.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M23_M24_M26* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M24_M26* M23_M24::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M24_M26>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M23_M24_M26* M23_M24::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M24.f3)
  return _internal_mutable_f3();
}
inline void M23_M24::set_allocated_f3(::hyperprotobench::M23_M24_M26* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M24.f3)
}

// optional .hyperprotobench.M23.M24.M27 f4 = 4;
inline bool M23_M24::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M23_M24::has_f4() const {
  return _internal_has_f4();
}
inline void M23_M24::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M23_M24_M27& M23_M24::_internal_f4() const {
  const ::hyperprotobench::M23_M24_M27* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M24_M27*>(
      &::hyperprotobench::_M23_M24_M27_default_instance_);
}
inline const ::hyperprotobench::M23_M24_M27& M23_M24::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M23_M24_M27* M23_M24::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M24_M27* M23_M24::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M24.f4)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M23_M24_M27* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M24_M27* M23_M24::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M24_M27>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M23_M24_M27* M23_M24::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M24.f4)
  return _internal_mutable_f4();
}
inline void M23_M24::set_allocated_f4(::hyperprotobench::M23_M24_M27* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M24.f4)
}

// optional int32 f5 = 6;
inline bool M23_M24::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M23_M24::has_f5() const {
  return _internal_has_f5();
}
inline void M23_M24::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f5)
  return _internal_f5();
}
inline void M23_M24::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M23_M24::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f5)
}

// -------------------------------------------------------------------

// M23_M28

// optional int32 f1 = 1;
inline bool M23_M28::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M28::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M28::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M28::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M28::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M28.f1)
  return _internal_f1();
}
inline void M23_M28::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M28::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M28.f1)
}

// -------------------------------------------------------------------

// M23_M29_M30_M31_M32

// optional .hyperprotobench.M23.M29.M30.M31.M32.E1 f1 = 2;
inline bool M23_M29_M30_M31_M32::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M29_M30_M31_M32::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M29_M30_M31_M32::clear_f1() {
  f1_ = 38;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hyperprotobench::M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::_internal_f1() const {
  return static_cast< ::hyperprotobench::M23_M29_M30_M31_M32_E1 >(f1_);
}
inline ::hyperprotobench::M23_M29_M30_M31_M32_E1 M23_M29_M30_M31_M32::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.M32.f1)
  return _internal_f1();
}
inline void M23_M29_M30_M31_M32::_internal_set_f1(::hyperprotobench::M23_M29_M30_M31_M32_E1 value) {
  assert(::hyperprotobench::M23_M29_M30_M31_M32_E1_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M29_M30_M31_M32::set_f1(::hyperprotobench::M23_M29_M30_M31_M32_E1 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.M32.f1)
}

// optional bool f2 = 4;
inline bool M23_M29_M30_M31_M32::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M23_M29_M30_M31_M32::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M29_M30_M31_M32::clear_f2() {
  f2_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M23_M29_M30_M31_M32::_internal_f2() const {
  return f2_;
}
inline bool M23_M29_M30_M31_M32::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.M32.f2)
  return _internal_f2();
}
inline void M23_M29_M30_M31_M32::_internal_set_f2(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M23_M29_M30_M31_M32::set_f2(bool value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.M32.f2)
}

// optional int32 f3 = 5;
inline bool M23_M29_M30_M31_M32::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M23_M29_M30_M31_M32::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M29_M30_M31_M32::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31_M32::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31_M32::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.M32.f3)
  return _internal_f3();
}
inline void M23_M29_M30_M31_M32::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M23_M29_M30_M31_M32::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.M32.f3)
}

// optional bytes f4 = 6;
inline bool M23_M29_M30_M31_M32::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M23_M29_M30_M31_M32::has_f4() const {
  return _internal_has_f4();
}
inline void M23_M29_M30_M31_M32::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M23_M29_M30_M31_M32::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.M32.f4)
  return _internal_f4();
}
inline void M23_M29_M30_M31_M32::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.M32.f4)
}
inline std::string* M23_M29_M30_M31_M32::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M30.M31.M32.f4)
  return _internal_mutable_f4();
}
inline const std::string& M23_M29_M30_M31_M32::_internal_f4() const {
  return f4_.Get();
}
inline void M23_M29_M30_M31_M32::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M29_M30_M31_M32::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M29.M30.M31.M32.f4)
}
inline void M23_M29_M30_M31_M32::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M29.M30.M31.M32.f4)
}
inline void M23_M29_M30_M31_M32::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M29.M30.M31.M32.f4)
}
inline std::string* M23_M29_M30_M31_M32::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M29_M30_M31_M32::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M30.M31.M32.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M29_M30_M31_M32::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M30.M31.M32.f4)
}
inline std::string* M23_M29_M30_M31_M32::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M29.M30.M31.M32.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M29_M30_M31_M32::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M30.M31.M32.f4)
}

// -------------------------------------------------------------------

// M23_M29_M30_M31

// optional int32 f1 = 2;
inline bool M23_M29_M30_M31::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M29_M30_M31::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f1)
  return _internal_f1();
}
inline void M23_M29_M30_M31::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M29_M30_M31::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f1)
}

// optional float f2 = 8;
inline bool M23_M29_M30_M31::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M29_M30_M31::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M23_M29_M30_M31::_internal_f2() const {
  return f2_;
}
inline float M23_M29_M30_M31::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f2)
  return _internal_f2();
}
inline void M23_M29_M30_M31::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000080u;
  f2_ = value;
}
inline void M23_M29_M30_M31::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f2)
}

// optional int32 f3 = 9;
inline bool M23_M29_M30_M31::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M29_M30_M31::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f3)
  return _internal_f3();
}
inline void M23_M29_M30_M31::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f3_ = value;
}
inline void M23_M29_M30_M31::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f3)
}

// optional int32 f4 = 10;
inline bool M23_M29_M30_M31::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f4() const {
  return _internal_has_f4();
}
inline void M23_M29_M30_M31::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M30_M31::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f4)
  return _internal_f4();
}
inline void M23_M29_M30_M31::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f4_ = value;
}
inline void M23_M29_M30_M31::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f4)
}

// optional bool f5 = 11;
inline bool M23_M29_M30_M31::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f5() const {
  return _internal_has_f5();
}
inline void M23_M29_M30_M31::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool M23_M29_M30_M31::_internal_f5() const {
  return f5_;
}
inline bool M23_M29_M30_M31::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f5)
  return _internal_f5();
}
inline void M23_M29_M30_M31::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000400u;
  f5_ = value;
}
inline void M23_M29_M30_M31::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f5)
}

// optional string f6 = 13;
inline bool M23_M29_M30_M31::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M23_M29_M30_M31::has_f6() const {
  return _internal_has_f6();
}
inline void M23_M29_M30_M31::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& M23_M29_M30_M31::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f6)
  return _internal_f6();
}
inline void M23_M29_M30_M31::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.M31.f6)
}
inline std::string* M23_M29_M30_M31::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M30.M31.f6)
  return _internal_mutable_f6();
}
inline const std::string& M23_M29_M30_M31::_internal_f6() const {
  return f6_.Get();
}
inline void M23_M29_M30_M31::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M29_M30_M31::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M29.M30.M31.f6)
}
inline void M23_M29_M30_M31::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M29.M30.M31.f6)
}
inline void M23_M29_M30_M31::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M29.M30.M31.f6)
}
inline std::string* M23_M29_M30_M31::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00001000u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M29_M30_M31::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M30.M31.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M29_M30_M31::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M30.M31.f6)
}
inline std::string* M23_M29_M30_M31::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M29.M30.M31.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M29_M30_M31::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M30.M31.f6)
}

// optional .hyperprotobench.M23.M29.M30.M31.M32 f7 = 14;
inline bool M23_M29_M30_M31::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M23_M29_M30_M31::has_f7() const {
  return _internal_has_f7();
}
inline void M23_M29_M30_M31::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::hyperprotobench::M23_M29_M30_M31_M32& M23_M29_M30_M31::_internal_f7() const {
  const ::hyperprotobench::M23_M29_M30_M31_M32* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M29_M30_M31_M32*>(
      &::hyperprotobench::_M23_M29_M30_M31_M32_default_instance_);
}
inline const ::hyperprotobench::M23_M29_M30_M31_M32& M23_M29_M30_M31::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.M31.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M23_M29_M30_M31_M32* M23_M29_M30_M31::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M29_M30_M31_M32* M23_M29_M30_M31::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M30.M31.f7)
  _has_bits_[0] &= ~0x00002000u;
  ::hyperprotobench::M23_M29_M30_M31_M32* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M29_M30_M31_M32* M23_M29_M30_M31::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00002000u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M29_M30_M31_M32>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M23_M29_M30_M31_M32* M23_M29_M30_M31::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M30.M31.f7)
  return _internal_mutable_f7();
}
inline void M23_M29_M30_M31::set_allocated_f7(::hyperprotobench::M23_M29_M30_M31_M32* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M30.M31.f7)
}

// -------------------------------------------------------------------

// M23_M29_M30

// optional .hyperprotobench.M23.M29.M30.M31 f1 = 4;
inline bool M23_M29_M30::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M23_M29_M30::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M29_M30::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M23_M29_M30_M31& M23_M29_M30::_internal_f1() const {
  const ::hyperprotobench::M23_M29_M30_M31* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M29_M30_M31*>(
      &::hyperprotobench::_M23_M29_M30_M31_default_instance_);
}
inline const ::hyperprotobench::M23_M29_M30_M31& M23_M29_M30::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M23_M29_M30_M31* M23_M29_M30::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M29_M30_M31* M23_M29_M30::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M30.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M23_M29_M30_M31* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M29_M30_M31* M23_M29_M30::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M29_M30_M31>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M23_M29_M30_M31* M23_M29_M30::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M30.f1)
  return _internal_mutable_f1();
}
inline void M23_M29_M30::set_allocated_f1(::hyperprotobench::M23_M29_M30_M31* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M30.f1)
}

// optional uint64 f2 = 5;
inline bool M23_M29_M30::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M23_M29_M30::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M29_M30::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M30::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M29_M30::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M30.f2)
  return _internal_f2();
}
inline void M23_M29_M30::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M23_M29_M30::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M30.f2)
}

// -------------------------------------------------------------------

// M23_M29_M33

// optional bytes f1 = 1;
inline bool M23_M29_M33::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M29_M33::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M29_M33::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M23_M29_M33::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M33.f1)
  return _internal_f1();
}
inline void M23_M29_M33::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M33.f1)
}
inline std::string* M23_M29_M33::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M33.f1)
  return _internal_mutable_f1();
}
inline const std::string& M23_M29_M33::_internal_f1() const {
  return f1_.Get();
}
inline void M23_M29_M33::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M29_M33::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M29.M33.f1)
}
inline void M23_M29_M33::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M29.M33.f1)
}
inline void M23_M29_M33::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M29.M33.f1)
}
inline std::string* M23_M29_M33::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M29_M33::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M33.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M29_M33::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M33.f1)
}
inline std::string* M23_M29_M33::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M29.M33.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M29_M33::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M33.f1)
}

// optional int32 f2 = 2;
inline bool M23_M29_M33::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M23_M29_M33::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M29_M33::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M33::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29_M33::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M33.f2)
  return _internal_f2();
}
inline void M23_M29_M33::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M23_M29_M33::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M33.f2)
}

// optional bytes f3 = 3;
inline bool M23_M29_M33::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M23_M29_M33::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M29_M33::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M23_M29_M33::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.M33.f3)
  return _internal_f3();
}
inline void M23_M29_M33::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.M33.f3)
}
inline std::string* M23_M29_M33::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.M33.f3)
  return _internal_mutable_f3();
}
inline const std::string& M23_M29_M33::_internal_f3() const {
  return f3_.Get();
}
inline void M23_M29_M33::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M29_M33::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M29.M33.f3)
}
inline void M23_M29_M33::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M29.M33.f3)
}
inline void M23_M29_M33::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M29.M33.f3)
}
inline std::string* M23_M29_M33::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M29_M33::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.M33.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M29_M33::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.M33.f3)
}
inline std::string* M23_M29_M33::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M29.M33.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M29_M33::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.M33.f3)
}

// -------------------------------------------------------------------

// M23_M29

// optional int32 f1 = 1;
inline bool M23_M29::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M29::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M29::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f1)
  return _internal_f1();
}
inline void M23_M29::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M29::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.f1)
}

// optional .hyperprotobench.M23.M29.M30 f2 = 4;
inline bool M23_M29::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M23_M29::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M29::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M23_M29_M30& M23_M29::_internal_f2() const {
  const ::hyperprotobench::M23_M29_M30* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M29_M30*>(
      &::hyperprotobench::_M23_M29_M30_default_instance_);
}
inline const ::hyperprotobench::M23_M29_M30& M23_M29::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M23_M29_M30* M23_M29::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M29_M30* M23_M29::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M23_M29_M30* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M29_M30* M23_M29::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M29_M30>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M23_M29_M30* M23_M29::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.f2)
  return _internal_mutable_f2();
}
inline void M23_M29::set_allocated_f2(::hyperprotobench::M23_M29_M30* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.f2)
}

// optional int32 f3 = 5;
inline bool M23_M29::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M23_M29::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M29::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M29::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f3)
  return _internal_f3();
}
inline void M23_M29::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M23_M29::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.f3)
}

// optional .hyperprotobench.M23.M29.M33 f4 = 6;
inline bool M23_M29::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M23_M29::has_f4() const {
  return _internal_has_f4();
}
inline void M23_M29::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::hyperprotobench::M23_M29_M33& M23_M29::_internal_f4() const {
  const ::hyperprotobench::M23_M29_M33* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M29_M33*>(
      &::hyperprotobench::_M23_M29_M33_default_instance_);
}
inline const ::hyperprotobench::M23_M29_M33& M23_M29::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M23_M29_M33* M23_M29::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M29_M33* M23_M29::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.f4)
  _has_bits_[0] &= ~0x00000040u;
  ::hyperprotobench::M23_M29_M33* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M29_M33* M23_M29::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M29_M33>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M23_M29_M33* M23_M29::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.f4)
  return _internal_mutable_f4();
}
inline void M23_M29::set_allocated_f4(::hyperprotobench::M23_M29_M33* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.f4)
}

// optional float f5 = 7;
inline bool M23_M29::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M23_M29::has_f5() const {
  return _internal_has_f5();
}
inline void M23_M29::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M23_M29::_internal_f5() const {
  return f5_;
}
inline float M23_M29::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f5)
  return _internal_f5();
}
inline void M23_M29::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M23_M29::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.f5)
}

// optional string f6 = 9;
inline bool M23_M29::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M23_M29::has_f6() const {
  return _internal_has_f6();
}
inline void M23_M29::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M23_M29::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M29.f6)
  return _internal_f6();
}
inline void M23_M29::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M29.f6)
}
inline std::string* M23_M29::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.M29.f6)
  return _internal_mutable_f6();
}
inline const std::string& M23_M29::_internal_f6() const {
  return f6_.Get();
}
inline void M23_M29::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23_M29::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.M29.f6)
}
inline void M23_M29::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.M29.f6)
}
inline void M23_M29::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.M29.f6)
}
inline std::string* M23_M29::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000200u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23_M29::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.M29.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23_M29::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.M29.f6)
}
inline std::string* M23_M29::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.M29.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23_M29::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.M29.f6)
}

// -------------------------------------------------------------------

// M23

// optional int32 f1 = 2;
inline bool M23::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23::has_f1() const {
  return _internal_has_f1();
}
inline void M23::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f1)
  return _internal_f1();
}
inline void M23::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f1)
}

// optional .hyperprotobench.M23.M24 f2 = 3;
inline bool M23::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M23::has_f2() const {
  return _internal_has_f2();
}
inline void M23::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M23_M24& M23::_internal_f2() const {
  const ::hyperprotobench::M23_M24* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M24*>(
      &::hyperprotobench::_M23_M24_default_instance_);
}
inline const ::hyperprotobench::M23_M24& M23::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M23_M24* M23::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M24* M23::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M23_M24* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M24* M23::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M24>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M23_M24* M23::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f2)
  return _internal_mutable_f2();
}
inline void M23::set_allocated_f2(::hyperprotobench::M23_M24* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f2)
}

// optional int32 f3 = 4;
inline bool M23::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M23::has_f3() const {
  return _internal_has_f3();
}
inline void M23::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f3)
  return _internal_f3();
}
inline void M23::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M23::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f3)
}

// optional float f4 = 5;
inline bool M23::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M23::has_f4() const {
  return _internal_has_f4();
}
inline void M23::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float M23::_internal_f4() const {
  return f4_;
}
inline float M23::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f4)
  return _internal_f4();
}
inline void M23::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M23::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f4)
}

// optional int32 f5 = 7;
inline bool M23::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M23::has_f5() const {
  return _internal_has_f5();
}
inline void M23::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f5)
  return _internal_f5();
}
inline void M23::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M23::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f5)
}

// optional .hyperprotobench.M23.M28 f6 = 9;
inline bool M23::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M23::has_f6() const {
  return _internal_has_f6();
}
inline void M23::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M23_M28& M23::_internal_f6() const {
  const ::hyperprotobench::M23_M28* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M28*>(
      &::hyperprotobench::_M23_M28_default_instance_);
}
inline const ::hyperprotobench::M23_M28& M23::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M23_M28* M23::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M28* M23::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f6)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M23_M28* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M28* M23::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M28>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M23_M28* M23::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f6)
  return _internal_mutable_f6();
}
inline void M23::set_allocated_f6(::hyperprotobench::M23_M28* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f6)
}

// optional .hyperprotobench.M23.M29 f7 = 10;
inline bool M23::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M23::has_f7() const {
  return _internal_has_f7();
}
inline void M23::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M23_M29& M23::_internal_f7() const {
  const ::hyperprotobench::M23_M29* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M29*>(
      &::hyperprotobench::_M23_M29_default_instance_);
}
inline const ::hyperprotobench::M23_M29& M23::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M23_M29* M23::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M29* M23::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f7)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M23_M29* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M29* M23::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000200u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M29>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M23_M29* M23::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f7)
  return _internal_mutable_f7();
}
inline void M23::set_allocated_f7(::hyperprotobench::M23_M29* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f7)
}

// optional int64 f8 = 13;
inline bool M23::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M23::has_f8() const {
  return _internal_has_f8();
}
inline void M23::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M23::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M23::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f8)
  return _internal_f8();
}
inline void M23::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  f8_ = value;
}
inline void M23::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f8)
}

// optional float f9 = 14;
inline bool M23::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M23::has_f9() const {
  return _internal_has_f9();
}
inline void M23::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float M23::_internal_f9() const {
  return f9_;
}
inline float M23::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f9)
  return _internal_f9();
}
inline void M23::_internal_set_f9(float value) {
  _has_bits_[0] |= 0x00002000u;
  f9_ = value;
}
inline void M23::set_f9(float value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f9)
}

// optional int32 f10 = 15;
inline bool M23::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M23::has_f10() const {
  return _internal_has_f10();
}
inline void M23::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f10)
  return _internal_f10();
}
inline void M23::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  f10_ = value;
}
inline void M23::set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f10)
}

// -------------------------------------------------------------------

// M34_M35

// optional uint64 f1 = 1;
inline bool M34_M35::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M35::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M35::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M35::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M35::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M35.f1)
  return _internal_f1();
}
inline void M34_M35::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M35::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M35.f1)
}

// -------------------------------------------------------------------

// M34_M36

// optional uint64 f1 = 1;
inline bool M34_M36::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M36::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M36::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M36::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M36::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M36.f1)
  return _internal_f1();
}
inline void M34_M36::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M36::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M36.f1)
}

// optional bytes f2 = 3;
inline bool M34_M36::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M34_M36::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M36::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M34_M36::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M36.f2)
  return _internal_f2();
}
inline void M34_M36::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M36.f2)
}
inline std::string* M34_M36::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M36.f2)
  return _internal_mutable_f2();
}
inline const std::string& M34_M36::_internal_f2() const {
  return f2_.Get();
}
inline void M34_M36::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M36::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M36.f2)
}
inline void M34_M36::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M36.f2)
}
inline void M34_M36::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M36.f2)
}
inline std::string* M34_M36::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M36::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M36.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M36::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M36.f2)
}
inline std::string* M34_M36::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M36.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M36::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M36.f2)
}

// optional int32 f3 = 4;
inline bool M34_M36::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M34_M36::has_f3() const {
  return _internal_has_f3();
}
inline void M34_M36::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M36::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M36::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M36.f3)
  return _internal_f3();
}
inline void M34_M36::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M34_M36::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M36.f3)
}

// optional uint32 f4 = 5;
inline bool M34_M36::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M34_M36::has_f4() const {
  return _internal_has_f4();
}
inline void M34_M36::clear_f4() {
  f4_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M34_M36::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M34_M36::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M36.f4)
  return _internal_f4();
}
inline void M34_M36::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M34_M36::set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M36.f4)
}

// optional int32 f5 = 6;
inline bool M34_M36::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M34_M36::has_f5() const {
  return _internal_has_f5();
}
inline void M34_M36::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M36::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M36::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M36.f5)
  return _internal_f5();
}
inline void M34_M36::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M34_M36::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M36.f5)
}

// -------------------------------------------------------------------

// M34_M37_M38_M39_M40_M41

// optional float f1 = 1;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M37_M38_M39_M40_M41::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M34_M37_M38_M39_M40_M41::_internal_f1() const {
  return f1_;
}
inline float M34_M37_M38_M39_M40_M41::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f1)
  return _internal_f1();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M37_M38_M39_M40_M41::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f1)
}

// optional int32 f2 = 3;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M37_M38_M39_M40_M41::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40_M41::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40_M41::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f2)
  return _internal_f2();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M34_M37_M38_M39_M40_M41::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f2)
}

// optional string f3 = 4;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f3() const {
  return _internal_has_f3();
}
inline void M34_M37_M38_M39_M40_M41::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M34_M37_M38_M39_M40_M41::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
  return _internal_f3();
}
inline void M34_M37_M38_M39_M40_M41::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}
inline std::string* M34_M37_M38_M39_M40_M41::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
  return _internal_mutable_f3();
}
inline const std::string& M34_M37_M38_M39_M40_M41::_internal_f3() const {
  return f3_.Get();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}
inline void M34_M37_M38_M39_M40_M41::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}
inline void M34_M37_M38_M39_M40_M41::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}
inline std::string* M34_M37_M38_M39_M40_M41::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M37_M38_M39_M40_M41::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}
inline std::string* M34_M37_M38_M39_M40_M41::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f3)
}

// optional string f4 = 7;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f4() const {
  return _internal_has_f4();
}
inline void M34_M37_M38_M39_M40_M41::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M34_M37_M38_M39_M40_M41::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
  return _internal_f4();
}
inline void M34_M37_M38_M39_M40_M41::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}
inline std::string* M34_M37_M38_M39_M40_M41::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
  return _internal_mutable_f4();
}
inline const std::string& M34_M37_M38_M39_M40_M41::_internal_f4() const {
  return f4_.Get();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}
inline void M34_M37_M38_M39_M40_M41::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}
inline void M34_M37_M38_M39_M40_M41::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}
inline std::string* M34_M37_M38_M39_M40_M41::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000080u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M37_M38_M39_M40_M41::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}
inline std::string* M34_M37_M38_M39_M40_M41::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f4)
}

// optional bytes f5 = 8;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f5() const {
  return _internal_has_f5();
}
inline void M34_M37_M38_M39_M40_M41::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M34_M37_M38_M39_M40_M41::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
  return _internal_f5();
}
inline void M34_M37_M38_M39_M40_M41::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}
inline std::string* M34_M37_M38_M39_M40_M41::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
  return _internal_mutable_f5();
}
inline const std::string& M34_M37_M38_M39_M40_M41::_internal_f5() const {
  return f5_.Get();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}
inline void M34_M37_M38_M39_M40_M41::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}
inline void M34_M37_M38_M39_M40_M41::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}
inline std::string* M34_M37_M38_M39_M40_M41::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M37_M38_M39_M40_M41::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}
inline std::string* M34_M37_M38_M39_M40_M41::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f5)
}

// optional float f6 = 11;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f6() const {
  return _internal_has_f6();
}
inline void M34_M37_M38_M39_M40_M41::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float M34_M37_M38_M39_M40_M41::_internal_f6() const {
  return f6_;
}
inline float M34_M37_M38_M39_M40_M41::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f6)
  return _internal_f6();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f6(float value) {
  _has_bits_[0] |= 0x00000800u;
  f6_ = value;
}
inline void M34_M37_M38_M39_M40_M41::set_f6(float value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f6)
}

// optional int32 f7 = 12;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f7() const {
  return _internal_has_f7();
}
inline void M34_M37_M38_M39_M40_M41::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40_M41::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40_M41::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f7)
  return _internal_f7();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f7_ = value;
}
inline void M34_M37_M38_M39_M40_M41::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f7)
}

// repeated string f8 = 13;
inline int M34_M37_M38_M39_M40_M41::_internal_f8_size() const {
  return f8_.size();
}
inline int M34_M37_M38_M39_M40_M41::f8_size() const {
  return _internal_f8_size();
}
inline void M34_M37_M38_M39_M40_M41::clear_f8() {
  f8_.Clear();
}
inline std::string* M34_M37_M38_M39_M40_M41::add_f8() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  return _internal_add_f8();
}
inline const std::string& M34_M37_M38_M39_M40_M41::_internal_f8(int index) const {
  return f8_.Get(index);
}
inline const std::string& M34_M37_M38_M39_M40_M41::f8(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  return _internal_f8(index);
}
inline std::string* M34_M37_M38_M39_M40_M41::mutable_f8(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  return f8_.Mutable(index);
}
inline void M34_M37_M38_M39_M40_M41::set_f8(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  f8_.Mutable(index)->assign(value);
}
inline void M34_M37_M38_M39_M40_M41::set_f8(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  f8_.Mutable(index)->assign(std::move(value));
}
inline void M34_M37_M38_M39_M40_M41::set_f8(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f8_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline void M34_M37_M38_M39_M40_M41::set_f8(int index, const char* value, size_t size) {
  f8_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline std::string* M34_M37_M38_M39_M40_M41::_internal_add_f8() {
  _has_bits_[0] |= 0x00002000u;
  return f8_.Add();
}
inline void M34_M37_M38_M39_M40_M41::add_f8(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  f8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline void M34_M37_M38_M39_M40_M41::add_f8(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  f8_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline void M34_M37_M38_M39_M40_M41::add_f8(const char* value) {
  _has_bits_[0] |= 0x00002000u;
  GOOGLE_DCHECK(value != nullptr);
  f8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline void M34_M37_M38_M39_M40_M41::add_f8(const char* value, size_t size) {
  _has_bits_[0] |= 0x00002000u;
  f8_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M34_M37_M38_M39_M40_M41::f8() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M34_M37_M38_M39_M40_M41::mutable_f8() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M34.M37.M38.M39.M40.M41.f8)
  return &f8_;
}

// optional bytes f9 = 14;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f9() const {
  return _internal_has_f9();
}
inline void M34_M37_M38_M39_M40_M41::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M34_M37_M38_M39_M40_M41::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
  return _internal_f9();
}
inline void M34_M37_M38_M39_M40_M41::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}
inline std::string* M34_M37_M38_M39_M40_M41::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
  return _internal_mutable_f9();
}
inline const std::string& M34_M37_M38_M39_M40_M41::_internal_f9() const {
  return f9_.Get();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}
inline void M34_M37_M38_M39_M40_M41::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}
inline void M34_M37_M38_M39_M40_M41::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}
inline std::string* M34_M37_M38_M39_M40_M41::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00004000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M37_M38_M39_M40_M41::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}
inline std::string* M34_M37_M38_M39_M40_M41::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M37_M38_M39_M40_M41::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.M41.f9)
}

// optional uint64 f10 = 15;
inline bool M34_M37_M38_M39_M40_M41::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40_M41::has_f10() const {
  return _internal_has_f10();
}
inline void M34_M37_M38_M39_M40_M41::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_M39_M40_M41::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34_M37_M38_M39_M40_M41::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.M41.f10)
  return _internal_f10();
}
inline void M34_M37_M38_M39_M40_M41::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  f10_ = value;
}
inline void M34_M37_M38_M39_M40_M41::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.M41.f10)
}

// -------------------------------------------------------------------

// M34_M37_M38_M39_M40

// optional int32 f1 = 1;
inline bool M34_M37_M38_M39_M40::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M37_M38_M39_M40::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M37_M38_M39_M40::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39_M40::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.f1)
  return _internal_f1();
}
inline void M34_M37_M38_M39_M40::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M37_M38_M39_M40::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.M40.f1)
}

// optional .hyperprotobench.M34.M37.M38.M39.M40.M41 f2 = 4;
inline bool M34_M37_M38_M39_M40::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M34_M37_M38_M39_M40::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M37_M38_M39_M40::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M34_M37_M38_M39_M40_M41& M34_M37_M38_M39_M40::_internal_f2() const {
  const ::hyperprotobench::M34_M37_M38_M39_M40_M41* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M37_M38_M39_M40_M41*>(
      &::hyperprotobench::_M34_M37_M38_M39_M40_M41_default_instance_);
}
inline const ::hyperprotobench::M34_M37_M38_M39_M40_M41& M34_M37_M38_M39_M40::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.M40.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M34_M37_M38_M39_M40_M41* M34_M37_M38_M39_M40::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40_M41* M34_M37_M38_M39_M40::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.M40.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M34_M37_M38_M39_M40_M41* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40_M41* M34_M37_M38_M39_M40::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39_M40_M41>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40_M41* M34_M37_M38_M39_M40::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.M40.f2)
  return _internal_mutable_f2();
}
inline void M34_M37_M38_M39_M40::set_allocated_f2(::hyperprotobench::M34_M37_M38_M39_M40_M41* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.M40.f2)
}

// -------------------------------------------------------------------

// M34_M37_M38_M39

// optional string f1 = 1;
inline bool M34_M37_M38_M39::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M37_M38_M39::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M37_M38_M39::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M34_M37_M38_M39::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.f1)
  return _internal_f1();
}
inline void M34_M37_M38_M39::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.f1)
}
inline std::string* M34_M37_M38_M39::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.f1)
  return _internal_mutable_f1();
}
inline const std::string& M34_M37_M38_M39::_internal_f1() const {
  return f1_.Get();
}
inline void M34_M37_M38_M39::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34_M37_M38_M39::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.M37.M38.M39.f1)
}
inline void M34_M37_M38_M39::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.M37.M38.M39.f1)
}
inline void M34_M37_M38_M39::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.M37.M38.M39.f1)
}
inline std::string* M34_M37_M38_M39::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34_M37_M38_M39::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34_M37_M38_M39::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.f1)
}
inline std::string* M34_M37_M38_M39::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.M37.M38.M39.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34_M37_M38_M39::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.M37.M38.M39.f1)
}

// optional .hyperprotobench.M34.M37.M38.M39.M40 f2 = 3;
inline bool M34_M37_M38_M39::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M34_M37_M38_M39::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M37_M38_M39::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M34_M37_M38_M39_M40& M34_M37_M38_M39::_internal_f2() const {
  const ::hyperprotobench::M34_M37_M38_M39_M40* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M37_M38_M39_M40*>(
      &::hyperprotobench::_M34_M37_M38_M39_M40_default_instance_);
}
inline const ::hyperprotobench::M34_M37_M38_M39_M40& M34_M37_M38_M39::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M34_M37_M38_M39_M40* M34_M37_M38_M39::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40* M34_M37_M38_M39::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.M39.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M34_M37_M38_M39_M40* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40* M34_M37_M38_M39::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39_M40>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M34_M37_M38_M39_M40* M34_M37_M38_M39::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.M39.f2)
  return _internal_mutable_f2();
}
inline void M34_M37_M38_M39::set_allocated_f2(::hyperprotobench::M34_M37_M38_M39_M40* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.M39.f2)
}

// optional int32 f3 = 4;
inline bool M34_M37_M38_M39::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M34_M37_M38_M39::has_f3() const {
  return _internal_has_f3();
}
inline void M34_M37_M38_M39::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38_M39::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.M39.f3)
  return _internal_f3();
}
inline void M34_M37_M38_M39::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M34_M37_M38_M39::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.M39.f3)
}

// -------------------------------------------------------------------

// M34_M37_M38

// optional .hyperprotobench.M34.M37.M38.M39 f1 = 1;
inline bool M34_M37_M38::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M34_M37_M38::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M37_M38::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M34_M37_M38_M39& M34_M37_M38::_internal_f1() const {
  const ::hyperprotobench::M34_M37_M38_M39* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M37_M38_M39*>(
      &::hyperprotobench::_M34_M37_M38_M39_default_instance_);
}
inline const ::hyperprotobench::M34_M37_M38_M39& M34_M37_M38::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M34_M37_M38_M39* M34_M37_M38::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39* M34_M37_M38::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.M38.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M34_M37_M38_M39* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M37_M38_M39* M34_M37_M38::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M37_M38_M39>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M34_M37_M38_M39* M34_M37_M38::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.M38.f1)
  return _internal_mutable_f1();
}
inline void M34_M37_M38::set_allocated_f1(::hyperprotobench::M34_M37_M38_M39* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.M38.f1)
}

// optional int32 f2 = 2;
inline bool M34_M37_M38::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M37_M38::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f2)
  return _internal_f2();
}
inline void M34_M37_M38::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M34_M37_M38::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f2)
}

// optional int64 f3 = 3;
inline bool M34_M37_M38::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f3() const {
  return _internal_has_f3();
}
inline void M34_M37_M38::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34_M37_M38::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34_M37_M38::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f3)
  return _internal_f3();
}
inline void M34_M37_M38::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M34_M37_M38::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f3)
}

// optional int32 f4 = 4;
inline bool M34_M37_M38::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f4() const {
  return _internal_has_f4();
}
inline void M34_M37_M38::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f4)
  return _internal_f4();
}
inline void M34_M37_M38::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M34_M37_M38::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f4)
}

// optional int32 f5 = 5;
inline bool M34_M37_M38::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f5() const {
  return _internal_has_f5();
}
inline void M34_M37_M38::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f5)
  return _internal_f5();
}
inline void M34_M37_M38::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M34_M37_M38::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f5)
}

// optional .hyperprotobench.M34.M37.M38.E1 f6 = 9;
inline bool M34_M37_M38::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f6() const {
  return _internal_has_f6();
}
inline void M34_M37_M38::clear_f6() {
  f6_ = 99;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::hyperprotobench::M34_M37_M38_E1 M34_M37_M38::_internal_f6() const {
  return static_cast< ::hyperprotobench::M34_M37_M38_E1 >(f6_);
}
inline ::hyperprotobench::M34_M37_M38_E1 M34_M37_M38::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f6)
  return _internal_f6();
}
inline void M34_M37_M38::_internal_set_f6(::hyperprotobench::M34_M37_M38_E1 value) {
  assert(::hyperprotobench::M34_M37_M38_E1_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  f6_ = value;
}
inline void M34_M37_M38::set_f6(::hyperprotobench::M34_M37_M38_E1 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f6)
}

// optional int32 f7 = 10;
inline bool M34_M37_M38::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f7() const {
  return _internal_has_f7();
}
inline void M34_M37_M38::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M37_M38::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f7)
  return _internal_f7();
}
inline void M34_M37_M38::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M34_M37_M38::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f7)
}

// optional int64 f8 = 11;
inline bool M34_M37_M38::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M34_M37_M38::has_f8() const {
  return _internal_has_f8();
}
inline void M34_M37_M38::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34_M37_M38::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34_M37_M38::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.M38.f8)
  return _internal_f8();
}
inline void M34_M37_M38::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M34_M37_M38::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.M38.f8)
}

// -------------------------------------------------------------------

// M34_M37

// optional float f1 = 1;
inline bool M34_M37::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M37::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M37::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M34_M37::_internal_f1() const {
  return f1_;
}
inline float M34_M37::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.f1)
  return _internal_f1();
}
inline void M34_M37::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M37::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.f1)
}

// optional float f2 = 3;
inline bool M34_M37::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M34_M37::has_f2() const {
  return _internal_has_f2();
}
inline void M34_M37::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float M34_M37::_internal_f2() const {
  return f2_;
}
inline float M34_M37::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.f2)
  return _internal_f2();
}
inline void M34_M37::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M34_M37::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M37.f2)
}

// optional .hyperprotobench.M34.M37.M38 f3 = 4;
inline bool M34_M37::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M34_M37::has_f3() const {
  return _internal_has_f3();
}
inline void M34_M37::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M34_M37_M38& M34_M37::_internal_f3() const {
  const ::hyperprotobench::M34_M37_M38* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M37_M38*>(
      &::hyperprotobench::_M34_M37_M38_default_instance_);
}
inline const ::hyperprotobench::M34_M37_M38& M34_M37::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M37.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M34_M37_M38* M34_M37::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M37_M38* M34_M37::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.M37.f3)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M34_M37_M38* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M37_M38* M34_M37::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M37_M38>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M34_M37_M38* M34_M37::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.M37.f3)
  return _internal_mutable_f3();
}
inline void M34_M37::set_allocated_f3(::hyperprotobench::M34_M37_M38* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.M37.f3)
}

// -------------------------------------------------------------------

// M34_M42

// optional int32 f1 = 1;
inline bool M34_M42::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34_M42::has_f1() const {
  return _internal_has_f1();
}
inline void M34_M42::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M42::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34_M42::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.M42.f1)
  return _internal_f1();
}
inline void M34_M42::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34_M42::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.M42.f1)
}

// -------------------------------------------------------------------

// M34

// optional .hyperprotobench.M34.E1 f1 = 2;
inline bool M34::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M34::has_f1() const {
  return _internal_has_f1();
}
inline void M34::clear_f1() {
  f1_ = 2;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hyperprotobench::M34_E1 M34::_internal_f1() const {
  return static_cast< ::hyperprotobench::M34_E1 >(f1_);
}
inline ::hyperprotobench::M34_E1 M34::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f1)
  return _internal_f1();
}
inline void M34::_internal_set_f1(::hyperprotobench::M34_E1 value) {
  assert(::hyperprotobench::M34_E1_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M34::set_f1(::hyperprotobench::M34_E1 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f1)
}

// optional .hyperprotobench.M34.M35 f2 = 3;
inline bool M34::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M34::has_f2() const {
  return _internal_has_f2();
}
inline void M34::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M34_M35& M34::_internal_f2() const {
  const ::hyperprotobench::M34_M35* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M35*>(
      &::hyperprotobench::_M34_M35_default_instance_);
}
inline const ::hyperprotobench::M34_M35& M34::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M34_M35* M34::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M35* M34::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M34_M35* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M35* M34::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M35>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M34_M35* M34::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.f2)
  return _internal_mutable_f2();
}
inline void M34::set_allocated_f2(::hyperprotobench::M34_M35* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.f2)
}

// optional int32 f3 = 5;
inline bool M34::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M34::has_f3() const {
  return _internal_has_f3();
}
inline void M34::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f3)
  return _internal_f3();
}
inline void M34::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M34::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f3)
}

// optional string f4 = 6;
inline bool M34::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M34::has_f4() const {
  return _internal_has_f4();
}
inline void M34::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M34::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f4)
  return _internal_f4();
}
inline void M34::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f4)
}
inline std::string* M34::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.f4)
  return _internal_mutable_f4();
}
inline const std::string& M34::_internal_f4() const {
  return f4_.Get();
}
inline void M34::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M34::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M34.f4)
}
inline void M34::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M34.f4)
}
inline void M34::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M34.f4)
}
inline std::string* M34::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M34::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M34::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.f4)
}
inline std::string* M34::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M34.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M34::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M34.f4)
}

// optional int32 f5 = 7;
inline bool M34::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M34::has_f5() const {
  return _internal_has_f5();
}
inline void M34::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f5)
  return _internal_f5();
}
inline void M34::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M34::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f5)
}

// optional int32 f6 = 9;
inline bool M34::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M34::has_f6() const {
  return _internal_has_f6();
}
inline void M34::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f6)
  return _internal_f6();
}
inline void M34::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M34::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f6)
}

// optional int32 f7 = 10;
inline bool M34::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M34::has_f7() const {
  return _internal_has_f7();
}
inline void M34::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f7)
  return _internal_f7();
}
inline void M34::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M34::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f7)
}

// optional int64 f8 = 11;
inline bool M34::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M34::has_f8() const {
  return _internal_has_f8();
}
inline void M34::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M34::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f8)
  return _internal_f8();
}
inline void M34::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M34::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f8)
}

// optional .hyperprotobench.M34.E2 f9 = 13;
inline bool M34::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M34::has_f9() const {
  return _internal_has_f9();
}
inline void M34::clear_f9() {
  f9_ = 68;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::hyperprotobench::M34_E2 M34::_internal_f9() const {
  return static_cast< ::hyperprotobench::M34_E2 >(f9_);
}
inline ::hyperprotobench::M34_E2 M34::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f9)
  return _internal_f9();
}
inline void M34::_internal_set_f9(::hyperprotobench::M34_E2 value) {
  assert(::hyperprotobench::M34_E2_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  f9_ = value;
}
inline void M34::set_f9(::hyperprotobench::M34_E2 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f9)
}

// optional .hyperprotobench.M34.M36 f10 = 14;
inline bool M34::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M34::has_f10() const {
  return _internal_has_f10();
}
inline void M34::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::hyperprotobench::M34_M36& M34::_internal_f10() const {
  const ::hyperprotobench::M34_M36* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M36*>(
      &::hyperprotobench::_M34_M36_default_instance_);
}
inline const ::hyperprotobench::M34_M36& M34::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M34_M36* M34::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M36* M34::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.f10)
  _has_bits_[0] &= ~0x00002000u;
  ::hyperprotobench::M34_M36* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M36* M34::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00002000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M36>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M34_M36* M34::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.f10)
  return _internal_mutable_f10();
}
inline void M34::set_allocated_f10(::hyperprotobench::M34_M36* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.f10)
}

// optional .hyperprotobench.M34.M37 f11 = 16;
inline bool M34::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f11_ != nullptr);
  return value;
}
inline bool M34::has_f11() const {
  return _internal_has_f11();
}
inline void M34::clear_f11() {
  if (f11_ != nullptr) f11_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M34_M37& M34::_internal_f11() const {
  const ::hyperprotobench::M34_M37* p = f11_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M37*>(
      &::hyperprotobench::_M34_M37_default_instance_);
}
inline const ::hyperprotobench::M34_M37& M34::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f11)
  return _internal_f11();
}
inline ::hyperprotobench::M34_M37* M34::release_f11() {
  auto temp = unsafe_arena_release_f11();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M37* M34::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.f11)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M34_M37* temp = f11_;
  f11_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M37* M34::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00008000u;
  if (f11_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M37>(GetArenaNoVirtual());
    f11_ = p;
  }
  return f11_;
}
inline ::hyperprotobench::M34_M37* M34::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.f11)
  return _internal_mutable_f11();
}
inline void M34::set_allocated_f11(::hyperprotobench::M34_M37* f11) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f11_;
  }
  if (f11) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f11);
    if (message_arena != submessage_arena) {
      f11 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f11, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f11_ = f11;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.f11)
}

// optional int32 f12 = 17;
inline bool M34::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M34::has_f12() const {
  return _internal_has_f12();
}
inline void M34::clear_f12() {
  f12_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M34::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f12)
  return _internal_f12();
}
inline void M34::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  f12_ = value;
}
inline void M34::set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f12)
}

// optional uint64 f13 = 20;
inline bool M34::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M34::has_f13() const {
  return _internal_has_f13();
}
inline void M34::clear_f13() {
  f13_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34::_internal_f13() const {
  return f13_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M34::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f13)
  return _internal_f13();
}
inline void M34::_internal_set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  f13_ = value;
}
inline void M34::set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M34.f13)
}

// optional .hyperprotobench.M34.M42 f14 = 21;
inline bool M34::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || f14_ != nullptr);
  return value;
}
inline bool M34::has_f14() const {
  return _internal_has_f14();
}
inline void M34::clear_f14() {
  if (f14_ != nullptr) f14_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::hyperprotobench::M34_M42& M34::_internal_f14() const {
  const ::hyperprotobench::M34_M42* p = f14_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M34_M42*>(
      &::hyperprotobench::_M34_M42_default_instance_);
}
inline const ::hyperprotobench::M34_M42& M34::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M34.f14)
  return _internal_f14();
}
inline ::hyperprotobench::M34_M42* M34::release_f14() {
  auto temp = unsafe_arena_release_f14();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M34_M42* M34::unsafe_arena_release_f14() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M34.f14)
  _has_bits_[0] &= ~0x00100000u;
  ::hyperprotobench::M34_M42* temp = f14_;
  f14_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M34_M42* M34::_internal_mutable_f14() {
  _has_bits_[0] |= 0x00100000u;
  if (f14_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M34_M42>(GetArenaNoVirtual());
    f14_ = p;
  }
  return f14_;
}
inline ::hyperprotobench::M34_M42* M34::mutable_f14() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M34.f14)
  return _internal_mutable_f14();
}
inline void M34::set_allocated_f14(::hyperprotobench::M34_M42* f14) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f14_;
  }
  if (f14) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f14);
    if (message_arena != submessage_arena) {
      f14 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f14, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f14_ = f14;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M34.f14)
}

// -------------------------------------------------------------------

// M43_M44_M45

// optional int32 f1 = 2;
inline bool M43_M44_M45::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44_M45::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44_M45::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M45::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M45::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.f1)
  return _internal_f1();
}
inline void M43_M44_M45::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44_M45::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M45.f1)
}

// -------------------------------------------------------------------

// M43_M44_M46

// optional int32 f1 = 1;
inline bool M43_M44_M46::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44_M46::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44_M46::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M46::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M46::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M46.f1)
  return _internal_f1();
}
inline void M43_M44_M46::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44_M46::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M46.f1)
}

// repeated .hyperprotobench.M43.M44.M46.E1 f2 = 2;
inline int M43_M44_M46::_internal_f2_size() const {
  return f2_.size();
}
inline int M43_M44_M46::f2_size() const {
  return _internal_f2_size();
}
inline void M43_M44_M46::clear_f2() {
  f2_.Clear();
}
inline ::hyperprotobench::M43_M44_M46_E1 M43_M44_M46::_internal_f2(int index) const {
  return static_cast< ::hyperprotobench::M43_M44_M46_E1 >(f2_.Get(index));
}
inline ::hyperprotobench::M43_M44_M46_E1 M43_M44_M46::f2(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M46.f2)
  return _internal_f2(index);
}
inline void M43_M44_M46::set_f2(int index, ::hyperprotobench::M43_M44_M46_E1 value) {
  assert(::hyperprotobench::M43_M44_M46_E1_IsValid(value));
  f2_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M46.f2)
}
inline void M43_M44_M46::_internal_add_f2(::hyperprotobench::M43_M44_M46_E1 value) {
  assert(::hyperprotobench::M43_M44_M46_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_.Add(value);
}
inline void M43_M44_M46::add_f2(::hyperprotobench::M43_M44_M46_E1 value) {
  // @@protoc_insertion_point(field_add:hyperprotobench.M43.M44.M46.f2)
  _internal_add_f2(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
M43_M44_M46::f2() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M43.M44.M46.f2)
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
M43_M44_M46::_internal_mutable_f2() {
  return &f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
M43_M44_M46::mutable_f2() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M43.M44.M46.f2)
  return _internal_mutable_f2();
}

// optional int64 f3 = 5;
inline bool M43_M44_M46::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M43_M44_M46::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M44_M46::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43_M44_M46::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43_M44_M46::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M46.f3)
  return _internal_f3();
}
inline void M43_M44_M46::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M43_M44_M46::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M46.f3)
}

// -------------------------------------------------------------------

// M43_M44_M47

// optional int32 f1 = 1;
inline bool M43_M44_M47::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44_M47::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44_M47::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M47::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M47::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M47.f1)
  return _internal_f1();
}
inline void M43_M44_M47::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44_M47::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M47.f1)
}

// -------------------------------------------------------------------

// M43_M44

// optional string f1 = 1;
inline bool M43_M44::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43_M44::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f1)
  return _internal_f1();
}
inline void M43_M44::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.f1)
}
inline std::string* M43_M44::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43_M44::_internal_f1() const {
  return f1_.Get();
}
inline void M43_M44::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M44::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M44.f1)
}
inline void M43_M44::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M44.f1)
}
inline void M43_M44::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M44.f1)
}
inline std::string* M43_M44::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M44::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M44::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f1)
}
inline std::string* M43_M44::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M44.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M44::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f1)
}

// optional .hyperprotobench.M43.M44.M45 f2 = 2;
inline bool M43_M44::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M43_M44::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M44::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M43_M44_M45& M43_M44::_internal_f2() const {
  const ::hyperprotobench::M43_M44_M45* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44_M45*>(
      &::hyperprotobench::_M43_M44_M45_default_instance_);
}
inline const ::hyperprotobench::M43_M44_M45& M43_M44::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M43_M44_M45* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44_M45>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f2)
  return _internal_mutable_f2();
}
inline void M43_M44::set_allocated_f2(::hyperprotobench::M43_M44_M45* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f2)
}

// optional .hyperprotobench.M43.M44.M46 f3 = 10;
inline bool M43_M44::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M43_M44::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M44::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M43_M44_M46& M43_M44::_internal_f3() const {
  const ::hyperprotobench::M43_M44_M46* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44_M46*>(
      &::hyperprotobench::_M43_M44_M46_default_instance_);
}
inline const ::hyperprotobench::M43_M44_M46& M43_M44::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M43_M44_M46* M43_M44::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44_M46* M43_M44::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f3)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M43_M44_M46* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44_M46* M43_M44::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000400u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44_M46>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M43_M44_M46* M43_M44::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f3)
  return _internal_mutable_f3();
}
inline void M43_M44::set_allocated_f3(::hyperprotobench::M43_M44_M46* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f3)
}

// optional .hyperprotobench.M43.M44.M47 f4 = 11;
inline bool M43_M44::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M43_M44::has_f4() const {
  return _internal_has_f4();
}
inline void M43_M44::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::hyperprotobench::M43_M44_M47& M43_M44::_internal_f4() const {
  const ::hyperprotobench::M43_M44_M47* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44_M47*>(
      &::hyperprotobench::_M43_M44_M47_default_instance_);
}
inline const ::hyperprotobench::M43_M44_M47& M43_M44::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M43_M44_M47* M43_M44::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44_M47* M43_M44::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f4)
  _has_bits_[0] &= ~0x00000800u;
  ::hyperprotobench::M43_M44_M47* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44_M47* M43_M44::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000800u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44_M47>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M43_M44_M47* M43_M44::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f4)
  return _internal_mutable_f4();
}
inline void M43_M44::set_allocated_f4(::hyperprotobench::M43_M44_M47* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f4)
}

// -------------------------------------------------------------------

// M43_M48_M49

// optional bytes f1 = 1;
inline bool M43_M48_M49::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M48_M49::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48_M49::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43_M48_M49::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M49.f1)
  return _internal_f1();
}
inline void M43_M48_M49::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M49.f1)
}
inline std::string* M43_M48_M49::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M49.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43_M48_M49::_internal_f1() const {
  return f1_.Get();
}
inline void M43_M48_M49::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48_M49::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.M49.f1)
}
inline void M43_M48_M49::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M49.f1)
}
inline void M43_M48_M49::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M49.f1)
}
inline std::string* M43_M48_M49::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48_M49::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M49.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48_M49::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M49.f1)
}
inline std::string* M43_M48_M49::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.M49.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48_M49::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M49.f1)
}

// optional uint64 f2 = 2;
inline bool M43_M48_M49::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M48_M49::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48_M49::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M49::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M49::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M49.f2)
  return _internal_f2();
}
inline void M43_M48_M49::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43_M48_M49::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M49.f2)
}

// -------------------------------------------------------------------

// M43_M48_M50_M51_M52_M53

// optional float f1 = 1;
inline bool M43_M48_M50_M51_M52_M53::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52_M53::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48_M50_M51_M52_M53::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M43_M48_M50_M51_M52_M53::_internal_f1() const {
  return f1_;
}
inline float M43_M48_M50_M51_M52_M53::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.M53.f1)
  return _internal_f1();
}
inline void M43_M48_M50_M51_M52_M53::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M48_M50_M51_M52_M53::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.M53.f1)
}

// optional uint64 f2 = 2;
inline bool M43_M48_M50_M51_M52_M53::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52_M53::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48_M50_M51_M52_M53::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51_M52_M53::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51_M52_M53::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.M53.f2)
  return _internal_f2();
}
inline void M43_M48_M50_M51_M52_M53::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43_M48_M50_M51_M52_M53::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.M53.f2)
}

// -------------------------------------------------------------------

// M43_M48_M50_M51_M52

// optional bytes f1 = 1;
inline bool M43_M48_M50_M51_M52::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48_M50_M51_M52::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43_M48_M50_M51_M52::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.f1)
  return _internal_f1();
}
inline void M43_M48_M50_M51_M52::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.f1)
}
inline std::string* M43_M48_M50_M51_M52::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.M52.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43_M48_M50_M51_M52::_internal_f1() const {
  return f1_.Get();
}
inline void M43_M48_M50_M51_M52::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48_M50_M51_M52::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.M50.M51.M52.f1)
}
inline void M43_M48_M50_M51_M52::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M50.M51.M52.f1)
}
inline void M43_M48_M50_M51_M52::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M50.M51.M52.f1)
}
inline std::string* M43_M48_M50_M51_M52::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48_M50_M51_M52::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.M52.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48_M50_M51_M52::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.M52.f1)
}
inline std::string* M43_M48_M50_M51_M52::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.M50.M51.M52.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48_M50_M51_M52::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.M52.f1)
}

// optional int32 f2 = 3;
inline bool M43_M48_M50_M51_M52::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48_M50_M51_M52::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51_M52::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51_M52::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.f2)
  return _internal_f2();
}
inline void M43_M48_M50_M51_M52::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M43_M48_M50_M51_M52::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.f2)
}

// optional int32 f3 = 5;
inline bool M43_M48_M50_M51_M52::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M48_M50_M51_M52::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51_M52::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51_M52::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.f3)
  return _internal_f3();
}
inline void M43_M48_M50_M51_M52::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M43_M48_M50_M51_M52::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.f3)
}

// optional float f4 = 6;
inline bool M43_M48_M50_M51_M52::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M43_M48_M50_M51_M52::has_f4() const {
  return _internal_has_f4();
}
inline void M43_M48_M50_M51_M52::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float M43_M48_M50_M51_M52::_internal_f4() const {
  return f4_;
}
inline float M43_M48_M50_M51_M52::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.f4)
  return _internal_f4();
}
inline void M43_M48_M50_M51_M52::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M43_M48_M50_M51_M52::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.M52.f4)
}

// optional .hyperprotobench.M43.M48.M50.M51.M52.M53 f5 = 8;
inline bool M43_M48_M50_M51_M52::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M43_M48_M50_M51_M52::has_f5() const {
  return _internal_has_f5();
}
inline void M43_M48_M50_M51_M52::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M43_M48_M50_M51_M52_M53& M43_M48_M50_M51_M52::_internal_f5() const {
  const ::hyperprotobench::M43_M48_M50_M51_M52_M53* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48_M50_M51_M52_M53*>(
      &::hyperprotobench::_M43_M48_M50_M51_M52_M53_default_instance_);
}
inline const ::hyperprotobench::M43_M48_M50_M51_M52_M53& M43_M48_M50_M51_M52::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.M52.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M43_M48_M50_M51_M52_M53* M43_M48_M50_M51_M52::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52_M53* M43_M48_M50_M51_M52::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.M52.f5)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M43_M48_M50_M51_M52_M53* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52_M53* M43_M48_M50_M51_M52::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51_M52_M53>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52_M53* M43_M48_M50_M51_M52::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.M52.f5)
  return _internal_mutable_f5();
}
inline void M43_M48_M50_M51_M52::set_allocated_f5(::hyperprotobench::M43_M48_M50_M51_M52_M53* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.M52.f5)
}

// -------------------------------------------------------------------

// M43_M48_M50_M51

// optional string f1 = 2;
inline bool M43_M48_M50_M51::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48_M50_M51::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43_M48_M50_M51::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f1)
  return _internal_f1();
}
inline void M43_M48_M50_M51::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f1)
}
inline std::string* M43_M48_M50_M51::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43_M48_M50_M51::_internal_f1() const {
  return f1_.Get();
}
inline void M43_M48_M50_M51::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.M50.M51.f1)
}
inline void M43_M48_M50_M51::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M50.M51.f1)
}
inline void M43_M48_M50_M51::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M50.M51.f1)
}
inline std::string* M43_M48_M50_M51::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48_M50_M51::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.f1)
}
inline std::string* M43_M48_M50_M51::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.M50.M51.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.f1)
}

// optional string f2 = 3;
inline bool M43_M48_M50_M51::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48_M50_M51::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M43_M48_M50_M51::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f2)
  return _internal_f2();
}
inline void M43_M48_M50_M51::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f2)
}
inline std::string* M43_M48_M50_M51::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.f2)
  return _internal_mutable_f2();
}
inline const std::string& M43_M48_M50_M51::_internal_f2() const {
  return f2_.Get();
}
inline void M43_M48_M50_M51::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.M50.M51.f2)
}
inline void M43_M48_M50_M51::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M50.M51.f2)
}
inline void M43_M48_M50_M51::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M50.M51.f2)
}
inline std::string* M43_M48_M50_M51::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48_M50_M51::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.f2)
}
inline std::string* M43_M48_M50_M51::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.M50.M51.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.f2)
}

// optional double f3 = 4;
inline bool M43_M48_M50_M51::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M48_M50_M51::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double M43_M48_M50_M51::_internal_f3() const {
  return f3_;
}
inline double M43_M48_M50_M51::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f3)
  return _internal_f3();
}
inline void M43_M48_M50_M51::_internal_set_f3(double value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M43_M48_M50_M51::set_f3(double value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f3)
}

// optional .hyperprotobench.M43.M48.M50.M51.E1 f4 = 7;
inline bool M43_M48_M50_M51::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f4() const {
  return _internal_has_f4();
}
inline void M43_M48_M50_M51::clear_f4() {
  f4_ = 102;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::hyperprotobench::M43_M48_M50_M51_E1 M43_M48_M50_M51::_internal_f4() const {
  return static_cast< ::hyperprotobench::M43_M48_M50_M51_E1 >(f4_);
}
inline ::hyperprotobench::M43_M48_M50_M51_E1 M43_M48_M50_M51::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f4)
  return _internal_f4();
}
inline void M43_M48_M50_M51::_internal_set_f4(::hyperprotobench::M43_M48_M50_M51_E1 value) {
  assert(::hyperprotobench::M43_M48_M50_M51_E1_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M43_M48_M50_M51::set_f4(::hyperprotobench::M43_M48_M50_M51_E1 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f4)
}

// optional float f5 = 8;
inline bool M43_M48_M50_M51::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f5() const {
  return _internal_has_f5();
}
inline void M43_M48_M50_M51::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M43_M48_M50_M51::_internal_f5() const {
  return f5_;
}
inline float M43_M48_M50_M51::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f5)
  return _internal_f5();
}
inline void M43_M48_M50_M51::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M43_M48_M50_M51::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f5)
}

// optional .hyperprotobench.M43.M48.M50.M51.M52 f6 = 9;
inline bool M43_M48_M50_M51::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M43_M48_M50_M51::has_f6() const {
  return _internal_has_f6();
}
inline void M43_M48_M50_M51::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M43_M48_M50_M51_M52& M43_M48_M50_M51::_internal_f6() const {
  const ::hyperprotobench::M43_M48_M50_M51_M52* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48_M50_M51_M52*>(
      &::hyperprotobench::_M43_M48_M50_M51_M52_default_instance_);
}
inline const ::hyperprotobench::M43_M48_M50_M51_M52& M43_M48_M50_M51::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M43_M48_M50_M51_M52* M43_M48_M50_M51::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52* M43_M48_M50_M51::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.f6)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M43_M48_M50_M51_M52* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52* M43_M48_M50_M51::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51_M52>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M43_M48_M50_M51_M52* M43_M48_M50_M51::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.f6)
  return _internal_mutable_f6();
}
inline void M43_M48_M50_M51::set_allocated_f6(::hyperprotobench::M43_M48_M50_M51_M52* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.f6)
}

// optional uint64 f7 = 12;
inline bool M43_M48_M50_M51::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f7() const {
  return _internal_has_f7();
}
inline void M43_M48_M50_M51::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48_M50_M51::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f7)
  return _internal_f7();
}
inline void M43_M48_M50_M51::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  f7_ = value;
}
inline void M43_M48_M50_M51::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f7)
}

// optional float f8 = 13;
inline bool M43_M48_M50_M51::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f8() const {
  return _internal_has_f8();
}
inline void M43_M48_M50_M51::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float M43_M48_M50_M51::_internal_f8() const {
  return f8_;
}
inline float M43_M48_M50_M51::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f8)
  return _internal_f8();
}
inline void M43_M48_M50_M51::_internal_set_f8(float value) {
  _has_bits_[0] |= 0x00001000u;
  f8_ = value;
}
inline void M43_M48_M50_M51::set_f8(float value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f8)
}

// optional int32 f9 = 14;
inline bool M43_M48_M50_M51::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f9() const {
  return _internal_has_f9();
}
inline void M43_M48_M50_M51::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48_M50_M51::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f9)
  return _internal_f9();
}
inline void M43_M48_M50_M51::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  f9_ = value;
}
inline void M43_M48_M50_M51::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f9)
}

// optional bytes f10 = 18;
inline bool M43_M48_M50_M51::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M43_M48_M50_M51::has_f10() const {
  return _internal_has_f10();
}
inline void M43_M48_M50_M51::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& M43_M48_M50_M51::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f10)
  return _internal_f10();
}
inline void M43_M48_M50_M51::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f10)
}
inline std::string* M43_M48_M50_M51::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.f10)
  return _internal_mutable_f10();
}
inline const std::string& M43_M48_M50_M51::_internal_f10() const {
  return f10_.Get();
}
inline void M43_M48_M50_M51::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.M50.M51.f10)
}
inline void M43_M48_M50_M51::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M50.M51.f10)
}
inline void M43_M48_M50_M51::set_f10(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M50.M51.f10)
}
inline std::string* M43_M48_M50_M51::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00020000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48_M50_M51::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.M51.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.M51.f10)
}
inline std::string* M43_M48_M50_M51::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.M50.M51.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48_M50_M51::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.M50.M51.f10)
}

// repeated bytes f11 = 20;
inline int M43_M48_M50_M51::_internal_f11_size() const {
  return f11_.size();
}
inline int M43_M48_M50_M51::f11_size() const {
  return _internal_f11_size();
}
inline void M43_M48_M50_M51::clear_f11() {
  f11_.Clear();
}
inline std::string* M43_M48_M50_M51::add_f11() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M43.M48.M50.M51.f11)
  return _internal_add_f11();
}
inline const std::string& M43_M48_M50_M51::_internal_f11(int index) const {
  return f11_.Get(index);
}
inline const std::string& M43_M48_M50_M51::f11(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.M51.f11)
  return _internal_f11(index);
}
inline std::string* M43_M48_M50_M51::mutable_f11(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.M51.f11)
  return f11_.Mutable(index);
}
inline void M43_M48_M50_M51::set_f11(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f11)
  f11_.Mutable(index)->assign(value);
}
inline void M43_M48_M50_M51::set_f11(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.M51.f11)
  f11_.Mutable(index)->assign(std::move(value));
}
inline void M43_M48_M50_M51::set_f11(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f11_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.M50.M51.f11)
}
inline void M43_M48_M50_M51::set_f11(int index, const void* value, size_t size) {
  f11_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.M50.M51.f11)
}
inline std::string* M43_M48_M50_M51::_internal_add_f11() {
  _has_bits_[0] |= 0x00080000u;
  return f11_.Add();
}
inline void M43_M48_M50_M51::add_f11(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  f11_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M43.M48.M50.M51.f11)
}
inline void M43_M48_M50_M51::add_f11(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  f11_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M43.M48.M50.M51.f11)
}
inline void M43_M48_M50_M51::add_f11(const char* value) {
  _has_bits_[0] |= 0x00080000u;
  GOOGLE_DCHECK(value != nullptr);
  f11_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M43.M48.M50.M51.f11)
}
inline void M43_M48_M50_M51::add_f11(const void* value, size_t size) {
  _has_bits_[0] |= 0x00080000u;
  f11_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M43.M48.M50.M51.f11)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M43_M48_M50_M51::f11() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M43.M48.M50.M51.f11)
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M43_M48_M50_M51::mutable_f11() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M43.M48.M50.M51.f11)
  return &f11_;
}

// -------------------------------------------------------------------

// M43_M48_M50

// optional .hyperprotobench.M43.M48.M50.M51 f1 = 2;
inline bool M43_M48_M50::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M43_M48_M50::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48_M50::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M43_M48_M50_M51& M43_M48_M50::_internal_f1() const {
  const ::hyperprotobench::M43_M48_M50_M51* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48_M50_M51*>(
      &::hyperprotobench::_M43_M48_M50_M51_default_instance_);
}
inline const ::hyperprotobench::M43_M48_M50_M51& M43_M48_M50::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M43_M48_M50_M51* M43_M48_M50::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51* M43_M48_M50::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.M50.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M43_M48_M50_M51* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48_M50_M51* M43_M48_M50::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48_M50_M51>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M43_M48_M50_M51* M43_M48_M50::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.M50.f1)
  return _internal_mutable_f1();
}
inline void M43_M48_M50::set_allocated_f1(::hyperprotobench::M43_M48_M50_M51* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.M50.f1)
}

// optional int64 f2 = 3;
inline bool M43_M48_M50::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M48_M50::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48_M50::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43_M48_M50::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43_M48_M50::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.M50.f2)
  return _internal_f2();
}
inline void M43_M48_M50::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43_M48_M50::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.M50.f2)
}

// -------------------------------------------------------------------

// M43_M48

// optional .hyperprotobench.M43.M48.M49 f1 = 2;
inline bool M43_M48::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M43_M48::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M48::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M43_M48_M49& M43_M48::_internal_f1() const {
  const ::hyperprotobench::M43_M48_M49* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48_M49*>(
      &::hyperprotobench::_M43_M48_M49_default_instance_);
}
inline const ::hyperprotobench::M43_M48_M49& M43_M48::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M43_M48_M49* M43_M48::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48_M49* M43_M48::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M43_M48_M49* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48_M49* M43_M48::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48_M49>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M43_M48_M49* M43_M48::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.f1)
  return _internal_mutable_f1();
}
inline void M43_M48::set_allocated_f1(::hyperprotobench::M43_M48_M49* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.f1)
}

// optional .hyperprotobench.M43.M48.E1 f2 = 3;
inline bool M43_M48::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M48::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M48::clear_f2() {
  f2_ = 5;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M43_M48_E1 M43_M48::_internal_f2() const {
  return static_cast< ::hyperprotobench::M43_M48_E1 >(f2_);
}
inline ::hyperprotobench::M43_M48_E1 M43_M48::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f2)
  return _internal_f2();
}
inline void M43_M48::_internal_set_f2(::hyperprotobench::M43_M48_E1 value) {
  assert(::hyperprotobench::M43_M48_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43_M48::set_f2(::hyperprotobench::M43_M48_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f2)
}

// optional int32 f3 = 13;
inline bool M43_M48::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M43_M48::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M48::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M48::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f3)
  return _internal_f3();
}
inline void M43_M48::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f3_ = value;
}
inline void M43_M48::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f3)
}

// optional float f4 = 16;
inline bool M43_M48::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M43_M48::has_f4() const {
  return _internal_has_f4();
}
inline void M43_M48::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float M43_M48::_internal_f4() const {
  return f4_;
}
inline float M43_M48::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f4)
  return _internal_f4();
}
inline void M43_M48::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00008000u;
  f4_ = value;
}
inline void M43_M48::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f4)
}

// optional float f5 = 19;
inline bool M43_M48::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M43_M48::has_f5() const {
  return _internal_has_f5();
}
inline void M43_M48::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float M43_M48::_internal_f5() const {
  return f5_;
}
inline float M43_M48::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f5)
  return _internal_f5();
}
inline void M43_M48::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00040000u;
  f5_ = value;
}
inline void M43_M48::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f5)
}

// optional string f6 = 21;
inline bool M43_M48::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M43_M48::has_f6() const {
  return _internal_has_f6();
}
inline void M43_M48::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& M43_M48::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f6)
  return _internal_f6();
}
inline void M43_M48::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f6)
}
inline std::string* M43_M48::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.f6)
  return _internal_mutable_f6();
}
inline const std::string& M43_M48::_internal_f6() const {
  return f6_.Get();
}
inline void M43_M48::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.f6)
}
inline void M43_M48::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.f6)
}
inline void M43_M48::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.f6)
}
inline std::string* M43_M48::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00100000u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.f6)
}
inline std::string* M43_M48::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.f6)
}

// optional fixed64 f7 = 22;
inline bool M43_M48::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool M43_M48::has_f7() const {
  return _internal_has_f7();
}
inline void M43_M48::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43_M48::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f7)
  return _internal_f7();
}
inline void M43_M48::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  f7_ = value;
}
inline void M43_M48::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f7)
}

// optional string f8 = 23;
inline bool M43_M48::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M43_M48::has_f8() const {
  return _internal_has_f8();
}
inline void M43_M48::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& M43_M48::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f8)
  return _internal_f8();
}
inline void M43_M48::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f8)
}
inline std::string* M43_M48::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.f8)
  return _internal_mutable_f8();
}
inline const std::string& M43_M48::_internal_f8() const {
  return f8_.Get();
}
inline void M43_M48::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M48::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00400000u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M48.f8)
}
inline void M43_M48::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00400000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M48.f8)
}
inline void M43_M48::set_f8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00400000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M48.f8)
}
inline std::string* M43_M48::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00400000u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M48::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M48::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.f8)
}
inline std::string* M43_M48::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M48.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00400000u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M48::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M48.f8)
}

// optional double f9 = 24;
inline bool M43_M48::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool M43_M48::has_f9() const {
  return _internal_has_f9();
}
inline void M43_M48::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double M43_M48::_internal_f9() const {
  return f9_;
}
inline double M43_M48::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f9)
  return _internal_f9();
}
inline void M43_M48::_internal_set_f9(double value) {
  _has_bits_[0] |= 0x00800000u;
  f9_ = value;
}
inline void M43_M48::set_f9(double value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M48.f9)
}

// optional .hyperprotobench.M43.M48.M50 f10 = 25;
inline bool M43_M48::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M43_M48::has_f10() const {
  return _internal_has_f10();
}
inline void M43_M48::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::hyperprotobench::M43_M48_M50& M43_M48::_internal_f10() const {
  const ::hyperprotobench::M43_M48_M50* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48_M50*>(
      &::hyperprotobench::_M43_M48_M50_default_instance_);
}
inline const ::hyperprotobench::M43_M48_M50& M43_M48::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M48.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M43_M48_M50* M43_M48::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48_M50* M43_M48::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M48.f10)
  _has_bits_[0] &= ~0x01000000u;
  ::hyperprotobench::M43_M48_M50* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48_M50* M43_M48::_internal_mutable_f10() {
  _has_bits_[0] |= 0x01000000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48_M50>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M43_M48_M50* M43_M48::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M48.f10)
  return _internal_mutable_f10();
}
inline void M43_M48::set_allocated_f10(::hyperprotobench::M43_M48_M50* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M48.f10)
}

// -------------------------------------------------------------------

// M43

// optional string f1 = 2;
inline bool M43::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43::has_f1() const {
  return _internal_has_f1();
}
inline void M43::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f1)
  return _internal_f1();
}
inline void M43::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f1)
}
inline std::string* M43::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43::_internal_f1() const {
  return f1_.Get();
}
inline void M43::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.f1)
}
inline void M43::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.f1)
}
inline void M43::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.f1)
}
inline std::string* M43::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.f1)
}
inline std::string* M43::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.f1)
}

// optional float f2 = 3;
inline bool M43::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43::has_f2() const {
  return _internal_has_f2();
}
inline void M43::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M43::_internal_f2() const {
  return f2_;
}
inline float M43::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f2)
  return _internal_f2();
}
inline void M43::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f2)
}

// optional .hyperprotobench.M43.M44 f3 = 4;
inline bool M43::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M43::has_f3() const {
  return _internal_has_f3();
}
inline void M43::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M43_M44& M43::_internal_f3() const {
  const ::hyperprotobench::M43_M44* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44*>(
      &::hyperprotobench::_M43_M44_default_instance_);
}
inline const ::hyperprotobench::M43_M44& M43::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M43_M44* M43::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44* M43::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M43_M44* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44* M43::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M43_M44* M43::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.f3)
  return _internal_mutable_f3();
}
inline void M43::set_allocated_f3(::hyperprotobench::M43_M44* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.f3)
}

// optional int32 f4 = 6;
inline bool M43::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M43::has_f4() const {
  return _internal_has_f4();
}
inline void M43::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f4)
  return _internal_f4();
}
inline void M43::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M43::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f4)
}

// optional int64 f5 = 8;
inline bool M43::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M43::has_f5() const {
  return _internal_has_f5();
}
inline void M43::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f5)
  return _internal_f5();
}
inline void M43::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M43::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f5)
}

// optional int32 f6 = 10;
inline bool M43::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M43::has_f6() const {
  return _internal_has_f6();
}
inline void M43::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f6)
  return _internal_f6();
}
inline void M43::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f6_ = value;
}
inline void M43::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f6)
}

// optional int64 f7 = 11;
inline bool M43::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M43::has_f7() const {
  return _internal_has_f7();
}
inline void M43::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M43::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f7)
  return _internal_f7();
}
inline void M43::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M43::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f7)
}

// optional int32 f8 = 18;
inline bool M43::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M43::has_f8() const {
  return _internal_has_f8();
}
inline void M43::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f8)
  return _internal_f8();
}
inline void M43::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  f8_ = value;
}
inline void M43::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f8)
}

// optional int32 f9 = 19;
inline bool M43::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M43::has_f9() const {
  return _internal_has_f9();
}
inline void M43::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f9)
  return _internal_f9();
}
inline void M43::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  f9_ = value;
}
inline void M43::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f9)
}

// optional int32 f10 = 21;
inline bool M43::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M43::has_f10() const {
  return _internal_has_f10();
}
inline void M43::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f10)
  return _internal_f10();
}
inline void M43::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  f10_ = value;
}
inline void M43::set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f10)
}

// optional uint64 f11 = 26;
inline bool M43::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool M43::has_f11() const {
  return _internal_has_f11();
}
inline void M43::clear_f11() {
  f11_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f11)
  return _internal_f11();
}
inline void M43::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x02000000u;
  f11_ = value;
}
inline void M43::set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f11)
}

// optional .hyperprotobench.M43.M48 f12 = 27;
inline bool M43::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M43::has_f12() const {
  return _internal_has_f12();
}
inline void M43::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::hyperprotobench::M43_M48& M43::_internal_f12() const {
  const ::hyperprotobench::M43_M48* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M48*>(
      &::hyperprotobench::_M43_M48_default_instance_);
}
inline const ::hyperprotobench::M43_M48& M43::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M43_M48* M43::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M48* M43::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.f12)
  _has_bits_[0] &= ~0x04000000u;
  ::hyperprotobench::M43_M48* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M48* M43::_internal_mutable_f12() {
  _has_bits_[0] |= 0x04000000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M48>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M43_M48* M43::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.f12)
  return _internal_mutable_f12();
}
inline void M43::set_allocated_f12(::hyperprotobench::M43_M48* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.f12)
}

// -------------------------------------------------------------------

// M54_M55_M56_M57_M58

// optional int32 f1 = 1;
inline bool M54_M55_M56_M57_M58::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M55_M56_M57_M58::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M55_M56_M57_M58::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.M57.M58.f1)
  return _internal_f1();
}
inline void M54_M55_M56_M57_M58::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M55_M56_M57_M58::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.M56.M57.M58.f1)
}

// optional int32 f2 = 2;
inline bool M54_M55_M56_M57_M58::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M54_M55_M56_M57_M58::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M55_M56_M57_M58::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.M57.M58.f2)
  return _internal_f2();
}
inline void M54_M55_M56_M57_M58::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M54_M55_M56_M57_M58::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.M56.M57.M58.f2)
}

// optional int32 f3 = 3;
inline bool M54_M55_M56_M57_M58::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M54_M55_M56_M57_M58::has_f3() const {
  return _internal_has_f3();
}
inline void M54_M55_M56_M57_M58::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56_M57_M58::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.M57.M58.f3)
  return _internal_f3();
}
inline void M54_M55_M56_M57_M58::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M54_M55_M56_M57_M58::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.M56.M57.M58.f3)
}

// -------------------------------------------------------------------

// M54_M55_M56_M57

// optional .hyperprotobench.M54.M55.M56.M57.M58 f1 = 1;
inline bool M54_M55_M56_M57::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M54_M55_M56_M57::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M55_M56_M57::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M54_M55_M56_M57_M58& M54_M55_M56_M57::_internal_f1() const {
  const ::hyperprotobench::M54_M55_M56_M57_M58* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M55_M56_M57_M58*>(
      &::hyperprotobench::_M54_M55_M56_M57_M58_default_instance_);
}
inline const ::hyperprotobench::M54_M55_M56_M57_M58& M54_M55_M56_M57::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.M57.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M54_M55_M56_M57_M58* M54_M55_M56_M57::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M55_M56_M57_M58* M54_M55_M56_M57::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M55.M56.M57.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M54_M55_M56_M57_M58* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M55_M56_M57_M58* M54_M55_M56_M57::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M55_M56_M57_M58>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M54_M55_M56_M57_M58* M54_M55_M56_M57::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M55.M56.M57.f1)
  return _internal_mutable_f1();
}
inline void M54_M55_M56_M57::set_allocated_f1(::hyperprotobench::M54_M55_M56_M57_M58* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M55.M56.M57.f1)
}

// optional string f2 = 2;
inline bool M54_M55_M56_M57::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M54_M55_M56_M57::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M55_M56_M57::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M54_M55_M56_M57::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.M57.f2)
  return _internal_f2();
}
inline void M54_M55_M56_M57::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.M56.M57.f2)
}
inline std::string* M54_M55_M56_M57::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M55.M56.M57.f2)
  return _internal_mutable_f2();
}
inline const std::string& M54_M55_M56_M57::_internal_f2() const {
  return f2_.Get();
}
inline void M54_M55_M56_M57::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M54_M55_M56_M57::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M54.M55.M56.M57.f2)
}
inline void M54_M55_M56_M57::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.M55.M56.M57.f2)
}
inline void M54_M55_M56_M57::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.M55.M56.M57.f2)
}
inline std::string* M54_M55_M56_M57::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M54_M55_M56_M57::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M55.M56.M57.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M54_M55_M56_M57::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M55.M56.M57.f2)
}
inline std::string* M54_M55_M56_M57::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M54.M55.M56.M57.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M54_M55_M56_M57::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M55.M56.M57.f2)
}

// -------------------------------------------------------------------

// M54_M55_M56

// optional int32 f1 = 1;
inline bool M54_M55_M56::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M55_M56::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M55_M56::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M55_M56::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.f1)
  return _internal_f1();
}
inline void M54_M55_M56::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M55_M56::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.M56.f1)
}

// optional .hyperprotobench.M54.M55.M56.M57 f2 = 4;
inline bool M54_M55_M56::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M54_M55_M56::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M55_M56::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M54_M55_M56_M57& M54_M55_M56::_internal_f2() const {
  const ::hyperprotobench::M54_M55_M56_M57* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M55_M56_M57*>(
      &::hyperprotobench::_M54_M55_M56_M57_default_instance_);
}
inline const ::hyperprotobench::M54_M55_M56_M57& M54_M55_M56::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.M56.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M54_M55_M56_M57* M54_M55_M56::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M55_M56_M57* M54_M55_M56::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M55.M56.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M54_M55_M56_M57* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M55_M56_M57* M54_M55_M56::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M55_M56_M57>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M54_M55_M56_M57* M54_M55_M56::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M55.M56.f2)
  return _internal_mutable_f2();
}
inline void M54_M55_M56::set_allocated_f2(::hyperprotobench::M54_M55_M56_M57* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M55.M56.f2)
}

// -------------------------------------------------------------------

// M54_M55

// optional float f1 = 9;
inline bool M54_M55::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M55::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M55::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M54_M55::_internal_f1() const {
  return f1_;
}
inline float M54_M55::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.f1)
  return _internal_f1();
}
inline void M54_M55::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M55::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.f1)
}

// optional .hyperprotobench.M54.M55.E1 f2 = 10;
inline bool M54_M55::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M54_M55::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M55::clear_f2() {
  f2_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M54_M55_E1 M54_M55::_internal_f2() const {
  return static_cast< ::hyperprotobench::M54_M55_E1 >(f2_);
}
inline ::hyperprotobench::M54_M55_E1 M54_M55::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.f2)
  return _internal_f2();
}
inline void M54_M55::_internal_set_f2(::hyperprotobench::M54_M55_E1 value) {
  assert(::hyperprotobench::M54_M55_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M54_M55::set_f2(::hyperprotobench::M54_M55_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M55.f2)
}

// optional .hyperprotobench.M54.M55.M56 f3 = 14;
inline bool M54_M55::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M54_M55::has_f3() const {
  return _internal_has_f3();
}
inline void M54_M55::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::hyperprotobench::M54_M55_M56& M54_M55::_internal_f3() const {
  const ::hyperprotobench::M54_M55_M56* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M55_M56*>(
      &::hyperprotobench::_M54_M55_M56_default_instance_);
}
inline const ::hyperprotobench::M54_M55_M56& M54_M55::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M55.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M54_M55_M56* M54_M55::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M55_M56* M54_M55::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M55.f3)
  _has_bits_[0] &= ~0x00000040u;
  ::hyperprotobench::M54_M55_M56* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M55_M56* M54_M55::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000040u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M55_M56>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M54_M55_M56* M54_M55::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M55.f3)
  return _internal_mutable_f3();
}
inline void M54_M55::set_allocated_f3(::hyperprotobench::M54_M55_M56* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M55.f3)
}

// -------------------------------------------------------------------

// M54_M59_M60

// optional string f1 = 1;
inline bool M54_M59_M60::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M59_M60::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M59_M60::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M54_M59_M60::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.M60.f1)
  return _internal_f1();
}
inline void M54_M59_M60::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M59.M60.f1)
}
inline std::string* M54_M59_M60::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M59.M60.f1)
  return _internal_mutable_f1();
}
inline const std::string& M54_M59_M60::_internal_f1() const {
  return f1_.Get();
}
inline void M54_M59_M60::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M54_M59_M60::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M54.M59.M60.f1)
}
inline void M54_M59_M60::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.M59.M60.f1)
}
inline void M54_M59_M60::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.M59.M60.f1)
}
inline std::string* M54_M59_M60::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M54_M59_M60::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M59.M60.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M54_M59_M60::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M59.M60.f1)
}
inline std::string* M54_M59_M60::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M54.M59.M60.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M54_M59_M60::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M59.M60.f1)
}

// optional int32 f2 = 2;
inline bool M54_M59_M60::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M54_M59_M60::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M59_M60::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M59_M60::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M59_M60::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.M60.f2)
  return _internal_f2();
}
inline void M54_M59_M60::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M54_M59_M60::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M59.M60.f2)
}

// optional string f3 = 3;
inline bool M54_M59_M60::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M54_M59_M60::has_f3() const {
  return _internal_has_f3();
}
inline void M54_M59_M60::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M54_M59_M60::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.M60.f3)
  return _internal_f3();
}
inline void M54_M59_M60::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M59.M60.f3)
}
inline std::string* M54_M59_M60::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M59.M60.f3)
  return _internal_mutable_f3();
}
inline const std::string& M54_M59_M60::_internal_f3() const {
  return f3_.Get();
}
inline void M54_M59_M60::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M54_M59_M60::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M54.M59.M60.f3)
}
inline void M54_M59_M60::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.M59.M60.f3)
}
inline void M54_M59_M60::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.M59.M60.f3)
}
inline std::string* M54_M59_M60::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M54_M59_M60::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M59.M60.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M54_M59_M60::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M59.M60.f3)
}
inline std::string* M54_M59_M60::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M54.M59.M60.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M54_M59_M60::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.M59.M60.f3)
}

// optional int32 f4 = 4;
inline bool M54_M59_M60::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M54_M59_M60::has_f4() const {
  return _internal_has_f4();
}
inline void M54_M59_M60::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M59_M60::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M59_M60::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.M60.f4)
  return _internal_f4();
}
inline void M54_M59_M60::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M54_M59_M60::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M59.M60.f4)
}

// -------------------------------------------------------------------

// M54_M59

// optional .hyperprotobench.M54.M59.M60 f1 = 1;
inline bool M54_M59::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M54_M59::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M59::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M54_M59_M60& M54_M59::_internal_f1() const {
  const ::hyperprotobench::M54_M59_M60* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M59_M60*>(
      &::hyperprotobench::_M54_M59_M60_default_instance_);
}
inline const ::hyperprotobench::M54_M59_M60& M54_M59::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M54_M59_M60* M54_M59::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M59_M60* M54_M59::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M59.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M54_M59_M60* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M59_M60* M54_M59::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M59_M60>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M54_M59_M60* M54_M59::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M59.f1)
  return _internal_mutable_f1();
}
inline void M54_M59::set_allocated_f1(::hyperprotobench::M54_M59_M60* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M59.f1)
}

// optional uint64 f2 = 2;
inline bool M54_M59::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M54_M59::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M59::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M54_M59::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M54_M59::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M59.f2)
  return _internal_f2();
}
inline void M54_M59::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M54_M59::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M59.f2)
}

// -------------------------------------------------------------------

// M54_M61

// optional int32 f1 = 2;
inline bool M54_M61::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M61::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M61::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M61::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54_M61::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M61.f1)
  return _internal_f1();
}
inline void M54_M61::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M61::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M61.f1)
}

// repeated .hyperprotobench.M54.M61.E1 f2 = 5;
inline int M54_M61::_internal_f2_size() const {
  return f2_.size();
}
inline int M54_M61::f2_size() const {
  return _internal_f2_size();
}
inline void M54_M61::clear_f2() {
  f2_.Clear();
}
inline ::hyperprotobench::M54_M61_E1 M54_M61::_internal_f2(int index) const {
  return static_cast< ::hyperprotobench::M54_M61_E1 >(f2_.Get(index));
}
inline ::hyperprotobench::M54_M61_E1 M54_M61::f2(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M61.f2)
  return _internal_f2(index);
}
inline void M54_M61::set_f2(int index, ::hyperprotobench::M54_M61_E1 value) {
  assert(::hyperprotobench::M54_M61_E1_IsValid(value));
  f2_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M61.f2)
}
inline void M54_M61::_internal_add_f2(::hyperprotobench::M54_M61_E1 value) {
  assert(::hyperprotobench::M54_M61_E1_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  f2_.Add(value);
}
inline void M54_M61::add_f2(::hyperprotobench::M54_M61_E1 value) {
  // @@protoc_insertion_point(field_add:hyperprotobench.M54.M61.f2)
  _internal_add_f2(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
M54_M61::f2() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M54.M61.f2)
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
M54_M61::_internal_mutable_f2() {
  return &f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
M54_M61::mutable_f2() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M54.M61.f2)
  return _internal_mutable_f2();
}

// -------------------------------------------------------------------

// M54_M62_M63

// optional uint32 f1 = 1;
inline bool M54_M62_M63::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M62_M63::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M62_M63::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M54_M62_M63::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M54_M62_M63::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M62.M63.f1)
  return _internal_f1();
}
inline void M54_M62_M63::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M62_M63::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M62.M63.f1)
}

// -------------------------------------------------------------------

// M54_M62

// optional uint64 f1 = 1;
inline bool M54_M62::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M54_M62::has_f1() const {
  return _internal_has_f1();
}
inline void M54_M62::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M54_M62::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M54_M62::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M62.f1)
  return _internal_f1();
}
inline void M54_M62::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M54_M62::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.M62.f1)
}

// optional .hyperprotobench.M54.M62.M63 f2 = 2;
inline bool M54_M62::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M54_M62::has_f2() const {
  return _internal_has_f2();
}
inline void M54_M62::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M54_M62_M63& M54_M62::_internal_f2() const {
  const ::hyperprotobench::M54_M62_M63* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M62_M63*>(
      &::hyperprotobench::_M54_M62_M63_default_instance_);
}
inline const ::hyperprotobench::M54_M62_M63& M54_M62::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.M62.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M54_M62_M63* M54_M62::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M62_M63* M54_M62::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.M62.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M54_M62_M63* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M62_M63* M54_M62::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M62_M63>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M54_M62_M63* M54_M62::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.M62.f2)
  return _internal_mutable_f2();
}
inline void M54_M62::set_allocated_f2(::hyperprotobench::M54_M62_M63* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.M62.f2)
}

// -------------------------------------------------------------------

// M54

// repeated string f1 = 6;
inline int M54::_internal_f1_size() const {
  return f1_.size();
}
inline int M54::f1_size() const {
  return _internal_f1_size();
}
inline void M54::clear_f1() {
  f1_.Clear();
}
inline std::string* M54::add_f1() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M54.f1)
  return _internal_add_f1();
}
inline const std::string& M54::_internal_f1(int index) const {
  return f1_.Get(index);
}
inline const std::string& M54::f1(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f1)
  return _internal_f1(index);
}
inline std::string* M54::mutable_f1(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f1)
  return f1_.Mutable(index);
}
inline void M54::set_f1(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f1)
  f1_.Mutable(index)->assign(value);
}
inline void M54::set_f1(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f1)
  f1_.Mutable(index)->assign(std::move(value));
}
inline void M54::set_f1(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f1_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.f1)
}
inline void M54::set_f1(int index, const char* value, size_t size) {
  f1_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.f1)
}
inline std::string* M54::_internal_add_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Add();
}
inline void M54::add_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M54.f1)
}
inline void M54::add_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M54.f1)
}
inline void M54::add_f1(const char* value) {
  _has_bits_[0] |= 0x00000002u;
  GOOGLE_DCHECK(value != nullptr);
  f1_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M54.f1)
}
inline void M54::add_f1(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M54.f1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M54::f1() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M54.f1)
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M54::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M54.f1)
  return &f1_;
}

// optional .hyperprotobench.M54.M55 f2 = 8;
inline bool M54::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M54::has_f2() const {
  return _internal_has_f2();
}
inline void M54::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M54_M55& M54::_internal_f2() const {
  const ::hyperprotobench::M54_M55* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M55*>(
      &::hyperprotobench::_M54_M55_default_instance_);
}
inline const ::hyperprotobench::M54_M55& M54::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M54_M55* M54::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M55* M54::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M54_M55* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M55* M54::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M55>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M54_M55* M54::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f2)
  return _internal_mutable_f2();
}
inline void M54::set_allocated_f2(::hyperprotobench::M54_M55* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f2)
}

// optional bytes f3 = 10;
inline bool M54::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M54::has_f3() const {
  return _internal_has_f3();
}
inline void M54::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M54::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f3)
  return _internal_f3();
}
inline void M54::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f3)
}
inline std::string* M54::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f3)
  return _internal_mutable_f3();
}
inline const std::string& M54::_internal_f3() const {
  return f3_.Get();
}
inline void M54::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M54::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M54.f3)
}
inline void M54::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.f3)
}
inline void M54::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.f3)
}
inline std::string* M54::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000020u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M54::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M54::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f3)
}
inline std::string* M54::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M54.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M54::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f3)
}

// optional .hyperprotobench.M54.M59 f4 = 20;
inline bool M54::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M54::has_f4() const {
  return _internal_has_f4();
}
inline void M54::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M54_M59& M54::_internal_f4() const {
  const ::hyperprotobench::M54_M59* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M59*>(
      &::hyperprotobench::_M54_M59_default_instance_);
}
inline const ::hyperprotobench::M54_M59& M54::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M54_M59* M54::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M59* M54::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f4)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M54_M59* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M59* M54::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00008000u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M59>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M54_M59* M54::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f4)
  return _internal_mutable_f4();
}
inline void M54::set_allocated_f4(::hyperprotobench::M54_M59* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f4)
}

// optional string f5 = 21;
inline bool M54::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M54::has_f5() const {
  return _internal_has_f5();
}
inline void M54::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& M54::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f5)
  return _internal_f5();
}
inline void M54::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f5)
}
inline std::string* M54::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f5)
  return _internal_mutable_f5();
}
inline const std::string& M54::_internal_f5() const {
  return f5_.Get();
}
inline void M54::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M54::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M54.f5)
}
inline void M54::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.f5)
}
inline void M54::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.f5)
}
inline std::string* M54::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00010000u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M54::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M54::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f5)
}
inline std::string* M54::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M54.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M54::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M54.f5)
}

// repeated string f6 = 23;
inline int M54::_internal_f6_size() const {
  return f6_.size();
}
inline int M54::f6_size() const {
  return _internal_f6_size();
}
inline void M54::clear_f6() {
  f6_.Clear();
}
inline std::string* M54::add_f6() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M54.f6)
  return _internal_add_f6();
}
inline const std::string& M54::_internal_f6(int index) const {
  return f6_.Get(index);
}
inline const std::string& M54::f6(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f6)
  return _internal_f6(index);
}
inline std::string* M54::mutable_f6(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f6)
  return f6_.Mutable(index);
}
inline void M54::set_f6(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f6)
  f6_.Mutable(index)->assign(value);
}
inline void M54::set_f6(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f6)
  f6_.Mutable(index)->assign(std::move(value));
}
inline void M54::set_f6(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f6_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M54.f6)
}
inline void M54::set_f6(int index, const char* value, size_t size) {
  f6_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M54.f6)
}
inline std::string* M54::_internal_add_f6() {
  _has_bits_[0] |= 0x00040000u;
  return f6_.Add();
}
inline void M54::add_f6(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  f6_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M54.f6)
}
inline void M54::add_f6(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  f6_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M54.f6)
}
inline void M54::add_f6(const char* value) {
  _has_bits_[0] |= 0x00040000u;
  GOOGLE_DCHECK(value != nullptr);
  f6_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M54.f6)
}
inline void M54::add_f6(const char* value, size_t size) {
  _has_bits_[0] |= 0x00040000u;
  f6_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M54.f6)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M54::f6() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M54.f6)
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M54::mutable_f6() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M54.f6)
  return &f6_;
}

// optional .hyperprotobench.M54.M61 f7 = 25;
inline bool M54::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M54::has_f7() const {
  return _internal_has_f7();
}
inline void M54::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::hyperprotobench::M54_M61& M54::_internal_f7() const {
  const ::hyperprotobench::M54_M61* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M61*>(
      &::hyperprotobench::_M54_M61_default_instance_);
}
inline const ::hyperprotobench::M54_M61& M54::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M54_M61* M54::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M61* M54::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f7)
  _has_bits_[0] &= ~0x00100000u;
  ::hyperprotobench::M54_M61* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M61* M54::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00100000u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M61>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M54_M61* M54::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f7)
  return _internal_mutable_f7();
}
inline void M54::set_allocated_f7(::hyperprotobench::M54_M61* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f7)
}

// optional int32 f8 = 26;
inline bool M54::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool M54::has_f8() const {
  return _internal_has_f8();
}
inline void M54::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M54::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f8)
  return _internal_f8();
}
inline void M54::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00200000u;
  f8_ = value;
}
inline void M54::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M54.f8)
}

// optional .hyperprotobench.M54.M62 f9 = 27;
inline bool M54::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M54::has_f9() const {
  return _internal_has_f9();
}
inline void M54::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::hyperprotobench::M54_M62& M54::_internal_f9() const {
  const ::hyperprotobench::M54_M62* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M54_M62*>(
      &::hyperprotobench::_M54_M62_default_instance_);
}
inline const ::hyperprotobench::M54_M62& M54::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M54.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M54_M62* M54::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M54_M62* M54::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M54.f9)
  _has_bits_[0] &= ~0x00400000u;
  ::hyperprotobench::M54_M62* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M54_M62* M54::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00400000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M54_M62>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M54_M62* M54::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M54.f9)
  return _internal_mutable_f9();
}
inline void M54::set_allocated_f9(::hyperprotobench::M54_M62* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M54.f9)
}

// -------------------------------------------------------------------

// M64_M65

// optional int32 f1 = 1;
inline bool M64_M65::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M65::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M65::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M65::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M65::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M65.f1)
  return _internal_f1();
}
inline void M64_M65::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64_M65::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M65.f1)
}

// -------------------------------------------------------------------

// M64_M66

// optional int32 f1 = 1;
inline bool M64_M66::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M66::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M66::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M66::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M66::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M66.f1)
  return _internal_f1();
}
inline void M64_M66::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64_M66::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M66.f1)
}

// -------------------------------------------------------------------

// M64_M67

// optional float f1 = 2;
inline bool M64_M67::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M67::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M67::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M64_M67::_internal_f1() const {
  return f1_;
}
inline float M64_M67::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M67.f1)
  return _internal_f1();
}
inline void M64_M67::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64_M67::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M67.f1)
}

// -------------------------------------------------------------------

// M64_M68_M69_M70_M71

// optional string f1 = 2;
inline bool M64_M68_M69_M70_M71::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M68_M69_M70_M71::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M68_M69_M70_M71::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M64_M68_M69_M70_M71::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.M70.M71.f1)
  return _internal_f1();
}
inline void M64_M68_M69_M70_M71::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.M70.M71.f1)
}
inline std::string* M64_M68_M69_M70_M71::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.M69.M70.M71.f1)
  return _internal_mutable_f1();
}
inline const std::string& M64_M68_M69_M70_M71::_internal_f1() const {
  return f1_.Get();
}
inline void M64_M68_M69_M70_M71::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M64_M68_M69_M70_M71::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M64.M68.M69.M70.M71.f1)
}
inline void M64_M68_M69_M70_M71::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M64.M68.M69.M70.M71.f1)
}
inline void M64_M68_M69_M70_M71::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M64.M68.M69.M70.M71.f1)
}
inline std::string* M64_M68_M69_M70_M71::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M64_M68_M69_M70_M71::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.M69.M70.M71.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M64_M68_M69_M70_M71::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.M69.M70.M71.f1)
}
inline std::string* M64_M68_M69_M70_M71::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M64.M68.M69.M70.M71.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M64_M68_M69_M70_M71::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.M69.M70.M71.f1)
}

// repeated int32 f2 = 3;
inline int M64_M68_M69_M70_M71::_internal_f2_size() const {
  return f2_.size();
}
inline int M64_M68_M69_M70_M71::f2_size() const {
  return _internal_f2_size();
}
inline void M64_M68_M69_M70_M71::clear_f2() {
  f2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69_M70_M71::_internal_f2(int index) const {
  return f2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69_M70_M71::f2(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.M70.M71.f2)
  return _internal_f2(index);
}
inline void M64_M68_M69_M70_M71::set_f2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  f2_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.M70.M71.f2)
}
inline void M64_M68_M69_M70_M71::_internal_add_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Add(value);
}
inline void M64_M68_M69_M70_M71::add_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_f2(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M64.M68.M69.M70.M71.f2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M64_M68_M69_M70_M71::_internal_f2() const {
  return f2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M64_M68_M69_M70_M71::f2() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M64.M68.M69.M70.M71.f2)
  return _internal_f2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M64_M68_M69_M70_M71::_internal_mutable_f2() {
  return &f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M64_M68_M69_M70_M71::mutable_f2() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M64.M68.M69.M70.M71.f2)
  return _internal_mutable_f2();
}

// -------------------------------------------------------------------

// M64_M68_M69_M70

// optional int32 f1 = 1;
inline bool M64_M68_M69_M70::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M68_M69_M70::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M68_M69_M70::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69_M70::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69_M70::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.M70.f1)
  return _internal_f1();
}
inline void M64_M68_M69_M70::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64_M68_M69_M70::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.M70.f1)
}

// optional .hyperprotobench.M64.M68.M69.M70.M71 f2 = 3;
inline bool M64_M68_M69_M70::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M64_M68_M69_M70::has_f2() const {
  return _internal_has_f2();
}
inline void M64_M68_M69_M70::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M64_M68_M69_M70_M71& M64_M68_M69_M70::_internal_f2() const {
  const ::hyperprotobench::M64_M68_M69_M70_M71* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M68_M69_M70_M71*>(
      &::hyperprotobench::_M64_M68_M69_M70_M71_default_instance_);
}
inline const ::hyperprotobench::M64_M68_M69_M70_M71& M64_M68_M69_M70::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.M70.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M64_M68_M69_M70_M71* M64_M68_M69_M70::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M68_M69_M70_M71* M64_M68_M69_M70::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.M69.M70.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M64_M68_M69_M70_M71* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M68_M69_M70_M71* M64_M68_M69_M70::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M68_M69_M70_M71>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M64_M68_M69_M70_M71* M64_M68_M69_M70::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.M69.M70.f2)
  return _internal_mutable_f2();
}
inline void M64_M68_M69_M70::set_allocated_f2(::hyperprotobench::M64_M68_M69_M70_M71* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.M69.M70.f2)
}

// -------------------------------------------------------------------

// M64_M68_M69

// optional int64 f1 = 1;
inline bool M64_M68_M69::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64_M68_M69::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M68_M69::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M64_M68_M69::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M64_M68_M69::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.f1)
  return _internal_f1();
}
inline void M64_M68_M69::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64_M68_M69::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.f1)
}

// optional bytes f2 = 4;
inline bool M64_M68_M69::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M64_M68_M69::has_f2() const {
  return _internal_has_f2();
}
inline void M64_M68_M69::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M64_M68_M69::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.f2)
  return _internal_f2();
}
inline void M64_M68_M69::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.f2)
}
inline std::string* M64_M68_M69::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.M69.f2)
  return _internal_mutable_f2();
}
inline const std::string& M64_M68_M69::_internal_f2() const {
  return f2_.Get();
}
inline void M64_M68_M69::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M64_M68_M69::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M64.M68.M69.f2)
}
inline void M64_M68_M69::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M64.M68.M69.f2)
}
inline void M64_M68_M69::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M64.M68.M69.f2)
}
inline std::string* M64_M68_M69::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M64_M68_M69::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.M69.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M64_M68_M69::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.M69.f2)
}
inline std::string* M64_M68_M69::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M64.M68.M69.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M64_M68_M69::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.M69.f2)
}

// optional int32 f3 = 6;
inline bool M64_M68_M69::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M64_M68_M69::has_f3() const {
  return _internal_has_f3();
}
inline void M64_M68_M69::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.f3)
  return _internal_f3();
}
inline void M64_M68_M69::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M64_M68_M69::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.f3)
}

// optional .hyperprotobench.M64.M68.M69.M70 f4 = 8;
inline bool M64_M68_M69::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M64_M68_M69::has_f4() const {
  return _internal_has_f4();
}
inline void M64_M68_M69::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M64_M68_M69_M70& M64_M68_M69::_internal_f4() const {
  const ::hyperprotobench::M64_M68_M69_M70* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M68_M69_M70*>(
      &::hyperprotobench::_M64_M68_M69_M70_default_instance_);
}
inline const ::hyperprotobench::M64_M68_M69_M70& M64_M68_M69::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M64_M68_M69_M70* M64_M68_M69::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M68_M69_M70* M64_M68_M69::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.M69.f4)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M64_M68_M69_M70* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M68_M69_M70* M64_M68_M69::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000100u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M68_M69_M70>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M64_M68_M69_M70* M64_M68_M69::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.M69.f4)
  return _internal_mutable_f4();
}
inline void M64_M68_M69::set_allocated_f4(::hyperprotobench::M64_M68_M69_M70* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.M69.f4)
}

// optional int32 f5 = 9;
inline bool M64_M68_M69::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M64_M68_M69::has_f5() const {
  return _internal_has_f5();
}
inline void M64_M68_M69::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64_M68_M69::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.M69.f5)
  return _internal_f5();
}
inline void M64_M68_M69::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M64_M68_M69::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.M69.f5)
}

// -------------------------------------------------------------------

// M64_M68

// optional .hyperprotobench.M64.M68.M69 f1 = 1;
inline bool M64_M68::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M64_M68::has_f1() const {
  return _internal_has_f1();
}
inline void M64_M68::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M64_M68_M69& M64_M68::_internal_f1() const {
  const ::hyperprotobench::M64_M68_M69* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M68_M69*>(
      &::hyperprotobench::_M64_M68_M69_default_instance_);
}
inline const ::hyperprotobench::M64_M68_M69& M64_M68::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M64_M68_M69* M64_M68::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M68_M69* M64_M68::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M64_M68_M69* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M68_M69* M64_M68::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M68_M69>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M64_M68_M69* M64_M68::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.f1)
  return _internal_mutable_f1();
}
inline void M64_M68::set_allocated_f1(::hyperprotobench::M64_M68_M69* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.f1)
}

// optional string f2 = 4;
inline bool M64_M68::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M64_M68::has_f2() const {
  return _internal_has_f2();
}
inline void M64_M68::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M64_M68::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.M68.f2)
  return _internal_f2();
}
inline void M64_M68::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.M68.f2)
}
inline std::string* M64_M68::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.M68.f2)
  return _internal_mutable_f2();
}
inline const std::string& M64_M68::_internal_f2() const {
  return f2_.Get();
}
inline void M64_M68::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M64_M68::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M64.M68.f2)
}
inline void M64_M68::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M64.M68.f2)
}
inline void M64_M68::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M64.M68.f2)
}
inline std::string* M64_M68::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M64_M68::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.M68.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M64_M68::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.M68.f2)
}
inline std::string* M64_M68::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M64.M68.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M64_M68::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.M68.f2)
}

// -------------------------------------------------------------------

// M64

// optional int32 f1 = 2;
inline bool M64::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M64::has_f1() const {
  return _internal_has_f1();
}
inline void M64::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M64::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f1)
  return _internal_f1();
}
inline void M64::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M64::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.f1)
}

// optional .hyperprotobench.M64.M65 f2 = 3;
inline bool M64::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M64::has_f2() const {
  return _internal_has_f2();
}
inline void M64::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M64_M65& M64::_internal_f2() const {
  const ::hyperprotobench::M64_M65* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M65*>(
      &::hyperprotobench::_M64_M65_default_instance_);
}
inline const ::hyperprotobench::M64_M65& M64::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M64_M65* M64::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M65* M64::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M64_M65* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M65* M64::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M65>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M64_M65* M64::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.f2)
  return _internal_mutable_f2();
}
inline void M64::set_allocated_f2(::hyperprotobench::M64_M65* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.f2)
}

// optional .hyperprotobench.M64.M66 f3 = 4;
inline bool M64::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M64::has_f3() const {
  return _internal_has_f3();
}
inline void M64::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M64_M66& M64::_internal_f3() const {
  const ::hyperprotobench::M64_M66* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M66*>(
      &::hyperprotobench::_M64_M66_default_instance_);
}
inline const ::hyperprotobench::M64_M66& M64::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M64_M66* M64::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M66* M64::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M64_M66* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M66* M64::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M66>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M64_M66* M64::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.f3)
  return _internal_mutable_f3();
}
inline void M64::set_allocated_f3(::hyperprotobench::M64_M66* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.f3)
}

// optional string f4 = 7;
inline bool M64::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M64::has_f4() const {
  return _internal_has_f4();
}
inline void M64::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M64::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f4)
  return _internal_f4();
}
inline void M64::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.f4)
}
inline std::string* M64::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.f4)
  return _internal_mutable_f4();
}
inline const std::string& M64::_internal_f4() const {
  return f4_.Get();
}
inline void M64::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M64::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M64.f4)
}
inline void M64::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M64.f4)
}
inline void M64::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M64.f4)
}
inline std::string* M64::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M64::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M64::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.f4)
}
inline std::string* M64::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M64.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M64::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M64.f4)
}

// optional .hyperprotobench.M64.E1 f5 = 8;
inline bool M64::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M64::has_f5() const {
  return _internal_has_f5();
}
inline void M64::clear_f5() {
  f5_ = 49;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hyperprotobench::M64_E1 M64::_internal_f5() const {
  return static_cast< ::hyperprotobench::M64_E1 >(f5_);
}
inline ::hyperprotobench::M64_E1 M64::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f5)
  return _internal_f5();
}
inline void M64::_internal_set_f5(::hyperprotobench::M64_E1 value) {
  assert(::hyperprotobench::M64_E1_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M64::set_f5(::hyperprotobench::M64_E1 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.f5)
}

// optional .hyperprotobench.M64.M67 f6 = 10;
inline bool M64::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M64::has_f6() const {
  return _internal_has_f6();
}
inline void M64::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M64_M67& M64::_internal_f6() const {
  const ::hyperprotobench::M64_M67* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M67*>(
      &::hyperprotobench::_M64_M67_default_instance_);
}
inline const ::hyperprotobench::M64_M67& M64::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M64_M67* M64::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M67* M64::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.f6)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M64_M67* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M67* M64::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000200u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M67>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M64_M67* M64::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.f6)
  return _internal_mutable_f6();
}
inline void M64::set_allocated_f6(::hyperprotobench::M64_M67* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.f6)
}

// optional .hyperprotobench.M64.M68 f7 = 11;
inline bool M64::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M64::has_f7() const {
  return _internal_has_f7();
}
inline void M64::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M64_M68& M64::_internal_f7() const {
  const ::hyperprotobench::M64_M68* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M64_M68*>(
      &::hyperprotobench::_M64_M68_default_instance_);
}
inline const ::hyperprotobench::M64_M68& M64::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M64_M68* M64::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M64_M68* M64::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M64.f7)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M64_M68* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M64_M68* M64::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000400u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M64_M68>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M64_M68* M64::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M64.f7)
  return _internal_mutable_f7();
}
inline void M64::set_allocated_f7(::hyperprotobench::M64_M68* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M64.f7)
}

// optional uint64 f8 = 12;
inline bool M64::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M64::has_f8() const {
  return _internal_has_f8();
}
inline void M64::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M64::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M64::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M64.f8)
  return _internal_f8();
}
inline void M64::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M64::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M64.f8)
}

// -------------------------------------------------------------------

// M72_M73_M74

// optional float f1 = 1;
inline bool M72_M73_M74::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M73_M74::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M73_M74::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M72_M73_M74::_internal_f1() const {
  return f1_;
}
inline float M72_M73_M74::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.M74.f1)
  return _internal_f1();
}
inline void M72_M73_M74::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M72_M73_M74::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M73.M74.f1)
}

// -------------------------------------------------------------------

// M72_M73_M75

// optional string f1 = 2;
inline bool M72_M73_M75::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M73_M75::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M73_M75::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M72_M73_M75::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.M75.f1)
  return _internal_f1();
}
inline void M72_M73_M75::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M73.M75.f1)
}
inline std::string* M72_M73_M75::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M73.M75.f1)
  return _internal_mutable_f1();
}
inline const std::string& M72_M73_M75::_internal_f1() const {
  return f1_.Get();
}
inline void M72_M73_M75::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M72_M73_M75::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M72.M73.M75.f1)
}
inline void M72_M73_M75::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M72.M73.M75.f1)
}
inline void M72_M73_M75::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M72.M73.M75.f1)
}
inline std::string* M72_M73_M75::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M72_M73_M75::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M73.M75.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M72_M73_M75::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M73.M75.f1)
}
inline std::string* M72_M73_M75::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M72.M73.M75.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M72_M73_M75::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M73.M75.f1)
}

// optional double f2 = 3;
inline bool M72_M73_M75::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M72_M73_M75::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M73_M75::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double M72_M73_M75::_internal_f2() const {
  return f2_;
}
inline double M72_M73_M75::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.M75.f2)
  return _internal_f2();
}
inline void M72_M73_M75::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M72_M73_M75::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M73.M75.f2)
}

// -------------------------------------------------------------------

// M72_M73

// optional .hyperprotobench.M72.M73.M74 f1 = 2;
inline bool M72_M73::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M72_M73::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M73::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M72_M73_M74& M72_M73::_internal_f1() const {
  const ::hyperprotobench::M72_M73_M74* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M73_M74*>(
      &::hyperprotobench::_M72_M73_M74_default_instance_);
}
inline const ::hyperprotobench::M72_M73_M74& M72_M73::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M72_M73_M74* M72_M73::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M73_M74* M72_M73::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M73.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M72_M73_M74* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M73_M74* M72_M73::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M73_M74>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M72_M73_M74* M72_M73::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M73.f1)
  return _internal_mutable_f1();
}
inline void M72_M73::set_allocated_f1(::hyperprotobench::M72_M73_M74* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M73.f1)
}

// optional .hyperprotobench.M72.M73.M75 f2 = 3;
inline bool M72_M73::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M72_M73::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M73::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M72_M73_M75& M72_M73::_internal_f2() const {
  const ::hyperprotobench::M72_M73_M75* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M73_M75*>(
      &::hyperprotobench::_M72_M73_M75_default_instance_);
}
inline const ::hyperprotobench::M72_M73_M75& M72_M73::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M72_M73_M75* M72_M73::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M73_M75* M72_M73::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M73.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M72_M73_M75* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M73_M75* M72_M73::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M73_M75>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M72_M73_M75* M72_M73::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M73.f2)
  return _internal_mutable_f2();
}
inline void M72_M73::set_allocated_f2(::hyperprotobench::M72_M73_M75* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M73.f2)
}

// optional bytes f3 = 4;
inline bool M72_M73::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M72_M73::has_f3() const {
  return _internal_has_f3();
}
inline void M72_M73::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M72_M73::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M73.f3)
  return _internal_f3();
}
inline void M72_M73::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M73.f3)
}
inline std::string* M72_M73::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M73.f3)
  return _internal_mutable_f3();
}
inline const std::string& M72_M73::_internal_f3() const {
  return f3_.Get();
}
inline void M72_M73::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M72_M73::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M72.M73.f3)
}
inline void M72_M73::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M72.M73.f3)
}
inline void M72_M73::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M72.M73.f3)
}
inline std::string* M72_M73::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M72_M73::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M73.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M72_M73::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M73.f3)
}
inline std::string* M72_M73::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M72.M73.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M72_M73::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M73.f3)
}

// -------------------------------------------------------------------

// M72_M76

// optional bool f1 = 4;
inline bool M72_M76::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M76::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M76::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M72_M76::_internal_f1() const {
  return f1_;
}
inline bool M72_M76::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M76.f1)
  return _internal_f1();
}
inline void M72_M76::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M72_M76::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M76.f1)
}

// optional uint32 f2 = 5;
inline bool M72_M76::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M72_M76::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M76::clear_f2() {
  f2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M72_M76::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M72_M76::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M76.f2)
  return _internal_f2();
}
inline void M72_M76::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M72_M76::set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M76.f2)
}

// optional int32 f3 = 6;
inline bool M72_M76::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M72_M76::has_f3() const {
  return _internal_has_f3();
}
inline void M72_M76::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M76::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M76::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M76.f3)
  return _internal_f3();
}
inline void M72_M76::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M72_M76::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M76.f3)
}

// optional .hyperprotobench.M72.M76.E1 f4 = 7;
inline bool M72_M76::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M72_M76::has_f4() const {
  return _internal_has_f4();
}
inline void M72_M76::clear_f4() {
  f4_ = 4;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::hyperprotobench::M72_M76_E1 M72_M76::_internal_f4() const {
  return static_cast< ::hyperprotobench::M72_M76_E1 >(f4_);
}
inline ::hyperprotobench::M72_M76_E1 M72_M76::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M76.f4)
  return _internal_f4();
}
inline void M72_M76::_internal_set_f4(::hyperprotobench::M72_M76_E1 value) {
  assert(::hyperprotobench::M72_M76_E1_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M72_M76::set_f4(::hyperprotobench::M72_M76_E1 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M76.f4)
}

// -------------------------------------------------------------------

// M72_M77

// optional .hyperprotobench.M72.M77.E1 f1 = 2;
inline bool M72_M77::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M77::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M77::clear_f1() {
  f1_ = 4;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hyperprotobench::M72_M77_E1 M72_M77::_internal_f1() const {
  return static_cast< ::hyperprotobench::M72_M77_E1 >(f1_);
}
inline ::hyperprotobench::M72_M77_E1 M72_M77::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M77.f1)
  return _internal_f1();
}
inline void M72_M77::_internal_set_f1(::hyperprotobench::M72_M77_E1 value) {
  assert(::hyperprotobench::M72_M77_E1_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M72_M77::set_f1(::hyperprotobench::M72_M77_E1 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M77.f1)
}

// optional float f2 = 6;
inline bool M72_M77::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M72_M77::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M77::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M72_M77::_internal_f2() const {
  return f2_;
}
inline float M72_M77::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M77.f2)
  return _internal_f2();
}
inline void M72_M77::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000020u;
  f2_ = value;
}
inline void M72_M77::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M77.f2)
}

// -------------------------------------------------------------------

// M72_M78_M79_M80_M81

// optional int32 f1 = 1;
inline bool M72_M78_M79_M80_M81::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M78_M79_M80_M81::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M78_M79_M80_M81::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78_M79_M80_M81::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78_M79_M80_M81::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.M79.M80.M81.f1)
  return _internal_f1();
}
inline void M72_M78_M79_M80_M81::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M72_M78_M79_M80_M81::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M78.M79.M80.M81.f1)
}

// -------------------------------------------------------------------

// M72_M78_M79_M80

// optional .hyperprotobench.M72.M78.M79.M80.M81 f1 = 2;
inline bool M72_M78_M79_M80::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M72_M78_M79_M80::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M78_M79_M80::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M72_M78_M79_M80_M81& M72_M78_M79_M80::_internal_f1() const {
  const ::hyperprotobench::M72_M78_M79_M80_M81* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M78_M79_M80_M81*>(
      &::hyperprotobench::_M72_M78_M79_M80_M81_default_instance_);
}
inline const ::hyperprotobench::M72_M78_M79_M80_M81& M72_M78_M79_M80::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.M79.M80.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M72_M78_M79_M80_M81* M72_M78_M79_M80::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M78_M79_M80_M81* M72_M78_M79_M80::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M78.M79.M80.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M72_M78_M79_M80_M81* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M78_M79_M80_M81* M72_M78_M79_M80::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M78_M79_M80_M81>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M72_M78_M79_M80_M81* M72_M78_M79_M80::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M78.M79.M80.f1)
  return _internal_mutable_f1();
}
inline void M72_M78_M79_M80::set_allocated_f1(::hyperprotobench::M72_M78_M79_M80_M81* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M78.M79.M80.f1)
}

// optional string f2 = 3;
inline bool M72_M78_M79_M80::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M72_M78_M79_M80::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M78_M79_M80::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M72_M78_M79_M80::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.M79.M80.f2)
  return _internal_f2();
}
inline void M72_M78_M79_M80::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M78.M79.M80.f2)
}
inline std::string* M72_M78_M79_M80::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M78.M79.M80.f2)
  return _internal_mutable_f2();
}
inline const std::string& M72_M78_M79_M80::_internal_f2() const {
  return f2_.Get();
}
inline void M72_M78_M79_M80::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M72_M78_M79_M80::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M72.M78.M79.M80.f2)
}
inline void M72_M78_M79_M80::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M72.M78.M79.M80.f2)
}
inline void M72_M78_M79_M80::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M72.M78.M79.M80.f2)
}
inline std::string* M72_M78_M79_M80::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M72_M78_M79_M80::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M78.M79.M80.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M72_M78_M79_M80::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M78.M79.M80.f2)
}
inline std::string* M72_M78_M79_M80::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M72.M78.M79.M80.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M72_M78_M79_M80::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M72.M78.M79.M80.f2)
}

// -------------------------------------------------------------------

// M72_M78_M79

// optional int32 f1 = 1;
inline bool M72_M78_M79::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M72_M78_M79::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M78_M79::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78_M79::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78_M79::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.M79.f1)
  return _internal_f1();
}
inline void M72_M78_M79::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M72_M78_M79::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M78.M79.f1)
}

// optional .hyperprotobench.M72.M78.M79.M80 f2 = 2;
inline bool M72_M78_M79::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M72_M78_M79::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M78_M79::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M72_M78_M79_M80& M72_M78_M79::_internal_f2() const {
  const ::hyperprotobench::M72_M78_M79_M80* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M78_M79_M80*>(
      &::hyperprotobench::_M72_M78_M79_M80_default_instance_);
}
inline const ::hyperprotobench::M72_M78_M79_M80& M72_M78_M79::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.M79.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M72_M78_M79_M80* M72_M78_M79::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M78_M79_M80* M72_M78_M79::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M78.M79.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M72_M78_M79_M80* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M78_M79_M80* M72_M78_M79::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M78_M79_M80>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M72_M78_M79_M80* M72_M78_M79::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M78.M79.f2)
  return _internal_mutable_f2();
}
inline void M72_M78_M79::set_allocated_f2(::hyperprotobench::M72_M78_M79_M80* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M78.M79.f2)
}

// -------------------------------------------------------------------

// M72_M78

// optional .hyperprotobench.M72.M78.M79 f1 = 2;
inline bool M72_M78::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M72_M78::has_f1() const {
  return _internal_has_f1();
}
inline void M72_M78::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M72_M78_M79& M72_M78::_internal_f1() const {
  const ::hyperprotobench::M72_M78_M79* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M78_M79*>(
      &::hyperprotobench::_M72_M78_M79_default_instance_);
}
inline const ::hyperprotobench::M72_M78_M79& M72_M78::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M72_M78_M79* M72_M78::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M78_M79* M72_M78::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.M78.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M72_M78_M79* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M78_M79* M72_M78::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M78_M79>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M72_M78_M79* M72_M78::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.M78.f1)
  return _internal_mutable_f1();
}
inline void M72_M78::set_allocated_f1(::hyperprotobench::M72_M78_M79* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.M78.f1)
}

// optional int32 f2 = 4;
inline bool M72_M78::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M72_M78::has_f2() const {
  return _internal_has_f2();
}
inline void M72_M78::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72_M78::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.M78.f2)
  return _internal_f2();
}
inline void M72_M78::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M72_M78::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.M78.f2)
}

// -------------------------------------------------------------------

// M72

// repeated fixed64 f1 = 1;
inline int M72::_internal_f1_size() const {
  return f1_.size();
}
inline int M72::f1_size() const {
  return _internal_f1_size();
}
inline void M72::clear_f1() {
  f1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M72::_internal_f1(int index) const {
  return f1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M72::f1(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f1)
  return _internal_f1(index);
}
inline void M72::set_f1(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f1)
}
inline void M72::_internal_add_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add(value);
}
inline void M72::add_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_f1(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M72.f1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
M72::_internal_f1() const {
  return f1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
M72::f1() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M72.f1)
  return _internal_f1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
M72::_internal_mutable_f1() {
  return &f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
M72::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M72.f1)
  return _internal_mutable_f1();
}

// optional .hyperprotobench.M72.M73 f2 = 2;
inline bool M72::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M72::has_f2() const {
  return _internal_has_f2();
}
inline void M72::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M72_M73& M72::_internal_f2() const {
  const ::hyperprotobench::M72_M73* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M73*>(
      &::hyperprotobench::_M72_M73_default_instance_);
}
inline const ::hyperprotobench::M72_M73& M72::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M72_M73* M72::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M73* M72::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M72_M73* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M73* M72::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M73>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M72_M73* M72::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.f2)
  return _internal_mutable_f2();
}
inline void M72::set_allocated_f2(::hyperprotobench::M72_M73* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.f2)
}

// optional .hyperprotobench.M72.M76 f3 = 3;
inline bool M72::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M72::has_f3() const {
  return _internal_has_f3();
}
inline void M72::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M72_M76& M72::_internal_f3() const {
  const ::hyperprotobench::M72_M76* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M76*>(
      &::hyperprotobench::_M72_M76_default_instance_);
}
inline const ::hyperprotobench::M72_M76& M72::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M72_M76* M72::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M76* M72::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M72_M76* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M76* M72::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M76>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M72_M76* M72::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.f3)
  return _internal_mutable_f3();
}
inline void M72::set_allocated_f3(::hyperprotobench::M72_M76* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.f3)
}

// optional .hyperprotobench.M72.M77 f4 = 4;
inline bool M72::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M72::has_f4() const {
  return _internal_has_f4();
}
inline void M72::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M72_M77& M72::_internal_f4() const {
  const ::hyperprotobench::M72_M77* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M77*>(
      &::hyperprotobench::_M72_M77_default_instance_);
}
inline const ::hyperprotobench::M72_M77& M72::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M72_M77* M72::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M77* M72::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.f4)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M72_M77* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M77* M72::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M77>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M72_M77* M72::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.f4)
  return _internal_mutable_f4();
}
inline void M72::set_allocated_f4(::hyperprotobench::M72_M77* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.f4)
}

// optional float f5 = 7;
inline bool M72::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M72::has_f5() const {
  return _internal_has_f5();
}
inline void M72::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M72::_internal_f5() const {
  return f5_;
}
inline float M72::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f5)
  return _internal_f5();
}
inline void M72::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M72::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f5)
}

// optional int64 f6 = 8;
inline bool M72::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M72::has_f6() const {
  return _internal_has_f6();
}
inline void M72::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M72::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M72::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f6)
  return _internal_f6();
}
inline void M72::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M72::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f6)
}

// optional float f7 = 9;
inline bool M72::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M72::has_f7() const {
  return _internal_has_f7();
}
inline void M72::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float M72::_internal_f7() const {
  return f7_;
}
inline float M72::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f7)
  return _internal_f7();
}
inline void M72::_internal_set_f7(float value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M72::set_f7(float value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f7)
}

// optional int32 f8 = 13;
inline bool M72::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M72::has_f8() const {
  return _internal_has_f8();
}
inline void M72::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f8)
  return _internal_f8();
}
inline void M72::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  f8_ = value;
}
inline void M72::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f8)
}

// optional .hyperprotobench.M72.M78 f9 = 15;
inline bool M72::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M72::has_f9() const {
  return _internal_has_f9();
}
inline void M72::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M72_M78& M72::_internal_f9() const {
  const ::hyperprotobench::M72_M78* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M72_M78*>(
      &::hyperprotobench::_M72_M78_default_instance_);
}
inline const ::hyperprotobench::M72_M78& M72::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M72_M78* M72::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M72_M78* M72::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M72.f9)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M72_M78* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M72_M78* M72::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00008000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M72_M78>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M72_M78* M72::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M72.f9)
  return _internal_mutable_f9();
}
inline void M72::set_allocated_f9(::hyperprotobench::M72_M78* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M72.f9)
}

// optional int32 f10 = 17;
inline bool M72::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M72::has_f10() const {
  return _internal_has_f10();
}
inline void M72::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M72::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M72.f10)
  return _internal_f10();
}
inline void M72::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00020000u;
  f10_ = value;
}
inline void M72::set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M72.f10)
}

// -------------------------------------------------------------------

// M82_M83

// optional int64 f1 = 3;
inline bool M82_M83::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M83::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M83::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82_M83::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82_M83::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M83.f1)
  return _internal_f1();
}
inline void M82_M83::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M82_M83::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M83.f1)
}

// optional int32 f2 = 4;
inline bool M82_M83::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M83::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M83::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M83::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M83::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M83.f2)
  return _internal_f2();
}
inline void M82_M83::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82_M83::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M83.f2)
}

// -------------------------------------------------------------------

// M82_M84_M85_M86_M87

// optional .hyperprotobench.M82.M84.M85.M86.M87.E1 f1 = 1;
inline bool M82_M84_M85_M86_M87::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M84_M85_M86_M87::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M84_M85_M86_M87::clear_f1() {
  f1_ = 38;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hyperprotobench::M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::_internal_f1() const {
  return static_cast< ::hyperprotobench::M82_M84_M85_M86_M87_E1 >(f1_);
}
inline ::hyperprotobench::M82_M84_M85_M86_M87_E1 M82_M84_M85_M86_M87::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.M87.f1)
  return _internal_f1();
}
inline void M82_M84_M85_M86_M87::_internal_set_f1(::hyperprotobench::M82_M84_M85_M86_M87_E1 value) {
  assert(::hyperprotobench::M82_M84_M85_M86_M87_E1_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M82_M84_M85_M86_M87::set_f1(::hyperprotobench::M82_M84_M85_M86_M87_E1 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.M87.f1)
}

// optional string f2 = 2;
inline bool M82_M84_M85_M86_M87::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M84_M85_M86_M87::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M84_M85_M86_M87::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M82_M84_M85_M86_M87::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.M87.f2)
  return _internal_f2();
}
inline void M82_M84_M85_M86_M87::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.M87.f2)
}
inline std::string* M82_M84_M85_M86_M87::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M84.M85.M86.M87.f2)
  return _internal_mutable_f2();
}
inline const std::string& M82_M84_M85_M86_M87::_internal_f2() const {
  return f2_.Get();
}
inline void M82_M84_M85_M86_M87::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M82_M84_M85_M86_M87::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M82.M84.M85.M86.M87.f2)
}
inline void M82_M84_M85_M86_M87::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M82.M84.M85.M86.M87.f2)
}
inline void M82_M84_M85_M86_M87::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M82.M84.M85.M86.M87.f2)
}
inline std::string* M82_M84_M85_M86_M87::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M82_M84_M85_M86_M87::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M84.M85.M86.M87.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M82_M84_M85_M86_M87::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M84.M85.M86.M87.f2)
}
inline std::string* M82_M84_M85_M86_M87::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M82.M84.M85.M86.M87.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M82_M84_M85_M86_M87::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M84.M85.M86.M87.f2)
}

// -------------------------------------------------------------------

// M82_M84_M85_M86

// optional .hyperprotobench.M82.M84.M85.M86.M87 f1 = 2;
inline bool M82_M84_M85_M86::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M82_M84_M85_M86::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M84_M85_M86::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M82_M84_M85_M86_M87& M82_M84_M85_M86::_internal_f1() const {
  const ::hyperprotobench::M82_M84_M85_M86_M87* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M84_M85_M86_M87*>(
      &::hyperprotobench::_M82_M84_M85_M86_M87_default_instance_);
}
inline const ::hyperprotobench::M82_M84_M85_M86_M87& M82_M84_M85_M86::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M82_M84_M85_M86_M87* M82_M84_M85_M86::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M84_M85_M86_M87* M82_M84_M85_M86::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M84.M85.M86.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M82_M84_M85_M86_M87* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M84_M85_M86_M87* M82_M84_M85_M86::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M84_M85_M86_M87>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M82_M84_M85_M86_M87* M82_M84_M85_M86::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M84.M85.M86.f1)
  return _internal_mutable_f1();
}
inline void M82_M84_M85_M86::set_allocated_f1(::hyperprotobench::M82_M84_M85_M86_M87* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M84.M85.M86.f1)
}

// optional .hyperprotobench.M82.M84.M85.M86.E1 f2 = 3;
inline bool M82_M84_M85_M86::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M84_M85_M86::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M84_M85_M86::clear_f2() {
  f2_ = 68;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M82_M84_M85_M86_E1 M82_M84_M85_M86::_internal_f2() const {
  return static_cast< ::hyperprotobench::M82_M84_M85_M86_E1 >(f2_);
}
inline ::hyperprotobench::M82_M84_M85_M86_E1 M82_M84_M85_M86::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.f2)
  return _internal_f2();
}
inline void M82_M84_M85_M86::_internal_set_f2(::hyperprotobench::M82_M84_M85_M86_E1 value) {
  assert(::hyperprotobench::M82_M84_M85_M86_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82_M84_M85_M86::set_f2(::hyperprotobench::M82_M84_M85_M86_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.f2)
}

// optional bool f3 = 4;
inline bool M82_M84_M85_M86::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M82_M84_M85_M86::has_f3() const {
  return _internal_has_f3();
}
inline void M82_M84_M85_M86::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M82_M84_M85_M86::_internal_f3() const {
  return f3_;
}
inline bool M82_M84_M85_M86::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.f3)
  return _internal_f3();
}
inline void M82_M84_M85_M86::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M82_M84_M85_M86::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.f3)
}

// optional int64 f4 = 5;
inline bool M82_M84_M85_M86::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M82_M84_M85_M86::has_f4() const {
  return _internal_has_f4();
}
inline void M82_M84_M85_M86::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82_M84_M85_M86::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82_M84_M85_M86::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.f4)
  return _internal_f4();
}
inline void M82_M84_M85_M86::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M82_M84_M85_M86::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.f4)
}

// optional int32 f5 = 6;
inline bool M82_M84_M85_M86::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M82_M84_M85_M86::has_f5() const {
  return _internal_has_f5();
}
inline void M82_M84_M85_M86::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84_M85_M86::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84_M85_M86::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.M86.f5)
  return _internal_f5();
}
inline void M82_M84_M85_M86::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M82_M84_M85_M86::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.M86.f5)
}

// -------------------------------------------------------------------

// M82_M84_M85

// optional .hyperprotobench.M82.M84.M85.M86 f1 = 3;
inline bool M82_M84_M85::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M82_M84_M85::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M84_M85::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M82_M84_M85_M86& M82_M84_M85::_internal_f1() const {
  const ::hyperprotobench::M82_M84_M85_M86* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M84_M85_M86*>(
      &::hyperprotobench::_M82_M84_M85_M86_default_instance_);
}
inline const ::hyperprotobench::M82_M84_M85_M86& M82_M84_M85::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M82_M84_M85_M86* M82_M84_M85::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M84_M85_M86* M82_M84_M85::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M84.M85.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M82_M84_M85_M86* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M84_M85_M86* M82_M84_M85::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M84_M85_M86>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M82_M84_M85_M86* M82_M84_M85::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M84.M85.f1)
  return _internal_mutable_f1();
}
inline void M82_M84_M85::set_allocated_f1(::hyperprotobench::M82_M84_M85_M86* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M84.M85.f1)
}

// optional sint32 f2 = 4;
inline bool M82_M84_M85::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M84_M85::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M84_M85::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84_M85::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84_M85::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.M85.f2)
  return _internal_f2();
}
inline void M82_M84_M85::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82_M84_M85::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.M85.f2)
}

// -------------------------------------------------------------------

// M82_M84

// optional int32 f1 = 1;
inline bool M82_M84::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M84::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M84::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M84::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.f1)
  return _internal_f1();
}
inline void M82_M84::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M82_M84::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.f1)
}

// optional .hyperprotobench.M82.M84.M85 f2 = 10;
inline bool M82_M84::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M82_M84::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M84::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M82_M84_M85& M82_M84::_internal_f2() const {
  const ::hyperprotobench::M82_M84_M85* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M84_M85*>(
      &::hyperprotobench::_M82_M84_M85_default_instance_);
}
inline const ::hyperprotobench::M82_M84_M85& M82_M84::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M82_M84_M85* M82_M84::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M84_M85* M82_M84::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M84.f2)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M82_M84_M85* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M84_M85* M82_M84::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000400u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M84_M85>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M82_M84_M85* M82_M84::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M84.f2)
  return _internal_mutable_f2();
}
inline void M82_M84::set_allocated_f2(::hyperprotobench::M82_M84_M85* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M84.f2)
}

// optional string f3 = 12;
inline bool M82_M84::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M82_M84::has_f3() const {
  return _internal_has_f3();
}
inline void M82_M84::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& M82_M84::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M84.f3)
  return _internal_f3();
}
inline void M82_M84::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M84.f3)
}
inline std::string* M82_M84::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M84.f3)
  return _internal_mutable_f3();
}
inline const std::string& M82_M84::_internal_f3() const {
  return f3_.Get();
}
inline void M82_M84::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M82_M84::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M82.M84.f3)
}
inline void M82_M84::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M82.M84.f3)
}
inline void M82_M84::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M82.M84.f3)
}
inline std::string* M82_M84::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00001000u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M82_M84::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M84.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M82_M84::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M84.f3)
}
inline std::string* M82_M84::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M82.M84.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M82_M84::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M84.f3)
}

// -------------------------------------------------------------------

// M82_M88_M89

// optional int32 f1 = 1;
inline bool M82_M88_M89::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M88_M89::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M88_M89::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M88_M89::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M88_M89::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M88.M89.f1)
  return _internal_f1();
}
inline void M82_M88_M89::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M82_M88_M89::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M88.M89.f1)
}

// optional float f2 = 2;
inline bool M82_M88_M89::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M88_M89::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M88_M89::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M82_M88_M89::_internal_f2() const {
  return f2_;
}
inline float M82_M88_M89::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M88.M89.f2)
  return _internal_f2();
}
inline void M82_M88_M89::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82_M88_M89::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M88.M89.f2)
}

// optional int32 f3 = 3;
inline bool M82_M88_M89::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M82_M88_M89::has_f3() const {
  return _internal_has_f3();
}
inline void M82_M88_M89::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M88_M89::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82_M88_M89::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M88.M89.f3)
  return _internal_f3();
}
inline void M82_M88_M89::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M82_M88_M89::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M88.M89.f3)
}

// -------------------------------------------------------------------

// M82_M88

// optional bytes f1 = 1;
inline bool M82_M88::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M88::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M88::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M82_M88::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M88.f1)
  return _internal_f1();
}
inline void M82_M88::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M88.f1)
}
inline std::string* M82_M88::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M88.f1)
  return _internal_mutable_f1();
}
inline const std::string& M82_M88::_internal_f1() const {
  return f1_.Get();
}
inline void M82_M88::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M82_M88::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M82.M88.f1)
}
inline void M82_M88::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M82.M88.f1)
}
inline void M82_M88::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M82.M88.f1)
}
inline std::string* M82_M88::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M82_M88::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M88.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M82_M88::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M88.f1)
}
inline std::string* M82_M88::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M82.M88.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M82_M88::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M88.f1)
}

// optional .hyperprotobench.M82.M88.M89 f2 = 9;
inline bool M82_M88::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M82_M88::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M88::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M82_M88_M89& M82_M88::_internal_f2() const {
  const ::hyperprotobench::M82_M88_M89* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M88_M89*>(
      &::hyperprotobench::_M82_M88_M89_default_instance_);
}
inline const ::hyperprotobench::M82_M88_M89& M82_M88::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M88.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M82_M88_M89* M82_M88::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M88_M89* M82_M88::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M88.f2)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M82_M88_M89* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M88_M89* M82_M88::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000200u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M88_M89>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M82_M88_M89* M82_M88::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M88.f2)
  return _internal_mutable_f2();
}
inline void M82_M88::set_allocated_f2(::hyperprotobench::M82_M88_M89* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M88.f2)
}

// -------------------------------------------------------------------

// M82_M90_M91

// optional string f1 = 1;
inline bool M82_M90_M91::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82_M90_M91::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M90_M91::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M82_M90_M91::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M90.M91.f1)
  return _internal_f1();
}
inline void M82_M90_M91::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M90.M91.f1)
}
inline std::string* M82_M90_M91::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M90.M91.f1)
  return _internal_mutable_f1();
}
inline const std::string& M82_M90_M91::_internal_f1() const {
  return f1_.Get();
}
inline void M82_M90_M91::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M82_M90_M91::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M82.M90.M91.f1)
}
inline void M82_M90_M91::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M82.M90.M91.f1)
}
inline void M82_M90_M91::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M82.M90.M91.f1)
}
inline std::string* M82_M90_M91::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M82_M90_M91::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M90.M91.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M82_M90_M91::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M90.M91.f1)
}
inline std::string* M82_M90_M91::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M82.M90.M91.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M82_M90_M91::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M82.M90.M91.f1)
}

// -------------------------------------------------------------------

// M82_M90

// optional .hyperprotobench.M82.M90.M91 f1 = 1;
inline bool M82_M90::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M82_M90::has_f1() const {
  return _internal_has_f1();
}
inline void M82_M90::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M82_M90_M91& M82_M90::_internal_f1() const {
  const ::hyperprotobench::M82_M90_M91* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M90_M91*>(
      &::hyperprotobench::_M82_M90_M91_default_instance_);
}
inline const ::hyperprotobench::M82_M90_M91& M82_M90::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M90.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M82_M90_M91* M82_M90::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M90_M91* M82_M90::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.M90.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M82_M90_M91* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M90_M91* M82_M90::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M90_M91>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M82_M90_M91* M82_M90::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.M90.f1)
  return _internal_mutable_f1();
}
inline void M82_M90::set_allocated_f1(::hyperprotobench::M82_M90_M91* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.M90.f1)
}

// optional float f2 = 2;
inline bool M82_M90::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82_M90::has_f2() const {
  return _internal_has_f2();
}
inline void M82_M90::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M82_M90::_internal_f2() const {
  return f2_;
}
inline float M82_M90::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M90.f2)
  return _internal_f2();
}
inline void M82_M90::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82_M90::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M90.f2)
}

// repeated bool f3 = 4;
inline int M82_M90::_internal_f3_size() const {
  return f3_.size();
}
inline int M82_M90::f3_size() const {
  return _internal_f3_size();
}
inline void M82_M90::clear_f3() {
  f3_.Clear();
}
inline bool M82_M90::_internal_f3(int index) const {
  return f3_.Get(index);
}
inline bool M82_M90::f3(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M90.f3)
  return _internal_f3(index);
}
inline void M82_M90::set_f3(int index, bool value) {
  f3_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M90.f3)
}
inline void M82_M90::_internal_add_f3(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Add(value);
}
inline void M82_M90::add_f3(bool value) {
  _internal_add_f3(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M82.M90.f3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
M82_M90::_internal_f3() const {
  return f3_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
M82_M90::f3() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M82.M90.f3)
  return _internal_f3();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
M82_M90::_internal_mutable_f3() {
  return &f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
M82_M90::mutable_f3() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M82.M90.f3)
  return _internal_mutable_f3();
}

// optional float f4 = 5;
inline bool M82_M90::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M82_M90::has_f4() const {
  return _internal_has_f4();
}
inline void M82_M90::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M82_M90::_internal_f4() const {
  return f4_;
}
inline float M82_M90::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.M90.f4)
  return _internal_f4();
}
inline void M82_M90::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M82_M90::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.M90.f4)
}

// -------------------------------------------------------------------

// M82

// optional int32 f1 = 1;
inline bool M82::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M82::has_f1() const {
  return _internal_has_f1();
}
inline void M82::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f1)
  return _internal_f1();
}
inline void M82::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M82::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f1)
}

// optional double f2 = 2;
inline bool M82::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M82::has_f2() const {
  return _internal_has_f2();
}
inline void M82::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double M82::_internal_f2() const {
  return f2_;
}
inline double M82::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f2)
  return _internal_f2();
}
inline void M82::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M82::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f2)
}

// optional int64 f3 = 3;
inline bool M82::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M82::has_f3() const {
  return _internal_has_f3();
}
inline void M82::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M82::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f3)
  return _internal_f3();
}
inline void M82::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M82::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f3)
}

// optional .hyperprotobench.M82.M83 f4 = 4;
inline bool M82::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M82::has_f4() const {
  return _internal_has_f4();
}
inline void M82::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M82_M83& M82::_internal_f4() const {
  const ::hyperprotobench::M82_M83* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M83*>(
      &::hyperprotobench::_M82_M83_default_instance_);
}
inline const ::hyperprotobench::M82_M83& M82::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M82_M83* M82::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M83* M82::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.f4)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M82_M83* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M83* M82::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M83>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M82_M83* M82::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.f4)
  return _internal_mutable_f4();
}
inline void M82::set_allocated_f4(::hyperprotobench::M82_M83* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.f4)
}

// optional .hyperprotobench.M82.E1 f5 = 12;
inline bool M82::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M82::has_f5() const {
  return _internal_has_f5();
}
inline void M82::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::hyperprotobench::M82_E1 M82::_internal_f5() const {
  return static_cast< ::hyperprotobench::M82_E1 >(f5_);
}
inline ::hyperprotobench::M82_E1 M82::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f5)
  return _internal_f5();
}
inline void M82::_internal_set_f5(::hyperprotobench::M82_E1 value) {
  assert(::hyperprotobench::M82_E1_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  f5_ = value;
}
inline void M82::set_f5(::hyperprotobench::M82_E1 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f5)
}

// optional .hyperprotobench.M82.M84 f6 = 18;
inline bool M82::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M82::has_f6() const {
  return _internal_has_f6();
}
inline void M82::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::hyperprotobench::M82_M84& M82::_internal_f6() const {
  const ::hyperprotobench::M82_M84* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M84*>(
      &::hyperprotobench::_M82_M84_default_instance_);
}
inline const ::hyperprotobench::M82_M84& M82::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M82_M84* M82::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M84* M82::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.f6)
  _has_bits_[0] &= ~0x00040000u;
  ::hyperprotobench::M82_M84* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M84* M82::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00040000u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M84>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M82_M84* M82::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.f6)
  return _internal_mutable_f6();
}
inline void M82::set_allocated_f6(::hyperprotobench::M82_M84* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.f6)
}

// optional .hyperprotobench.M82.M88 f7 = 19;
inline bool M82::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M82::has_f7() const {
  return _internal_has_f7();
}
inline void M82::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::hyperprotobench::M82_M88& M82::_internal_f7() const {
  const ::hyperprotobench::M82_M88* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M88*>(
      &::hyperprotobench::_M82_M88_default_instance_);
}
inline const ::hyperprotobench::M82_M88& M82::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M82_M88* M82::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M88* M82::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.f7)
  _has_bits_[0] &= ~0x00080000u;
  ::hyperprotobench::M82_M88* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M88* M82::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00080000u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M88>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M82_M88* M82::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.f7)
  return _internal_mutable_f7();
}
inline void M82::set_allocated_f7(::hyperprotobench::M82_M88* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.f7)
}

// optional .hyperprotobench.M82.M90 f8 = 21;
inline bool M82::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M82::has_f8() const {
  return _internal_has_f8();
}
inline void M82::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::hyperprotobench::M82_M90& M82::_internal_f8() const {
  const ::hyperprotobench::M82_M90* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M82_M90*>(
      &::hyperprotobench::_M82_M90_default_instance_);
}
inline const ::hyperprotobench::M82_M90& M82::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M82_M90* M82::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M82_M90* M82::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M82.f8)
  _has_bits_[0] &= ~0x00200000u;
  ::hyperprotobench::M82_M90* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M82_M90* M82::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00200000u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M82_M90>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M82_M90* M82::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M82.f8)
  return _internal_mutable_f8();
}
inline void M82::set_allocated_f8(::hyperprotobench::M82_M90* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M82.f8)
}

// optional int32 f9 = 22;
inline bool M82::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M82::has_f9() const {
  return _internal_has_f9();
}
inline void M82::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f9)
  return _internal_f9();
}
inline void M82::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  f9_ = value;
}
inline void M82::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f9)
}

// optional int32 f10 = 23;
inline bool M82::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool M82::has_f10() const {
  return _internal_has_f10();
}
inline void M82::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f10)
  return _internal_f10();
}
inline void M82::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00800000u;
  f10_ = value;
}
inline void M82::set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f10)
}

// optional int32 f11 = 25;
inline bool M82::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool M82::has_f11() const {
  return _internal_has_f11();
}
inline void M82::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f11)
  return _internal_f11();
}
inline void M82::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  f11_ = value;
}
inline void M82::set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f11)
}

// optional int32 f12 = 26;
inline bool M82::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool M82::has_f12() const {
  return _internal_has_f12();
}
inline void M82::clear_f12() {
  f12_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M82::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M82.f12)
  return _internal_f12();
}
inline void M82::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  f12_ = value;
}
inline void M82::set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M82.f12)
}

// -------------------------------------------------------------------

// M92_M93

// optional int32 f1 = 1;
inline bool M92_M93::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M92_M93::has_f1() const {
  return _internal_has_f1();
}
inline void M92_M93::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M93::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M93::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.M93.f1)
  return _internal_f1();
}
inline void M92_M93::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M92_M93::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M92.M93.f1)
}

// -------------------------------------------------------------------

// M92_M94_M95

// optional int32 f1 = 2;
inline bool M92_M94_M95::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M92_M94_M95::has_f1() const {
  return _internal_has_f1();
}
inline void M92_M94_M95::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M94_M95::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M94_M95::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.M94.M95.f1)
  return _internal_f1();
}
inline void M92_M94_M95::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M92_M94_M95::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M92.M94.M95.f1)
}

// -------------------------------------------------------------------

// M92_M94

// optional int32 f1 = 1;
inline bool M92_M94::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M92_M94::has_f1() const {
  return _internal_has_f1();
}
inline void M92_M94::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M94::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92_M94::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.M94.f1)
  return _internal_f1();
}
inline void M92_M94::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M92_M94::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M92.M94.f1)
}

// optional .hyperprotobench.M92.M94.M95 f2 = 2;
inline bool M92_M94::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M92_M94::has_f2() const {
  return _internal_has_f2();
}
inline void M92_M94::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M92_M94_M95& M92_M94::_internal_f2() const {
  const ::hyperprotobench::M92_M94_M95* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M92_M94_M95*>(
      &::hyperprotobench::_M92_M94_M95_default_instance_);
}
inline const ::hyperprotobench::M92_M94_M95& M92_M94::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.M94.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M92_M94_M95* M92_M94::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M92_M94_M95* M92_M94::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M92.M94.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M92_M94_M95* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M92_M94_M95* M92_M94::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M92_M94_M95>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M92_M94_M95* M92_M94::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M92.M94.f2)
  return _internal_mutable_f2();
}
inline void M92_M94::set_allocated_f2(::hyperprotobench::M92_M94_M95* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M92.M94.f2)
}

// -------------------------------------------------------------------

// M92

// optional .hyperprotobench.M92.M93 f1 = 1;
inline bool M92::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M92::has_f1() const {
  return _internal_has_f1();
}
inline void M92::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M92_M93& M92::_internal_f1() const {
  const ::hyperprotobench::M92_M93* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M92_M93*>(
      &::hyperprotobench::_M92_M93_default_instance_);
}
inline const ::hyperprotobench::M92_M93& M92::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M92_M93* M92::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M92_M93* M92::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M92.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M92_M93* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M92_M93* M92::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M92_M93>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M92_M93* M92::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M92.f1)
  return _internal_mutable_f1();
}
inline void M92::set_allocated_f1(::hyperprotobench::M92_M93* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M92.f1)
}

// optional .hyperprotobench.M92.M94 f2 = 2;
inline bool M92::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M92::has_f2() const {
  return _internal_has_f2();
}
inline void M92::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M92_M94& M92::_internal_f2() const {
  const ::hyperprotobench::M92_M94* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M92_M94*>(
      &::hyperprotobench::_M92_M94_default_instance_);
}
inline const ::hyperprotobench::M92_M94& M92::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M92_M94* M92::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M92_M94* M92::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M92.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M92_M94* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M92_M94* M92::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M92_M94>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M92_M94* M92::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M92.f2)
  return _internal_mutable_f2();
}
inline void M92::set_allocated_f2(::hyperprotobench::M92_M94* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M92.f2)
}

// optional int32 f3 = 3;
inline bool M92::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M92::has_f3() const {
  return _internal_has_f3();
}
inline void M92::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.f3)
  return _internal_f3();
}
inline void M92::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M92::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M92.f3)
}

// optional int32 f4 = 4;
inline bool M92::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M92::has_f4() const {
  return _internal_has_f4();
}
inline void M92::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M92::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M92.f4)
  return _internal_f4();
}
inline void M92::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M92::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M92.f4)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hyperprotobench

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hyperprotobench::M1_M2_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_M2_E1>() {
  return ::hyperprotobench::M1_M2_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M1_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_E1>() {
  return ::hyperprotobench::M1_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1>() {
  return ::hyperprotobench::M12_M17_M18_M19_M20_M21_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M12_M17_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M12_M17_E1>() {
  return ::hyperprotobench::M12_M17_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M23_M29_M30_M31_M32_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M23_M29_M30_M31_M32_E1>() {
  return ::hyperprotobench::M23_M29_M30_M31_M32_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M34_M37_M38_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M34_M37_M38_E1>() {
  return ::hyperprotobench::M34_M37_M38_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M34_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M34_E1>() {
  return ::hyperprotobench::M34_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M34_E2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M34_E2>() {
  return ::hyperprotobench::M34_E2_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M43_M44_M46_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M43_M44_M46_E1>() {
  return ::hyperprotobench::M43_M44_M46_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M43_M48_M50_M51_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M43_M48_M50_M51_E1>() {
  return ::hyperprotobench::M43_M48_M50_M51_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M43_M48_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M43_M48_E1>() {
  return ::hyperprotobench::M43_M48_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M54_M55_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M54_M55_E1>() {
  return ::hyperprotobench::M54_M55_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M54_M61_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M54_M61_E1>() {
  return ::hyperprotobench::M54_M61_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M64_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M64_E1>() {
  return ::hyperprotobench::M64_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M72_M76_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M72_M76_E1>() {
  return ::hyperprotobench::M72_M76_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M72_M77_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M72_M77_E1>() {
  return ::hyperprotobench::M72_M77_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M82_M84_M85_M86_M87_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M82_M84_M85_M86_M87_E1>() {
  return ::hyperprotobench::M82_M84_M85_M86_M87_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M82_M84_M85_M86_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M82_M84_M85_M86_E1>() {
  return ::hyperprotobench::M82_M84_M85_M86_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M82_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M82_E1>() {
  return ::hyperprotobench::M82_E1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
