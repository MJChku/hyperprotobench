// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[46]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto;

 struct hyperprotobench_FriendStruct_M1_M2_M3_M4_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_M4_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M5_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M5_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M6_M7_M8_M9_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_M8_M9_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M6_M7_M8_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_M8_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M6_M7_M10_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_M10_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M6_M7_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M6_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M6_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_M12_M13_M14_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_M13_M14_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_M12_M13_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_M13_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_M12_M15_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_M15_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_M16_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_M16_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M11_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M11_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_M18_M19_M20_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_M19_M20_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_M18_M19_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_M19_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M22_M23_M24_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22_M23_M24_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M22_M23_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22_M23_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_M27_M28_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_M27_M28_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_M27_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M29_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M29_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M31_M32_M33_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32_M33_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M31_M32_M34_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32_M34_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M31_M32_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M35_M36_M37_M38_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M35_M36_M37_M38_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M35_M36_M37_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M35_M36_M37_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M35_M36_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M35_M36_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M35_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M35_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M39_M40_M41_M42_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M39_M40_M41_M42_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M39_M40_M41_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M39_M40_M41_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M39_M40_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M39_M40_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M39_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M39_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_M45_M46_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_M45_M46_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_M45_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_M44_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M43_ACCEL_DESCRIPTORS[];
};
namespace hyperprotobench {
class M1;
class M1DefaultTypeInternal;
extern M1DefaultTypeInternal _M1_default_instance_;
class M11;
class M11DefaultTypeInternal;
extern M11DefaultTypeInternal _M11_default_instance_;
class M11_M12;
class M11_M12DefaultTypeInternal;
extern M11_M12DefaultTypeInternal _M11_M12_default_instance_;
class M11_M12_M13;
class M11_M12_M13DefaultTypeInternal;
extern M11_M12_M13DefaultTypeInternal _M11_M12_M13_default_instance_;
class M11_M12_M13_M14;
class M11_M12_M13_M14DefaultTypeInternal;
extern M11_M12_M13_M14DefaultTypeInternal _M11_M12_M13_M14_default_instance_;
class M11_M12_M15;
class M11_M12_M15DefaultTypeInternal;
extern M11_M12_M15DefaultTypeInternal _M11_M12_M15_default_instance_;
class M11_M16;
class M11_M16DefaultTypeInternal;
extern M11_M16DefaultTypeInternal _M11_M16_default_instance_;
class M17;
class M17DefaultTypeInternal;
extern M17DefaultTypeInternal _M17_default_instance_;
class M17_M18;
class M17_M18DefaultTypeInternal;
extern M17_M18DefaultTypeInternal _M17_M18_default_instance_;
class M17_M18_M19;
class M17_M18_M19DefaultTypeInternal;
extern M17_M18_M19DefaultTypeInternal _M17_M18_M19_default_instance_;
class M17_M18_M19_M20;
class M17_M18_M19_M20DefaultTypeInternal;
extern M17_M18_M19_M20DefaultTypeInternal _M17_M18_M19_M20_default_instance_;
class M1_M2;
class M1_M2DefaultTypeInternal;
extern M1_M2DefaultTypeInternal _M1_M2_default_instance_;
class M1_M2_M3;
class M1_M2_M3DefaultTypeInternal;
extern M1_M2_M3DefaultTypeInternal _M1_M2_M3_default_instance_;
class M1_M2_M3_M4;
class M1_M2_M3_M4DefaultTypeInternal;
extern M1_M2_M3_M4DefaultTypeInternal _M1_M2_M3_M4_default_instance_;
class M1_M5;
class M1_M5DefaultTypeInternal;
extern M1_M5DefaultTypeInternal _M1_M5_default_instance_;
class M21;
class M21DefaultTypeInternal;
extern M21DefaultTypeInternal _M21_default_instance_;
class M21_M22;
class M21_M22DefaultTypeInternal;
extern M21_M22DefaultTypeInternal _M21_M22_default_instance_;
class M21_M22_M23;
class M21_M22_M23DefaultTypeInternal;
extern M21_M22_M23DefaultTypeInternal _M21_M22_M23_default_instance_;
class M21_M22_M23_M24;
class M21_M22_M23_M24DefaultTypeInternal;
extern M21_M22_M23_M24DefaultTypeInternal _M21_M22_M23_M24_default_instance_;
class M25;
class M25DefaultTypeInternal;
extern M25DefaultTypeInternal _M25_default_instance_;
class M25_M26;
class M25_M26DefaultTypeInternal;
extern M25_M26DefaultTypeInternal _M25_M26_default_instance_;
class M25_M26_M27;
class M25_M26_M27DefaultTypeInternal;
extern M25_M26_M27DefaultTypeInternal _M25_M26_M27_default_instance_;
class M25_M26_M27_M28;
class M25_M26_M27_M28DefaultTypeInternal;
extern M25_M26_M27_M28DefaultTypeInternal _M25_M26_M27_M28_default_instance_;
class M25_M29;
class M25_M29DefaultTypeInternal;
extern M25_M29DefaultTypeInternal _M25_M29_default_instance_;
class M30;
class M30DefaultTypeInternal;
extern M30DefaultTypeInternal _M30_default_instance_;
class M30_M31;
class M30_M31DefaultTypeInternal;
extern M30_M31DefaultTypeInternal _M30_M31_default_instance_;
class M30_M31_M32;
class M30_M31_M32DefaultTypeInternal;
extern M30_M31_M32DefaultTypeInternal _M30_M31_M32_default_instance_;
class M30_M31_M32_M33;
class M30_M31_M32_M33DefaultTypeInternal;
extern M30_M31_M32_M33DefaultTypeInternal _M30_M31_M32_M33_default_instance_;
class M30_M31_M32_M34;
class M30_M31_M32_M34DefaultTypeInternal;
extern M30_M31_M32_M34DefaultTypeInternal _M30_M31_M32_M34_default_instance_;
class M35;
class M35DefaultTypeInternal;
extern M35DefaultTypeInternal _M35_default_instance_;
class M35_M36;
class M35_M36DefaultTypeInternal;
extern M35_M36DefaultTypeInternal _M35_M36_default_instance_;
class M35_M36_M37;
class M35_M36_M37DefaultTypeInternal;
extern M35_M36_M37DefaultTypeInternal _M35_M36_M37_default_instance_;
class M35_M36_M37_M38;
class M35_M36_M37_M38DefaultTypeInternal;
extern M35_M36_M37_M38DefaultTypeInternal _M35_M36_M37_M38_default_instance_;
class M39;
class M39DefaultTypeInternal;
extern M39DefaultTypeInternal _M39_default_instance_;
class M39_M40;
class M39_M40DefaultTypeInternal;
extern M39_M40DefaultTypeInternal _M39_M40_default_instance_;
class M39_M40_M41;
class M39_M40_M41DefaultTypeInternal;
extern M39_M40_M41DefaultTypeInternal _M39_M40_M41_default_instance_;
class M39_M40_M41_M42;
class M39_M40_M41_M42DefaultTypeInternal;
extern M39_M40_M41_M42DefaultTypeInternal _M39_M40_M41_M42_default_instance_;
class M43;
class M43DefaultTypeInternal;
extern M43DefaultTypeInternal _M43_default_instance_;
class M43_M44;
class M43_M44DefaultTypeInternal;
extern M43_M44DefaultTypeInternal _M43_M44_default_instance_;
class M43_M44_M45;
class M43_M44_M45DefaultTypeInternal;
extern M43_M44_M45DefaultTypeInternal _M43_M44_M45_default_instance_;
class M43_M44_M45_M46;
class M43_M44_M45_M46DefaultTypeInternal;
extern M43_M44_M45_M46DefaultTypeInternal _M43_M44_M45_M46_default_instance_;
class M6;
class M6DefaultTypeInternal;
extern M6DefaultTypeInternal _M6_default_instance_;
class M6_M7;
class M6_M7DefaultTypeInternal;
extern M6_M7DefaultTypeInternal _M6_M7_default_instance_;
class M6_M7_M10;
class M6_M7_M10DefaultTypeInternal;
extern M6_M7_M10DefaultTypeInternal _M6_M7_M10_default_instance_;
class M6_M7_M8;
class M6_M7_M8DefaultTypeInternal;
extern M6_M7_M8DefaultTypeInternal _M6_M7_M8_default_instance_;
class M6_M7_M8_M9;
class M6_M7_M8_M9DefaultTypeInternal;
extern M6_M7_M8_M9DefaultTypeInternal _M6_M7_M8_M9_default_instance_;
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> ::hyperprotobench::M1* Arena::CreateMaybeMessage<::hyperprotobench::M1>(Arena*);
template<> ::hyperprotobench::M11* Arena::CreateMaybeMessage<::hyperprotobench::M11>(Arena*);
template<> ::hyperprotobench::M11_M12* Arena::CreateMaybeMessage<::hyperprotobench::M11_M12>(Arena*);
template<> ::hyperprotobench::M11_M12_M13* Arena::CreateMaybeMessage<::hyperprotobench::M11_M12_M13>(Arena*);
template<> ::hyperprotobench::M11_M12_M13_M14* Arena::CreateMaybeMessage<::hyperprotobench::M11_M12_M13_M14>(Arena*);
template<> ::hyperprotobench::M11_M12_M15* Arena::CreateMaybeMessage<::hyperprotobench::M11_M12_M15>(Arena*);
template<> ::hyperprotobench::M11_M16* Arena::CreateMaybeMessage<::hyperprotobench::M11_M16>(Arena*);
template<> ::hyperprotobench::M17* Arena::CreateMaybeMessage<::hyperprotobench::M17>(Arena*);
template<> ::hyperprotobench::M17_M18* Arena::CreateMaybeMessage<::hyperprotobench::M17_M18>(Arena*);
template<> ::hyperprotobench::M17_M18_M19* Arena::CreateMaybeMessage<::hyperprotobench::M17_M18_M19>(Arena*);
template<> ::hyperprotobench::M17_M18_M19_M20* Arena::CreateMaybeMessage<::hyperprotobench::M17_M18_M19_M20>(Arena*);
template<> ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2>(Arena*);
template<> ::hyperprotobench::M1_M2_M3* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2_M3>(Arena*);
template<> ::hyperprotobench::M1_M2_M3_M4* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2_M3_M4>(Arena*);
template<> ::hyperprotobench::M1_M5* Arena::CreateMaybeMessage<::hyperprotobench::M1_M5>(Arena*);
template<> ::hyperprotobench::M21* Arena::CreateMaybeMessage<::hyperprotobench::M21>(Arena*);
template<> ::hyperprotobench::M21_M22* Arena::CreateMaybeMessage<::hyperprotobench::M21_M22>(Arena*);
template<> ::hyperprotobench::M21_M22_M23* Arena::CreateMaybeMessage<::hyperprotobench::M21_M22_M23>(Arena*);
template<> ::hyperprotobench::M21_M22_M23_M24* Arena::CreateMaybeMessage<::hyperprotobench::M21_M22_M23_M24>(Arena*);
template<> ::hyperprotobench::M25* Arena::CreateMaybeMessage<::hyperprotobench::M25>(Arena*);
template<> ::hyperprotobench::M25_M26* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26>(Arena*);
template<> ::hyperprotobench::M25_M26_M27* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26_M27>(Arena*);
template<> ::hyperprotobench::M25_M26_M27_M28* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26_M27_M28>(Arena*);
template<> ::hyperprotobench::M25_M29* Arena::CreateMaybeMessage<::hyperprotobench::M25_M29>(Arena*);
template<> ::hyperprotobench::M30* Arena::CreateMaybeMessage<::hyperprotobench::M30>(Arena*);
template<> ::hyperprotobench::M30_M31* Arena::CreateMaybeMessage<::hyperprotobench::M30_M31>(Arena*);
template<> ::hyperprotobench::M30_M31_M32* Arena::CreateMaybeMessage<::hyperprotobench::M30_M31_M32>(Arena*);
template<> ::hyperprotobench::M30_M31_M32_M33* Arena::CreateMaybeMessage<::hyperprotobench::M30_M31_M32_M33>(Arena*);
template<> ::hyperprotobench::M30_M31_M32_M34* Arena::CreateMaybeMessage<::hyperprotobench::M30_M31_M32_M34>(Arena*);
template<> ::hyperprotobench::M35* Arena::CreateMaybeMessage<::hyperprotobench::M35>(Arena*);
template<> ::hyperprotobench::M35_M36* Arena::CreateMaybeMessage<::hyperprotobench::M35_M36>(Arena*);
template<> ::hyperprotobench::M35_M36_M37* Arena::CreateMaybeMessage<::hyperprotobench::M35_M36_M37>(Arena*);
template<> ::hyperprotobench::M35_M36_M37_M38* Arena::CreateMaybeMessage<::hyperprotobench::M35_M36_M37_M38>(Arena*);
template<> ::hyperprotobench::M39* Arena::CreateMaybeMessage<::hyperprotobench::M39>(Arena*);
template<> ::hyperprotobench::M39_M40* Arena::CreateMaybeMessage<::hyperprotobench::M39_M40>(Arena*);
template<> ::hyperprotobench::M39_M40_M41* Arena::CreateMaybeMessage<::hyperprotobench::M39_M40_M41>(Arena*);
template<> ::hyperprotobench::M39_M40_M41_M42* Arena::CreateMaybeMessage<::hyperprotobench::M39_M40_M41_M42>(Arena*);
template<> ::hyperprotobench::M43* Arena::CreateMaybeMessage<::hyperprotobench::M43>(Arena*);
template<> ::hyperprotobench::M43_M44* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44>(Arena*);
template<> ::hyperprotobench::M43_M44_M45* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44_M45>(Arena*);
template<> ::hyperprotobench::M43_M44_M45_M46* Arena::CreateMaybeMessage<::hyperprotobench::M43_M44_M45_M46>(Arena*);
template<> ::hyperprotobench::M6* Arena::CreateMaybeMessage<::hyperprotobench::M6>(Arena*);
template<> ::hyperprotobench::M6_M7* Arena::CreateMaybeMessage<::hyperprotobench::M6_M7>(Arena*);
template<> ::hyperprotobench::M6_M7_M10* Arena::CreateMaybeMessage<::hyperprotobench::M6_M7_M10>(Arena*);
template<> ::hyperprotobench::M6_M7_M8* Arena::CreateMaybeMessage<::hyperprotobench::M6_M7_M8>(Arena*);
template<> ::hyperprotobench::M6_M7_M8_M9* Arena::CreateMaybeMessage<::hyperprotobench::M6_M7_M8_M9>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hyperprotobench {

enum M1_M2_M3_E1 : int {
  M1_M2_M3_E1_E1_CONST_1 = 67,
  M1_M2_M3_E1_E1_CONST_2 = 74,
  M1_M2_M3_E1_E1_CONST_3 = 78,
  M1_M2_M3_E1_E1_CONST_4 = 16,
  M1_M2_M3_E1_E1_CONST_5 = 26
};
bool M1_M2_M3_E1_IsValid(int value);
constexpr M1_M2_M3_E1 M1_M2_M3_E1_E1_MIN = M1_M2_M3_E1_E1_CONST_4;
constexpr M1_M2_M3_E1 M1_M2_M3_E1_E1_MAX = M1_M2_M3_E1_E1_CONST_3;
constexpr int M1_M2_M3_E1_E1_ARRAYSIZE = M1_M2_M3_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_M3_E1_descriptor();
template<typename T>
inline const std::string& M1_M2_M3_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_M2_M3_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_M2_M3_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_M2_M3_E1_descriptor(), enum_t_value);
}
inline bool M1_M2_M3_E1_Parse(
    const std::string& name, M1_M2_M3_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_M2_M3_E1>(
    M1_M2_M3_E1_descriptor(), name, value);
}
enum M1_M2_E1 : int {
  M1_M2_E1_E1_CONST_1 = 73,
  M1_M2_E1_E1_CONST_2 = 9,
  M1_M2_E1_E1_CONST_3 = 110,
  M1_M2_E1_E1_CONST_4 = 51,
  M1_M2_E1_E1_CONST_5 = 21
};
bool M1_M2_E1_IsValid(int value);
constexpr M1_M2_E1 M1_M2_E1_E1_MIN = M1_M2_E1_E1_CONST_2;
constexpr M1_M2_E1 M1_M2_E1_E1_MAX = M1_M2_E1_E1_CONST_3;
constexpr int M1_M2_E1_E1_ARRAYSIZE = M1_M2_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_E1_descriptor();
template<typename T>
inline const std::string& M1_M2_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_M2_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_M2_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_M2_E1_descriptor(), enum_t_value);
}
inline bool M1_M2_E1_Parse(
    const std::string& name, M1_M2_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_M2_E1>(
    M1_M2_E1_descriptor(), name, value);
}
enum M6_M7_E1 : int {
  M6_M7_E1_E1_CONST_1 = 33,
  M6_M7_E1_E1_CONST_2 = 67,
  M6_M7_E1_E1_CONST_3 = 39,
  M6_M7_E1_E1_CONST_4 = 115,
  M6_M7_E1_E1_CONST_5 = 60
};
bool M6_M7_E1_IsValid(int value);
constexpr M6_M7_E1 M6_M7_E1_E1_MIN = M6_M7_E1_E1_CONST_1;
constexpr M6_M7_E1 M6_M7_E1_E1_MAX = M6_M7_E1_E1_CONST_4;
constexpr int M6_M7_E1_E1_ARRAYSIZE = M6_M7_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M6_M7_E1_descriptor();
template<typename T>
inline const std::string& M6_M7_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M6_M7_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M6_M7_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M6_M7_E1_descriptor(), enum_t_value);
}
inline bool M6_M7_E1_Parse(
    const std::string& name, M6_M7_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M6_M7_E1>(
    M6_M7_E1_descriptor(), name, value);
}
enum M11_M12_M13_M14_E1 : int {
  M11_M12_M13_M14_E1_E1_CONST_1 = 5,
  M11_M12_M13_M14_E1_E1_CONST_2 = 75,
  M11_M12_M13_M14_E1_E1_CONST_3 = 110,
  M11_M12_M13_M14_E1_E1_CONST_4 = 88,
  M11_M12_M13_M14_E1_E1_CONST_5 = 60
};
bool M11_M12_M13_M14_E1_IsValid(int value);
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14_E1_E1_MIN = M11_M12_M13_M14_E1_E1_CONST_1;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14_E1_E1_MAX = M11_M12_M13_M14_E1_E1_CONST_3;
constexpr int M11_M12_M13_M14_E1_E1_ARRAYSIZE = M11_M12_M13_M14_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M11_M12_M13_M14_E1_descriptor();
template<typename T>
inline const std::string& M11_M12_M13_M14_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M11_M12_M13_M14_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M11_M12_M13_M14_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M11_M12_M13_M14_E1_descriptor(), enum_t_value);
}
inline bool M11_M12_M13_M14_E1_Parse(
    const std::string& name, M11_M12_M13_M14_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M11_M12_M13_M14_E1>(
    M11_M12_M13_M14_E1_descriptor(), name, value);
}
enum M25_M26_M27_E1 : int {
  M25_M26_M27_E1_E1_CONST_1 = 100,
  M25_M26_M27_E1_E1_CONST_2 = 4,
  M25_M26_M27_E1_E1_CONST_3 = 36,
  M25_M26_M27_E1_E1_CONST_4 = 79,
  M25_M26_M27_E1_E1_CONST_5 = 83
};
bool M25_M26_M27_E1_IsValid(int value);
constexpr M25_M26_M27_E1 M25_M26_M27_E1_E1_MIN = M25_M26_M27_E1_E1_CONST_2;
constexpr M25_M26_M27_E1 M25_M26_M27_E1_E1_MAX = M25_M26_M27_E1_E1_CONST_1;
constexpr int M25_M26_M27_E1_E1_ARRAYSIZE = M25_M26_M27_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M26_M27_E1_descriptor();
template<typename T>
inline const std::string& M25_M26_M27_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M25_M26_M27_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M25_M26_M27_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M25_M26_M27_E1_descriptor(), enum_t_value);
}
inline bool M25_M26_M27_E1_Parse(
    const std::string& name, M25_M26_M27_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M25_M26_M27_E1>(
    M25_M26_M27_E1_descriptor(), name, value);
}
enum M30_M31_M32_E1 : int {
  M30_M31_M32_E1_E1_CONST_1 = 74,
  M30_M31_M32_E1_E1_CONST_2 = 50,
  M30_M31_M32_E1_E1_CONST_3 = 21,
  M30_M31_M32_E1_E1_CONST_4 = 55,
  M30_M31_M32_E1_E1_CONST_5 = 56
};
bool M30_M31_M32_E1_IsValid(int value);
constexpr M30_M31_M32_E1 M30_M31_M32_E1_E1_MIN = M30_M31_M32_E1_E1_CONST_3;
constexpr M30_M31_M32_E1 M30_M31_M32_E1_E1_MAX = M30_M31_M32_E1_E1_CONST_1;
constexpr int M30_M31_M32_E1_E1_ARRAYSIZE = M30_M31_M32_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M30_M31_M32_E1_descriptor();
template<typename T>
inline const std::string& M30_M31_M32_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M30_M31_M32_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M30_M31_M32_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M30_M31_M32_E1_descriptor(), enum_t_value);
}
inline bool M30_M31_M32_E1_Parse(
    const std::string& name, M30_M31_M32_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M30_M31_M32_E1>(
    M30_M31_M32_E1_descriptor(), name, value);
}
enum M39_E1 : int {
  M39_E1_E1_CONST_1 = 65,
  M39_E1_E1_CONST_2 = 21,
  M39_E1_E1_CONST_3 = 24,
  M39_E1_E1_CONST_4 = 122,
  M39_E1_E1_CONST_5 = 63
};
bool M39_E1_IsValid(int value);
constexpr M39_E1 M39_E1_E1_MIN = M39_E1_E1_CONST_2;
constexpr M39_E1 M39_E1_E1_MAX = M39_E1_E1_CONST_4;
constexpr int M39_E1_E1_ARRAYSIZE = M39_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M39_E1_descriptor();
template<typename T>
inline const std::string& M39_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M39_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M39_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M39_E1_descriptor(), enum_t_value);
}
inline bool M39_E1_Parse(
    const std::string& name, M39_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M39_E1>(
    M39_E1_descriptor(), name, value);
}
enum M43_E1 : int {
  M43_E1_E1_CONST_1 = 103,
  M43_E1_E1_CONST_2 = 14,
  M43_E1_E1_CONST_3 = 113,
  M43_E1_E1_CONST_4 = 116,
  M43_E1_E1_CONST_5 = 26
};
bool M43_E1_IsValid(int value);
constexpr M43_E1 M43_E1_E1_MIN = M43_E1_E1_CONST_2;
constexpr M43_E1 M43_E1_E1_MAX = M43_E1_E1_CONST_4;
constexpr int M43_E1_E1_ARRAYSIZE = M43_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_E1_descriptor();
template<typename T>
inline const std::string& M43_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M43_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M43_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M43_E1_descriptor(), enum_t_value);
}
inline bool M43_E1_Parse(
    const std::string& name, M43_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M43_E1>(
    M43_E1_descriptor(), name, value);
}
// ===================================================================

class M1_M2_M3_M4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2.M3.M4) */ {
 public:
  M1_M2_M3_M4();
  virtual ~M1_M2_M3_M4();

  M1_M2_M3_M4(const M1_M2_M3_M4& from);
  M1_M2_M3_M4(M1_M2_M3_M4&& from) noexcept
    : M1_M2_M3_M4() {
    *this = ::std::move(from);
  }

  inline M1_M2_M3_M4& operator=(const M1_M2_M3_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2_M3_M4& operator=(M1_M2_M3_M4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2_M3_M4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2_M3_M4* internal_default_instance() {
    return reinterpret_cast<const M1_M2_M3_M4*>(
               &_M1_M2_M3_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(M1_M2_M3_M4& a, M1_M2_M3_M4& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2_M3_M4* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2_M3_M4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2_M3_M4* New() const final {
    return CreateMaybeMessage<M1_M2_M3_M4>(nullptr);
  }

  M1_M2_M3_M4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2_M3_M4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2_M3_M4& from);
  void MergeFrom(const M1_M2_M3_M4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2_M3_M4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2.M3.M4";
  }
  protected:
  explicit M1_M2_M3_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF5FieldNumber = 7,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional uint64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2.M3.M4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_M3_M4_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M2_M3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2.M3) */ {
 public:
  M1_M2_M3();
  virtual ~M1_M2_M3();

  M1_M2_M3(const M1_M2_M3& from);
  M1_M2_M3(M1_M2_M3&& from) noexcept
    : M1_M2_M3() {
    *this = ::std::move(from);
  }

  inline M1_M2_M3& operator=(const M1_M2_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2_M3& operator=(M1_M2_M3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2_M3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2_M3* internal_default_instance() {
    return reinterpret_cast<const M1_M2_M3*>(
               &_M1_M2_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(M1_M2_M3& a, M1_M2_M3& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2_M3* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2_M3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2_M3* New() const final {
    return CreateMaybeMessage<M1_M2_M3>(nullptr);
  }

  M1_M2_M3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2_M3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2_M3& from);
  void MergeFrom(const M1_M2_M3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2_M3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2.M3";
  }
  protected:
  explicit M1_M2_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2_M3_M4 M4;

  typedef M1_M2_M3_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M1_M2_M3_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M1_M2_M3_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M1_M2_M3_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M1_M2_M3_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M1_M2_M3_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M1_M2_M3_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M1_M2_M3_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M1_M2_M3_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M1_M2_M3_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M1_M2_M3_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M1_M2_M3_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M1_M2_M3_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF4FieldNumber = 7,
    kF3FieldNumber = 5,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF8FieldNumber = 13,
    kF9FieldNumber = 14,
    kF5FieldNumber = 8,
  };
  // optional .hyperprotobench.M1.M2.M3.M4 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M2_M3_M4& f1() const;
  ::hyperprotobench::M1_M2_M3_M4* release_f1();
  ::hyperprotobench::M1_M2_M3_M4* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M2_M3_M4* f1);
  private:
  const ::hyperprotobench::M1_M2_M3_M4& _internal_f1() const;
  ::hyperprotobench::M1_M2_M3_M4* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M2_M3_M4* f1);
  ::hyperprotobench::M1_M2_M3_M4* unsafe_arena_release_f1();

  // optional int64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional bool f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional bool f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // optional bool f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  bool f8() const;
  void set_f8(bool value);
  private:
  bool _internal_f8() const;
  void _internal_set_f8(bool value);
  public:

  // optional bool f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  bool f9() const;
  void set_f9(bool value);
  private:
  bool _internal_f9() const;
  void _internal_set_f9(bool value);
  public:

  // optional .hyperprotobench.M1.M2.M3.E1 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::hyperprotobench::M1_M2_M3_E1 f5() const;
  void set_f5(::hyperprotobench::M1_M2_M3_E1 value);
  private:
  ::hyperprotobench::M1_M2_M3_E1 _internal_f5() const;
  void _internal_set_f5(::hyperprotobench::M1_M2_M3_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2.M3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M2_M3_M4* f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  bool f3_;
  bool f6_;
  bool f7_;
  bool f8_;
  bool f9_;
  int f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2) */ {
 public:
  M1_M2();
  virtual ~M1_M2();

  M1_M2(const M1_M2& from);
  M1_M2(M1_M2&& from) noexcept
    : M1_M2() {
    *this = ::std::move(from);
  }

  inline M1_M2& operator=(const M1_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2& operator=(M1_M2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2* internal_default_instance() {
    return reinterpret_cast<const M1_M2*>(
               &_M1_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(M1_M2& a, M1_M2& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2* New() const final {
    return CreateMaybeMessage<M1_M2>(nullptr);
  }

  M1_M2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2& from);
  void MergeFrom(const M1_M2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2";
  }
  protected:
  explicit M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2_M3 M3;

  typedef M1_M2_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M1_M2_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M1_M2_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M1_M2_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M1_M2_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M1_M2_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M1_M2_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M1_M2_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M1_M2_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M1_M2_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M1_M2_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M1_M2_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M1_M2_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 6,
    kF8FieldNumber = 9,
    kF7FieldNumber = 8,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 5,
    kF6FieldNumber = 7,
    kF1FieldNumber = 1,
  };
  // optional string f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional string f8 = 9;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const char* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional .hyperprotobench.M1.M2.M3 f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M1_M2_M3& f7() const;
  ::hyperprotobench::M1_M2_M3* release_f7();
  ::hyperprotobench::M1_M2_M3* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M1_M2_M3* f7);
  private:
  const ::hyperprotobench::M1_M2_M3& _internal_f7() const;
  ::hyperprotobench::M1_M2_M3* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M1_M2_M3* f7);
  ::hyperprotobench::M1_M2_M3* unsafe_arena_release_f7();

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  double f4() const;
  void set_f4(double value);
  private:
  double _internal_f4() const;
  void _internal_set_f4(double value);
  public:

  // optional int64 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .hyperprotobench.M1.M2.E1 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::hyperprotobench::M1_M2_E1 f1() const;
  void set_f1(::hyperprotobench::M1_M2_E1 value);
  private:
  ::hyperprotobench::M1_M2_E1 _internal_f1() const;
  void _internal_set_f1(::hyperprotobench::M1_M2_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::hyperprotobench::M1_M2_M3* f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  double f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  int f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M5) */ {
 public:
  M1_M5();
  virtual ~M1_M5();

  M1_M5(const M1_M5& from);
  M1_M5(M1_M5&& from) noexcept
    : M1_M5() {
    *this = ::std::move(from);
  }

  inline M1_M5& operator=(const M1_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M5& operator=(M1_M5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M5* internal_default_instance() {
    return reinterpret_cast<const M1_M5*>(
               &_M1_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(M1_M5& a, M1_M5& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M5* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M5* New() const final {
    return CreateMaybeMessage<M1_M5>(nullptr);
  }

  M1_M5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M5& from);
  void MergeFrom(const M1_M5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M5";
  }
  protected:
  explicit M1_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M5_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1) */ {
 public:
  M1();
  virtual ~M1();

  M1(const M1& from);
  M1(M1&& from) noexcept
    : M1() {
    *this = ::std::move(from);
  }

  inline M1& operator=(const M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1& operator=(M1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1* internal_default_instance() {
    return reinterpret_cast<const M1*>(
               &_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(M1& a, M1& b) {
    a.Swap(&b);
  }
  inline void Swap(M1* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1* New() const final {
    return CreateMaybeMessage<M1>(nullptr);
  }

  M1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1& from);
  void MergeFrom(const M1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1";
  }
  protected:
  explicit M1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2 M2;
  typedef M1_M5 M5;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF8FieldNumber = 13,
    kF11FieldNumber = 20,
    kF5FieldNumber = 7,
    kF10FieldNumber = 18,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF6FieldNumber = 8,
    kF7FieldNumber = 12,
    kF9FieldNumber = 17,
  };
  // optional string f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const char* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional string f11 = 20;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const std::string& f11() const;
  void set_f11(const std::string& value);
  void set_f11(std::string&& value);
  void set_f11(const char* value);
  void set_f11(const char* value, size_t size);
  std::string* mutable_f11();
  std::string* release_f11();
  void set_allocated_f11(std::string* f11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f11(
      std::string* f11);
  private:
  const std::string& _internal_f11() const;
  void _internal_set_f11(const std::string& value);
  std::string* _internal_mutable_f11();
  public:

  // optional .hyperprotobench.M1.M2 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M1_M2& f5() const;
  ::hyperprotobench::M1_M2* release_f5();
  ::hyperprotobench::M1_M2* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M1_M2* f5);
  private:
  const ::hyperprotobench::M1_M2& _internal_f5() const;
  ::hyperprotobench::M1_M2* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M1_M2* f5);
  ::hyperprotobench::M1_M2* unsafe_arena_release_f5();

  // optional .hyperprotobench.M1.M5 f10 = 18;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M1_M5& f10() const;
  ::hyperprotobench::M1_M5* release_f10();
  ::hyperprotobench::M1_M5* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M1_M5* f10);
  private:
  const ::hyperprotobench::M1_M5& _internal_f10() const;
  ::hyperprotobench::M1_M5* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M1_M5* f10);
  ::hyperprotobench::M1_M5* unsafe_arena_release_f10();

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 12;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f11_;
  ::hyperprotobench::M1_M2* f5_;
  ::hyperprotobench::M1_M5* f10_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M6_M7_M8_M9 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M6.M7.M8.M9) */ {
 public:
  M6_M7_M8_M9();
  virtual ~M6_M7_M8_M9();

  M6_M7_M8_M9(const M6_M7_M8_M9& from);
  M6_M7_M8_M9(M6_M7_M8_M9&& from) noexcept
    : M6_M7_M8_M9() {
    *this = ::std::move(from);
  }

  inline M6_M7_M8_M9& operator=(const M6_M7_M8_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline M6_M7_M8_M9& operator=(M6_M7_M8_M9&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M6_M7_M8_M9& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M6_M7_M8_M9* internal_default_instance() {
    return reinterpret_cast<const M6_M7_M8_M9*>(
               &_M6_M7_M8_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(M6_M7_M8_M9& a, M6_M7_M8_M9& b) {
    a.Swap(&b);
  }
  inline void Swap(M6_M7_M8_M9* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M6_M7_M8_M9* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M6_M7_M8_M9* New() const final {
    return CreateMaybeMessage<M6_M7_M8_M9>(nullptr);
  }

  M6_M7_M8_M9* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M6_M7_M8_M9>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M6_M7_M8_M9& from);
  void MergeFrom(const M6_M7_M8_M9& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M6_M7_M8_M9* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M6.M7.M8.M9";
  }
  protected:
  explicit M6_M7_M8_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M6.M7.M8.M9)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M6_M7_M8_M9_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M6_M7_M8 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M6.M7.M8) */ {
 public:
  M6_M7_M8();
  virtual ~M6_M7_M8();

  M6_M7_M8(const M6_M7_M8& from);
  M6_M7_M8(M6_M7_M8&& from) noexcept
    : M6_M7_M8() {
    *this = ::std::move(from);
  }

  inline M6_M7_M8& operator=(const M6_M7_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline M6_M7_M8& operator=(M6_M7_M8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M6_M7_M8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M6_M7_M8* internal_default_instance() {
    return reinterpret_cast<const M6_M7_M8*>(
               &_M6_M7_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(M6_M7_M8& a, M6_M7_M8& b) {
    a.Swap(&b);
  }
  inline void Swap(M6_M7_M8* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M6_M7_M8* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M6_M7_M8* New() const final {
    return CreateMaybeMessage<M6_M7_M8>(nullptr);
  }

  M6_M7_M8* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M6_M7_M8>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M6_M7_M8& from);
  void MergeFrom(const M6_M7_M8& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M6_M7_M8* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M6.M7.M8";
  }
  protected:
  explicit M6_M7_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M6_M7_M8_M9 M9;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M6.M7.M8.M9 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M6_M7_M8_M9& f2() const;
  ::hyperprotobench::M6_M7_M8_M9* release_f2();
  ::hyperprotobench::M6_M7_M8_M9* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M6_M7_M8_M9* f2);
  private:
  const ::hyperprotobench::M6_M7_M8_M9& _internal_f2() const;
  ::hyperprotobench::M6_M7_M8_M9* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M6_M7_M8_M9* f2);
  ::hyperprotobench::M6_M7_M8_M9* unsafe_arena_release_f2();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M6.M7.M8)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M6_M7_M8_M9* f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M6_M7_M8_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M6_M7_M10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M6.M7.M10) */ {
 public:
  M6_M7_M10();
  virtual ~M6_M7_M10();

  M6_M7_M10(const M6_M7_M10& from);
  M6_M7_M10(M6_M7_M10&& from) noexcept
    : M6_M7_M10() {
    *this = ::std::move(from);
  }

  inline M6_M7_M10& operator=(const M6_M7_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline M6_M7_M10& operator=(M6_M7_M10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M6_M7_M10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M6_M7_M10* internal_default_instance() {
    return reinterpret_cast<const M6_M7_M10*>(
               &_M6_M7_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(M6_M7_M10& a, M6_M7_M10& b) {
    a.Swap(&b);
  }
  inline void Swap(M6_M7_M10* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M6_M7_M10* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M6_M7_M10* New() const final {
    return CreateMaybeMessage<M6_M7_M10>(nullptr);
  }

  M6_M7_M10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M6_M7_M10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M6_M7_M10& from);
  void MergeFrom(const M6_M7_M10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M6_M7_M10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M6.M7.M10";
  }
  protected:
  explicit M6_M7_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M6.M7.M10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M6_M7_M10_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M6_M7 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M6.M7) */ {
 public:
  M6_M7();
  virtual ~M6_M7();

  M6_M7(const M6_M7& from);
  M6_M7(M6_M7&& from) noexcept
    : M6_M7() {
    *this = ::std::move(from);
  }

  inline M6_M7& operator=(const M6_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline M6_M7& operator=(M6_M7&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M6_M7& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M6_M7* internal_default_instance() {
    return reinterpret_cast<const M6_M7*>(
               &_M6_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(M6_M7& a, M6_M7& b) {
    a.Swap(&b);
  }
  inline void Swap(M6_M7* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M6_M7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M6_M7* New() const final {
    return CreateMaybeMessage<M6_M7>(nullptr);
  }

  M6_M7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M6_M7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M6_M7& from);
  void MergeFrom(const M6_M7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M6_M7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M6.M7";
  }
  protected:
  explicit M6_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M6_M7_M8 M8;
  typedef M6_M7_M10 M10;

  typedef M6_M7_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M6_M7_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M6_M7_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M6_M7_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M6_M7_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M6_M7_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M6_M7_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M6_M7_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M6_M7_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M6_M7_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M6_M7_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M6_M7_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M6_M7_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF8FieldNumber = 10,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF2FieldNumber = 2,
    kF7FieldNumber = 9,
    kF5FieldNumber = 6,
    kF6FieldNumber = 7,
  };
  // optional .hyperprotobench.M6.M7.M8 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M6_M7_M8& f1() const;
  ::hyperprotobench::M6_M7_M8* release_f1();
  ::hyperprotobench::M6_M7_M8* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M6_M7_M8* f1);
  private:
  const ::hyperprotobench::M6_M7_M8& _internal_f1() const;
  ::hyperprotobench::M6_M7_M8* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M6_M7_M8* f1);
  ::hyperprotobench::M6_M7_M8* unsafe_arena_release_f1();

  // optional .hyperprotobench.M6.M7.M10 f8 = 10;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M6_M7_M10& f8() const;
  ::hyperprotobench::M6_M7_M10* release_f8();
  ::hyperprotobench::M6_M7_M10* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M6_M7_M10* f8);
  private:
  const ::hyperprotobench::M6_M7_M10& _internal_f8() const;
  ::hyperprotobench::M6_M7_M10* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M6_M7_M10* f8);
  ::hyperprotobench::M6_M7_M10* unsafe_arena_release_f8();

  // optional double f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  double f3() const;
  void set_f3(double value);
  private:
  double _internal_f3() const;
  void _internal_set_f3(double value);
  public:

  // optional int64 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f7 = 9;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // optional uint64 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .hyperprotobench.M6.M7.E1 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::hyperprotobench::M6_M7_E1 f6() const;
  void set_f6(::hyperprotobench::M6_M7_E1 value);
  private:
  ::hyperprotobench::M6_M7_E1 _internal_f6() const;
  void _internal_set_f6(::hyperprotobench::M6_M7_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M6.M7)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M6_M7_M8* f1_;
  ::hyperprotobench::M6_M7_M10* f8_;
  double f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  bool f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f5_;
  int f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M6_M7_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M6) */ {
 public:
  M6();
  virtual ~M6();

  M6(const M6& from);
  M6(M6&& from) noexcept
    : M6() {
    *this = ::std::move(from);
  }

  inline M6& operator=(const M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline M6& operator=(M6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M6* internal_default_instance() {
    return reinterpret_cast<const M6*>(
               &_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(M6& a, M6& b) {
    a.Swap(&b);
  }
  inline void Swap(M6* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M6* New() const final {
    return CreateMaybeMessage<M6>(nullptr);
  }

  M6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M6& from);
  void MergeFrom(const M6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M6";
  }
  protected:
  explicit M6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M6_M7 M7;

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 13,
    kF8FieldNumber = 16,
    kF9FieldNumber = 17,
    kF1FieldNumber = 1,
    kF3FieldNumber = 11,
    kF2FieldNumber = 9,
    kF4FieldNumber = 12,
    kF11FieldNumber = 20,
    kF6FieldNumber = 14,
    kF7FieldNumber = 15,
    kF10FieldNumber = 19,
  };
  // optional string f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional .hyperprotobench.M6.M7 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M6_M7& f9() const;
  ::hyperprotobench::M6_M7* release_f9();
  ::hyperprotobench::M6_M7* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M6_M7* f9);
  private:
  const ::hyperprotobench::M6_M7& _internal_f9() const;
  ::hyperprotobench::M6_M7* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M6_M7* f9);
  ::hyperprotobench::M6_M7* unsafe_arena_release_f9();

  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional bool f3 = 11;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional int32 f2 = 9;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f4 = 12;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f11 = 20;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int32 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f10 = 19;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::hyperprotobench::M6_M7* f9_;
  bool f1_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f11_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M6_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11_M12_M13_M14 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11.M12.M13.M14) */ {
 public:
  M11_M12_M13_M14();
  virtual ~M11_M12_M13_M14();

  M11_M12_M13_M14(const M11_M12_M13_M14& from);
  M11_M12_M13_M14(M11_M12_M13_M14&& from) noexcept
    : M11_M12_M13_M14() {
    *this = ::std::move(from);
  }

  inline M11_M12_M13_M14& operator=(const M11_M12_M13_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11_M12_M13_M14& operator=(M11_M12_M13_M14&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11_M12_M13_M14& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11_M12_M13_M14* internal_default_instance() {
    return reinterpret_cast<const M11_M12_M13_M14*>(
               &_M11_M12_M13_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(M11_M12_M13_M14& a, M11_M12_M13_M14& b) {
    a.Swap(&b);
  }
  inline void Swap(M11_M12_M13_M14* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11_M12_M13_M14* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11_M12_M13_M14* New() const final {
    return CreateMaybeMessage<M11_M12_M13_M14>(nullptr);
  }

  M11_M12_M13_M14* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11_M12_M13_M14>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11_M12_M13_M14& from);
  void MergeFrom(const M11_M12_M13_M14& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11_M12_M13_M14* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11.M12.M13.M14";
  }
  protected:
  explicit M11_M12_M13_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M11_M12_M13_M14_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M11_M12_M13_M14_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M11_M12_M13_M14_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M11_M12_M13_M14_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M11_M12_M13_M14_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M11_M12_M13_M14_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M11_M12_M13_M14_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M11_M12_M13_M14_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M11_M12_M13_M14_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M11_M12_M13_M14_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M11_M12_M13_M14_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M11_M12_M13_M14_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M11_M12_M13_M14_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF2FieldNumber = 3,
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
  };
  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  bool f2() const;
  void set_f2(bool value);
  private:
  bool _internal_f2() const;
  void _internal_set_f2(bool value);
  public:

  // optional fixed32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .hyperprotobench.M11.M12.M13.M14.E1 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::hyperprotobench::M11_M12_M13_M14_E1 f5() const;
  void set_f5(::hyperprotobench::M11_M12_M13_M14_E1 value);
  private:
  ::hyperprotobench::M11_M12_M13_M14_E1 _internal_f5() const;
  void _internal_set_f5(::hyperprotobench::M11_M12_M13_M14_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11.M12.M13.M14)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  bool f2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f4_;
  int f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_M12_M13_M14_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11_M12_M13 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11.M12.M13) */ {
 public:
  M11_M12_M13();
  virtual ~M11_M12_M13();

  M11_M12_M13(const M11_M12_M13& from);
  M11_M12_M13(M11_M12_M13&& from) noexcept
    : M11_M12_M13() {
    *this = ::std::move(from);
  }

  inline M11_M12_M13& operator=(const M11_M12_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11_M12_M13& operator=(M11_M12_M13&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11_M12_M13& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11_M12_M13* internal_default_instance() {
    return reinterpret_cast<const M11_M12_M13*>(
               &_M11_M12_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(M11_M12_M13& a, M11_M12_M13& b) {
    a.Swap(&b);
  }
  inline void Swap(M11_M12_M13* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11_M12_M13* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11_M12_M13* New() const final {
    return CreateMaybeMessage<M11_M12_M13>(nullptr);
  }

  M11_M12_M13* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11_M12_M13>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11_M12_M13& from);
  void MergeFrom(const M11_M12_M13& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11_M12_M13* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11.M12.M13";
  }
  protected:
  explicit M11_M12_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M11_M12_M13_M14 M14;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M11.M12.M13.M14 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M11_M12_M13_M14& f2() const;
  ::hyperprotobench::M11_M12_M13_M14* release_f2();
  ::hyperprotobench::M11_M12_M13_M14* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M11_M12_M13_M14* f2);
  private:
  const ::hyperprotobench::M11_M12_M13_M14& _internal_f2() const;
  ::hyperprotobench::M11_M12_M13_M14* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M11_M12_M13_M14* f2);
  ::hyperprotobench::M11_M12_M13_M14* unsafe_arena_release_f2();

  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11.M12.M13)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M11_M12_M13_M14* f2_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_M12_M13_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11_M12_M15 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11.M12.M15) */ {
 public:
  M11_M12_M15();
  virtual ~M11_M12_M15();

  M11_M12_M15(const M11_M12_M15& from);
  M11_M12_M15(M11_M12_M15&& from) noexcept
    : M11_M12_M15() {
    *this = ::std::move(from);
  }

  inline M11_M12_M15& operator=(const M11_M12_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11_M12_M15& operator=(M11_M12_M15&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11_M12_M15& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11_M12_M15* internal_default_instance() {
    return reinterpret_cast<const M11_M12_M15*>(
               &_M11_M12_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(M11_M12_M15& a, M11_M12_M15& b) {
    a.Swap(&b);
  }
  inline void Swap(M11_M12_M15* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11_M12_M15* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11_M12_M15* New() const final {
    return CreateMaybeMessage<M11_M12_M15>(nullptr);
  }

  M11_M12_M15* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11_M12_M15>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11_M12_M15& from);
  void MergeFrom(const M11_M12_M15& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11_M12_M15* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11.M12.M15";
  }
  protected:
  explicit M11_M12_M15(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional int64 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11.M12.M15)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_M12_M15_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11_M12 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11.M12) */ {
 public:
  M11_M12();
  virtual ~M11_M12();

  M11_M12(const M11_M12& from);
  M11_M12(M11_M12&& from) noexcept
    : M11_M12() {
    *this = ::std::move(from);
  }

  inline M11_M12& operator=(const M11_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11_M12& operator=(M11_M12&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11_M12& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11_M12* internal_default_instance() {
    return reinterpret_cast<const M11_M12*>(
               &_M11_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(M11_M12& a, M11_M12& b) {
    a.Swap(&b);
  }
  inline void Swap(M11_M12* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11_M12* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11_M12* New() const final {
    return CreateMaybeMessage<M11_M12>(nullptr);
  }

  M11_M12* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11_M12>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11_M12& from);
  void MergeFrom(const M11_M12& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11_M12* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11.M12";
  }
  protected:
  explicit M11_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M11_M12_M13 M13;
  typedef M11_M12_M15 M15;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 6,
    kF5FieldNumber = 7,
    kF3FieldNumber = 4,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M11.M12.M13 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M11_M12_M13& f4() const;
  ::hyperprotobench::M11_M12_M13* release_f4();
  ::hyperprotobench::M11_M12_M13* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M11_M12_M13* f4);
  private:
  const ::hyperprotobench::M11_M12_M13& _internal_f4() const;
  ::hyperprotobench::M11_M12_M13* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M11_M12_M13* f4);
  ::hyperprotobench::M11_M12_M13* unsafe_arena_release_f4();

  // optional .hyperprotobench.M11.M12.M15 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M11_M12_M15& f5() const;
  ::hyperprotobench::M11_M12_M15* release_f5();
  ::hyperprotobench::M11_M12_M15* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M11_M12_M15* f5);
  private:
  const ::hyperprotobench::M11_M12_M15& _internal_f5() const;
  ::hyperprotobench::M11_M12_M15* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M11_M12_M15* f5);
  ::hyperprotobench::M11_M12_M15* unsafe_arena_release_f5();

  // optional int32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11.M12)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M11_M12_M13* f4_;
  ::hyperprotobench::M11_M12_M15* f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11_M16 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11.M16) */ {
 public:
  M11_M16();
  virtual ~M11_M16();

  M11_M16(const M11_M16& from);
  M11_M16(M11_M16&& from) noexcept
    : M11_M16() {
    *this = ::std::move(from);
  }

  inline M11_M16& operator=(const M11_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11_M16& operator=(M11_M16&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11_M16& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11_M16* internal_default_instance() {
    return reinterpret_cast<const M11_M16*>(
               &_M11_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(M11_M16& a, M11_M16& b) {
    a.Swap(&b);
  }
  inline void Swap(M11_M16* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11_M16* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11_M16* New() const final {
    return CreateMaybeMessage<M11_M16>(nullptr);
  }

  M11_M16* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11_M16>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11_M16& from);
  void MergeFrom(const M11_M16& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11_M16* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11.M16";
  }
  protected:
  explicit M11_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11.M16)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_M16_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M11 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M11) */ {
 public:
  M11();
  virtual ~M11();

  M11(const M11& from);
  M11(M11&& from) noexcept
    : M11() {
    *this = ::std::move(from);
  }

  inline M11& operator=(const M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline M11& operator=(M11&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M11& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M11* internal_default_instance() {
    return reinterpret_cast<const M11*>(
               &_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(M11& a, M11& b) {
    a.Swap(&b);
  }
  inline void Swap(M11* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M11* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M11* New() const final {
    return CreateMaybeMessage<M11>(nullptr);
  }

  M11* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M11>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M11& from);
  void MergeFrom(const M11& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M11* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M11";
  }
  protected:
  explicit M11(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M11_M12 M12;
  typedef M11_M16 M16;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF7FieldNumber = 7,
    kF1FieldNumber = 1,
    kF4FieldNumber = 4,
    kF5FieldNumber = 5,
    kF6FieldNumber = 6,
    kF8FieldNumber = 8,
    kF9FieldNumber = 10,
    kF10FieldNumber = 11,
    kF11FieldNumber = 12,
    kF12FieldNumber = 13,
    kF13FieldNumber = 14,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f7 = 7;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional .hyperprotobench.M11.M12 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M11_M12& f1() const;
  ::hyperprotobench::M11_M12* release_f1();
  ::hyperprotobench::M11_M12* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M11_M12* f1);
  private:
  const ::hyperprotobench::M11_M12& _internal_f1() const;
  ::hyperprotobench::M11_M12* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M11_M12* f1);
  ::hyperprotobench::M11_M12* unsafe_arena_release_f1();

  // optional .hyperprotobench.M11.M16 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M11_M16& f4() const;
  ::hyperprotobench::M11_M16* release_f4();
  ::hyperprotobench::M11_M16* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M11_M16* f4);
  private:
  const ::hyperprotobench::M11_M16& _internal_f4() const;
  ::hyperprotobench::M11_M16* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M11_M16* f4);
  ::hyperprotobench::M11_M16* unsafe_arena_release_f4();

  // optional int32 f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 6;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f8 = 8;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f9 = 10;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  bool f9() const;
  void set_f9(bool value);
  private:
  bool _internal_f9() const;
  void _internal_set_f9(bool value);
  public:

  // optional bool f10 = 11;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional int32 f11 = 12;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int32 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f12 = 13;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int64 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f13 = 14;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  ::PROTOBUF_NAMESPACE_ID::uint64 f13() const;
  void set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f13() const;
  void _internal_set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M11)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::hyperprotobench::M11_M12* f1_;
  ::hyperprotobench::M11_M16* f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  bool f9_;
  bool f10_;
  ::PROTOBUF_NAMESPACE_ID::int32 f11_;
  ::PROTOBUF_NAMESPACE_ID::int64 f12_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f13_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M11_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17_M18_M19_M20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17.M18.M19.M20) */ {
 public:
  M17_M18_M19_M20();
  virtual ~M17_M18_M19_M20();

  M17_M18_M19_M20(const M17_M18_M19_M20& from);
  M17_M18_M19_M20(M17_M18_M19_M20&& from) noexcept
    : M17_M18_M19_M20() {
    *this = ::std::move(from);
  }

  inline M17_M18_M19_M20& operator=(const M17_M18_M19_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17_M18_M19_M20& operator=(M17_M18_M19_M20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17_M18_M19_M20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17_M18_M19_M20* internal_default_instance() {
    return reinterpret_cast<const M17_M18_M19_M20*>(
               &_M17_M18_M19_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(M17_M18_M19_M20& a, M17_M18_M19_M20& b) {
    a.Swap(&b);
  }
  inline void Swap(M17_M18_M19_M20* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17_M18_M19_M20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17_M18_M19_M20* New() const final {
    return CreateMaybeMessage<M17_M18_M19_M20>(nullptr);
  }

  M17_M18_M19_M20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17_M18_M19_M20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17_M18_M19_M20& from);
  void MergeFrom(const M17_M18_M19_M20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17_M18_M19_M20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17.M18.M19.M20";
  }
  protected:
  explicit M17_M18_M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 9,
  };
  // optional uint64 f1 = 9;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17.M18.M19.M20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_M18_M19_M20_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17_M18_M19 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17.M18.M19) */ {
 public:
  M17_M18_M19();
  virtual ~M17_M18_M19();

  M17_M18_M19(const M17_M18_M19& from);
  M17_M18_M19(M17_M18_M19&& from) noexcept
    : M17_M18_M19() {
    *this = ::std::move(from);
  }

  inline M17_M18_M19& operator=(const M17_M18_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17_M18_M19& operator=(M17_M18_M19&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17_M18_M19& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17_M18_M19* internal_default_instance() {
    return reinterpret_cast<const M17_M18_M19*>(
               &_M17_M18_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(M17_M18_M19& a, M17_M18_M19& b) {
    a.Swap(&b);
  }
  inline void Swap(M17_M18_M19* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17_M18_M19* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17_M18_M19* New() const final {
    return CreateMaybeMessage<M17_M18_M19>(nullptr);
  }

  M17_M18_M19* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17_M18_M19>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17_M18_M19& from);
  void MergeFrom(const M17_M18_M19& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17_M18_M19* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17.M18.M19";
  }
  protected:
  explicit M17_M18_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M17_M18_M19_M20 M20;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
    kF4FieldNumber = 4,
  };
  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M17.M18.M19.M20 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M17_M18_M19_M20& f2() const;
  ::hyperprotobench::M17_M18_M19_M20* release_f2();
  ::hyperprotobench::M17_M18_M19_M20* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M17_M18_M19_M20* f2);
  private:
  const ::hyperprotobench::M17_M18_M19_M20& _internal_f2() const;
  ::hyperprotobench::M17_M18_M19_M20* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M17_M18_M19_M20* f2);
  ::hyperprotobench::M17_M18_M19_M20* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17.M18.M19)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M17_M18_M19_M20* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_M18_M19_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17_M18 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17.M18) */ {
 public:
  M17_M18();
  virtual ~M17_M18();

  M17_M18(const M17_M18& from);
  M17_M18(M17_M18&& from) noexcept
    : M17_M18() {
    *this = ::std::move(from);
  }

  inline M17_M18& operator=(const M17_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17_M18& operator=(M17_M18&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17_M18& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17_M18* internal_default_instance() {
    return reinterpret_cast<const M17_M18*>(
               &_M17_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(M17_M18& a, M17_M18& b) {
    a.Swap(&b);
  }
  inline void Swap(M17_M18* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17_M18* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17_M18* New() const final {
    return CreateMaybeMessage<M17_M18>(nullptr);
  }

  M17_M18* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17_M18>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17_M18& from);
  void MergeFrom(const M17_M18& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17_M18* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17.M18";
  }
  protected:
  explicit M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M17_M18_M19 M19;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M17.M18.M19 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M17_M18_M19& f2() const;
  ::hyperprotobench::M17_M18_M19* release_f2();
  ::hyperprotobench::M17_M18_M19* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M17_M18_M19* f2);
  private:
  const ::hyperprotobench::M17_M18_M19& _internal_f2() const;
  ::hyperprotobench::M17_M18_M19* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M17_M18_M19* f2);
  ::hyperprotobench::M17_M18_M19* unsafe_arena_release_f2();

  // optional double f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  double f1() const;
  void set_f1(double value);
  private:
  double _internal_f1() const;
  void _internal_set_f1(double value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17.M18)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M17_M18_M19* f2_;
  double f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17) */ {
 public:
  M17();
  virtual ~M17();

  M17(const M17& from);
  M17(M17&& from) noexcept
    : M17() {
    *this = ::std::move(from);
  }

  inline M17& operator=(const M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17& operator=(M17&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17* internal_default_instance() {
    return reinterpret_cast<const M17*>(
               &_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(M17& a, M17& b) {
    a.Swap(&b);
  }
  inline void Swap(M17* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17* New() const final {
    return CreateMaybeMessage<M17>(nullptr);
  }

  M17* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17& from);
  void MergeFrom(const M17& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17";
  }
  protected:
  explicit M17(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M17_M18 M18;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF4FieldNumber = 6,
    kF1FieldNumber = 1,
    kF3FieldNumber = 5,
    kF5FieldNumber = 7,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional .hyperprotobench.M17.M18 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M17_M18& f1() const;
  ::hyperprotobench::M17_M18* release_f1();
  ::hyperprotobench::M17_M18* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M17_M18* f1);
  private:
  const ::hyperprotobench::M17_M18& _internal_f1() const;
  ::hyperprotobench::M17_M18* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M17_M18* f1);
  ::hyperprotobench::M17_M18* unsafe_arena_release_f1();

  // optional int64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::hyperprotobench::M17_M18* f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M22_M23_M24 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M22.M23.M24) */ {
 public:
  M21_M22_M23_M24();
  virtual ~M21_M22_M23_M24();

  M21_M22_M23_M24(const M21_M22_M23_M24& from);
  M21_M22_M23_M24(M21_M22_M23_M24&& from) noexcept
    : M21_M22_M23_M24() {
    *this = ::std::move(from);
  }

  inline M21_M22_M23_M24& operator=(const M21_M22_M23_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M22_M23_M24& operator=(M21_M22_M23_M24&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M22_M23_M24& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M22_M23_M24* internal_default_instance() {
    return reinterpret_cast<const M21_M22_M23_M24*>(
               &_M21_M22_M23_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(M21_M22_M23_M24& a, M21_M22_M23_M24& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M22_M23_M24* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M22_M23_M24* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M22_M23_M24* New() const final {
    return CreateMaybeMessage<M21_M22_M23_M24>(nullptr);
  }

  M21_M22_M23_M24* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M22_M23_M24>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M22_M23_M24& from);
  void MergeFrom(const M21_M22_M23_M24& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M22_M23_M24* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M22.M23.M24";
  }
  protected:
  explicit M21_M22_M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF3FieldNumber = 6,
  };
  // optional fixed32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M22.M23.M24)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M22_M23_M24_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M22_M23 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M22.M23) */ {
 public:
  M21_M22_M23();
  virtual ~M21_M22_M23();

  M21_M22_M23(const M21_M22_M23& from);
  M21_M22_M23(M21_M22_M23&& from) noexcept
    : M21_M22_M23() {
    *this = ::std::move(from);
  }

  inline M21_M22_M23& operator=(const M21_M22_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M22_M23& operator=(M21_M22_M23&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M22_M23& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M22_M23* internal_default_instance() {
    return reinterpret_cast<const M21_M22_M23*>(
               &_M21_M22_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(M21_M22_M23& a, M21_M22_M23& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M22_M23* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M22_M23* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M22_M23* New() const final {
    return CreateMaybeMessage<M21_M22_M23>(nullptr);
  }

  M21_M22_M23* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M22_M23>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M22_M23& from);
  void MergeFrom(const M21_M22_M23& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M22_M23* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M22.M23";
  }
  protected:
  explicit M21_M22_M23(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M21_M22_M23_M24 M24;

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 9,
    kF2FieldNumber = 5,
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
    kF4FieldNumber = 8,
    kF6FieldNumber = 10,
  };
  // optional string f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional .hyperprotobench.M21.M22.M23.M24 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M21_M22_M23_M24& f2() const;
  ::hyperprotobench::M21_M22_M23_M24* release_f2();
  ::hyperprotobench::M21_M22_M23_M24* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M21_M22_M23_M24* f2);
  private:
  const ::hyperprotobench::M21_M22_M23_M24& _internal_f2() const;
  ::hyperprotobench::M21_M22_M23_M24* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M21_M22_M23_M24* f2);
  ::hyperprotobench::M21_M22_M23_M24* unsafe_arena_release_f2();

  // optional int32 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional fixed32 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M22.M23)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::hyperprotobench::M21_M22_M23_M24* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  bool f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M22_M23_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M22 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M22) */ {
 public:
  M21_M22();
  virtual ~M21_M22();

  M21_M22(const M21_M22& from);
  M21_M22(M21_M22&& from) noexcept
    : M21_M22() {
    *this = ::std::move(from);
  }

  inline M21_M22& operator=(const M21_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M22& operator=(M21_M22&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M22& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M22* internal_default_instance() {
    return reinterpret_cast<const M21_M22*>(
               &_M21_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(M21_M22& a, M21_M22& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M22* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M22* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M22* New() const final {
    return CreateMaybeMessage<M21_M22>(nullptr);
  }

  M21_M22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M22>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M22& from);
  void MergeFrom(const M21_M22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M22* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M22";
  }
  protected:
  explicit M21_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M21_M22_M23 M23;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 5,
    kF1FieldNumber = 2,
    kF3FieldNumber = 6,
    kF4FieldNumber = 8,
  };
  // optional .hyperprotobench.M21.M22.M23 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M21_M22_M23& f2() const;
  ::hyperprotobench::M21_M22_M23* release_f2();
  ::hyperprotobench::M21_M22_M23* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M21_M22_M23* f2);
  private:
  const ::hyperprotobench::M21_M22_M23& _internal_f2() const;
  ::hyperprotobench::M21_M22_M23* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M21_M22_M23* f2);
  ::hyperprotobench::M21_M22_M23* unsafe_arena_release_f2();

  // optional bool f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional uint64 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  double f4() const;
  void set_f4(double value);
  private:
  double _internal_f4() const;
  void _internal_set_f4(double value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M22)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M21_M22_M23* f2_;
  bool f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  double f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21) */ {
 public:
  M21();
  virtual ~M21();

  M21(const M21& from);
  M21(M21&& from) noexcept
    : M21() {
    *this = ::std::move(from);
  }

  inline M21& operator=(const M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21& operator=(M21&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21* internal_default_instance() {
    return reinterpret_cast<const M21*>(
               &_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(M21& a, M21& b) {
    a.Swap(&b);
  }
  inline void Swap(M21* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21* New() const final {
    return CreateMaybeMessage<M21>(nullptr);
  }

  M21* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21& from);
  void MergeFrom(const M21& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21";
  }
  protected:
  explicit M21(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M21_M22 M22;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 4,
    kF6FieldNumber = 8,
    kF4FieldNumber = 6,
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF5FieldNumber = 7,
    kF7FieldNumber = 9,
  };
  // optional string f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional bytes f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const void* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M21.M22 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M21_M22& f4() const;
  ::hyperprotobench::M21_M22* release_f4();
  ::hyperprotobench::M21_M22* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M21_M22* f4);
  private:
  const ::hyperprotobench::M21_M22& _internal_f4() const;
  ::hyperprotobench::M21_M22* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M21_M22* f4);
  ::hyperprotobench::M21_M22* unsafe_arena_release_f4();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional uint64 f7 = 9;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M21_M22* f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  bool f5_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26_M27_M28 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26.M27.M28) */ {
 public:
  M25_M26_M27_M28();
  virtual ~M25_M26_M27_M28();

  M25_M26_M27_M28(const M25_M26_M27_M28& from);
  M25_M26_M27_M28(M25_M26_M27_M28&& from) noexcept
    : M25_M26_M27_M28() {
    *this = ::std::move(from);
  }

  inline M25_M26_M27_M28& operator=(const M25_M26_M27_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26_M27_M28& operator=(M25_M26_M27_M28&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26_M27_M28& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26_M27_M28* internal_default_instance() {
    return reinterpret_cast<const M25_M26_M27_M28*>(
               &_M25_M26_M27_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(M25_M26_M27_M28& a, M25_M26_M27_M28& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26_M27_M28* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26_M27_M28* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26_M27_M28* New() const final {
    return CreateMaybeMessage<M25_M26_M27_M28>(nullptr);
  }

  M25_M26_M27_M28* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26_M27_M28>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26_M27_M28& from);
  void MergeFrom(const M25_M26_M27_M28& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26_M27_M28* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26.M27.M28";
  }
  protected:
  explicit M25_M26_M27_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bool f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26.M27.M28)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  bool f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_M27_M28_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26_M27 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26.M27) */ {
 public:
  M25_M26_M27();
  virtual ~M25_M26_M27();

  M25_M26_M27(const M25_M26_M27& from);
  M25_M26_M27(M25_M26_M27&& from) noexcept
    : M25_M26_M27() {
    *this = ::std::move(from);
  }

  inline M25_M26_M27& operator=(const M25_M26_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26_M27& operator=(M25_M26_M27&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26_M27& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26_M27* internal_default_instance() {
    return reinterpret_cast<const M25_M26_M27*>(
               &_M25_M26_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(M25_M26_M27& a, M25_M26_M27& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26_M27* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26_M27* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26_M27* New() const final {
    return CreateMaybeMessage<M25_M26_M27>(nullptr);
  }

  M25_M26_M27* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26_M27>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26_M27& from);
  void MergeFrom(const M25_M26_M27& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26_M27* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26.M27";
  }
  protected:
  explicit M25_M26_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26_M27_M28 M28;

  typedef M25_M26_M27_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M25_M26_M27_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M25_M26_M27_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M25_M26_M27_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M25_M26_M27_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M25_M26_M27_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M25_M26_M27_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M25_M26_M27_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M25_M26_M27_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M25_M26_M27_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M25_M26_M27_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M25_M26_M27_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M25_M26_M27_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF5FieldNumber = 8,
    kF1FieldNumber = 1,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M25.M26.M27.M28 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M25_M26_M27_M28& f5() const;
  ::hyperprotobench::M25_M26_M27_M28* release_f5();
  ::hyperprotobench::M25_M26_M27_M28* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M25_M26_M27_M28* f5);
  private:
  const ::hyperprotobench::M25_M26_M27_M28& _internal_f5() const;
  ::hyperprotobench::M25_M26_M27_M28* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M25_M26_M27_M28* f5);
  ::hyperprotobench::M25_M26_M27_M28* unsafe_arena_release_f5();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M25.M26.M27.E1 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::hyperprotobench::M25_M26_M27_E1 f4() const;
  void set_f4(::hyperprotobench::M25_M26_M27_E1 value);
  private:
  ::hyperprotobench::M25_M26_M27_E1 _internal_f4() const;
  void _internal_set_f4(::hyperprotobench::M25_M26_M27_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26.M27)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M25_M26_M27_M28* f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  int f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26) */ {
 public:
  M25_M26();
  virtual ~M25_M26();

  M25_M26(const M25_M26& from);
  M25_M26(M25_M26&& from) noexcept
    : M25_M26() {
    *this = ::std::move(from);
  }

  inline M25_M26& operator=(const M25_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26& operator=(M25_M26&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26* internal_default_instance() {
    return reinterpret_cast<const M25_M26*>(
               &_M25_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(M25_M26& a, M25_M26& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26* New() const final {
    return CreateMaybeMessage<M25_M26>(nullptr);
  }

  M25_M26* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26& from);
  void MergeFrom(const M25_M26& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26";
  }
  protected:
  explicit M25_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26_M27 M27;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 4,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M25.M26.M27 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M25_M26_M27& f2() const;
  ::hyperprotobench::M25_M26_M27* release_f2();
  ::hyperprotobench::M25_M26_M27* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M25_M26_M27* f2);
  private:
  const ::hyperprotobench::M25_M26_M27& _internal_f2() const;
  ::hyperprotobench::M25_M26_M27* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M25_M26_M27* f2);
  ::hyperprotobench::M25_M26_M27* unsafe_arena_release_f2();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M25_M26_M27* f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M29 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M29) */ {
 public:
  M25_M29();
  virtual ~M25_M29();

  M25_M29(const M25_M29& from);
  M25_M29(M25_M29&& from) noexcept
    : M25_M29() {
    *this = ::std::move(from);
  }

  inline M25_M29& operator=(const M25_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M29& operator=(M25_M29&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M29& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M29* internal_default_instance() {
    return reinterpret_cast<const M25_M29*>(
               &_M25_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(M25_M29& a, M25_M29& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M29* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M29* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M29* New() const final {
    return CreateMaybeMessage<M25_M29>(nullptr);
  }

  M25_M29* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M29>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M29& from);
  void MergeFrom(const M25_M29& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M29* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M29";
  }
  protected:
  explicit M25_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M29)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M29_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25) */ {
 public:
  M25();
  virtual ~M25();

  M25(const M25& from);
  M25(M25&& from) noexcept
    : M25() {
    *this = ::std::move(from);
  }

  inline M25& operator=(const M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25& operator=(M25&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25* internal_default_instance() {
    return reinterpret_cast<const M25*>(
               &_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(M25& a, M25& b) {
    a.Swap(&b);
  }
  inline void Swap(M25* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25* New() const final {
    return CreateMaybeMessage<M25>(nullptr);
  }

  M25* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25& from);
  void MergeFrom(const M25& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25";
  }
  protected:
  explicit M25(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26 M26;
  typedef M25_M29 M29;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF5FieldNumber = 8,
    kF3FieldNumber = 4,
    kF4FieldNumber = 7,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF9FieldNumber = 12,
  };
  // optional bytes f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M25.M26 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M25_M26& f2() const;
  ::hyperprotobench::M25_M26* release_f2();
  ::hyperprotobench::M25_M26* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M25_M26* f2);
  private:
  const ::hyperprotobench::M25_M26& _internal_f2() const;
  ::hyperprotobench::M25_M26* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M25_M26* f2);
  ::hyperprotobench::M25_M26* unsafe_arena_release_f2();

  // optional .hyperprotobench.M25.M29 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M25_M29& f5() const;
  ::hyperprotobench::M25_M29* release_f5();
  ::hyperprotobench::M25_M29* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M25_M29* f5);
  private:
  const ::hyperprotobench::M25_M29& _internal_f5() const;
  ::hyperprotobench::M25_M29* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M25_M29* f5);
  ::hyperprotobench::M25_M29* unsafe_arena_release_f5();

  // optional fixed64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double f9 = 12;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  double f9() const;
  void set_f9(double value);
  private:
  double _internal_f9() const;
  void _internal_set_f9(double value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M25_M26* f2_;
  ::hyperprotobench::M25_M29* f5_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  double f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M31_M32_M33 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M31.M32.M33) */ {
 public:
  M30_M31_M32_M33();
  virtual ~M30_M31_M32_M33();

  M30_M31_M32_M33(const M30_M31_M32_M33& from);
  M30_M31_M32_M33(M30_M31_M32_M33&& from) noexcept
    : M30_M31_M32_M33() {
    *this = ::std::move(from);
  }

  inline M30_M31_M32_M33& operator=(const M30_M31_M32_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M31_M32_M33& operator=(M30_M31_M32_M33&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M31_M32_M33& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M31_M32_M33* internal_default_instance() {
    return reinterpret_cast<const M30_M31_M32_M33*>(
               &_M30_M31_M32_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(M30_M31_M32_M33& a, M30_M31_M32_M33& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M31_M32_M33* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M31_M32_M33* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M31_M32_M33* New() const final {
    return CreateMaybeMessage<M30_M31_M32_M33>(nullptr);
  }

  M30_M31_M32_M33* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M31_M32_M33>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M31_M32_M33& from);
  void MergeFrom(const M30_M31_M32_M33& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M31_M32_M33* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M31.M32.M33";
  }
  protected:
  explicit M30_M31_M32_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
    kF1FieldNumber = 1,
  };
  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M31.M32.M33)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M31_M32_M33_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M31_M32_M34 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M31.M32.M34) */ {
 public:
  M30_M31_M32_M34();
  virtual ~M30_M31_M32_M34();

  M30_M31_M32_M34(const M30_M31_M32_M34& from);
  M30_M31_M32_M34(M30_M31_M32_M34&& from) noexcept
    : M30_M31_M32_M34() {
    *this = ::std::move(from);
  }

  inline M30_M31_M32_M34& operator=(const M30_M31_M32_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M31_M32_M34& operator=(M30_M31_M32_M34&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M31_M32_M34& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M31_M32_M34* internal_default_instance() {
    return reinterpret_cast<const M30_M31_M32_M34*>(
               &_M30_M31_M32_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(M30_M31_M32_M34& a, M30_M31_M32_M34& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M31_M32_M34* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M31_M32_M34* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M31_M32_M34* New() const final {
    return CreateMaybeMessage<M30_M31_M32_M34>(nullptr);
  }

  M30_M31_M32_M34* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M31_M32_M34>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M31_M32_M34& from);
  void MergeFrom(const M30_M31_M32_M34& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M31_M32_M34* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M31.M32.M34";
  }
  protected:
  explicit M30_M31_M32_M34(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M31.M32.M34)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M31_M32_M34_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M31_M32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M31.M32) */ {
 public:
  M30_M31_M32();
  virtual ~M30_M31_M32();

  M30_M31_M32(const M30_M31_M32& from);
  M30_M31_M32(M30_M31_M32&& from) noexcept
    : M30_M31_M32() {
    *this = ::std::move(from);
  }

  inline M30_M31_M32& operator=(const M30_M31_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M31_M32& operator=(M30_M31_M32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M31_M32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M31_M32* internal_default_instance() {
    return reinterpret_cast<const M30_M31_M32*>(
               &_M30_M31_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(M30_M31_M32& a, M30_M31_M32& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M31_M32* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M31_M32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M31_M32* New() const final {
    return CreateMaybeMessage<M30_M31_M32>(nullptr);
  }

  M30_M31_M32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M31_M32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M31_M32& from);
  void MergeFrom(const M30_M31_M32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M31_M32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M31.M32";
  }
  protected:
  explicit M30_M31_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M30_M31_M32_M33 M33;
  typedef M30_M31_M32_M34 M34;

  typedef M30_M31_M32_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M30_M31_M32_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M30_M31_M32_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M30_M31_M32_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M30_M31_M32_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M30_M31_M32_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M30_M31_M32_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M30_M31_M32_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M30_M31_M32_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M30_M31_M32_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M30_M31_M32_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M30_M31_M32_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M30_M31_M32_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF7FieldNumber = 8,
    kF1FieldNumber = 1,
    kF4FieldNumber = 5,
    kF6FieldNumber = 7,
    kF5FieldNumber = 6,
    kF8FieldNumber = 9,
    kF3FieldNumber = 4,
  };
  // optional .hyperprotobench.M30.M31.M32.M33 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M30_M31_M32_M33& f2() const;
  ::hyperprotobench::M30_M31_M32_M33* release_f2();
  ::hyperprotobench::M30_M31_M32_M33* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M30_M31_M32_M33* f2);
  private:
  const ::hyperprotobench::M30_M31_M32_M33& _internal_f2() const;
  ::hyperprotobench::M30_M31_M32_M33* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M30_M31_M32_M33* f2);
  ::hyperprotobench::M30_M31_M32_M33* unsafe_arena_release_f2();

  // optional .hyperprotobench.M30.M31.M32.M34 f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M30_M31_M32_M34& f7() const;
  ::hyperprotobench::M30_M31_M32_M34* release_f7();
  ::hyperprotobench::M30_M31_M32_M34* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M30_M31_M32_M34* f7);
  private:
  const ::hyperprotobench::M30_M31_M32_M34& _internal_f7() const;
  ::hyperprotobench::M30_M31_M32_M34* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M30_M31_M32_M34* f7);
  ::hyperprotobench::M30_M31_M32_M34* unsafe_arena_release_f7();

  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional int32 f8 = 9;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M30.M31.M32.E1 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::hyperprotobench::M30_M31_M32_E1 f3() const;
  void set_f3(::hyperprotobench::M30_M31_M32_E1 value);
  private:
  ::hyperprotobench::M30_M31_M32_E1 _internal_f3() const;
  void _internal_set_f3(::hyperprotobench::M30_M31_M32_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M31.M32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M30_M31_M32_M33* f2_;
  ::hyperprotobench::M30_M31_M32_M34* f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  bool f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  int f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M31_M32_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M31 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M31) */ {
 public:
  M30_M31();
  virtual ~M30_M31();

  M30_M31(const M30_M31& from);
  M30_M31(M30_M31&& from) noexcept
    : M30_M31() {
    *this = ::std::move(from);
  }

  inline M30_M31& operator=(const M30_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M31& operator=(M30_M31&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M31& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M31* internal_default_instance() {
    return reinterpret_cast<const M30_M31*>(
               &_M30_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(M30_M31& a, M30_M31& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M31* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M31* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M31* New() const final {
    return CreateMaybeMessage<M30_M31>(nullptr);
  }

  M30_M31* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M31>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M31& from);
  void MergeFrom(const M30_M31& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M31* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M31";
  }
  protected:
  explicit M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M30_M31_M32 M32;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 6,
    kF4FieldNumber = 12,
    kF5FieldNumber = 13,
    kF2FieldNumber = 7,
    kF6FieldNumber = 14,
    kF3FieldNumber = 11,
    kF7FieldNumber = 15,
    kF8FieldNumber = 16,
    kF9FieldNumber = 17,
  };
  // optional string f1 = 6;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f4 = 12;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional .hyperprotobench.M30.M31.M32 f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M30_M31_M32& f5() const;
  ::hyperprotobench::M30_M31_M32* release_f5();
  ::hyperprotobench::M30_M31_M32* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M30_M31_M32* f5);
  private:
  const ::hyperprotobench::M30_M31_M32& _internal_f5() const;
  ::hyperprotobench::M30_M31_M32* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M30_M31_M32* f5);
  ::hyperprotobench::M30_M31_M32* unsafe_arena_release_f5();

  // optional int32 f2 = 7;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional double f3 = 11;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  double f3() const;
  void set_f3(double value);
  private:
  double _internal_f3() const;
  void _internal_set_f3(double value);
  public:

  // optional fixed64 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::uint32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M31)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::hyperprotobench::M30_M31_M32* f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  bool f6_;
  double f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30) */ {
 public:
  M30();
  virtual ~M30();

  M30(const M30& from);
  M30(M30&& from) noexcept
    : M30() {
    *this = ::std::move(from);
  }

  inline M30& operator=(const M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30& operator=(M30&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30* internal_default_instance() {
    return reinterpret_cast<const M30*>(
               &_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(M30& a, M30& b) {
    a.Swap(&b);
  }
  inline void Swap(M30* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30* New() const final {
    return CreateMaybeMessage<M30>(nullptr);
  }

  M30* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30& from);
  void MergeFrom(const M30& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30";
  }
  protected:
  explicit M30(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M30_M31 M31;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF4FieldNumber = 4,
    kF6FieldNumber = 9,
    kF7FieldNumber = 10,
    kF9FieldNumber = 12,
    kF10FieldNumber = 14,
    kF11FieldNumber = 15,
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF5FieldNumber = 5,
    kF8FieldNumber = 11,
    kF12FieldNumber = 16,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional string f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional string f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional string f9 = 12;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const char* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional string f10 = 14;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const char* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional .hyperprotobench.M30.M31 f11 = 15;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const ::hyperprotobench::M30_M31& f11() const;
  ::hyperprotobench::M30_M31* release_f11();
  ::hyperprotobench::M30_M31* mutable_f11();
  void set_allocated_f11(::hyperprotobench::M30_M31* f11);
  private:
  const ::hyperprotobench::M30_M31& _internal_f11() const;
  ::hyperprotobench::M30_M31* _internal_mutable_f11();
  public:
  void unsafe_arena_set_allocated_f11(
      ::hyperprotobench::M30_M31* f11);
  ::hyperprotobench::M30_M31* unsafe_arena_release_f11();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional fixed64 f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 f12 = 16;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::uint64 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::hyperprotobench::M30_M31* f11_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f12_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M35_M36_M37_M38 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M35.M36.M37.M38) */ {
 public:
  M35_M36_M37_M38();
  virtual ~M35_M36_M37_M38();

  M35_M36_M37_M38(const M35_M36_M37_M38& from);
  M35_M36_M37_M38(M35_M36_M37_M38&& from) noexcept
    : M35_M36_M37_M38() {
    *this = ::std::move(from);
  }

  inline M35_M36_M37_M38& operator=(const M35_M36_M37_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline M35_M36_M37_M38& operator=(M35_M36_M37_M38&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M35_M36_M37_M38& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M35_M36_M37_M38* internal_default_instance() {
    return reinterpret_cast<const M35_M36_M37_M38*>(
               &_M35_M36_M37_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(M35_M36_M37_M38& a, M35_M36_M37_M38& b) {
    a.Swap(&b);
  }
  inline void Swap(M35_M36_M37_M38* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M35_M36_M37_M38* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M35_M36_M37_M38* New() const final {
    return CreateMaybeMessage<M35_M36_M37_M38>(nullptr);
  }

  M35_M36_M37_M38* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M35_M36_M37_M38>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M35_M36_M37_M38& from);
  void MergeFrom(const M35_M36_M37_M38& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M35_M36_M37_M38* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M35.M36.M37.M38";
  }
  protected:
  explicit M35_M36_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional bytes f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional uint64 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M35.M36.M37.M38)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M35_M36_M37_M38_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M35_M36_M37 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M35.M36.M37) */ {
 public:
  M35_M36_M37();
  virtual ~M35_M36_M37();

  M35_M36_M37(const M35_M36_M37& from);
  M35_M36_M37(M35_M36_M37&& from) noexcept
    : M35_M36_M37() {
    *this = ::std::move(from);
  }

  inline M35_M36_M37& operator=(const M35_M36_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline M35_M36_M37& operator=(M35_M36_M37&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M35_M36_M37& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M35_M36_M37* internal_default_instance() {
    return reinterpret_cast<const M35_M36_M37*>(
               &_M35_M36_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(M35_M36_M37& a, M35_M36_M37& b) {
    a.Swap(&b);
  }
  inline void Swap(M35_M36_M37* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M35_M36_M37* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M35_M36_M37* New() const final {
    return CreateMaybeMessage<M35_M36_M37>(nullptr);
  }

  M35_M36_M37* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M35_M36_M37>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M35_M36_M37& from);
  void MergeFrom(const M35_M36_M37& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M35_M36_M37* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M35.M36.M37";
  }
  protected:
  explicit M35_M36_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M35_M36_M37_M38 M38;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 7,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional .hyperprotobench.M35.M36.M37.M38 f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M35_M36_M37_M38& f3() const;
  ::hyperprotobench::M35_M36_M37_M38* release_f3();
  ::hyperprotobench::M35_M36_M37_M38* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M35_M36_M37_M38* f3);
  private:
  const ::hyperprotobench::M35_M36_M37_M38& _internal_f3() const;
  ::hyperprotobench::M35_M36_M37_M38* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M35_M36_M37_M38* f3);
  ::hyperprotobench::M35_M36_M37_M38* unsafe_arena_release_f3();

  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M35.M36.M37)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M35_M36_M37_M38* f3_;
  bool f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M35_M36_M37_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M35_M36 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M35.M36) */ {
 public:
  M35_M36();
  virtual ~M35_M36();

  M35_M36(const M35_M36& from);
  M35_M36(M35_M36&& from) noexcept
    : M35_M36() {
    *this = ::std::move(from);
  }

  inline M35_M36& operator=(const M35_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline M35_M36& operator=(M35_M36&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M35_M36& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M35_M36* internal_default_instance() {
    return reinterpret_cast<const M35_M36*>(
               &_M35_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(M35_M36& a, M35_M36& b) {
    a.Swap(&b);
  }
  inline void Swap(M35_M36* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M35_M36* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M35_M36* New() const final {
    return CreateMaybeMessage<M35_M36>(nullptr);
  }

  M35_M36* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M35_M36>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M35_M36& from);
  void MergeFrom(const M35_M36& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M35_M36* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M35.M36";
  }
  protected:
  explicit M35_M36(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M35_M36_M37 M37;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 5,
    kF3FieldNumber = 7,
    kF2FieldNumber = 6,
  };
  // optional bytes f1 = 5;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M35.M36.M37 f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M35_M36_M37& f3() const;
  ::hyperprotobench::M35_M36_M37* release_f3();
  ::hyperprotobench::M35_M36_M37* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M35_M36_M37* f3);
  private:
  const ::hyperprotobench::M35_M36_M37& _internal_f3() const;
  ::hyperprotobench::M35_M36_M37* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M35_M36_M37* f3);
  ::hyperprotobench::M35_M36_M37* unsafe_arena_release_f3();

  // optional int32 f2 = 6;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M35.M36)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M35_M36_M37* f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M35_M36_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M35 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M35) */ {
 public:
  M35();
  virtual ~M35();

  M35(const M35& from);
  M35(M35&& from) noexcept
    : M35() {
    *this = ::std::move(from);
  }

  inline M35& operator=(const M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline M35& operator=(M35&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M35& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M35* internal_default_instance() {
    return reinterpret_cast<const M35*>(
               &_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(M35& a, M35& b) {
    a.Swap(&b);
  }
  inline void Swap(M35* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M35* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M35* New() const final {
    return CreateMaybeMessage<M35>(nullptr);
  }

  M35* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M35>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M35& from);
  void MergeFrom(const M35& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M35* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M35";
  }
  protected:
  explicit M35(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M35_M36 M36;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF4FieldNumber = 6,
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF5FieldNumber = 11,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M35.M36 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M35_M36& f4() const;
  ::hyperprotobench::M35_M36* release_f4();
  ::hyperprotobench::M35_M36* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M35_M36* f4);
  private:
  const ::hyperprotobench::M35_M36& _internal_f4() const;
  ::hyperprotobench::M35_M36* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M35_M36* f4);
  ::hyperprotobench::M35_M36* unsafe_arena_release_f4();

  // optional int32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double f5 = 11;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  double f5() const;
  void set_f5(double value);
  private:
  double _internal_f5() const;
  void _internal_set_f5(double value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M35)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M35_M36* f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  double f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M35_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M39_M40_M41_M42 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M39.M40.M41.M42) */ {
 public:
  M39_M40_M41_M42();
  virtual ~M39_M40_M41_M42();

  M39_M40_M41_M42(const M39_M40_M41_M42& from);
  M39_M40_M41_M42(M39_M40_M41_M42&& from) noexcept
    : M39_M40_M41_M42() {
    *this = ::std::move(from);
  }

  inline M39_M40_M41_M42& operator=(const M39_M40_M41_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline M39_M40_M41_M42& operator=(M39_M40_M41_M42&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M39_M40_M41_M42& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M39_M40_M41_M42* internal_default_instance() {
    return reinterpret_cast<const M39_M40_M41_M42*>(
               &_M39_M40_M41_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(M39_M40_M41_M42& a, M39_M40_M41_M42& b) {
    a.Swap(&b);
  }
  inline void Swap(M39_M40_M41_M42* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M39_M40_M41_M42* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M39_M40_M41_M42* New() const final {
    return CreateMaybeMessage<M39_M40_M41_M42>(nullptr);
  }

  M39_M40_M41_M42* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M39_M40_M41_M42>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M39_M40_M41_M42& from);
  void MergeFrom(const M39_M40_M41_M42& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M39_M40_M41_M42* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M39.M40.M41.M42";
  }
  protected:
  explicit M39_M40_M41_M42(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
  };
  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  bool f2() const;
  void set_f2(bool value);
  private:
  bool _internal_f2() const;
  void _internal_set_f2(bool value);
  public:

  // optional int32 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M39.M40.M41.M42)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  bool f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M39_M40_M41_M42_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M39_M40_M41 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M39.M40.M41) */ {
 public:
  M39_M40_M41();
  virtual ~M39_M40_M41();

  M39_M40_M41(const M39_M40_M41& from);
  M39_M40_M41(M39_M40_M41&& from) noexcept
    : M39_M40_M41() {
    *this = ::std::move(from);
  }

  inline M39_M40_M41& operator=(const M39_M40_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline M39_M40_M41& operator=(M39_M40_M41&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M39_M40_M41& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M39_M40_M41* internal_default_instance() {
    return reinterpret_cast<const M39_M40_M41*>(
               &_M39_M40_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(M39_M40_M41& a, M39_M40_M41& b) {
    a.Swap(&b);
  }
  inline void Swap(M39_M40_M41* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M39_M40_M41* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M39_M40_M41* New() const final {
    return CreateMaybeMessage<M39_M40_M41>(nullptr);
  }

  M39_M40_M41* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M39_M40_M41>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M39_M40_M41& from);
  void MergeFrom(const M39_M40_M41& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M39_M40_M41* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M39.M40.M41";
  }
  protected:
  explicit M39_M40_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M39_M40_M41_M42 M42;

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 10,
    kF6FieldNumber = 11,
    kF7FieldNumber = 13,
    kF1FieldNumber = 2,
    kF3FieldNumber = 7,
    kF2FieldNumber = 5,
    kF4FieldNumber = 8,
    kF8FieldNumber = 14,
    kF9FieldNumber = 15,
  };
  // optional string f5 = 10;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional string f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M39.M40.M41.M42 f7 = 13;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M39_M40_M41_M42& f7() const;
  ::hyperprotobench::M39_M40_M41_M42* release_f7();
  ::hyperprotobench::M39_M40_M41_M42* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M39_M40_M41_M42* f7);
  private:
  const ::hyperprotobench::M39_M40_M41_M42& _internal_f7() const;
  ::hyperprotobench::M39_M40_M41_M42* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M39_M40_M41_M42* f7);
  ::hyperprotobench::M39_M40_M41_M42* unsafe_arena_release_f7();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional bool f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  bool f8() const;
  void set_f8(bool value);
  private:
  bool _internal_f8() const;
  void _internal_set_f8(bool value);
  public:

  // optional int32 f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M39.M40.M41)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M39_M40_M41_M42* f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  bool f4_;
  bool f8_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M39_M40_M41_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M39_M40 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M39.M40) */ {
 public:
  M39_M40();
  virtual ~M39_M40();

  M39_M40(const M39_M40& from);
  M39_M40(M39_M40&& from) noexcept
    : M39_M40() {
    *this = ::std::move(from);
  }

  inline M39_M40& operator=(const M39_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline M39_M40& operator=(M39_M40&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M39_M40& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M39_M40* internal_default_instance() {
    return reinterpret_cast<const M39_M40*>(
               &_M39_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(M39_M40& a, M39_M40& b) {
    a.Swap(&b);
  }
  inline void Swap(M39_M40* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M39_M40* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M39_M40* New() const final {
    return CreateMaybeMessage<M39_M40>(nullptr);
  }

  M39_M40* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M39_M40>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M39_M40& from);
  void MergeFrom(const M39_M40& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M39_M40* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M39.M40";
  }
  protected:
  explicit M39_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M39_M40_M41 M41;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // optional .hyperprotobench.M39.M40.M41 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M39_M40_M41& f1() const;
  ::hyperprotobench::M39_M40_M41* release_f1();
  ::hyperprotobench::M39_M40_M41* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M39_M40_M41* f1);
  private:
  const ::hyperprotobench::M39_M40_M41& _internal_f1() const;
  ::hyperprotobench::M39_M40_M41* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M39_M40_M41* f1);
  ::hyperprotobench::M39_M40_M41* unsafe_arena_release_f1();

  // optional int32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M39.M40)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M39_M40_M41* f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  bool f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M39_M40_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M39 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M39) */ {
 public:
  M39();
  virtual ~M39();

  M39(const M39& from);
  M39(M39&& from) noexcept
    : M39() {
    *this = ::std::move(from);
  }

  inline M39& operator=(const M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline M39& operator=(M39&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M39& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M39* internal_default_instance() {
    return reinterpret_cast<const M39*>(
               &_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(M39& a, M39& b) {
    a.Swap(&b);
  }
  inline void Swap(M39* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M39* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M39* New() const final {
    return CreateMaybeMessage<M39>(nullptr);
  }

  M39* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M39>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M39& from);
  void MergeFrom(const M39& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M39* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M39";
  }
  protected:
  explicit M39(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M39_M40 M40;

  typedef M39_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M39_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M39_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M39_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M39_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M39_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M39_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M39_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M39_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M39_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M39_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M39_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M39_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF6FieldNumber = 6,
    kF7FieldNumber = 8,
    kF8FieldNumber = 9,
    kF9FieldNumber = 10,
    kF1FieldNumber = 1,
    kF5FieldNumber = 5,
    kF10FieldNumber = 11,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
  };
  // optional string f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f6 = 6;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional string f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional bytes f8 = 9;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional .hyperprotobench.M39.M40 f9 = 10;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M39_M40& f9() const;
  ::hyperprotobench::M39_M40* release_f9();
  ::hyperprotobench::M39_M40* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M39_M40* f9);
  private:
  const ::hyperprotobench::M39_M40& _internal_f9() const;
  ::hyperprotobench::M39_M40* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M39_M40* f9);
  ::hyperprotobench::M39_M40* unsafe_arena_release_f9();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double f10 = 11;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  double f10() const;
  void set_f10(double value);
  private:
  double _internal_f10() const;
  void _internal_set_f10(double value);
  public:

  // optional bool f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional .hyperprotobench.M39.E1 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::hyperprotobench::M39_E1 f4() const;
  void set_f4(::hyperprotobench::M39_E1 value);
  private:
  ::hyperprotobench::M39_E1 _internal_f4() const;
  void _internal_set_f4(::hyperprotobench::M39_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M39)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::hyperprotobench::M39_M40* f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  double f10_;
  bool f3_;
  int f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M39_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44_M45_M46 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44.M45.M46) */ {
 public:
  M43_M44_M45_M46();
  virtual ~M43_M44_M45_M46();

  M43_M44_M45_M46(const M43_M44_M45_M46& from);
  M43_M44_M45_M46(M43_M44_M45_M46&& from) noexcept
    : M43_M44_M45_M46() {
    *this = ::std::move(from);
  }

  inline M43_M44_M45_M46& operator=(const M43_M44_M45_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44_M45_M46& operator=(M43_M44_M45_M46&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44_M45_M46& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44_M45_M46* internal_default_instance() {
    return reinterpret_cast<const M43_M44_M45_M46*>(
               &_M43_M44_M45_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(M43_M44_M45_M46& a, M43_M44_M45_M46& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44_M45_M46* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44_M45_M46* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44_M45_M46* New() const final {
    return CreateMaybeMessage<M43_M44_M45_M46>(nullptr);
  }

  M43_M44_M45_M46* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44_M45_M46>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44_M45_M46& from);
  void MergeFrom(const M43_M44_M45_M46& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44_M45_M46* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44.M45.M46";
  }
  protected:
  explicit M43_M44_M45_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 3,
    kF3FieldNumber = 12,
  };
  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bool f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // optional int32 f3 = 12;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44.M45.M46)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  bool f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_M45_M46_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44_M45 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44.M45) */ {
 public:
  M43_M44_M45();
  virtual ~M43_M44_M45();

  M43_M44_M45(const M43_M44_M45& from);
  M43_M44_M45(M43_M44_M45&& from) noexcept
    : M43_M44_M45() {
    *this = ::std::move(from);
  }

  inline M43_M44_M45& operator=(const M43_M44_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44_M45& operator=(M43_M44_M45&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44_M45& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44_M45* internal_default_instance() {
    return reinterpret_cast<const M43_M44_M45*>(
               &_M43_M44_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(M43_M44_M45& a, M43_M44_M45& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44_M45* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44_M45* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44_M45* New() const final {
    return CreateMaybeMessage<M43_M44_M45>(nullptr);
  }

  M43_M44_M45* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44_M45>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44_M45& from);
  void MergeFrom(const M43_M44_M45& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44_M45* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44.M45";
  }
  protected:
  explicit M43_M44_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44_M45_M46 M46;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M43.M44.M45.M46 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M43_M44_M45_M46& f2() const;
  ::hyperprotobench::M43_M44_M45_M46* release_f2();
  ::hyperprotobench::M43_M44_M45_M46* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M43_M44_M45_M46* f2);
  private:
  const ::hyperprotobench::M43_M44_M45_M46& _internal_f2() const;
  ::hyperprotobench::M43_M44_M45_M46* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M43_M44_M45_M46* f2);
  ::hyperprotobench::M43_M44_M45_M46* unsafe_arena_release_f2();

  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44.M45)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M43_M44_M45_M46* f2_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43_M44 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43.M44) */ {
 public:
  M43_M44();
  virtual ~M43_M44();

  M43_M44(const M43_M44& from);
  M43_M44(M43_M44&& from) noexcept
    : M43_M44() {
    *this = ::std::move(from);
  }

  inline M43_M44& operator=(const M43_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43_M44& operator=(M43_M44&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43_M44& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43_M44* internal_default_instance() {
    return reinterpret_cast<const M43_M44*>(
               &_M43_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(M43_M44& a, M43_M44& b) {
    a.Swap(&b);
  }
  inline void Swap(M43_M44* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43_M44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43_M44* New() const final {
    return CreateMaybeMessage<M43_M44>(nullptr);
  }

  M43_M44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43_M44>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43_M44& from);
  void MergeFrom(const M43_M44& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43_M44* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43.M44";
  }
  protected:
  explicit M43_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44_M45 M45;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M43.M44.M45 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M43_M44_M45& f4() const;
  ::hyperprotobench::M43_M44_M45* release_f4();
  ::hyperprotobench::M43_M44_M45* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M43_M44_M45* f4);
  private:
  const ::hyperprotobench::M43_M44_M45& _internal_f4() const;
  ::hyperprotobench::M43_M44_M45* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M43_M44_M45* f4);
  ::hyperprotobench::M43_M44_M45* unsafe_arena_release_f4();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43.M44)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M43_M44_M45* f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M43 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M43) */ {
 public:
  M43();
  virtual ~M43();

  M43(const M43& from);
  M43(M43&& from) noexcept
    : M43() {
    *this = ::std::move(from);
  }

  inline M43& operator=(const M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline M43& operator=(M43&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M43& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M43* internal_default_instance() {
    return reinterpret_cast<const M43*>(
               &_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(M43& a, M43& b) {
    a.Swap(&b);
  }
  inline void Swap(M43* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M43* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M43* New() const final {
    return CreateMaybeMessage<M43>(nullptr);
  }

  M43* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M43>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M43& from);
  void MergeFrom(const M43& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M43* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M43";
  }
  protected:
  explicit M43(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M43_M44 M44;

  typedef M43_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M43_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M43_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M43_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M43_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M43_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M43_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M43_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M43_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M43_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M43_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M43_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M43_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF4FieldNumber = 7,
    kF2FieldNumber = 2,
    kF5FieldNumber = 10,
    kF3FieldNumber = 6,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M43.M44 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const ::hyperprotobench::M43_M44& f4() const;
  ::hyperprotobench::M43_M44* release_f4();
  ::hyperprotobench::M43_M44* mutable_f4();
  void set_allocated_f4(::hyperprotobench::M43_M44* f4);
  private:
  const ::hyperprotobench::M43_M44& _internal_f4() const;
  ::hyperprotobench::M43_M44* _internal_mutable_f4();
  public:
  void unsafe_arena_set_allocated_f4(
      ::hyperprotobench::M43_M44* f4);
  ::hyperprotobench::M43_M44* unsafe_arena_release_f4();

  // optional double f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // optional fixed64 f5 = 10;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .hyperprotobench.M43.E1 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::hyperprotobench::M43_E1 f3() const;
  void set_f3(::hyperprotobench::M43_E1 value);
  private:
  ::hyperprotobench::M43_E1 _internal_f3() const;
  void _internal_set_f3(::hyperprotobench::M43_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M43)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M43_M44* f4_;
  double f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f5_;
  int f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// M1_M2_M3_M4

// optional string f1 = 2;
inline bool M1_M2_M3_M4::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2_M3_M4::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2_M3_M4::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M2_M3_M4::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.M4.f1)
  return _internal_f1();
}
inline void M1_M2_M3_M4::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.M4.f1)
}
inline std::string* M1_M2_M3_M4::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.M3.M4.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M2_M3_M4::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M2_M3_M4::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.M3.M4.f1)
}
inline void M1_M2_M3_M4::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.M3.M4.f1)
}
inline void M1_M2_M3_M4::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.M3.M4.f1)
}
inline std::string* M1_M2_M3_M4::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2_M3_M4::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.M3.M4.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.M3.M4.f1)
}
inline std::string* M1_M2_M3_M4::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.M3.M4.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.M3.M4.f1)
}

// optional string f2 = 3;
inline bool M1_M2_M3_M4::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2_M3_M4::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2_M3_M4::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1_M2_M3_M4::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.M4.f2)
  return _internal_f2();
}
inline void M1_M2_M3_M4::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.M4.f2)
}
inline std::string* M1_M2_M3_M4::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.M3.M4.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1_M2_M3_M4::_internal_f2() const {
  return f2_.Get();
}
inline void M1_M2_M3_M4::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.M3.M4.f2)
}
inline void M1_M2_M3_M4::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.M3.M4.f2)
}
inline void M1_M2_M3_M4::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.M3.M4.f2)
}
inline std::string* M1_M2_M3_M4::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2_M3_M4::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.M3.M4.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.M3.M4.f2)
}
inline std::string* M1_M2_M3_M4::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.M3.M4.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.M3.M4.f2)
}

// optional uint64 f3 = 5;
inline bool M1_M2_M3_M4::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1_M2_M3_M4::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2_M3_M4::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_M4::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_M4::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.M4.f3)
  return _internal_f3();
}
inline void M1_M2_M3_M4::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M1_M2_M3_M4::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.M4.f3)
}

// optional fixed64 f4 = 6;
inline bool M1_M2_M3_M4::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M2_M3_M4::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M2_M3_M4::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_M4::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_M3_M4::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.M4.f4)
  return _internal_f4();
}
inline void M1_M2_M3_M4::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M1_M2_M3_M4::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.M4.f4)
}

// optional string f5 = 7;
inline bool M1_M2_M3_M4::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1_M2_M3_M4::has_f5() const {
  return _internal_has_f5();
}
inline void M1_M2_M3_M4::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M1_M2_M3_M4::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.M4.f5)
  return _internal_f5();
}
inline void M1_M2_M3_M4::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.M4.f5)
}
inline std::string* M1_M2_M3_M4::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.M3.M4.f5)
  return _internal_mutable_f5();
}
inline const std::string& M1_M2_M3_M4::_internal_f5() const {
  return f5_.Get();
}
inline void M1_M2_M3_M4::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.M3.M4.f5)
}
inline void M1_M2_M3_M4::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.M3.M4.f5)
}
inline void M1_M2_M3_M4::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.M3.M4.f5)
}
inline std::string* M1_M2_M3_M4::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000040u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2_M3_M4::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.M3.M4.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.M3.M4.f5)
}
inline std::string* M1_M2_M3_M4::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.M3.M4.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2_M3_M4::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.M3.M4.f5)
}

// -------------------------------------------------------------------

// M1_M2_M3

// optional .hyperprotobench.M1.M2.M3.M4 f1 = 2;
inline bool M1_M2_M3::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M2_M3::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2_M3::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M2_M3_M4& M1_M2_M3::_internal_f1() const {
  const ::hyperprotobench::M1_M2_M3_M4* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2_M3_M4*>(
      &::hyperprotobench::_M1_M2_M3_M4_default_instance_);
}
inline const ::hyperprotobench::M1_M2_M3_M4& M1_M2_M3::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M2_M3_M4* M1_M2_M3::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2_M3_M4* M1_M2_M3::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.M3.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M2_M3_M4* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2_M3_M4* M1_M2_M3::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2_M3_M4>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M2_M3_M4* M1_M2_M3::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.M3.f1)
  return _internal_mutable_f1();
}
inline void M1_M2_M3::set_allocated_f1(::hyperprotobench::M1_M2_M3_M4* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.M3.f1)
}

// optional int64 f2 = 3;
inline bool M1_M2_M3::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2_M3::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2_M3::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2_M3::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f2)
  return _internal_f2();
}
inline void M1_M2_M3::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M2_M3::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f2)
}

// optional bool f3 = 5;
inline bool M1_M2_M3::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2_M3::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M1_M2_M3::_internal_f3() const {
  return f3_;
}
inline bool M1_M2_M3::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f3)
  return _internal_f3();
}
inline void M1_M2_M3::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M1_M2_M3::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f3)
}

// optional int32 f4 = 7;
inline bool M1_M2_M3::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M2_M3::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M3::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2_M3::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f4)
  return _internal_f4();
}
inline void M1_M2_M3::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M1_M2_M3::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f4)
}

// optional .hyperprotobench.M1.M2.M3.E1 f5 = 8;
inline bool M1_M2_M3::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f5() const {
  return _internal_has_f5();
}
inline void M1_M2_M3::clear_f5() {
  f5_ = 67;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hyperprotobench::M1_M2_M3_E1 M1_M2_M3::_internal_f5() const {
  return static_cast< ::hyperprotobench::M1_M2_M3_E1 >(f5_);
}
inline ::hyperprotobench::M1_M2_M3_E1 M1_M2_M3::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f5)
  return _internal_f5();
}
inline void M1_M2_M3::_internal_set_f5(::hyperprotobench::M1_M2_M3_E1 value) {
  assert(::hyperprotobench::M1_M2_M3_E1_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M1_M2_M3::set_f5(::hyperprotobench::M1_M2_M3_E1 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f5)
}

// optional bool f6 = 9;
inline bool M1_M2_M3::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f6() const {
  return _internal_has_f6();
}
inline void M1_M2_M3::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool M1_M2_M3::_internal_f6() const {
  return f6_;
}
inline bool M1_M2_M3::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f6)
  return _internal_f6();
}
inline void M1_M2_M3::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M1_M2_M3::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f6)
}

// optional bool f7 = 10;
inline bool M1_M2_M3::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f7() const {
  return _internal_has_f7();
}
inline void M1_M2_M3::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M1_M2_M3::_internal_f7() const {
  return f7_;
}
inline bool M1_M2_M3::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f7)
  return _internal_f7();
}
inline void M1_M2_M3::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M1_M2_M3::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f7)
}

// optional bool f8 = 13;
inline bool M1_M2_M3::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f8() const {
  return _internal_has_f8();
}
inline void M1_M2_M3::clear_f8() {
  f8_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool M1_M2_M3::_internal_f8() const {
  return f8_;
}
inline bool M1_M2_M3::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f8)
  return _internal_f8();
}
inline void M1_M2_M3::_internal_set_f8(bool value) {
  _has_bits_[0] |= 0x00001000u;
  f8_ = value;
}
inline void M1_M2_M3::set_f8(bool value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f8)
}

// optional bool f9 = 14;
inline bool M1_M2_M3::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M1_M2_M3::has_f9() const {
  return _internal_has_f9();
}
inline void M1_M2_M3::clear_f9() {
  f9_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool M1_M2_M3::_internal_f9() const {
  return f9_;
}
inline bool M1_M2_M3::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.M3.f9)
  return _internal_f9();
}
inline void M1_M2_M3::_internal_set_f9(bool value) {
  _has_bits_[0] |= 0x00002000u;
  f9_ = value;
}
inline void M1_M2_M3::set_f9(bool value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.M3.f9)
}

// -------------------------------------------------------------------

// M1_M2

// optional .hyperprotobench.M1.M2.E1 f1 = 1;
inline bool M1_M2::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2::clear_f1() {
  f1_ = 73;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::hyperprotobench::M1_M2_E1 M1_M2::_internal_f1() const {
  return static_cast< ::hyperprotobench::M1_M2_E1 >(f1_);
}
inline ::hyperprotobench::M1_M2_E1 M1_M2::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f1)
  return _internal_f1();
}
inline void M1_M2::_internal_set_f1(::hyperprotobench::M1_M2_E1 value) {
  assert(::hyperprotobench::M1_M2_E1_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M2::set_f1(::hyperprotobench::M1_M2_E1 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f1)
}

// optional int32 f2 = 2;
inline bool M1_M2::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f2)
  return _internal_f2();
}
inline void M1_M2::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M2::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f2)
}

// optional int32 f3 = 3;
inline bool M1_M2::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1_M2::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1_M2::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f3)
  return _internal_f3();
}
inline void M1_M2::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1_M2::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f3)
}

// optional double f4 = 5;
inline bool M1_M2::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M2::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M2::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double M1_M2::_internal_f4() const {
  return f4_;
}
inline double M1_M2::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f4)
  return _internal_f4();
}
inline void M1_M2::_internal_set_f4(double value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M1_M2::set_f4(double value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f4)
}

// optional string f5 = 6;
inline bool M1_M2::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1_M2::has_f5() const {
  return _internal_has_f5();
}
inline void M1_M2::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M1_M2::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f5)
  return _internal_f5();
}
inline void M1_M2::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f5)
  return _internal_mutable_f5();
}
inline const std::string& M1_M2::_internal_f5() const {
  return f5_.Get();
}
inline void M1_M2::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f5)
}
inline void M1_M2::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f5)
}
inline void M1_M2::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000040u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f5)
}

// optional int64 f6 = 7;
inline bool M1_M2::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M1_M2::has_f6() const {
  return _internal_has_f6();
}
inline void M1_M2::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f6)
  return _internal_f6();
}
inline void M1_M2::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M1_M2::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f6)
}

// optional .hyperprotobench.M1.M2.M3 f7 = 8;
inline bool M1_M2::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M1_M2::has_f7() const {
  return _internal_has_f7();
}
inline void M1_M2::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M1_M2_M3& M1_M2::_internal_f7() const {
  const ::hyperprotobench::M1_M2_M3* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2_M3*>(
      &::hyperprotobench::_M1_M2_M3_default_instance_);
}
inline const ::hyperprotobench::M1_M2_M3& M1_M2::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f7)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M1_M2_M3* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000100u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2_M3>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M1_M2_M3* M1_M2::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f7)
  return _internal_mutable_f7();
}
inline void M1_M2::set_allocated_f7(::hyperprotobench::M1_M2_M3* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f7)
}

// optional string f8 = 9;
inline bool M1_M2::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M1_M2::has_f8() const {
  return _internal_has_f8();
}
inline void M1_M2::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M1_M2::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f8)
  return _internal_f8();
}
inline void M1_M2::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f8)
}
inline std::string* M1_M2::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f8)
  return _internal_mutable_f8();
}
inline const std::string& M1_M2::_internal_f8() const {
  return f8_.Get();
}
inline void M1_M2::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f8)
}
inline void M1_M2::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f8)
}
inline void M1_M2::set_f8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f8)
}
inline std::string* M1_M2::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000200u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f8)
}
inline std::string* M1_M2::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f8)
}

// -------------------------------------------------------------------

// M1_M5

// optional string f1 = 1;
inline bool M1_M5::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M5::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M5::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M5::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M5.f1)
  return _internal_f1();
}
inline void M1_M5::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M5.f1)
}
inline std::string* M1_M5::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M5.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M5::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M5::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M5::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M5.f1)
}
inline void M1_M5::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M5.f1)
}
inline void M1_M5::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M5.f1)
}
inline std::string* M1_M5::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M5::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M5.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M5::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M5.f1)
}
inline std::string* M1_M5::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M5.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M5::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M5.f1)
}

// -------------------------------------------------------------------

// M1

// optional string f1 = 3;
inline bool M1::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1::has_f1() const {
  return _internal_has_f1();
}
inline void M1::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f1)
  return _internal_f1();
}
inline void M1::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f1)
}
inline std::string* M1::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1::_internal_f1() const {
  return f1_.Get();
}
inline void M1::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f1)
}
inline void M1::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f1)
}
inline void M1::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f1)
}
inline std::string* M1::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f1)
}
inline std::string* M1::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f1)
}

// optional string f2 = 4;
inline bool M1::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1::has_f2() const {
  return _internal_has_f2();
}
inline void M1::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f2)
  return _internal_f2();
}
inline void M1::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f2)
}
inline std::string* M1::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1::_internal_f2() const {
  return f2_.Get();
}
inline void M1::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f2)
}
inline void M1::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f2)
}
inline void M1::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f2)
}
inline std::string* M1::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f2)
}
inline std::string* M1::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f2)
}

// optional int32 f3 = 5;
inline bool M1::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1::has_f3() const {
  return _internal_has_f3();
}
inline void M1::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f3)
  return _internal_f3();
}
inline void M1::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f3)
}

// optional int32 f4 = 6;
inline bool M1::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1::has_f4() const {
  return _internal_has_f4();
}
inline void M1::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f4)
  return _internal_f4();
}
inline void M1::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M1::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f4)
}

// optional .hyperprotobench.M1.M2 f5 = 7;
inline bool M1::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M1::has_f5() const {
  return _internal_has_f5();
}
inline void M1::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hyperprotobench::M1_M2& M1::_internal_f5() const {
  const ::hyperprotobench::M1_M2* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2*>(
      &::hyperprotobench::_M1_M2_default_instance_);
}
inline const ::hyperprotobench::M1_M2& M1::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M1_M2* M1::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f5)
  _has_bits_[0] &= ~0x00000020u;
  ::hyperprotobench::M1_M2* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000020u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M1_M2* M1::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f5)
  return _internal_mutable_f5();
}
inline void M1::set_allocated_f5(::hyperprotobench::M1_M2* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f5)
}

// optional int32 f6 = 8;
inline bool M1::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1::has_f6() const {
  return _internal_has_f6();
}
inline void M1::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f6)
  return _internal_f6();
}
inline void M1::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f6_ = value;
}
inline void M1::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f6)
}

// optional int32 f7 = 12;
inline bool M1::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M1::has_f7() const {
  return _internal_has_f7();
}
inline void M1::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f7)
  return _internal_f7();
}
inline void M1::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M1::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f7)
}

// optional string f8 = 13;
inline bool M1::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M1::has_f8() const {
  return _internal_has_f8();
}
inline void M1::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M1::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f8)
  return _internal_f8();
}
inline void M1::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f8)
}
inline std::string* M1::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f8)
  return _internal_mutable_f8();
}
inline const std::string& M1::_internal_f8() const {
  return f8_.Get();
}
inline void M1::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f8)
}
inline void M1::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f8)
}
inline void M1::set_f8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f8)
}
inline std::string* M1::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000800u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f8)
}
inline std::string* M1::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f8)
}

// optional int32 f9 = 17;
inline bool M1::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M1::has_f9() const {
  return _internal_has_f9();
}
inline void M1::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f9)
  return _internal_f9();
}
inline void M1::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  f9_ = value;
}
inline void M1::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f9)
}

// optional .hyperprotobench.M1.M5 f10 = 18;
inline bool M1::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M1::has_f10() const {
  return _internal_has_f10();
}
inline void M1::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::hyperprotobench::M1_M5& M1::_internal_f10() const {
  const ::hyperprotobench::M1_M5* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M5*>(
      &::hyperprotobench::_M1_M5_default_instance_);
}
inline const ::hyperprotobench::M1_M5& M1::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M1_M5* M1::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M5* M1::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f10)
  _has_bits_[0] &= ~0x00010000u;
  ::hyperprotobench::M1_M5* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M5* M1::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00010000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M5>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M1_M5* M1::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f10)
  return _internal_mutable_f10();
}
inline void M1::set_allocated_f10(::hyperprotobench::M1_M5* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f10)
}

// optional string f11 = 20;
inline bool M1::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M1::has_f11() const {
  return _internal_has_f11();
}
inline void M1::clear_f11() {
  f11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& M1::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f11)
  return _internal_f11();
}
inline void M1::set_f11(const std::string& value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f11)
}
inline std::string* M1::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f11)
  return _internal_mutable_f11();
}
inline const std::string& M1::_internal_f11() const {
  return f11_.Get();
}
inline void M1::_internal_set_f11(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f11(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  f11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f11)
}
inline void M1::set_f11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f11)
}
inline void M1::set_f11(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f11)
}
inline std::string* M1::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00040000u;
  return f11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f11)
  if (!_internal_has_f11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return f11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f11(std::string* f11) {
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f11,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f11)
}
inline std::string* M1::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f11)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00040000u;
  return f11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f11(
    std::string* f11) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f11, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f11)
}

// -------------------------------------------------------------------

// M6_M7_M8_M9

// optional string f1 = 1;
inline bool M6_M7_M8_M9::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M6_M7_M8_M9::has_f1() const {
  return _internal_has_f1();
}
inline void M6_M7_M8_M9::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M6_M7_M8_M9::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M8.M9.f1)
  return _internal_f1();
}
inline void M6_M7_M8_M9::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M8.M9.f1)
}
inline std::string* M6_M7_M8_M9::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.M8.M9.f1)
  return _internal_mutable_f1();
}
inline const std::string& M6_M7_M8_M9::_internal_f1() const {
  return f1_.Get();
}
inline void M6_M7_M8_M9::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.M7.M8.M9.f1)
}
inline void M6_M7_M8_M9::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.M7.M8.M9.f1)
}
inline void M6_M7_M8_M9::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.M7.M8.M9.f1)
}
inline std::string* M6_M7_M8_M9::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6_M7_M8_M9::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.M8.M9.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.M8.M9.f1)
}
inline std::string* M6_M7_M8_M9::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.M7.M8.M9.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.M8.M9.f1)
}

// optional bytes f2 = 2;
inline bool M6_M7_M8_M9::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M6_M7_M8_M9::has_f2() const {
  return _internal_has_f2();
}
inline void M6_M7_M8_M9::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M6_M7_M8_M9::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M8.M9.f2)
  return _internal_f2();
}
inline void M6_M7_M8_M9::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M8.M9.f2)
}
inline std::string* M6_M7_M8_M9::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.M8.M9.f2)
  return _internal_mutable_f2();
}
inline const std::string& M6_M7_M8_M9::_internal_f2() const {
  return f2_.Get();
}
inline void M6_M7_M8_M9::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.M7.M8.M9.f2)
}
inline void M6_M7_M8_M9::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.M7.M8.M9.f2)
}
inline void M6_M7_M8_M9::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.M7.M8.M9.f2)
}
inline std::string* M6_M7_M8_M9::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6_M7_M8_M9::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.M8.M9.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.M8.M9.f2)
}
inline std::string* M6_M7_M8_M9::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.M7.M8.M9.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6_M7_M8_M9::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.M8.M9.f2)
}

// -------------------------------------------------------------------

// M6_M7_M8

// optional string f1 = 1;
inline bool M6_M7_M8::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M6_M7_M8::has_f1() const {
  return _internal_has_f1();
}
inline void M6_M7_M8::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M6_M7_M8::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M8.f1)
  return _internal_f1();
}
inline void M6_M7_M8::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M8.f1)
}
inline std::string* M6_M7_M8::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.M8.f1)
  return _internal_mutable_f1();
}
inline const std::string& M6_M7_M8::_internal_f1() const {
  return f1_.Get();
}
inline void M6_M7_M8::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6_M7_M8::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.M7.M8.f1)
}
inline void M6_M7_M8::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.M7.M8.f1)
}
inline void M6_M7_M8::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.M7.M8.f1)
}
inline std::string* M6_M7_M8::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6_M7_M8::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.M8.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6_M7_M8::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.M8.f1)
}
inline std::string* M6_M7_M8::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.M7.M8.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6_M7_M8::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.M8.f1)
}

// optional .hyperprotobench.M6.M7.M8.M9 f2 = 2;
inline bool M6_M7_M8::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M6_M7_M8::has_f2() const {
  return _internal_has_f2();
}
inline void M6_M7_M8::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M6_M7_M8_M9& M6_M7_M8::_internal_f2() const {
  const ::hyperprotobench::M6_M7_M8_M9* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M6_M7_M8_M9*>(
      &::hyperprotobench::_M6_M7_M8_M9_default_instance_);
}
inline const ::hyperprotobench::M6_M7_M8_M9& M6_M7_M8::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M8.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M6_M7_M8_M9* M6_M7_M8::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M6_M7_M8_M9* M6_M7_M8::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.M8.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M6_M7_M8_M9* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M6_M7_M8_M9* M6_M7_M8::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M6_M7_M8_M9>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M6_M7_M8_M9* M6_M7_M8::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.M8.f2)
  return _internal_mutable_f2();
}
inline void M6_M7_M8::set_allocated_f2(::hyperprotobench::M6_M7_M8_M9* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.M8.f2)
}

// -------------------------------------------------------------------

// M6_M7_M10

// optional int64 f1 = 1;
inline bool M6_M7_M10::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M6_M7_M10::has_f1() const {
  return _internal_has_f1();
}
inline void M6_M7_M10::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M6_M7_M10::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M6_M7_M10::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M10.f1)
  return _internal_f1();
}
inline void M6_M7_M10::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M6_M7_M10::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M10.f1)
}

// optional string f2 = 2;
inline bool M6_M7_M10::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M6_M7_M10::has_f2() const {
  return _internal_has_f2();
}
inline void M6_M7_M10::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M6_M7_M10::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M10.f2)
  return _internal_f2();
}
inline void M6_M7_M10::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M10.f2)
}
inline std::string* M6_M7_M10::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.M10.f2)
  return _internal_mutable_f2();
}
inline const std::string& M6_M7_M10::_internal_f2() const {
  return f2_.Get();
}
inline void M6_M7_M10::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6_M7_M10::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.M7.M10.f2)
}
inline void M6_M7_M10::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.M7.M10.f2)
}
inline void M6_M7_M10::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.M7.M10.f2)
}
inline std::string* M6_M7_M10::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6_M7_M10::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.M10.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6_M7_M10::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.M10.f2)
}
inline std::string* M6_M7_M10::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.M7.M10.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6_M7_M10::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.M10.f2)
}

// optional fixed64 f3 = 3;
inline bool M6_M7_M10::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M6_M7_M10::has_f3() const {
  return _internal_has_f3();
}
inline void M6_M7_M10::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_M10::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7_M10::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.M10.f3)
  return _internal_f3();
}
inline void M6_M7_M10::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M6_M7_M10::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.M10.f3)
}

// -------------------------------------------------------------------

// M6_M7

// optional .hyperprotobench.M6.M7.M8 f1 = 1;
inline bool M6_M7::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M6_M7::has_f1() const {
  return _internal_has_f1();
}
inline void M6_M7::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M6_M7_M8& M6_M7::_internal_f1() const {
  const ::hyperprotobench::M6_M7_M8* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M6_M7_M8*>(
      &::hyperprotobench::_M6_M7_M8_default_instance_);
}
inline const ::hyperprotobench::M6_M7_M8& M6_M7::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M6_M7_M8* M6_M7::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M6_M7_M8* M6_M7::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M6_M7_M8* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M6_M7_M8* M6_M7::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M6_M7_M8>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M6_M7_M8* M6_M7::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.f1)
  return _internal_mutable_f1();
}
inline void M6_M7::set_allocated_f1(::hyperprotobench::M6_M7_M8* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.f1)
}

// optional int32 f2 = 2;
inline bool M6_M7::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M6_M7::has_f2() const {
  return _internal_has_f2();
}
inline void M6_M7::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6_M7::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6_M7::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f2)
  return _internal_f2();
}
inline void M6_M7::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M6_M7::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f2)
}

// optional double f3 = 3;
inline bool M6_M7::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M6_M7::has_f3() const {
  return _internal_has_f3();
}
inline void M6_M7::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double M6_M7::_internal_f3() const {
  return f3_;
}
inline double M6_M7::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f3)
  return _internal_f3();
}
inline void M6_M7::_internal_set_f3(double value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M6_M7::set_f3(double value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f3)
}

// optional int64 f4 = 4;
inline bool M6_M7::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M6_M7::has_f4() const {
  return _internal_has_f4();
}
inline void M6_M7::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M6_M7::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M6_M7::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f4)
  return _internal_f4();
}
inline void M6_M7::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M6_M7::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f4)
}

// optional uint64 f5 = 6;
inline bool M6_M7::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M6_M7::has_f5() const {
  return _internal_has_f5();
}
inline void M6_M7::clear_f5() {
  f5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6_M7::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f5)
  return _internal_f5();
}
inline void M6_M7::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M6_M7::set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f5)
}

// optional .hyperprotobench.M6.M7.E1 f6 = 7;
inline bool M6_M7::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M6_M7::has_f6() const {
  return _internal_has_f6();
}
inline void M6_M7::clear_f6() {
  f6_ = 33;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hyperprotobench::M6_M7_E1 M6_M7::_internal_f6() const {
  return static_cast< ::hyperprotobench::M6_M7_E1 >(f6_);
}
inline ::hyperprotobench::M6_M7_E1 M6_M7::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f6)
  return _internal_f6();
}
inline void M6_M7::_internal_set_f6(::hyperprotobench::M6_M7_E1 value) {
  assert(::hyperprotobench::M6_M7_E1_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M6_M7::set_f6(::hyperprotobench::M6_M7_E1 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f6)
}

// optional bool f7 = 9;
inline bool M6_M7::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M6_M7::has_f7() const {
  return _internal_has_f7();
}
inline void M6_M7::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M6_M7::_internal_f7() const {
  return f7_;
}
inline bool M6_M7::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f7)
  return _internal_f7();
}
inline void M6_M7::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M6_M7::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.M7.f7)
}

// optional .hyperprotobench.M6.M7.M10 f8 = 10;
inline bool M6_M7::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M6_M7::has_f8() const {
  return _internal_has_f8();
}
inline void M6_M7::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M6_M7_M10& M6_M7::_internal_f8() const {
  const ::hyperprotobench::M6_M7_M10* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M6_M7_M10*>(
      &::hyperprotobench::_M6_M7_M10_default_instance_);
}
inline const ::hyperprotobench::M6_M7_M10& M6_M7::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.M7.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M6_M7_M10* M6_M7::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M6_M7_M10* M6_M7::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.M7.f8)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M6_M7_M10* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M6_M7_M10* M6_M7::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000400u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M6_M7_M10>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M6_M7_M10* M6_M7::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.M7.f8)
  return _internal_mutable_f8();
}
inline void M6_M7::set_allocated_f8(::hyperprotobench::M6_M7_M10* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.M7.f8)
}

// -------------------------------------------------------------------

// M6

// optional bool f1 = 1;
inline bool M6::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M6::has_f1() const {
  return _internal_has_f1();
}
inline void M6::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M6::_internal_f1() const {
  return f1_;
}
inline bool M6::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f1)
  return _internal_f1();
}
inline void M6::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M6::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f1)
}

// optional int32 f2 = 9;
inline bool M6::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M6::has_f2() const {
  return _internal_has_f2();
}
inline void M6::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f2)
  return _internal_f2();
}
inline void M6::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f2_ = value;
}
inline void M6::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f2)
}

// optional bool f3 = 11;
inline bool M6::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M6::has_f3() const {
  return _internal_has_f3();
}
inline void M6::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool M6::_internal_f3() const {
  return f3_;
}
inline bool M6::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f3)
  return _internal_f3();
}
inline void M6::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000800u;
  f3_ = value;
}
inline void M6::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f3)
}

// optional fixed64 f4 = 12;
inline bool M6::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M6::has_f4() const {
  return _internal_has_f4();
}
inline void M6::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f4)
  return _internal_f4();
}
inline void M6::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  f4_ = value;
}
inline void M6::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f4)
}

// optional string f5 = 13;
inline bool M6::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M6::has_f5() const {
  return _internal_has_f5();
}
inline void M6::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& M6::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f5)
  return _internal_f5();
}
inline void M6::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f5)
}
inline std::string* M6::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.f5)
  return _internal_mutable_f5();
}
inline const std::string& M6::_internal_f5() const {
  return f5_.Get();
}
inline void M6::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.f5)
}
inline void M6::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.f5)
}
inline void M6::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.f5)
}
inline std::string* M6::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00002000u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.f5)
}
inline std::string* M6::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.f5)
}

// optional uint64 f6 = 14;
inline bool M6::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M6::has_f6() const {
  return _internal_has_f6();
}
inline void M6::clear_f6() {
  f6_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f6)
  return _internal_f6();
}
inline void M6::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  f6_ = value;
}
inline void M6::set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f6)
}

// optional uint64 f7 = 15;
inline bool M6::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M6::has_f7() const {
  return _internal_has_f7();
}
inline void M6::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f7)
  return _internal_f7();
}
inline void M6::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  f7_ = value;
}
inline void M6::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f7)
}

// optional bytes f8 = 16;
inline bool M6::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M6::has_f8() const {
  return _internal_has_f8();
}
inline void M6::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& M6::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f8)
  return _internal_f8();
}
inline void M6::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f8)
}
inline std::string* M6::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.f8)
  return _internal_mutable_f8();
}
inline const std::string& M6::_internal_f8() const {
  return f8_.Get();
}
inline void M6::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M6::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M6.f8)
}
inline void M6::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M6.f8)
}
inline void M6::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M6.f8)
}
inline std::string* M6::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00010000u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M6::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M6::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.f8)
}
inline std::string* M6::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M6.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M6::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.f8)
}

// optional .hyperprotobench.M6.M7 f9 = 17;
inline bool M6::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M6::has_f9() const {
  return _internal_has_f9();
}
inline void M6::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::hyperprotobench::M6_M7& M6::_internal_f9() const {
  const ::hyperprotobench::M6_M7* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M6_M7*>(
      &::hyperprotobench::_M6_M7_default_instance_);
}
inline const ::hyperprotobench::M6_M7& M6::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M6_M7* M6::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M6_M7* M6::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M6.f9)
  _has_bits_[0] &= ~0x00020000u;
  ::hyperprotobench::M6_M7* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M6_M7* M6::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00020000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M6_M7>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M6_M7* M6::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M6.f9)
  return _internal_mutable_f9();
}
inline void M6::set_allocated_f9(::hyperprotobench::M6_M7* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M6.f9)
}

// optional fixed64 f10 = 19;
inline bool M6::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M6::has_f10() const {
  return _internal_has_f10();
}
inline void M6::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M6::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f10)
  return _internal_f10();
}
inline void M6::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00080000u;
  f10_ = value;
}
inline void M6::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f10)
}

// optional int32 f11 = 20;
inline bool M6::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M6::has_f11() const {
  return _internal_has_f11();
}
inline void M6::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M6::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M6.f11)
  return _internal_f11();
}
inline void M6::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  f11_ = value;
}
inline void M6::set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M6.f11)
}

// -------------------------------------------------------------------

// M11_M12_M13_M14

// optional int64 f1 = 2;
inline bool M11_M12_M13_M14::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M11_M12_M13_M14::has_f1() const {
  return _internal_has_f1();
}
inline void M11_M12_M13_M14::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11_M12_M13_M14::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11_M12_M13_M14::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.M14.f1)
  return _internal_f1();
}
inline void M11_M12_M13_M14::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M11_M12_M13_M14::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.M14.f1)
}

// optional bool f2 = 3;
inline bool M11_M12_M13_M14::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M11_M12_M13_M14::has_f2() const {
  return _internal_has_f2();
}
inline void M11_M12_M13_M14::clear_f2() {
  f2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool M11_M12_M13_M14::_internal_f2() const {
  return f2_;
}
inline bool M11_M12_M13_M14::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.M14.f2)
  return _internal_f2();
}
inline void M11_M12_M13_M14::_internal_set_f2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M11_M12_M13_M14::set_f2(bool value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.M14.f2)
}

// optional fixed64 f3 = 4;
inline bool M11_M12_M13_M14::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M11_M12_M13_M14::has_f3() const {
  return _internal_has_f3();
}
inline void M11_M12_M13_M14::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_M13_M14::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11_M12_M13_M14::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.M14.f3)
  return _internal_f3();
}
inline void M11_M12_M13_M14::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M11_M12_M13_M14::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.M14.f3)
}

// optional fixed32 f4 = 5;
inline bool M11_M12_M13_M14::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M11_M12_M13_M14::has_f4() const {
  return _internal_has_f4();
}
inline void M11_M12_M13_M14::clear_f4() {
  f4_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M11_M12_M13_M14::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M11_M12_M13_M14::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.M14.f4)
  return _internal_f4();
}
inline void M11_M12_M13_M14::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M11_M12_M13_M14::set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.M14.f4)
}

// optional .hyperprotobench.M11.M12.M13.M14.E1 f5 = 7;
inline bool M11_M12_M13_M14::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M11_M12_M13_M14::has_f5() const {
  return _internal_has_f5();
}
inline void M11_M12_M13_M14::clear_f5() {
  f5_ = 5;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::hyperprotobench::M11_M12_M13_M14_E1 M11_M12_M13_M14::_internal_f5() const {
  return static_cast< ::hyperprotobench::M11_M12_M13_M14_E1 >(f5_);
}
inline ::hyperprotobench::M11_M12_M13_M14_E1 M11_M12_M13_M14::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.M14.f5)
  return _internal_f5();
}
inline void M11_M12_M13_M14::_internal_set_f5(::hyperprotobench::M11_M12_M13_M14_E1 value) {
  assert(::hyperprotobench::M11_M12_M13_M14_E1_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M11_M12_M13_M14::set_f5(::hyperprotobench::M11_M12_M13_M14_E1 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.M14.f5)
}

// -------------------------------------------------------------------

// M11_M12_M13

// optional bool f1 = 1;
inline bool M11_M12_M13::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M11_M12_M13::has_f1() const {
  return _internal_has_f1();
}
inline void M11_M12_M13::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M11_M12_M13::_internal_f1() const {
  return f1_;
}
inline bool M11_M12_M13::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.f1)
  return _internal_f1();
}
inline void M11_M12_M13::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M11_M12_M13::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M13.f1)
}

// optional .hyperprotobench.M11.M12.M13.M14 f2 = 2;
inline bool M11_M12_M13::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M11_M12_M13::has_f2() const {
  return _internal_has_f2();
}
inline void M11_M12_M13::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M11_M12_M13_M14& M11_M12_M13::_internal_f2() const {
  const ::hyperprotobench::M11_M12_M13_M14* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M11_M12_M13_M14*>(
      &::hyperprotobench::_M11_M12_M13_M14_default_instance_);
}
inline const ::hyperprotobench::M11_M12_M13_M14& M11_M12_M13::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M13.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M11_M12_M13_M14* M11_M12_M13::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M11_M12_M13_M14* M11_M12_M13::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.M13.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M11_M12_M13_M14* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M11_M12_M13_M14* M11_M12_M13::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M11_M12_M13_M14>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M11_M12_M13_M14* M11_M12_M13::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.M13.f2)
  return _internal_mutable_f2();
}
inline void M11_M12_M13::set_allocated_f2(::hyperprotobench::M11_M12_M13_M14* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.M13.f2)
}

// -------------------------------------------------------------------

// M11_M12_M15

// optional string f1 = 2;
inline bool M11_M12_M15::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M11_M12_M15::has_f1() const {
  return _internal_has_f1();
}
inline void M11_M12_M15::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M11_M12_M15::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M15.f1)
  return _internal_f1();
}
inline void M11_M12_M15::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M15.f1)
}
inline std::string* M11_M12_M15::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.M15.f1)
  return _internal_mutable_f1();
}
inline const std::string& M11_M12_M15::_internal_f1() const {
  return f1_.Get();
}
inline void M11_M12_M15::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11_M12_M15::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.M12.M15.f1)
}
inline void M11_M12_M15::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.M12.M15.f1)
}
inline void M11_M12_M15::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.M12.M15.f1)
}
inline std::string* M11_M12_M15::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11_M12_M15::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.M15.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11_M12_M15::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.M15.f1)
}
inline std::string* M11_M12_M15::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.M12.M15.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11_M12_M15::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.M15.f1)
}

// optional string f2 = 5;
inline bool M11_M12_M15::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M11_M12_M15::has_f2() const {
  return _internal_has_f2();
}
inline void M11_M12_M15::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M11_M12_M15::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M15.f2)
  return _internal_f2();
}
inline void M11_M12_M15::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M15.f2)
}
inline std::string* M11_M12_M15::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.M15.f2)
  return _internal_mutable_f2();
}
inline const std::string& M11_M12_M15::_internal_f2() const {
  return f2_.Get();
}
inline void M11_M12_M15::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11_M12_M15::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.M12.M15.f2)
}
inline void M11_M12_M15::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.M12.M15.f2)
}
inline void M11_M12_M15::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.M12.M15.f2)
}
inline std::string* M11_M12_M15::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11_M12_M15::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.M15.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11_M12_M15::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.M15.f2)
}
inline std::string* M11_M12_M15::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.M12.M15.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11_M12_M15::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.M15.f2)
}

// optional int64 f3 = 6;
inline bool M11_M12_M15::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M11_M12_M15::has_f3() const {
  return _internal_has_f3();
}
inline void M11_M12_M15::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11_M12_M15::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11_M12_M15::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.M15.f3)
  return _internal_f3();
}
inline void M11_M12_M15::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M11_M12_M15::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.M15.f3)
}

// -------------------------------------------------------------------

// M11_M12

// optional bytes f1 = 1;
inline bool M11_M12::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M11_M12::has_f1() const {
  return _internal_has_f1();
}
inline void M11_M12::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M11_M12::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.f1)
  return _internal_f1();
}
inline void M11_M12::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.f1)
}
inline std::string* M11_M12::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.f1)
  return _internal_mutable_f1();
}
inline const std::string& M11_M12::_internal_f1() const {
  return f1_.Get();
}
inline void M11_M12::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11_M12::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.M12.f1)
}
inline void M11_M12::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.M12.f1)
}
inline void M11_M12::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.M12.f1)
}
inline std::string* M11_M12::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11_M12::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11_M12::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.f1)
}
inline std::string* M11_M12::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.M12.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11_M12::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.f1)
}

// optional string f2 = 2;
inline bool M11_M12::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M11_M12::has_f2() const {
  return _internal_has_f2();
}
inline void M11_M12::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M11_M12::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.f2)
  return _internal_f2();
}
inline void M11_M12::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.f2)
}
inline std::string* M11_M12::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.f2)
  return _internal_mutable_f2();
}
inline const std::string& M11_M12::_internal_f2() const {
  return f2_.Get();
}
inline void M11_M12::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11_M12::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.M12.f2)
}
inline void M11_M12::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.M12.f2)
}
inline void M11_M12::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.M12.f2)
}
inline std::string* M11_M12::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11_M12::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11_M12::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.f2)
}
inline std::string* M11_M12::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.M12.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11_M12::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.f2)
}

// optional int32 f3 = 4;
inline bool M11_M12::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M11_M12::has_f3() const {
  return _internal_has_f3();
}
inline void M11_M12::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11_M12::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11_M12::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.f3)
  return _internal_f3();
}
inline void M11_M12::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M11_M12::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M12.f3)
}

// optional .hyperprotobench.M11.M12.M13 f4 = 6;
inline bool M11_M12::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M11_M12::has_f4() const {
  return _internal_has_f4();
}
inline void M11_M12::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::hyperprotobench::M11_M12_M13& M11_M12::_internal_f4() const {
  const ::hyperprotobench::M11_M12_M13* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M11_M12_M13*>(
      &::hyperprotobench::_M11_M12_M13_default_instance_);
}
inline const ::hyperprotobench::M11_M12_M13& M11_M12::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M11_M12_M13* M11_M12::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M11_M12_M13* M11_M12::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.f4)
  _has_bits_[0] &= ~0x00000040u;
  ::hyperprotobench::M11_M12_M13* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M11_M12_M13* M11_M12::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M11_M12_M13>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M11_M12_M13* M11_M12::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.f4)
  return _internal_mutable_f4();
}
inline void M11_M12::set_allocated_f4(::hyperprotobench::M11_M12_M13* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.f4)
}

// optional .hyperprotobench.M11.M12.M15 f5 = 7;
inline bool M11_M12::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M11_M12::has_f5() const {
  return _internal_has_f5();
}
inline void M11_M12::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::hyperprotobench::M11_M12_M15& M11_M12::_internal_f5() const {
  const ::hyperprotobench::M11_M12_M15* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M11_M12_M15*>(
      &::hyperprotobench::_M11_M12_M15_default_instance_);
}
inline const ::hyperprotobench::M11_M12_M15& M11_M12::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M12.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M11_M12_M15* M11_M12::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M11_M12_M15* M11_M12::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.M12.f5)
  _has_bits_[0] &= ~0x00000080u;
  ::hyperprotobench::M11_M12_M15* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M11_M12_M15* M11_M12::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M11_M12_M15>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M11_M12_M15* M11_M12::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.M12.f5)
  return _internal_mutable_f5();
}
inline void M11_M12::set_allocated_f5(::hyperprotobench::M11_M12_M15* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.M12.f5)
}

// -------------------------------------------------------------------

// M11_M16

// optional bool f1 = 1;
inline bool M11_M16::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M11_M16::has_f1() const {
  return _internal_has_f1();
}
inline void M11_M16::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M11_M16::_internal_f1() const {
  return f1_;
}
inline bool M11_M16::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.M16.f1)
  return _internal_f1();
}
inline void M11_M16::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M11_M16::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.M16.f1)
}

// -------------------------------------------------------------------

// M11

// optional .hyperprotobench.M11.M12 f1 = 1;
inline bool M11::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M11::has_f1() const {
  return _internal_has_f1();
}
inline void M11::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M11_M12& M11::_internal_f1() const {
  const ::hyperprotobench::M11_M12* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M11_M12*>(
      &::hyperprotobench::_M11_M12_default_instance_);
}
inline const ::hyperprotobench::M11_M12& M11::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M11_M12* M11::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M11_M12* M11::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M11_M12* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M11_M12* M11::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M11_M12>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M11_M12* M11::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.f1)
  return _internal_mutable_f1();
}
inline void M11::set_allocated_f1(::hyperprotobench::M11_M12* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.f1)
}

// optional string f2 = 2;
inline bool M11::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M11::has_f2() const {
  return _internal_has_f2();
}
inline void M11::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M11::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f2)
  return _internal_f2();
}
inline void M11::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f2)
}
inline std::string* M11::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.f2)
  return _internal_mutable_f2();
}
inline const std::string& M11::_internal_f2() const {
  return f2_.Get();
}
inline void M11::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.f2)
}
inline void M11::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.f2)
}
inline void M11::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.f2)
}
inline std::string* M11::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.f2)
}
inline std::string* M11::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f2)
}

// optional string f3 = 3;
inline bool M11::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M11::has_f3() const {
  return _internal_has_f3();
}
inline void M11::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M11::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f3)
  return _internal_f3();
}
inline void M11::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f3)
}
inline std::string* M11::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.f3)
  return _internal_mutable_f3();
}
inline const std::string& M11::_internal_f3() const {
  return f3_.Get();
}
inline void M11::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.f3)
}
inline void M11::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.f3)
}
inline void M11::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.f3)
}
inline std::string* M11::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.f3)
}
inline std::string* M11::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f3)
}

// optional .hyperprotobench.M11.M16 f4 = 4;
inline bool M11::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M11::has_f4() const {
  return _internal_has_f4();
}
inline void M11::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M11_M16& M11::_internal_f4() const {
  const ::hyperprotobench::M11_M16* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M11_M16*>(
      &::hyperprotobench::_M11_M16_default_instance_);
}
inline const ::hyperprotobench::M11_M16& M11::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M11_M16* M11::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M11_M16* M11::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.f4)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M11_M16* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M11_M16* M11::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M11_M16>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M11_M16* M11::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.f4)
  return _internal_mutable_f4();
}
inline void M11::set_allocated_f4(::hyperprotobench::M11_M16* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.f4)
}

// optional int32 f5 = 5;
inline bool M11::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M11::has_f5() const {
  return _internal_has_f5();
}
inline void M11::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f5)
  return _internal_f5();
}
inline void M11::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M11::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f5)
}

// optional int32 f6 = 6;
inline bool M11::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M11::has_f6() const {
  return _internal_has_f6();
}
inline void M11::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f6)
  return _internal_f6();
}
inline void M11::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f6_ = value;
}
inline void M11::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f6)
}

// optional string f7 = 7;
inline bool M11::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M11::has_f7() const {
  return _internal_has_f7();
}
inline void M11::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M11::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f7)
  return _internal_f7();
}
inline void M11::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f7)
}
inline std::string* M11::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M11.f7)
  return _internal_mutable_f7();
}
inline const std::string& M11::_internal_f7() const {
  return f7_.Get();
}
inline void M11::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M11::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M11.f7)
}
inline void M11::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M11.f7)
}
inline void M11::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M11.f7)
}
inline std::string* M11::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000080u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M11::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M11.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M11::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M11.f7)
}
inline std::string* M11::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M11.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M11::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f7)
}

// optional fixed64 f8 = 8;
inline bool M11::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M11::has_f8() const {
  return _internal_has_f8();
}
inline void M11::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f8)
  return _internal_f8();
}
inline void M11::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  f8_ = value;
}
inline void M11::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f8)
}

// optional bool f9 = 10;
inline bool M11::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M11::has_f9() const {
  return _internal_has_f9();
}
inline void M11::clear_f9() {
  f9_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool M11::_internal_f9() const {
  return f9_;
}
inline bool M11::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f9)
  return _internal_f9();
}
inline void M11::_internal_set_f9(bool value) {
  _has_bits_[0] |= 0x00000400u;
  f9_ = value;
}
inline void M11::set_f9(bool value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f9)
}

// optional bool f10 = 11;
inline bool M11::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M11::has_f10() const {
  return _internal_has_f10();
}
inline void M11::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool M11::_internal_f10() const {
  return f10_;
}
inline bool M11::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f10)
  return _internal_f10();
}
inline void M11::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00000800u;
  f10_ = value;
}
inline void M11::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f10)
}

// optional int32 f11 = 12;
inline bool M11::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M11::has_f11() const {
  return _internal_has_f11();
}
inline void M11::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M11::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f11)
  return _internal_f11();
}
inline void M11::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f11_ = value;
}
inline void M11::set_f11(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f11)
}

// optional int64 f12 = 13;
inline bool M11::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M11::has_f12() const {
  return _internal_has_f12();
}
inline void M11::clear_f12() {
  f12_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M11::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f12)
  return _internal_f12();
}
inline void M11::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  f12_ = value;
}
inline void M11::set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f12)
}

// optional fixed64 f13 = 14;
inline bool M11::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M11::has_f13() const {
  return _internal_has_f13();
}
inline void M11::clear_f13() {
  f13_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11::_internal_f13() const {
  return f13_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M11::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M11.f13)
  return _internal_f13();
}
inline void M11::_internal_set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  f13_ = value;
}
inline void M11::set_f13(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M11.f13)
}

// -------------------------------------------------------------------

// M17_M18_M19_M20

// optional uint64 f1 = 9;
inline bool M17_M18_M19_M20::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M17_M18_M19_M20::has_f1() const {
  return _internal_has_f1();
}
inline void M17_M18_M19_M20::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_M19_M20::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_M19_M20::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.M19.M20.f1)
  return _internal_f1();
}
inline void M17_M18_M19_M20::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M17_M18_M19_M20::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.M19.M20.f1)
}

// -------------------------------------------------------------------

// M17_M18_M19

// optional int32 f1 = 1;
inline bool M17_M18_M19::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M17_M18_M19::has_f1() const {
  return _internal_has_f1();
}
inline void M17_M18_M19::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18_M19::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18_M19::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.M19.f1)
  return _internal_f1();
}
inline void M17_M18_M19::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M17_M18_M19::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.M19.f1)
}

// optional .hyperprotobench.M17.M18.M19.M20 f2 = 2;
inline bool M17_M18_M19::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M17_M18_M19::has_f2() const {
  return _internal_has_f2();
}
inline void M17_M18_M19::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M17_M18_M19_M20& M17_M18_M19::_internal_f2() const {
  const ::hyperprotobench::M17_M18_M19_M20* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M17_M18_M19_M20*>(
      &::hyperprotobench::_M17_M18_M19_M20_default_instance_);
}
inline const ::hyperprotobench::M17_M18_M19_M20& M17_M18_M19::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.M19.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M17_M18_M19_M20* M17_M18_M19::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M17_M18_M19_M20* M17_M18_M19::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.M18.M19.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M17_M18_M19_M20* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M17_M18_M19_M20* M17_M18_M19::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M17_M18_M19_M20>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M17_M18_M19_M20* M17_M18_M19::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.M18.M19.f2)
  return _internal_mutable_f2();
}
inline void M17_M18_M19::set_allocated_f2(::hyperprotobench::M17_M18_M19_M20* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.M18.M19.f2)
}

// optional string f3 = 3;
inline bool M17_M18_M19::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M17_M18_M19::has_f3() const {
  return _internal_has_f3();
}
inline void M17_M18_M19::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M17_M18_M19::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.M19.f3)
  return _internal_f3();
}
inline void M17_M18_M19::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.M19.f3)
}
inline std::string* M17_M18_M19::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.M18.M19.f3)
  return _internal_mutable_f3();
}
inline const std::string& M17_M18_M19::_internal_f3() const {
  return f3_.Get();
}
inline void M17_M18_M19::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17_M18_M19::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.M18.M19.f3)
}
inline void M17_M18_M19::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.M18.M19.f3)
}
inline void M17_M18_M19::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.M18.M19.f3)
}
inline std::string* M17_M18_M19::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17_M18_M19::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.M18.M19.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17_M18_M19::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.M18.M19.f3)
}
inline std::string* M17_M18_M19::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.M18.M19.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17_M18_M19::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.M18.M19.f3)
}

// optional int32 f4 = 4;
inline bool M17_M18_M19::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M17_M18_M19::has_f4() const {
  return _internal_has_f4();
}
inline void M17_M18_M19::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18_M19::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18_M19::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.M19.f4)
  return _internal_f4();
}
inline void M17_M18_M19::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M17_M18_M19::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.M19.f4)
}

// -------------------------------------------------------------------

// M17_M18

// optional double f1 = 1;
inline bool M17_M18::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M17_M18::has_f1() const {
  return _internal_has_f1();
}
inline void M17_M18::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double M17_M18::_internal_f1() const {
  return f1_;
}
inline double M17_M18::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f1)
  return _internal_f1();
}
inline void M17_M18::_internal_set_f1(double value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M17_M18::set_f1(double value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f1)
}

// optional .hyperprotobench.M17.M18.M19 f2 = 2;
inline bool M17_M18::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M17_M18::has_f2() const {
  return _internal_has_f2();
}
inline void M17_M18::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M17_M18_M19& M17_M18::_internal_f2() const {
  const ::hyperprotobench::M17_M18_M19* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M17_M18_M19*>(
      &::hyperprotobench::_M17_M18_M19_default_instance_);
}
inline const ::hyperprotobench::M17_M18_M19& M17_M18::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M17_M18_M19* M17_M18::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M17_M18_M19* M17_M18::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.M18.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M17_M18_M19* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M17_M18_M19* M17_M18::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M17_M18_M19>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M17_M18_M19* M17_M18::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.M18.f2)
  return _internal_mutable_f2();
}
inline void M17_M18::set_allocated_f2(::hyperprotobench::M17_M18_M19* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.M18.f2)
}

// optional string f3 = 3;
inline bool M17_M18::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M17_M18::has_f3() const {
  return _internal_has_f3();
}
inline void M17_M18::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M17_M18::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f3)
  return _internal_f3();
}
inline void M17_M18::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f3)
}
inline std::string* M17_M18::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.M18.f3)
  return _internal_mutable_f3();
}
inline const std::string& M17_M18::_internal_f3() const {
  return f3_.Get();
}
inline void M17_M18::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17_M18::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.M18.f3)
}
inline void M17_M18::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.M18.f3)
}
inline void M17_M18::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.M18.f3)
}
inline std::string* M17_M18::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17_M18::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.M18.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17_M18::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.M18.f3)
}
inline std::string* M17_M18::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.M18.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17_M18::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.M18.f3)
}

// -------------------------------------------------------------------

// M17

// optional .hyperprotobench.M17.M18 f1 = 1;
inline bool M17::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M17::has_f1() const {
  return _internal_has_f1();
}
inline void M17::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M17_M18& M17::_internal_f1() const {
  const ::hyperprotobench::M17_M18* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M17_M18*>(
      &::hyperprotobench::_M17_M18_default_instance_);
}
inline const ::hyperprotobench::M17_M18& M17::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M17_M18* M17::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M17_M18* M17::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M17_M18* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M17_M18* M17::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M17_M18>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M17_M18* M17::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f1)
  return _internal_mutable_f1();
}
inline void M17::set_allocated_f1(::hyperprotobench::M17_M18* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f1)
}

// optional string f2 = 2;
inline bool M17::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M17::has_f2() const {
  return _internal_has_f2();
}
inline void M17::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M17::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f2)
  return _internal_f2();
}
inline void M17::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f2)
}
inline std::string* M17::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f2)
  return _internal_mutable_f2();
}
inline const std::string& M17::_internal_f2() const {
  return f2_.Get();
}
inline void M17::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.f2)
}
inline void M17::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.f2)
}
inline void M17::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.f2)
}
inline std::string* M17::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f2)
}
inline std::string* M17::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f2)
}

// optional int64 f3 = 5;
inline bool M17::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M17::has_f3() const {
  return _internal_has_f3();
}
inline void M17::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M17::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M17::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f3)
  return _internal_f3();
}
inline void M17::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M17::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f3)
}

// optional string f4 = 6;
inline bool M17::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M17::has_f4() const {
  return _internal_has_f4();
}
inline void M17::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M17::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f4)
  return _internal_f4();
}
inline void M17::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f4)
}
inline std::string* M17::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f4)
  return _internal_mutable_f4();
}
inline const std::string& M17::_internal_f4() const {
  return f4_.Get();
}
inline void M17::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.f4)
}
inline void M17::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.f4)
}
inline void M17::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.f4)
}
inline std::string* M17::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f4)
}
inline std::string* M17::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f4)
}

// optional fixed64 f5 = 7;
inline bool M17::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M17::has_f5() const {
  return _internal_has_f5();
}
inline void M17::clear_f5() {
  f5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f5)
  return _internal_f5();
}
inline void M17::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M17::set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f5)
}

// -------------------------------------------------------------------

// M21_M22_M23_M24

// optional fixed32 f1 = 1;
inline bool M21_M22_M23_M24::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M22_M23_M24::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M22_M23_M24::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M21_M22_M23_M24::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M21_M22_M23_M24::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.M24.f1)
  return _internal_f1();
}
inline void M21_M22_M23_M24::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21_M22_M23_M24::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.M24.f1)
}

// optional int32 f2 = 4;
inline bool M21_M22_M23_M24::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M21_M22_M23_M24::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M22_M23_M24::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23_M24::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23_M24::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.M24.f2)
  return _internal_f2();
}
inline void M21_M22_M23_M24::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f2_ = value;
}
inline void M21_M22_M23_M24::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.M24.f2)
}

// optional int64 f3 = 6;
inline bool M21_M22_M23_M24::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M21_M22_M23_M24::has_f3() const {
  return _internal_has_f3();
}
inline void M21_M22_M23_M24::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22_M23_M24::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22_M23_M24::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.M24.f3)
  return _internal_f3();
}
inline void M21_M22_M23_M24::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M21_M22_M23_M24::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.M24.f3)
}

// optional int32 f4 = 7;
inline bool M21_M22_M23_M24::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M21_M22_M23_M24::has_f4() const {
  return _internal_has_f4();
}
inline void M21_M22_M23_M24::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23_M24::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23_M24::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.M24.f4)
  return _internal_f4();
}
inline void M21_M22_M23_M24::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M21_M22_M23_M24::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.M24.f4)
}

// -------------------------------------------------------------------

// M21_M22_M23

// optional int32 f1 = 3;
inline bool M21_M22_M23::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M22_M23::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M22_M23::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f1)
  return _internal_f1();
}
inline void M21_M22_M23::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21_M22_M23::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.f1)
}

// optional .hyperprotobench.M21.M22.M23.M24 f2 = 5;
inline bool M21_M22_M23::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M21_M22_M23::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M22_M23::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M21_M22_M23_M24& M21_M22_M23::_internal_f2() const {
  const ::hyperprotobench::M21_M22_M23_M24* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M22_M23_M24*>(
      &::hyperprotobench::_M21_M22_M23_M24_default_instance_);
}
inline const ::hyperprotobench::M21_M22_M23_M24& M21_M22_M23::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M21_M22_M23_M24* M21_M22_M23::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M22_M23_M24* M21_M22_M23::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.M23.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M21_M22_M23_M24* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M22_M23_M24* M21_M22_M23::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M22_M23_M24>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M21_M22_M23_M24* M21_M22_M23::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.M23.f2)
  return _internal_mutable_f2();
}
inline void M21_M22_M23::set_allocated_f2(::hyperprotobench::M21_M22_M23_M24* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.M23.f2)
}

// optional int32 f3 = 6;
inline bool M21_M22_M23::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M21_M22_M23::has_f3() const {
  return _internal_has_f3();
}
inline void M21_M22_M23::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22_M23::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f3)
  return _internal_f3();
}
inline void M21_M22_M23::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M21_M22_M23::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.f3)
}

// optional bool f4 = 8;
inline bool M21_M22_M23::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M21_M22_M23::has_f4() const {
  return _internal_has_f4();
}
inline void M21_M22_M23::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool M21_M22_M23::_internal_f4() const {
  return f4_;
}
inline bool M21_M22_M23::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f4)
  return _internal_f4();
}
inline void M21_M22_M23::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M21_M22_M23::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.f4)
}

// optional string f5 = 9;
inline bool M21_M22_M23::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M21_M22_M23::has_f5() const {
  return _internal_has_f5();
}
inline void M21_M22_M23::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M21_M22_M23::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f5)
  return _internal_f5();
}
inline void M21_M22_M23::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.f5)
}
inline std::string* M21_M22_M23::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.M23.f5)
  return _internal_mutable_f5();
}
inline const std::string& M21_M22_M23::_internal_f5() const {
  return f5_.Get();
}
inline void M21_M22_M23::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M22_M23::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M22.M23.f5)
}
inline void M21_M22_M23::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M22.M23.f5)
}
inline void M21_M22_M23::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M22.M23.f5)
}
inline std::string* M21_M22_M23::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M22_M23::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.M23.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M22_M23::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.M23.f5)
}
inline std::string* M21_M22_M23::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M22.M23.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M22_M23::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.M23.f5)
}

// optional fixed32 f6 = 10;
inline bool M21_M22_M23::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M21_M22_M23::has_f6() const {
  return _internal_has_f6();
}
inline void M21_M22_M23::clear_f6() {
  f6_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M21_M22_M23::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M21_M22_M23::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.M23.f6)
  return _internal_f6();
}
inline void M21_M22_M23::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M21_M22_M23::set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.M23.f6)
}

// -------------------------------------------------------------------

// M21_M22

// optional bool f1 = 2;
inline bool M21_M22::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M22::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M22::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M21_M22::_internal_f1() const {
  return f1_;
}
inline bool M21_M22::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f1)
  return _internal_f1();
}
inline void M21_M22::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21_M22::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f1)
}

// optional .hyperprotobench.M21.M22.M23 f2 = 5;
inline bool M21_M22::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M21_M22::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M22::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M21_M22_M23& M21_M22::_internal_f2() const {
  const ::hyperprotobench::M21_M22_M23* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M22_M23*>(
      &::hyperprotobench::_M21_M22_M23_default_instance_);
}
inline const ::hyperprotobench::M21_M22_M23& M21_M22::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M21_M22_M23* M21_M22::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M22_M23* M21_M22::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M21_M22_M23* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M22_M23* M21_M22::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M22_M23>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M21_M22_M23* M21_M22::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.f2)
  return _internal_mutable_f2();
}
inline void M21_M22::set_allocated_f2(::hyperprotobench::M21_M22_M23* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.f2)
}

// optional uint64 f3 = 6;
inline bool M21_M22::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M21_M22::has_f3() const {
  return _internal_has_f3();
}
inline void M21_M22::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f3)
  return _internal_f3();
}
inline void M21_M22::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M21_M22::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f3)
}

// optional double f4 = 8;
inline bool M21_M22::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M21_M22::has_f4() const {
  return _internal_has_f4();
}
inline void M21_M22::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double M21_M22::_internal_f4() const {
  return f4_;
}
inline double M21_M22::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f4)
  return _internal_f4();
}
inline void M21_M22::_internal_set_f4(double value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M21_M22::set_f4(double value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f4)
}

// -------------------------------------------------------------------

// M21

// optional int64 f1 = 1;
inline bool M21::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21::has_f1() const {
  return _internal_has_f1();
}
inline void M21::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f1)
  return _internal_f1();
}
inline void M21::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f1)
}

// optional uint64 f2 = 3;
inline bool M21::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M21::has_f2() const {
  return _internal_has_f2();
}
inline void M21::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f2)
  return _internal_f2();
}
inline void M21::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M21::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f2)
}

// optional string f3 = 4;
inline bool M21::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M21::has_f3() const {
  return _internal_has_f3();
}
inline void M21::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M21::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f3)
  return _internal_f3();
}
inline void M21::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f3)
}
inline std::string* M21::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f3)
  return _internal_mutable_f3();
}
inline const std::string& M21::_internal_f3() const {
  return f3_.Get();
}
inline void M21::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.f3)
}
inline void M21::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f3)
}
inline void M21::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f3)
}
inline std::string* M21::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f3)
}
inline std::string* M21::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f3)
}

// optional .hyperprotobench.M21.M22 f4 = 6;
inline bool M21::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M21::has_f4() const {
  return _internal_has_f4();
}
inline void M21::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::hyperprotobench::M21_M22& M21::_internal_f4() const {
  const ::hyperprotobench::M21_M22* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M22*>(
      &::hyperprotobench::_M21_M22_default_instance_);
}
inline const ::hyperprotobench::M21_M22& M21::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M21_M22* M21::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M22* M21::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f4)
  _has_bits_[0] &= ~0x00000040u;
  ::hyperprotobench::M21_M22* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M22* M21::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M22>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M21_M22* M21::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f4)
  return _internal_mutable_f4();
}
inline void M21::set_allocated_f4(::hyperprotobench::M21_M22* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f4)
}

// optional bool f5 = 7;
inline bool M21::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M21::has_f5() const {
  return _internal_has_f5();
}
inline void M21::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool M21::_internal_f5() const {
  return f5_;
}
inline bool M21::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f5)
  return _internal_f5();
}
inline void M21::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M21::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f5)
}

// optional bytes f6 = 8;
inline bool M21::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M21::has_f6() const {
  return _internal_has_f6();
}
inline void M21::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M21::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f6)
  return _internal_f6();
}
inline void M21::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f6)
}
inline std::string* M21::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f6)
  return _internal_mutable_f6();
}
inline const std::string& M21::_internal_f6() const {
  return f6_.Get();
}
inline void M21::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.f6)
}
inline void M21::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f6)
}
inline void M21::set_f6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f6)
}
inline std::string* M21::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f6)
}
inline std::string* M21::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f6)
}

// optional uint64 f7 = 9;
inline bool M21::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M21::has_f7() const {
  return _internal_has_f7();
}
inline void M21::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f7)
  return _internal_f7();
}
inline void M21::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M21::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f7)
}

// -------------------------------------------------------------------

// M25_M26_M27_M28

// optional string f1 = 1;
inline bool M25_M26_M27_M28::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26_M27_M28::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26_M27_M28::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25_M26_M27_M28::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.M28.f1)
  return _internal_f1();
}
inline void M25_M26_M27_M28::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.M28.f1)
}
inline std::string* M25_M26_M27_M28::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.M27.M28.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25_M26_M27_M28::_internal_f1() const {
  return f1_.Get();
}
inline void M25_M26_M27_M28::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M26.M27.M28.f1)
}
inline void M25_M26_M27_M28::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M26.M27.M28.f1)
}
inline void M25_M26_M27_M28::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M26.M27.M28.f1)
}
inline std::string* M25_M26_M27_M28::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M26_M27_M28::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.M27.M28.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.M27.M28.f1)
}
inline std::string* M25_M26_M27_M28::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M26.M27.M28.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.M27.M28.f1)
}

// optional string f2 = 4;
inline bool M25_M26_M27_M28::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M25_M26_M27_M28::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M26_M27_M28::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M25_M26_M27_M28::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.M28.f2)
  return _internal_f2();
}
inline void M25_M26_M27_M28::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.M28.f2)
}
inline std::string* M25_M26_M27_M28::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.M27.M28.f2)
  return _internal_mutable_f2();
}
inline const std::string& M25_M26_M27_M28::_internal_f2() const {
  return f2_.Get();
}
inline void M25_M26_M27_M28::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M26.M27.M28.f2)
}
inline void M25_M26_M27_M28::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M26.M27.M28.f2)
}
inline void M25_M26_M27_M28::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M26.M27.M28.f2)
}
inline std::string* M25_M26_M27_M28::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M26_M27_M28::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.M27.M28.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.M27.M28.f2)
}
inline std::string* M25_M26_M27_M28::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M26.M27.M28.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M26_M27_M28::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.M27.M28.f2)
}

// optional bool f3 = 5;
inline bool M25_M26_M27_M28::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M25_M26_M27_M28::has_f3() const {
  return _internal_has_f3();
}
inline void M25_M26_M27_M28::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool M25_M26_M27_M28::_internal_f3() const {
  return f3_;
}
inline bool M25_M26_M27_M28::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.M28.f3)
  return _internal_f3();
}
inline void M25_M26_M27_M28::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M25_M26_M27_M28::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.M28.f3)
}

// -------------------------------------------------------------------

// M25_M26_M27

// optional int64 f1 = 1;
inline bool M25_M26_M27::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26_M27::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26_M27::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M26_M27::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M26_M27::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f1)
  return _internal_f1();
}
inline void M25_M26_M27::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25_M26_M27::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.f1)
}

// optional string f2 = 2;
inline bool M25_M26_M27::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25_M26_M27::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M26_M27::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M25_M26_M27::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f2)
  return _internal_f2();
}
inline void M25_M26_M27::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.f2)
}
inline std::string* M25_M26_M27::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.M27.f2)
  return _internal_mutable_f2();
}
inline const std::string& M25_M26_M27::_internal_f2() const {
  return f2_.Get();
}
inline void M25_M26_M27::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M26_M27::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M26.M27.f2)
}
inline void M25_M26_M27::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M26.M27.f2)
}
inline void M25_M26_M27::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M26.M27.f2)
}
inline std::string* M25_M26_M27::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M26_M27::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.M27.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M26_M27::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.M27.f2)
}
inline std::string* M25_M26_M27::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M26.M27.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M26_M27::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.M27.f2)
}

// optional int32 f3 = 5;
inline bool M25_M26_M27::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M25_M26_M27::has_f3() const {
  return _internal_has_f3();
}
inline void M25_M26_M27::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25_M26_M27::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25_M26_M27::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f3)
  return _internal_f3();
}
inline void M25_M26_M27::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M25_M26_M27::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.f3)
}

// optional .hyperprotobench.M25.M26.M27.E1 f4 = 7;
inline bool M25_M26_M27::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M25_M26_M27::has_f4() const {
  return _internal_has_f4();
}
inline void M25_M26_M27::clear_f4() {
  f4_ = 100;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hyperprotobench::M25_M26_M27_E1 M25_M26_M27::_internal_f4() const {
  return static_cast< ::hyperprotobench::M25_M26_M27_E1 >(f4_);
}
inline ::hyperprotobench::M25_M26_M27_E1 M25_M26_M27::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f4)
  return _internal_f4();
}
inline void M25_M26_M27::_internal_set_f4(::hyperprotobench::M25_M26_M27_E1 value) {
  assert(::hyperprotobench::M25_M26_M27_E1_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M25_M26_M27::set_f4(::hyperprotobench::M25_M26_M27_E1 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.f4)
}

// optional .hyperprotobench.M25.M26.M27.M28 f5 = 8;
inline bool M25_M26_M27::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M25_M26_M27::has_f5() const {
  return _internal_has_f5();
}
inline void M25_M26_M27::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M25_M26_M27_M28& M25_M26_M27::_internal_f5() const {
  const ::hyperprotobench::M25_M26_M27_M28* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26_M27_M28*>(
      &::hyperprotobench::_M25_M26_M27_M28_default_instance_);
}
inline const ::hyperprotobench::M25_M26_M27_M28& M25_M26_M27::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M25_M26_M27_M28* M25_M26_M27::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26_M27_M28* M25_M26_M27::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.M27.f5)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M25_M26_M27_M28* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26_M27_M28* M25_M26_M27::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26_M27_M28>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M25_M26_M27_M28* M25_M26_M27::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.M27.f5)
  return _internal_mutable_f5();
}
inline void M25_M26_M27::set_allocated_f5(::hyperprotobench::M25_M26_M27_M28* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.M27.f5)
}

// -------------------------------------------------------------------

// M25_M26

// optional string f1 = 1;
inline bool M25_M26::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25_M26::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f1)
  return _internal_f1();
}
inline void M25_M26::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.f1)
}
inline std::string* M25_M26::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25_M26::_internal_f1() const {
  return f1_.Get();
}
inline void M25_M26::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M26::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M26.f1)
}
inline void M25_M26::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M26.f1)
}
inline void M25_M26::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M26.f1)
}
inline std::string* M25_M26::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M26::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M26::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.f1)
}
inline std::string* M25_M26::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M26.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M26::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.f1)
}

// optional .hyperprotobench.M25.M26.M27 f2 = 4;
inline bool M25_M26::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M25_M26::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M26::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M25_M26_M27& M25_M26::_internal_f2() const {
  const ::hyperprotobench::M25_M26_M27* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26_M27*>(
      &::hyperprotobench::_M25_M26_M27_default_instance_);
}
inline const ::hyperprotobench::M25_M26_M27& M25_M26::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.f2)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M25_M26_M27* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26_M27>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.f2)
  return _internal_mutable_f2();
}
inline void M25_M26::set_allocated_f2(::hyperprotobench::M25_M26_M27* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.f2)
}

// -------------------------------------------------------------------

// M25_M29

// optional string f1 = 1;
inline bool M25_M29::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M29::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M29::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25_M29::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M29.f1)
  return _internal_f1();
}
inline void M25_M29::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M29.f1)
}
inline std::string* M25_M29::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M29.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25_M29::_internal_f1() const {
  return f1_.Get();
}
inline void M25_M29::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M29::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M29.f1)
}
inline void M25_M29::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M29.f1)
}
inline void M25_M29::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M29.f1)
}
inline std::string* M25_M29::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M29::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M29.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M29::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M29.f1)
}
inline std::string* M25_M29::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M29.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M29::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M29.f1)
}

// -------------------------------------------------------------------

// M25

// optional bytes f1 = 2;
inline bool M25::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25::has_f1() const {
  return _internal_has_f1();
}
inline void M25::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f1)
  return _internal_f1();
}
inline void M25::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f1)
}
inline std::string* M25::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25::_internal_f1() const {
  return f1_.Get();
}
inline void M25::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f1)
}
inline void M25::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f1)
}
inline void M25::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f1)
}
inline std::string* M25::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f1)
}
inline std::string* M25::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f1)
}

// optional .hyperprotobench.M25.M26 f2 = 3;
inline bool M25::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M25::has_f2() const {
  return _internal_has_f2();
}
inline void M25::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M25_M26& M25::_internal_f2() const {
  const ::hyperprotobench::M25_M26* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26*>(
      &::hyperprotobench::_M25_M26_default_instance_);
}
inline const ::hyperprotobench::M25_M26& M25::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M25_M26* M25::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M25_M26* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M25_M26* M25::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f2)
  return _internal_mutable_f2();
}
inline void M25::set_allocated_f2(::hyperprotobench::M25_M26* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f2)
}

// optional fixed64 f3 = 4;
inline bool M25::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M25::has_f3() const {
  return _internal_has_f3();
}
inline void M25::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f3)
  return _internal_f3();
}
inline void M25::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M25::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f3)
}

// optional uint64 f4 = 7;
inline bool M25::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M25::has_f4() const {
  return _internal_has_f4();
}
inline void M25::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f4)
  return _internal_f4();
}
inline void M25::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M25::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f4)
}

// optional .hyperprotobench.M25.M29 f5 = 8;
inline bool M25::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M25::has_f5() const {
  return _internal_has_f5();
}
inline void M25::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::hyperprotobench::M25_M29& M25::_internal_f5() const {
  const ::hyperprotobench::M25_M29* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M29*>(
      &::hyperprotobench::_M25_M29_default_instance_);
}
inline const ::hyperprotobench::M25_M29& M25::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M25_M29* M25::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M29* M25::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f5)
  _has_bits_[0] &= ~0x00000080u;
  ::hyperprotobench::M25_M29* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M29* M25::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M29>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M25_M29* M25::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f5)
  return _internal_mutable_f5();
}
inline void M25::set_allocated_f5(::hyperprotobench::M25_M29* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f5)
}

// optional int32 f6 = 9;
inline bool M25::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M25::has_f6() const {
  return _internal_has_f6();
}
inline void M25::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f6)
  return _internal_f6();
}
inline void M25::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M25::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f6)
}

// optional int32 f7 = 10;
inline bool M25::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M25::has_f7() const {
  return _internal_has_f7();
}
inline void M25::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f7)
  return _internal_f7();
}
inline void M25::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M25::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f7)
}

// optional uint64 f8 = 11;
inline bool M25::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M25::has_f8() const {
  return _internal_has_f8();
}
inline void M25::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f8)
  return _internal_f8();
}
inline void M25::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M25::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f8)
}

// optional double f9 = 12;
inline bool M25::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M25::has_f9() const {
  return _internal_has_f9();
}
inline void M25::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double M25::_internal_f9() const {
  return f9_;
}
inline double M25::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f9)
  return _internal_f9();
}
inline void M25::_internal_set_f9(double value) {
  _has_bits_[0] |= 0x00000800u;
  f9_ = value;
}
inline void M25::set_f9(double value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f9)
}

// -------------------------------------------------------------------

// M30_M31_M32_M33

// optional int32 f1 = 1;
inline bool M30_M31_M32_M33::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M31_M32_M33::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M31_M32_M33::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31_M32_M33::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31_M32_M33::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.M33.f1)
  return _internal_f1();
}
inline void M30_M31_M32_M33::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M31_M32_M33::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.M33.f1)
}

// optional string f2 = 4;
inline bool M30_M31_M32_M33::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M30_M31_M32_M33::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M31_M32_M33::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M30_M31_M32_M33::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.M33.f2)
  return _internal_f2();
}
inline void M30_M31_M32_M33::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.M33.f2)
}
inline std::string* M30_M31_M32_M33::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.M32.M33.f2)
  return _internal_mutable_f2();
}
inline const std::string& M30_M31_M32_M33::_internal_f2() const {
  return f2_.Get();
}
inline void M30_M31_M32_M33::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M31.M32.M33.f2)
}
inline void M30_M31_M32_M33::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M31.M32.M33.f2)
}
inline void M30_M31_M32_M33::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M31.M32.M33.f2)
}
inline std::string* M30_M31_M32_M33::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M31_M32_M33::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.M32.M33.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.M32.M33.f2)
}
inline std::string* M30_M31_M32_M33::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M31.M32.M33.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.M32.M33.f2)
}

// optional bytes f3 = 6;
inline bool M30_M31_M32_M33::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M30_M31_M32_M33::has_f3() const {
  return _internal_has_f3();
}
inline void M30_M31_M32_M33::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M30_M31_M32_M33::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.M33.f3)
  return _internal_f3();
}
inline void M30_M31_M32_M33::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.M33.f3)
}
inline std::string* M30_M31_M32_M33::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.M32.M33.f3)
  return _internal_mutable_f3();
}
inline const std::string& M30_M31_M32_M33::_internal_f3() const {
  return f3_.Get();
}
inline void M30_M31_M32_M33::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M31.M32.M33.f3)
}
inline void M30_M31_M32_M33::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M31.M32.M33.f3)
}
inline void M30_M31_M32_M33::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M31.M32.M33.f3)
}
inline std::string* M30_M31_M32_M33::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000040u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M31_M32_M33::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.M32.M33.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.M32.M33.f3)
}
inline std::string* M30_M31_M32_M33::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M31.M32.M33.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.M32.M33.f3)
}

// optional string f4 = 7;
inline bool M30_M31_M32_M33::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M30_M31_M32_M33::has_f4() const {
  return _internal_has_f4();
}
inline void M30_M31_M32_M33::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M30_M31_M32_M33::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.M33.f4)
  return _internal_f4();
}
inline void M30_M31_M32_M33::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.M33.f4)
}
inline std::string* M30_M31_M32_M33::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.M32.M33.f4)
  return _internal_mutable_f4();
}
inline const std::string& M30_M31_M32_M33::_internal_f4() const {
  return f4_.Get();
}
inline void M30_M31_M32_M33::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M31.M32.M33.f4)
}
inline void M30_M31_M32_M33::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M31.M32.M33.f4)
}
inline void M30_M31_M32_M33::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M31.M32.M33.f4)
}
inline std::string* M30_M31_M32_M33::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000080u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M31_M32_M33::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.M32.M33.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.M32.M33.f4)
}
inline std::string* M30_M31_M32_M33::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M31.M32.M33.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M31_M32_M33::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.M32.M33.f4)
}

// -------------------------------------------------------------------

// M30_M31_M32_M34

// optional int64 f1 = 1;
inline bool M30_M31_M32_M34::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M31_M32_M34::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M31_M32_M34::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M31_M32_M34::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M31_M32_M34::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.M34.f1)
  return _internal_f1();
}
inline void M30_M31_M32_M34::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M31_M32_M34::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.M34.f1)
}

// -------------------------------------------------------------------

// M30_M31_M32

// optional uint64 f1 = 1;
inline bool M30_M31_M32::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M31_M32::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f1)
  return _internal_f1();
}
inline void M30_M31_M32::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M31_M32::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f1)
}

// optional .hyperprotobench.M30.M31.M32.M33 f2 = 2;
inline bool M30_M31_M32::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M30_M31_M32::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M31_M32::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M30_M31_M32_M33& M30_M31_M32::_internal_f2() const {
  const ::hyperprotobench::M30_M31_M32_M33* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M31_M32_M33*>(
      &::hyperprotobench::_M30_M31_M32_M33_default_instance_);
}
inline const ::hyperprotobench::M30_M31_M32_M33& M30_M31_M32::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M30_M31_M32_M33* M30_M31_M32::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M31_M32_M33* M30_M31_M32::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.M32.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M30_M31_M32_M33* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M31_M32_M33* M30_M31_M32::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M31_M32_M33>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M30_M31_M32_M33* M30_M31_M32::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.M32.f2)
  return _internal_mutable_f2();
}
inline void M30_M31_M32::set_allocated_f2(::hyperprotobench::M30_M31_M32_M33* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.M32.f2)
}

// optional .hyperprotobench.M30.M31.M32.E1 f3 = 4;
inline bool M30_M31_M32::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f3() const {
  return _internal_has_f3();
}
inline void M30_M31_M32::clear_f3() {
  f3_ = 74;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::hyperprotobench::M30_M31_M32_E1 M30_M31_M32::_internal_f3() const {
  return static_cast< ::hyperprotobench::M30_M31_M32_E1 >(f3_);
}
inline ::hyperprotobench::M30_M31_M32_E1 M30_M31_M32::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f3)
  return _internal_f3();
}
inline void M30_M31_M32::_internal_set_f3(::hyperprotobench::M30_M31_M32_E1 value) {
  assert(::hyperprotobench::M30_M31_M32_E1_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M30_M31_M32::set_f3(::hyperprotobench::M30_M31_M32_E1 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f3)
}

// optional fixed64 f4 = 5;
inline bool M30_M31_M32::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f4() const {
  return _internal_has_f4();
}
inline void M30_M31_M32::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_M32::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f4)
  return _internal_f4();
}
inline void M30_M31_M32::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M30_M31_M32::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f4)
}

// optional bool f5 = 6;
inline bool M30_M31_M32::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f5() const {
  return _internal_has_f5();
}
inline void M30_M31_M32::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool M30_M31_M32::_internal_f5() const {
  return f5_;
}
inline bool M30_M31_M32::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f5)
  return _internal_f5();
}
inline void M30_M31_M32::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M30_M31_M32::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f5)
}

// optional int64 f6 = 7;
inline bool M30_M31_M32::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f6() const {
  return _internal_has_f6();
}
inline void M30_M31_M32::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M31_M32::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M31_M32::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f6)
  return _internal_f6();
}
inline void M30_M31_M32::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M30_M31_M32::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f6)
}

// optional .hyperprotobench.M30.M31.M32.M34 f7 = 8;
inline bool M30_M31_M32::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M30_M31_M32::has_f7() const {
  return _internal_has_f7();
}
inline void M30_M31_M32::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M30_M31_M32_M34& M30_M31_M32::_internal_f7() const {
  const ::hyperprotobench::M30_M31_M32_M34* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M31_M32_M34*>(
      &::hyperprotobench::_M30_M31_M32_M34_default_instance_);
}
inline const ::hyperprotobench::M30_M31_M32_M34& M30_M31_M32::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M30_M31_M32_M34* M30_M31_M32::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M31_M32_M34* M30_M31_M32::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.M32.f7)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M30_M31_M32_M34* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M31_M32_M34* M30_M31_M32::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000100u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M31_M32_M34>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M30_M31_M32_M34* M30_M31_M32::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.M32.f7)
  return _internal_mutable_f7();
}
inline void M30_M31_M32::set_allocated_f7(::hyperprotobench::M30_M31_M32_M34* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.M32.f7)
}

// optional int32 f8 = 9;
inline bool M30_M31_M32::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M30_M31_M32::has_f8() const {
  return _internal_has_f8();
}
inline void M30_M31_M32::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31_M32::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31_M32::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.M32.f8)
  return _internal_f8();
}
inline void M30_M31_M32::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f8_ = value;
}
inline void M30_M31_M32::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.M32.f8)
}

// -------------------------------------------------------------------

// M30_M31

// optional string f1 = 6;
inline bool M30_M31::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M31::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M31::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M30_M31::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f1)
  return _internal_f1();
}
inline void M30_M31::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f1)
}
inline std::string* M30_M31::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.f1)
  return _internal_mutable_f1();
}
inline const std::string& M30_M31::_internal_f1() const {
  return f1_.Get();
}
inline void M30_M31::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M31::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M31.f1)
}
inline void M30_M31::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M31.f1)
}
inline void M30_M31::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M31.f1)
}
inline std::string* M30_M31::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M31::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M31::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.f1)
}
inline std::string* M30_M31::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M31.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M31::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.f1)
}

// optional int32 f2 = 7;
inline bool M30_M31::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M30_M31::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M31::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f2)
  return _internal_f2();
}
inline void M30_M31::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M30_M31::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f2)
}

// optional double f3 = 11;
inline bool M30_M31::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M30_M31::has_f3() const {
  return _internal_has_f3();
}
inline void M30_M31::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double M30_M31::_internal_f3() const {
  return f3_;
}
inline double M30_M31::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f3)
  return _internal_f3();
}
inline void M30_M31::_internal_set_f3(double value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M30_M31::set_f3(double value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f3)
}

// optional string f4 = 12;
inline bool M30_M31::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M30_M31::has_f4() const {
  return _internal_has_f4();
}
inline void M30_M31::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M30_M31::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f4)
  return _internal_f4();
}
inline void M30_M31::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f4)
}
inline std::string* M30_M31::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.f4)
  return _internal_mutable_f4();
}
inline const std::string& M30_M31::_internal_f4() const {
  return f4_.Get();
}
inline void M30_M31::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M31::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M31.f4)
}
inline void M30_M31::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M31.f4)
}
inline void M30_M31::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M31.f4)
}
inline std::string* M30_M31::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000080u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M31::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M31::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.f4)
}
inline std::string* M30_M31::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M31.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M31::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.f4)
}

// optional .hyperprotobench.M30.M31.M32 f5 = 13;
inline bool M30_M31::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M30_M31::has_f5() const {
  return _internal_has_f5();
}
inline void M30_M31::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M30_M31_M32& M30_M31::_internal_f5() const {
  const ::hyperprotobench::M30_M31_M32* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M31_M32*>(
      &::hyperprotobench::_M30_M31_M32_default_instance_);
}
inline const ::hyperprotobench::M30_M31_M32& M30_M31::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M30_M31_M32* M30_M31::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M31_M32* M30_M31::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M31.f5)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M30_M31_M32* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M31_M32* M30_M31::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M31_M32>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M30_M31_M32* M30_M31::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M31.f5)
  return _internal_mutable_f5();
}
inline void M30_M31::set_allocated_f5(::hyperprotobench::M30_M31_M32* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M31.f5)
}

// optional bool f6 = 14;
inline bool M30_M31::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M30_M31::has_f6() const {
  return _internal_has_f6();
}
inline void M30_M31::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M30_M31::_internal_f6() const {
  return f6_;
}
inline bool M30_M31::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f6)
  return _internal_f6();
}
inline void M30_M31::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f6_ = value;
}
inline void M30_M31::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f6)
}

// optional fixed64 f7 = 15;
inline bool M30_M31::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M30_M31::has_f7() const {
  return _internal_has_f7();
}
inline void M30_M31::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f7)
  return _internal_f7();
}
inline void M30_M31::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M30_M31::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f7)
}

// optional int32 f8 = 16;
inline bool M30_M31::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M30_M31::has_f8() const {
  return _internal_has_f8();
}
inline void M30_M31::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M31::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f8)
  return _internal_f8();
}
inline void M30_M31::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M30_M31::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f8)
}

// optional fixed32 f9 = 17;
inline bool M30_M31::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M30_M31::has_f9() const {
  return _internal_has_f9();
}
inline void M30_M31::clear_f9() {
  f9_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M30_M31::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M30_M31::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f9)
  return _internal_f9();
}
inline void M30_M31::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  f9_ = value;
}
inline void M30_M31::set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f9)
}

// -------------------------------------------------------------------

// M30

// optional int32 f1 = 1;
inline bool M30::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30::has_f1() const {
  return _internal_has_f1();
}
inline void M30::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f1)
  return _internal_f1();
}
inline void M30::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f1)
}

// optional string f2 = 2;
inline bool M30::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M30::has_f2() const {
  return _internal_has_f2();
}
inline void M30::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M30::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f2)
  return _internal_f2();
}
inline void M30::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f2)
}
inline std::string* M30::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f2)
  return _internal_mutable_f2();
}
inline const std::string& M30::_internal_f2() const {
  return f2_.Get();
}
inline void M30::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f2)
}
inline void M30::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f2)
}
inline void M30::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f2)
}
inline std::string* M30::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f2)
}
inline std::string* M30::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f2)
}

// optional bool f3 = 3;
inline bool M30::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M30::has_f3() const {
  return _internal_has_f3();
}
inline void M30::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M30::_internal_f3() const {
  return f3_;
}
inline bool M30::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f3)
  return _internal_f3();
}
inline void M30::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M30::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f3)
}

// optional string f4 = 4;
inline bool M30::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M30::has_f4() const {
  return _internal_has_f4();
}
inline void M30::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M30::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f4)
  return _internal_f4();
}
inline void M30::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f4)
}
inline std::string* M30::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f4)
  return _internal_mutable_f4();
}
inline const std::string& M30::_internal_f4() const {
  return f4_.Get();
}
inline void M30::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f4)
}
inline void M30::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f4)
}
inline void M30::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f4)
}
inline std::string* M30::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f4)
}
inline std::string* M30::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f4)
}

// optional fixed64 f5 = 5;
inline bool M30::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M30::has_f5() const {
  return _internal_has_f5();
}
inline void M30::clear_f5() {
  f5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f5)
  return _internal_f5();
}
inline void M30::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M30::set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f5)
}

// optional string f6 = 9;
inline bool M30::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M30::has_f6() const {
  return _internal_has_f6();
}
inline void M30::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M30::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f6)
  return _internal_f6();
}
inline void M30::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f6)
}
inline std::string* M30::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f6)
  return _internal_mutable_f6();
}
inline const std::string& M30::_internal_f6() const {
  return f6_.Get();
}
inline void M30::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f6)
}
inline void M30::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f6)
}
inline void M30::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f6)
}
inline std::string* M30::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000200u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f6)
}
inline std::string* M30::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f6)
}

// optional string f7 = 10;
inline bool M30::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M30::has_f7() const {
  return _internal_has_f7();
}
inline void M30::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& M30::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f7)
  return _internal_f7();
}
inline void M30::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f7)
}
inline std::string* M30::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f7)
  return _internal_mutable_f7();
}
inline const std::string& M30::_internal_f7() const {
  return f7_.Get();
}
inline void M30::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f7)
}
inline void M30::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f7)
}
inline void M30::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f7)
}
inline std::string* M30::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000400u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f7)
}
inline std::string* M30::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f7)
}

// optional fixed32 f8 = 11;
inline bool M30::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M30::has_f8() const {
  return _internal_has_f8();
}
inline void M30::clear_f8() {
  f8_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M30::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M30::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f8)
  return _internal_f8();
}
inline void M30::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M30::set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f8)
}

// optional string f9 = 12;
inline bool M30::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M30::has_f9() const {
  return _internal_has_f9();
}
inline void M30::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& M30::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f9)
  return _internal_f9();
}
inline void M30::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f9)
}
inline std::string* M30::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f9)
  return _internal_mutable_f9();
}
inline const std::string& M30::_internal_f9() const {
  return f9_.Get();
}
inline void M30::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f9)
}
inline void M30::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f9)
}
inline void M30::set_f9(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f9)
}
inline std::string* M30::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00001000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f9)
}
inline std::string* M30::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f9)
}

// optional string f10 = 14;
inline bool M30::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M30::has_f10() const {
  return _internal_has_f10();
}
inline void M30::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M30::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f10)
  return _internal_f10();
}
inline void M30::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f10)
}
inline std::string* M30::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f10)
  return _internal_mutable_f10();
}
inline const std::string& M30::_internal_f10() const {
  return f10_.Get();
}
inline void M30::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f10)
}
inline void M30::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f10)
}
inline void M30::set_f10(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f10)
}
inline std::string* M30::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00004000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f10)
}
inline std::string* M30::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f10)
}

// optional .hyperprotobench.M30.M31 f11 = 15;
inline bool M30::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f11_ != nullptr);
  return value;
}
inline bool M30::has_f11() const {
  return _internal_has_f11();
}
inline void M30::clear_f11() {
  if (f11_ != nullptr) f11_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M30_M31& M30::_internal_f11() const {
  const ::hyperprotobench::M30_M31* p = f11_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M31*>(
      &::hyperprotobench::_M30_M31_default_instance_);
}
inline const ::hyperprotobench::M30_M31& M30::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f11)
  return _internal_f11();
}
inline ::hyperprotobench::M30_M31* M30::release_f11() {
  auto temp = unsafe_arena_release_f11();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M31* M30::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f11)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M30_M31* temp = f11_;
  f11_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M31* M30::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00008000u;
  if (f11_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M31>(GetArenaNoVirtual());
    f11_ = p;
  }
  return f11_;
}
inline ::hyperprotobench::M30_M31* M30::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f11)
  return _internal_mutable_f11();
}
inline void M30::set_allocated_f11(::hyperprotobench::M30_M31* f11) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f11_;
  }
  if (f11) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f11);
    if (message_arena != submessage_arena) {
      f11 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f11, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f11_ = f11;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f11)
}

// optional fixed64 f12 = 16;
inline bool M30::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M30::has_f12() const {
  return _internal_has_f12();
}
inline void M30::clear_f12() {
  f12_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f12)
  return _internal_f12();
}
inline void M30::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  f12_ = value;
}
inline void M30::set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f12)
}

// -------------------------------------------------------------------

// M35_M36_M37_M38

// optional bytes f1 = 2;
inline bool M35_M36_M37_M38::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M35_M36_M37_M38::has_f1() const {
  return _internal_has_f1();
}
inline void M35_M36_M37_M38::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M35_M36_M37_M38::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.M37.M38.f1)
  return _internal_f1();
}
inline void M35_M36_M37_M38::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.M37.M38.f1)
}
inline std::string* M35_M36_M37_M38::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.M36.M37.M38.f1)
  return _internal_mutable_f1();
}
inline const std::string& M35_M36_M37_M38::_internal_f1() const {
  return f1_.Get();
}
inline void M35_M36_M37_M38::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M35_M36_M37_M38::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M35.M36.M37.M38.f1)
}
inline void M35_M36_M37_M38::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M35.M36.M37.M38.f1)
}
inline void M35_M36_M37_M38::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M35.M36.M37.M38.f1)
}
inline std::string* M35_M36_M37_M38::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M35_M36_M37_M38::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.M36.M37.M38.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M35_M36_M37_M38::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.M36.M37.M38.f1)
}
inline std::string* M35_M36_M37_M38::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M35.M36.M37.M38.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M35_M36_M37_M38::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.M36.M37.M38.f1)
}

// optional uint64 f2 = 4;
inline bool M35_M36_M37_M38::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M35_M36_M37_M38::has_f2() const {
  return _internal_has_f2();
}
inline void M35_M36_M37_M38::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M35_M36_M37_M38::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M35_M36_M37_M38::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.M37.M38.f2)
  return _internal_f2();
}
inline void M35_M36_M37_M38::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M35_M36_M37_M38::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.M37.M38.f2)
}

// -------------------------------------------------------------------

// M35_M36_M37

// optional bool f1 = 1;
inline bool M35_M36_M37::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M35_M36_M37::has_f1() const {
  return _internal_has_f1();
}
inline void M35_M36_M37::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M35_M36_M37::_internal_f1() const {
  return f1_;
}
inline bool M35_M36_M37::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.M37.f1)
  return _internal_f1();
}
inline void M35_M36_M37::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M35_M36_M37::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.M37.f1)
}

// optional int32 f2 = 2;
inline bool M35_M36_M37::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M35_M36_M37::has_f2() const {
  return _internal_has_f2();
}
inline void M35_M36_M37::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35_M36_M37::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35_M36_M37::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.M37.f2)
  return _internal_f2();
}
inline void M35_M36_M37::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M35_M36_M37::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.M37.f2)
}

// optional .hyperprotobench.M35.M36.M37.M38 f3 = 7;
inline bool M35_M36_M37::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M35_M36_M37::has_f3() const {
  return _internal_has_f3();
}
inline void M35_M36_M37::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::hyperprotobench::M35_M36_M37_M38& M35_M36_M37::_internal_f3() const {
  const ::hyperprotobench::M35_M36_M37_M38* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M35_M36_M37_M38*>(
      &::hyperprotobench::_M35_M36_M37_M38_default_instance_);
}
inline const ::hyperprotobench::M35_M36_M37_M38& M35_M36_M37::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.M37.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M35_M36_M37_M38* M35_M36_M37::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M35_M36_M37_M38* M35_M36_M37::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.M36.M37.f3)
  _has_bits_[0] &= ~0x00000080u;
  ::hyperprotobench::M35_M36_M37_M38* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M35_M36_M37_M38* M35_M36_M37::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000080u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M35_M36_M37_M38>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M35_M36_M37_M38* M35_M36_M37::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.M36.M37.f3)
  return _internal_mutable_f3();
}
inline void M35_M36_M37::set_allocated_f3(::hyperprotobench::M35_M36_M37_M38* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.M36.M37.f3)
}

// -------------------------------------------------------------------

// M35_M36

// optional bytes f1 = 5;
inline bool M35_M36::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M35_M36::has_f1() const {
  return _internal_has_f1();
}
inline void M35_M36::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M35_M36::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.f1)
  return _internal_f1();
}
inline void M35_M36::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.f1)
}
inline std::string* M35_M36::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.M36.f1)
  return _internal_mutable_f1();
}
inline const std::string& M35_M36::_internal_f1() const {
  return f1_.Get();
}
inline void M35_M36::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M35_M36::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M35.M36.f1)
}
inline void M35_M36::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M35.M36.f1)
}
inline void M35_M36::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M35.M36.f1)
}
inline std::string* M35_M36::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M35_M36::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.M36.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M35_M36::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.M36.f1)
}
inline std::string* M35_M36::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M35.M36.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M35_M36::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.M36.f1)
}

// optional int32 f2 = 6;
inline bool M35_M36::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M35_M36::has_f2() const {
  return _internal_has_f2();
}
inline void M35_M36::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35_M36::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35_M36::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.f2)
  return _internal_f2();
}
inline void M35_M36::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M35_M36::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.M36.f2)
}

// optional .hyperprotobench.M35.M36.M37 f3 = 7;
inline bool M35_M36::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M35_M36::has_f3() const {
  return _internal_has_f3();
}
inline void M35_M36::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M35_M36_M37& M35_M36::_internal_f3() const {
  const ::hyperprotobench::M35_M36_M37* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M35_M36_M37*>(
      &::hyperprotobench::_M35_M36_M37_default_instance_);
}
inline const ::hyperprotobench::M35_M36_M37& M35_M36::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.M36.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M35_M36_M37* M35_M36::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M35_M36_M37* M35_M36::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.M36.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M35_M36_M37* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M35_M36_M37* M35_M36::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M35_M36_M37>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M35_M36_M37* M35_M36::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.M36.f3)
  return _internal_mutable_f3();
}
inline void M35_M36::set_allocated_f3(::hyperprotobench::M35_M36_M37* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.M36.f3)
}

// -------------------------------------------------------------------

// M35

// optional string f1 = 2;
inline bool M35::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M35::has_f1() const {
  return _internal_has_f1();
}
inline void M35::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M35::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.f1)
  return _internal_f1();
}
inline void M35::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.f1)
}
inline std::string* M35::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.f1)
  return _internal_mutable_f1();
}
inline const std::string& M35::_internal_f1() const {
  return f1_.Get();
}
inline void M35::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M35::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M35.f1)
}
inline void M35::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M35.f1)
}
inline void M35::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M35.f1)
}
inline std::string* M35::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M35::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M35::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.f1)
}
inline std::string* M35::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M35.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M35::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.f1)
}

// optional int32 f2 = 3;
inline bool M35::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M35::has_f2() const {
  return _internal_has_f2();
}
inline void M35::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.f2)
  return _internal_f2();
}
inline void M35::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M35::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.f2)
}

// optional int32 f3 = 5;
inline bool M35::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M35::has_f3() const {
  return _internal_has_f3();
}
inline void M35::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M35::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.f3)
  return _internal_f3();
}
inline void M35::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M35::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.f3)
}

// optional .hyperprotobench.M35.M36 f4 = 6;
inline bool M35::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M35::has_f4() const {
  return _internal_has_f4();
}
inline void M35::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hyperprotobench::M35_M36& M35::_internal_f4() const {
  const ::hyperprotobench::M35_M36* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M35_M36*>(
      &::hyperprotobench::_M35_M36_default_instance_);
}
inline const ::hyperprotobench::M35_M36& M35::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M35_M36* M35::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M35_M36* M35::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M35.f4)
  _has_bits_[0] &= ~0x00000020u;
  ::hyperprotobench::M35_M36* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M35_M36* M35::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M35_M36>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M35_M36* M35::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M35.f4)
  return _internal_mutable_f4();
}
inline void M35::set_allocated_f4(::hyperprotobench::M35_M36* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M35.f4)
}

// optional double f5 = 11;
inline bool M35::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M35::has_f5() const {
  return _internal_has_f5();
}
inline void M35::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double M35::_internal_f5() const {
  return f5_;
}
inline double M35::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M35.f5)
  return _internal_f5();
}
inline void M35::_internal_set_f5(double value) {
  _has_bits_[0] |= 0x00000400u;
  f5_ = value;
}
inline void M35::set_f5(double value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M35.f5)
}

// -------------------------------------------------------------------

// M39_M40_M41_M42

// optional int32 f1 = 2;
inline bool M39_M40_M41_M42::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M39_M40_M41_M42::has_f1() const {
  return _internal_has_f1();
}
inline void M39_M40_M41_M42::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41_M42::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41_M42::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.M42.f1)
  return _internal_f1();
}
inline void M39_M40_M41_M42::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M39_M40_M41_M42::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.M42.f1)
}

// optional bool f2 = 4;
inline bool M39_M40_M41_M42::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M39_M40_M41_M42::has_f2() const {
  return _internal_has_f2();
}
inline void M39_M40_M41_M42::clear_f2() {
  f2_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M39_M40_M41_M42::_internal_f2() const {
  return f2_;
}
inline bool M39_M40_M41_M42::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.M42.f2)
  return _internal_f2();
}
inline void M39_M40_M41_M42::_internal_set_f2(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M39_M40_M41_M42::set_f2(bool value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.M42.f2)
}

// optional int32 f3 = 5;
inline bool M39_M40_M41_M42::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M39_M40_M41_M42::has_f3() const {
  return _internal_has_f3();
}
inline void M39_M40_M41_M42::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41_M42::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41_M42::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.M42.f3)
  return _internal_f3();
}
inline void M39_M40_M41_M42::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M39_M40_M41_M42::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.M42.f3)
}

// -------------------------------------------------------------------

// M39_M40_M41

// optional int32 f1 = 2;
inline bool M39_M40_M41::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f1() const {
  return _internal_has_f1();
}
inline void M39_M40_M41::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f1)
  return _internal_f1();
}
inline void M39_M40_M41::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M39_M40_M41::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f1)
}

// optional fixed64 f2 = 5;
inline bool M39_M40_M41::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f2() const {
  return _internal_has_f2();
}
inline void M39_M40_M41::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M39_M40_M41::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M39_M40_M41::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f2)
  return _internal_f2();
}
inline void M39_M40_M41::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  f2_ = value;
}
inline void M39_M40_M41::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f2)
}

// optional fixed32 f3 = 7;
inline bool M39_M40_M41::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f3() const {
  return _internal_has_f3();
}
inline void M39_M40_M41::clear_f3() {
  f3_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M39_M40_M41::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M39_M40_M41::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f3)
  return _internal_f3();
}
inline void M39_M40_M41::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M39_M40_M41::set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f3)
}

// optional bool f4 = 8;
inline bool M39_M40_M41::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f4() const {
  return _internal_has_f4();
}
inline void M39_M40_M41::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool M39_M40_M41::_internal_f4() const {
  return f4_;
}
inline bool M39_M40_M41::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f4)
  return _internal_f4();
}
inline void M39_M40_M41::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M39_M40_M41::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f4)
}

// optional string f5 = 10;
inline bool M39_M40_M41::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f5() const {
  return _internal_has_f5();
}
inline void M39_M40_M41::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M39_M40_M41::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f5)
  return _internal_f5();
}
inline void M39_M40_M41::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f5)
}
inline std::string* M39_M40_M41::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.M40.M41.f5)
  return _internal_mutable_f5();
}
inline const std::string& M39_M40_M41::_internal_f5() const {
  return f5_.Get();
}
inline void M39_M40_M41::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39_M40_M41::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.M40.M41.f5)
}
inline void M39_M40_M41::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.M40.M41.f5)
}
inline void M39_M40_M41::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.M40.M41.f5)
}
inline std::string* M39_M40_M41::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000200u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39_M40_M41::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.M40.M41.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39_M40_M41::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.M40.M41.f5)
}
inline std::string* M39_M40_M41::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.M40.M41.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39_M40_M41::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.M40.M41.f5)
}

// optional string f6 = 11;
inline bool M39_M40_M41::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f6() const {
  return _internal_has_f6();
}
inline void M39_M40_M41::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& M39_M40_M41::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f6)
  return _internal_f6();
}
inline void M39_M40_M41::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f6)
}
inline std::string* M39_M40_M41::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.M40.M41.f6)
  return _internal_mutable_f6();
}
inline const std::string& M39_M40_M41::_internal_f6() const {
  return f6_.Get();
}
inline void M39_M40_M41::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39_M40_M41::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.M40.M41.f6)
}
inline void M39_M40_M41::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.M40.M41.f6)
}
inline void M39_M40_M41::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.M40.M41.f6)
}
inline std::string* M39_M40_M41::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000400u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39_M40_M41::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.M40.M41.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39_M40_M41::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.M40.M41.f6)
}
inline std::string* M39_M40_M41::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.M40.M41.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39_M40_M41::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.M40.M41.f6)
}

// optional .hyperprotobench.M39.M40.M41.M42 f7 = 13;
inline bool M39_M40_M41::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M39_M40_M41::has_f7() const {
  return _internal_has_f7();
}
inline void M39_M40_M41::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::hyperprotobench::M39_M40_M41_M42& M39_M40_M41::_internal_f7() const {
  const ::hyperprotobench::M39_M40_M41_M42* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M39_M40_M41_M42*>(
      &::hyperprotobench::_M39_M40_M41_M42_default_instance_);
}
inline const ::hyperprotobench::M39_M40_M41_M42& M39_M40_M41::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M39_M40_M41_M42* M39_M40_M41::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M39_M40_M41_M42* M39_M40_M41::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.M40.M41.f7)
  _has_bits_[0] &= ~0x00001000u;
  ::hyperprotobench::M39_M40_M41_M42* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M39_M40_M41_M42* M39_M40_M41::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00001000u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M39_M40_M41_M42>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M39_M40_M41_M42* M39_M40_M41::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.M40.M41.f7)
  return _internal_mutable_f7();
}
inline void M39_M40_M41::set_allocated_f7(::hyperprotobench::M39_M40_M41_M42* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.M40.M41.f7)
}

// optional bool f8 = 14;
inline bool M39_M40_M41::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f8() const {
  return _internal_has_f8();
}
inline void M39_M40_M41::clear_f8() {
  f8_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool M39_M40_M41::_internal_f8() const {
  return f8_;
}
inline bool M39_M40_M41::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f8)
  return _internal_f8();
}
inline void M39_M40_M41::_internal_set_f8(bool value) {
  _has_bits_[0] |= 0x00002000u;
  f8_ = value;
}
inline void M39_M40_M41::set_f8(bool value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f8)
}

// optional int32 f9 = 15;
inline bool M39_M40_M41::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M39_M40_M41::has_f9() const {
  return _internal_has_f9();
}
inline void M39_M40_M41::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40_M41::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.M41.f9)
  return _internal_f9();
}
inline void M39_M40_M41::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  f9_ = value;
}
inline void M39_M40_M41::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.M41.f9)
}

// -------------------------------------------------------------------

// M39_M40

// optional .hyperprotobench.M39.M40.M41 f1 = 1;
inline bool M39_M40::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M39_M40::has_f1() const {
  return _internal_has_f1();
}
inline void M39_M40::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M39_M40_M41& M39_M40::_internal_f1() const {
  const ::hyperprotobench::M39_M40_M41* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M39_M40_M41*>(
      &::hyperprotobench::_M39_M40_M41_default_instance_);
}
inline const ::hyperprotobench::M39_M40_M41& M39_M40::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M39_M40_M41* M39_M40::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M39_M40_M41* M39_M40::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.M40.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M39_M40_M41* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M39_M40_M41* M39_M40::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M39_M40_M41>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M39_M40_M41* M39_M40::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.M40.f1)
  return _internal_mutable_f1();
}
inline void M39_M40::set_allocated_f1(::hyperprotobench::M39_M40_M41* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.M40.f1)
}

// optional int32 f2 = 3;
inline bool M39_M40::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M39_M40::has_f2() const {
  return _internal_has_f2();
}
inline void M39_M40::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M39_M40::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.f2)
  return _internal_f2();
}
inline void M39_M40::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M39_M40::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.f2)
}

// optional bool f3 = 4;
inline bool M39_M40::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M39_M40::has_f3() const {
  return _internal_has_f3();
}
inline void M39_M40::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M39_M40::_internal_f3() const {
  return f3_;
}
inline bool M39_M40::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.M40.f3)
  return _internal_f3();
}
inline void M39_M40::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M39_M40::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.M40.f3)
}

// -------------------------------------------------------------------

// M39

// optional int64 f1 = 1;
inline bool M39::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M39::has_f1() const {
  return _internal_has_f1();
}
inline void M39::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M39::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M39::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f1)
  return _internal_f1();
}
inline void M39::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M39::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f1)
}

// optional string f2 = 2;
inline bool M39::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M39::has_f2() const {
  return _internal_has_f2();
}
inline void M39::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M39::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f2)
  return _internal_f2();
}
inline void M39::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f2)
}
inline std::string* M39::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.f2)
  return _internal_mutable_f2();
}
inline const std::string& M39::_internal_f2() const {
  return f2_.Get();
}
inline void M39::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.f2)
}
inline void M39::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.f2)
}
inline void M39::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.f2)
}
inline std::string* M39::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.f2)
}
inline std::string* M39::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.f2)
}

// optional bool f3 = 3;
inline bool M39::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M39::has_f3() const {
  return _internal_has_f3();
}
inline void M39::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M39::_internal_f3() const {
  return f3_;
}
inline bool M39::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f3)
  return _internal_f3();
}
inline void M39::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M39::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f3)
}

// optional .hyperprotobench.M39.E1 f4 = 4;
inline bool M39::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M39::has_f4() const {
  return _internal_has_f4();
}
inline void M39::clear_f4() {
  f4_ = 65;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::hyperprotobench::M39_E1 M39::_internal_f4() const {
  return static_cast< ::hyperprotobench::M39_E1 >(f4_);
}
inline ::hyperprotobench::M39_E1 M39::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f4)
  return _internal_f4();
}
inline void M39::_internal_set_f4(::hyperprotobench::M39_E1 value) {
  assert(::hyperprotobench::M39_E1_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M39::set_f4(::hyperprotobench::M39_E1 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f4)
}

// optional int64 f5 = 5;
inline bool M39::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M39::has_f5() const {
  return _internal_has_f5();
}
inline void M39::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M39::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M39::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f5)
  return _internal_f5();
}
inline void M39::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M39::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f5)
}

// optional string f6 = 6;
inline bool M39::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M39::has_f6() const {
  return _internal_has_f6();
}
inline void M39::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M39::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f6)
  return _internal_f6();
}
inline void M39::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f6)
}
inline std::string* M39::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.f6)
  return _internal_mutable_f6();
}
inline const std::string& M39::_internal_f6() const {
  return f6_.Get();
}
inline void M39::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.f6)
}
inline void M39::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.f6)
}
inline void M39::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.f6)
}
inline std::string* M39::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000040u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.f6)
}
inline std::string* M39::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.f6)
}

// optional string f7 = 8;
inline bool M39::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M39::has_f7() const {
  return _internal_has_f7();
}
inline void M39::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M39::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f7)
  return _internal_f7();
}
inline void M39::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f7)
}
inline std::string* M39::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.f7)
  return _internal_mutable_f7();
}
inline const std::string& M39::_internal_f7() const {
  return f7_.Get();
}
inline void M39::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.f7)
}
inline void M39::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.f7)
}
inline void M39::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.f7)
}
inline std::string* M39::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000100u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.f7)
}
inline std::string* M39::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.f7)
}

// optional bytes f8 = 9;
inline bool M39::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M39::has_f8() const {
  return _internal_has_f8();
}
inline void M39::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M39::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f8)
  return _internal_f8();
}
inline void M39::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f8)
}
inline std::string* M39::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.f8)
  return _internal_mutable_f8();
}
inline const std::string& M39::_internal_f8() const {
  return f8_.Get();
}
inline void M39::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M39::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M39.f8)
}
inline void M39::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M39.f8)
}
inline void M39::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M39.f8)
}
inline std::string* M39::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000200u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M39::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M39::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.f8)
}
inline std::string* M39::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M39.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M39::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.f8)
}

// optional .hyperprotobench.M39.M40 f9 = 10;
inline bool M39::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M39::has_f9() const {
  return _internal_has_f9();
}
inline void M39::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M39_M40& M39::_internal_f9() const {
  const ::hyperprotobench::M39_M40* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M39_M40*>(
      &::hyperprotobench::_M39_M40_default_instance_);
}
inline const ::hyperprotobench::M39_M40& M39::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M39_M40* M39::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M39_M40* M39::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M39.f9)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M39_M40* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M39_M40* M39::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00000400u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M39_M40>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M39_M40* M39::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M39.f9)
  return _internal_mutable_f9();
}
inline void M39::set_allocated_f9(::hyperprotobench::M39_M40* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M39.f9)
}

// optional double f10 = 11;
inline bool M39::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M39::has_f10() const {
  return _internal_has_f10();
}
inline void M39::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double M39::_internal_f10() const {
  return f10_;
}
inline double M39::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M39.f10)
  return _internal_f10();
}
inline void M39::_internal_set_f10(double value) {
  _has_bits_[0] |= 0x00000800u;
  f10_ = value;
}
inline void M39::set_f10(double value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M39.f10)
}

// -------------------------------------------------------------------

// M43_M44_M45_M46

// optional bool f1 = 3;
inline bool M43_M44_M45_M46::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44_M45_M46::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44_M45_M46::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M43_M44_M45_M46::_internal_f1() const {
  return f1_;
}
inline bool M43_M44_M45_M46::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.M46.f1)
  return _internal_f1();
}
inline void M43_M44_M45_M46::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44_M45_M46::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M45.M46.f1)
}

// optional string f2 = 4;
inline bool M43_M44_M45_M46::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M44_M45_M46::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M44_M45_M46::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M43_M44_M45_M46::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.M46.f2)
  return _internal_f2();
}
inline void M43_M44_M45_M46::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M45.M46.f2)
}
inline std::string* M43_M44_M45_M46::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.M45.M46.f2)
  return _internal_mutable_f2();
}
inline const std::string& M43_M44_M45_M46::_internal_f2() const {
  return f2_.Get();
}
inline void M43_M44_M45_M46::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M44_M45_M46::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M44.M45.M46.f2)
}
inline void M43_M44_M45_M46::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M44.M45.M46.f2)
}
inline void M43_M44_M45_M46::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M44.M45.M46.f2)
}
inline std::string* M43_M44_M45_M46::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M44_M45_M46::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.M45.M46.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M44_M45_M46::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.M45.M46.f2)
}
inline std::string* M43_M44_M45_M46::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M44.M45.M46.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M44_M45_M46::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.M45.M46.f2)
}

// optional int32 f3 = 12;
inline bool M43_M44_M45_M46::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M43_M44_M45_M46::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M44_M45_M46::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M45_M46::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44_M45_M46::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.M46.f3)
  return _internal_f3();
}
inline void M43_M44_M45_M46::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f3_ = value;
}
inline void M43_M44_M45_M46::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M45.M46.f3)
}

// -------------------------------------------------------------------

// M43_M44_M45

// optional bool f1 = 1;
inline bool M43_M44_M45::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44_M45::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44_M45::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M43_M44_M45::_internal_f1() const {
  return f1_;
}
inline bool M43_M44_M45::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.f1)
  return _internal_f1();
}
inline void M43_M44_M45::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44_M45::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.M45.f1)
}

// optional .hyperprotobench.M43.M44.M45.M46 f2 = 3;
inline bool M43_M44_M45::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M43_M44_M45::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M44_M45::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M43_M44_M45_M46& M43_M44_M45::_internal_f2() const {
  const ::hyperprotobench::M43_M44_M45_M46* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44_M45_M46*>(
      &::hyperprotobench::_M43_M44_M45_M46_default_instance_);
}
inline const ::hyperprotobench::M43_M44_M45_M46& M43_M44_M45::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.M45.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M43_M44_M45_M46* M43_M44_M45::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44_M45_M46* M43_M44_M45::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.M45.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M43_M44_M45_M46* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44_M45_M46* M43_M44_M45::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44_M45_M46>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M43_M44_M45_M46* M43_M44_M45::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.M45.f2)
  return _internal_mutable_f2();
}
inline void M43_M44_M45::set_allocated_f2(::hyperprotobench::M43_M44_M45_M46* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.M45.f2)
}

// -------------------------------------------------------------------

// M43_M44

// optional int32 f1 = 1;
inline bool M43_M44::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43_M44::has_f1() const {
  return _internal_has_f1();
}
inline void M43_M44::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f1)
  return _internal_f1();
}
inline void M43_M44::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M43_M44::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.f1)
}

// optional int32 f2 = 2;
inline bool M43_M44::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43_M44::has_f2() const {
  return _internal_has_f2();
}
inline void M43_M44::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M43_M44::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f2)
  return _internal_f2();
}
inline void M43_M44::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43_M44::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.f2)
}

// optional string f3 = 3;
inline bool M43_M44::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M43_M44::has_f3() const {
  return _internal_has_f3();
}
inline void M43_M44::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M43_M44::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f3)
  return _internal_f3();
}
inline void M43_M44::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.M44.f3)
}
inline std::string* M43_M44::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f3)
  return _internal_mutable_f3();
}
inline const std::string& M43_M44::_internal_f3() const {
  return f3_.Get();
}
inline void M43_M44::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43_M44::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.M44.f3)
}
inline void M43_M44::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.M44.f3)
}
inline void M43_M44::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.M44.f3)
}
inline std::string* M43_M44::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43_M44::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43_M44::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f3)
}
inline std::string* M43_M44::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.M44.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43_M44::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f3)
}

// optional .hyperprotobench.M43.M44.M45 f4 = 4;
inline bool M43_M44::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M43_M44::has_f4() const {
  return _internal_has_f4();
}
inline void M43_M44::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M43_M44_M45& M43_M44::_internal_f4() const {
  const ::hyperprotobench::M43_M44_M45* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44_M45*>(
      &::hyperprotobench::_M43_M44_M45_default_instance_);
}
inline const ::hyperprotobench::M43_M44_M45& M43_M44::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.M44.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.M44.f4)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M43_M44_M45* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000010u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44_M45>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M43_M44_M45* M43_M44::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.M44.f4)
  return _internal_mutable_f4();
}
inline void M43_M44::set_allocated_f4(::hyperprotobench::M43_M44_M45* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.M44.f4)
}

// -------------------------------------------------------------------

// M43

// optional bytes f1 = 1;
inline bool M43::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M43::has_f1() const {
  return _internal_has_f1();
}
inline void M43::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M43::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f1)
  return _internal_f1();
}
inline void M43::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f1)
}
inline std::string* M43::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.f1)
  return _internal_mutable_f1();
}
inline const std::string& M43::_internal_f1() const {
  return f1_.Get();
}
inline void M43::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M43::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M43.f1)
}
inline void M43::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M43.f1)
}
inline void M43::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M43.f1)
}
inline std::string* M43::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M43::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M43::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.f1)
}
inline std::string* M43::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M43.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M43::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.f1)
}

// optional double f2 = 2;
inline bool M43::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M43::has_f2() const {
  return _internal_has_f2();
}
inline void M43::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double M43::_internal_f2() const {
  return f2_;
}
inline double M43::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f2)
  return _internal_f2();
}
inline void M43::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M43::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f2)
}

// optional .hyperprotobench.M43.E1 f3 = 6;
inline bool M43::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M43::has_f3() const {
  return _internal_has_f3();
}
inline void M43::clear_f3() {
  f3_ = 103;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::hyperprotobench::M43_E1 M43::_internal_f3() const {
  return static_cast< ::hyperprotobench::M43_E1 >(f3_);
}
inline ::hyperprotobench::M43_E1 M43::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f3)
  return _internal_f3();
}
inline void M43::_internal_set_f3(::hyperprotobench::M43_E1 value) {
  assert(::hyperprotobench::M43_E1_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M43::set_f3(::hyperprotobench::M43_E1 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f3)
}

// optional .hyperprotobench.M43.M44 f4 = 7;
inline bool M43::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || f4_ != nullptr);
  return value;
}
inline bool M43::has_f4() const {
  return _internal_has_f4();
}
inline void M43::clear_f4() {
  if (f4_ != nullptr) f4_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::hyperprotobench::M43_M44& M43::_internal_f4() const {
  const ::hyperprotobench::M43_M44* p = f4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M43_M44*>(
      &::hyperprotobench::_M43_M44_default_instance_);
}
inline const ::hyperprotobench::M43_M44& M43::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f4)
  return _internal_f4();
}
inline ::hyperprotobench::M43_M44* M43::release_f4() {
  auto temp = unsafe_arena_release_f4();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M43_M44* M43::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M43.f4)
  _has_bits_[0] &= ~0x00000080u;
  ::hyperprotobench::M43_M44* temp = f4_;
  f4_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M43_M44* M43::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000080u;
  if (f4_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M43_M44>(GetArenaNoVirtual());
    f4_ = p;
  }
  return f4_;
}
inline ::hyperprotobench::M43_M44* M43::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M43.f4)
  return _internal_mutable_f4();
}
inline void M43::set_allocated_f4(::hyperprotobench::M43_M44* f4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f4_;
  }
  if (f4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f4);
    if (message_arena != submessage_arena) {
      f4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_ = f4;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M43.f4)
}

// optional fixed64 f5 = 10;
inline bool M43::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M43::has_f5() const {
  return _internal_has_f5();
}
inline void M43::clear_f5() {
  f5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M43::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M43.f5)
  return _internal_f5();
}
inline void M43::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  f5_ = value;
}
inline void M43::set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M43.f5)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hyperprotobench

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hyperprotobench::M1_M2_M3_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_M2_M3_E1>() {
  return ::hyperprotobench::M1_M2_M3_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M1_M2_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_M2_E1>() {
  return ::hyperprotobench::M1_M2_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M6_M7_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M6_M7_E1>() {
  return ::hyperprotobench::M6_M7_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M11_M12_M13_M14_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M11_M12_M13_M14_E1>() {
  return ::hyperprotobench::M11_M12_M13_M14_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M25_M26_M27_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M25_M26_M27_E1>() {
  return ::hyperprotobench::M25_M26_M27_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M30_M31_M32_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M30_M31_M32_E1>() {
  return ::hyperprotobench::M30_M31_M32_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M39_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M39_E1>() {
  return ::hyperprotobench::M39_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M43_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M43_E1>() {
  return ::hyperprotobench::M43_E1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
