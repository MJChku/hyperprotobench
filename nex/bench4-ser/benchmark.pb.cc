// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#include "benchmark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_M3_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M3_M4_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M5_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M11_M12_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M11_M12_M13_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_M13_M14_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_M15_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M16_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_M18_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_M18_M19_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M17_M18_M19_M20_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M22_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M22_M23_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M22_M23_M24_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_M27_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M26_M27_M28_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M29_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M30_M31_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M30_M31_M32_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_M32_M33_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_M32_M34_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M35_M36_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M35_M36_M37_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M35_M36_M37_M38_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M39_M40_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M39_M40_M41_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M39_M40_M41_M42_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M44_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M44_M45_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M45_M46_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M6_M7_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M6_M7_M10_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M6_M7_M8_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M6_M7_M8_M9_benchmark_2eproto;
namespace hyperprotobench {
class M1_M2_M3_M4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2_M3_M4> _instance;
} _M1_M2_M3_M4_default_instance_;
class M1_M2_M3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2_M3> _instance;
} _M1_M2_M3_default_instance_;
class M1_M2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2> _instance;
} _M1_M2_default_instance_;
class M1_M5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M5> _instance;
} _M1_M5_default_instance_;
class M1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1> _instance;
} _M1_default_instance_;
class M6_M7_M8_M9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M6_M7_M8_M9> _instance;
} _M6_M7_M8_M9_default_instance_;
class M6_M7_M8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M6_M7_M8> _instance;
} _M6_M7_M8_default_instance_;
class M6_M7_M10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M6_M7_M10> _instance;
} _M6_M7_M10_default_instance_;
class M6_M7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M6_M7> _instance;
} _M6_M7_default_instance_;
class M6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M6> _instance;
} _M6_default_instance_;
class M11_M12_M13_M14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M12_M13_M14> _instance;
} _M11_M12_M13_M14_default_instance_;
class M11_M12_M13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M12_M13> _instance;
} _M11_M12_M13_default_instance_;
class M11_M12_M15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M12_M15> _instance;
} _M11_M12_M15_default_instance_;
class M11_M12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M12> _instance;
} _M11_M12_default_instance_;
class M11_M16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M16> _instance;
} _M11_M16_default_instance_;
class M11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11> _instance;
} _M11_default_instance_;
class M17_M18_M19_M20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17_M18_M19_M20> _instance;
} _M17_M18_M19_M20_default_instance_;
class M17_M18_M19DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17_M18_M19> _instance;
} _M17_M18_M19_default_instance_;
class M17_M18DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17_M18> _instance;
} _M17_M18_default_instance_;
class M17DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17> _instance;
} _M17_default_instance_;
class M21_M22_M23_M24DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M22_M23_M24> _instance;
} _M21_M22_M23_M24_default_instance_;
class M21_M22_M23DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M22_M23> _instance;
} _M21_M22_M23_default_instance_;
class M21_M22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M22> _instance;
} _M21_M22_default_instance_;
class M21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21> _instance;
} _M21_default_instance_;
class M25_M26_M27_M28DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M26_M27_M28> _instance;
} _M25_M26_M27_M28_default_instance_;
class M25_M26_M27DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M26_M27> _instance;
} _M25_M26_M27_default_instance_;
class M25_M26DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M26> _instance;
} _M25_M26_default_instance_;
class M25_M29DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M29> _instance;
} _M25_M29_default_instance_;
class M25DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25> _instance;
} _M25_default_instance_;
class M30_M31_M32_M33DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M31_M32_M33> _instance;
} _M30_M31_M32_M33_default_instance_;
class M30_M31_M32_M34DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M31_M32_M34> _instance;
} _M30_M31_M32_M34_default_instance_;
class M30_M31_M32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M31_M32> _instance;
} _M30_M31_M32_default_instance_;
class M30_M31DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M31> _instance;
} _M30_M31_default_instance_;
class M30DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30> _instance;
} _M30_default_instance_;
class M35_M36_M37_M38DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M35_M36_M37_M38> _instance;
} _M35_M36_M37_M38_default_instance_;
class M35_M36_M37DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M35_M36_M37> _instance;
} _M35_M36_M37_default_instance_;
class M35_M36DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M35_M36> _instance;
} _M35_M36_default_instance_;
class M35DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M35> _instance;
} _M35_default_instance_;
class M39_M40_M41_M42DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M39_M40_M41_M42> _instance;
} _M39_M40_M41_M42_default_instance_;
class M39_M40_M41DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M39_M40_M41> _instance;
} _M39_M40_M41_default_instance_;
class M39_M40DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M39_M40> _instance;
} _M39_M40_default_instance_;
class M39DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M39> _instance;
} _M39_default_instance_;
class M43_M44_M45_M46DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44_M45_M46> _instance;
} _M43_M44_M45_M46_default_instance_;
class M43_M44_M45DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44_M45> _instance;
} _M43_M44_M45_default_instance_;
class M43_M44DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43_M44> _instance;
} _M43_M44_default_instance_;
class M43DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M43> _instance;
} _M43_default_instance_;
}  // namespace hyperprotobench
static void InitDefaultsscc_info_M1_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_default_instance_;
    new (ptr) ::hyperprotobench::M1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M1_benchmark_2eproto}, {
      &scc_info_M1_M2_benchmark_2eproto.base,
      &scc_info_M1_M5_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M2_benchmark_2eproto}, {
      &scc_info_M1_M2_M3_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_M3_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_M3_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2_M3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2_M3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M2_M3_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M2_M3_benchmark_2eproto}, {
      &scc_info_M1_M2_M3_M4_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_M3_M4_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_M3_M4_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2_M3_M4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2_M3_M4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_M3_M4_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M2_M3_M4_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M5_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M5_default_instance_;
    new (ptr) ::hyperprotobench::M1_M5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M5_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M5_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M11_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_default_instance_;
    new (ptr) ::hyperprotobench::M11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M11_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M11_benchmark_2eproto}, {
      &scc_info_M11_M12_benchmark_2eproto.base,
      &scc_info_M11_M16_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M11_M12_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M12_default_instance_;
    new (ptr) ::hyperprotobench::M11_M12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M11_M12_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M11_M12_benchmark_2eproto}, {
      &scc_info_M11_M12_M13_benchmark_2eproto.base,
      &scc_info_M11_M12_M15_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M11_M12_M13_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M12_M13_default_instance_;
    new (ptr) ::hyperprotobench::M11_M12_M13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M12_M13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M11_M12_M13_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M11_M12_M13_benchmark_2eproto}, {
      &scc_info_M11_M12_M13_M14_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M11_M12_M13_M14_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M12_M13_M14_default_instance_;
    new (ptr) ::hyperprotobench::M11_M12_M13_M14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M12_M13_M14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_M13_M14_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M11_M12_M13_M14_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M11_M12_M15_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M12_M15_default_instance_;
    new (ptr) ::hyperprotobench::M11_M12_M15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M12_M15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_M15_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M11_M12_M15_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M11_M16_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M16_default_instance_;
    new (ptr) ::hyperprotobench::M11_M16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M16_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M11_M16_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M17_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_default_instance_;
    new (ptr) ::hyperprotobench::M17();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M17_benchmark_2eproto}, {
      &scc_info_M17_M18_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M17_M18_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_M18_default_instance_;
    new (ptr) ::hyperprotobench::M17_M18();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17_M18::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_M18_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M17_M18_benchmark_2eproto}, {
      &scc_info_M17_M18_M19_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M17_M18_M19_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_M18_M19_default_instance_;
    new (ptr) ::hyperprotobench::M17_M18_M19();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17_M18_M19::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_M18_M19_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M17_M18_M19_benchmark_2eproto}, {
      &scc_info_M17_M18_M19_M20_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M17_M18_M19_M20_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_M18_M19_M20_default_instance_;
    new (ptr) ::hyperprotobench::M17_M18_M19_M20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17_M18_M19_M20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M17_M18_M19_M20_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M17_M18_M19_M20_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M21_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_default_instance_;
    new (ptr) ::hyperprotobench::M21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M21_benchmark_2eproto}, {
      &scc_info_M21_M22_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M21_M22_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M22_default_instance_;
    new (ptr) ::hyperprotobench::M21_M22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M22_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M21_M22_benchmark_2eproto}, {
      &scc_info_M21_M22_M23_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M21_M22_M23_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M22_M23_default_instance_;
    new (ptr) ::hyperprotobench::M21_M22_M23();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M22_M23::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M22_M23_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M21_M22_M23_benchmark_2eproto}, {
      &scc_info_M21_M22_M23_M24_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M21_M22_M23_M24_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M22_M23_M24_default_instance_;
    new (ptr) ::hyperprotobench::M21_M22_M23_M24();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M22_M23_M24::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M22_M23_M24_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M21_M22_M23_M24_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M25_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_default_instance_;
    new (ptr) ::hyperprotobench::M25();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M25_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M25_benchmark_2eproto}, {
      &scc_info_M25_M26_benchmark_2eproto.base,
      &scc_info_M25_M29_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M26_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M26_default_instance_;
    new (ptr) ::hyperprotobench::M25_M26();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M26::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M25_M26_benchmark_2eproto}, {
      &scc_info_M25_M26_M27_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M26_M27_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M26_M27_default_instance_;
    new (ptr) ::hyperprotobench::M25_M26_M27();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M26_M27::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_M27_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M25_M26_M27_benchmark_2eproto}, {
      &scc_info_M25_M26_M27_M28_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M26_M27_M28_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M26_M27_M28_default_instance_;
    new (ptr) ::hyperprotobench::M25_M26_M27_M28();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M26_M27_M28::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M26_M27_M28_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M25_M26_M27_M28_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M25_M29_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M29_default_instance_;
    new (ptr) ::hyperprotobench::M25_M29();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M29::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M29_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M25_M29_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_default_instance_;
    new (ptr) ::hyperprotobench::M30();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M30_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M30_benchmark_2eproto}, {
      &scc_info_M30_M31_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M30_M31_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M31_default_instance_;
    new (ptr) ::hyperprotobench::M30_M31();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M31::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M30_M31_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M30_M31_benchmark_2eproto}, {
      &scc_info_M30_M31_M32_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M30_M31_M32_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M31_M32_default_instance_;
    new (ptr) ::hyperprotobench::M30_M31_M32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M31_M32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M30_M31_M32_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M30_M31_M32_benchmark_2eproto}, {
      &scc_info_M30_M31_M32_M33_benchmark_2eproto.base,
      &scc_info_M30_M31_M32_M34_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M30_M31_M32_M33_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M31_M32_M33_default_instance_;
    new (ptr) ::hyperprotobench::M30_M31_M32_M33();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M31_M32_M33::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_M32_M33_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M31_M32_M33_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_M31_M32_M34_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M31_M32_M34_default_instance_;
    new (ptr) ::hyperprotobench::M30_M31_M32_M34();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M31_M32_M34::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_M32_M34_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M31_M32_M34_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M35_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M35_default_instance_;
    new (ptr) ::hyperprotobench::M35();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M35::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M35_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M35_benchmark_2eproto}, {
      &scc_info_M35_M36_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M35_M36_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M35_M36_default_instance_;
    new (ptr) ::hyperprotobench::M35_M36();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M35_M36::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M35_M36_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M35_M36_benchmark_2eproto}, {
      &scc_info_M35_M36_M37_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M35_M36_M37_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M35_M36_M37_default_instance_;
    new (ptr) ::hyperprotobench::M35_M36_M37();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M35_M36_M37::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M35_M36_M37_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M35_M36_M37_benchmark_2eproto}, {
      &scc_info_M35_M36_M37_M38_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M35_M36_M37_M38_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M35_M36_M37_M38_default_instance_;
    new (ptr) ::hyperprotobench::M35_M36_M37_M38();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M35_M36_M37_M38::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M35_M36_M37_M38_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M35_M36_M37_M38_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M39_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M39_default_instance_;
    new (ptr) ::hyperprotobench::M39();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M39::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M39_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M39_benchmark_2eproto}, {
      &scc_info_M39_M40_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M39_M40_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M39_M40_default_instance_;
    new (ptr) ::hyperprotobench::M39_M40();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M39_M40::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M39_M40_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M39_M40_benchmark_2eproto}, {
      &scc_info_M39_M40_M41_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M39_M40_M41_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M39_M40_M41_default_instance_;
    new (ptr) ::hyperprotobench::M39_M40_M41();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M39_M40_M41::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M39_M40_M41_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M39_M40_M41_benchmark_2eproto}, {
      &scc_info_M39_M40_M41_M42_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M39_M40_M41_M42_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M39_M40_M41_M42_default_instance_;
    new (ptr) ::hyperprotobench::M39_M40_M41_M42();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M39_M40_M41_M42::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M39_M40_M41_M42_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M39_M40_M41_M42_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M43_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_default_instance_;
    new (ptr) ::hyperprotobench::M43();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_benchmark_2eproto}, {
      &scc_info_M43_M44_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M44_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M44_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_M44_benchmark_2eproto}, {
      &scc_info_M43_M44_M45_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M44_M45_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_M45_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44_M45();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44_M45::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M43_M44_M45_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M43_M44_M45_benchmark_2eproto}, {
      &scc_info_M43_M44_M45_M46_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M43_M44_M45_M46_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M43_M44_M45_M46_default_instance_;
    new (ptr) ::hyperprotobench::M43_M44_M45_M46();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M43_M44_M45_M46::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M43_M44_M45_M46_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M43_M44_M45_M46_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M6_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M6_default_instance_;
    new (ptr) ::hyperprotobench::M6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M6_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M6_benchmark_2eproto}, {
      &scc_info_M6_M7_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M6_M7_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M6_M7_default_instance_;
    new (ptr) ::hyperprotobench::M6_M7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M6_M7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M6_M7_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M6_M7_benchmark_2eproto}, {
      &scc_info_M6_M7_M8_benchmark_2eproto.base,
      &scc_info_M6_M7_M10_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M6_M7_M10_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M6_M7_M10_default_instance_;
    new (ptr) ::hyperprotobench::M6_M7_M10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M6_M7_M10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M6_M7_M10_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M6_M7_M10_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M6_M7_M8_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M6_M7_M8_default_instance_;
    new (ptr) ::hyperprotobench::M6_M7_M8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M6_M7_M8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M6_M7_M8_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M6_M7_M8_benchmark_2eproto}, {
      &scc_info_M6_M7_M8_M9_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M6_M7_M8_M9_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M6_M7_M8_M9_default_instance_;
    new (ptr) ::hyperprotobench::M6_M7_M8_M9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M6_M7_M8_M9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M6_M7_M8_M9_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M6_M7_M8_M9_benchmark_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_benchmark_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_benchmark_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_benchmark_2eproto = nullptr;

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_M3_M4_ACCEL_DESCRIPTORS::M1_M2_M3_M4_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2_M3_M4::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2_M3_M4),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS::M1_M2_M3_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2_M3::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2_M3),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 14L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_M3_M4_ACCEL_DESCRIPTORS::M1_M2_M3_M4_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_M3_ACCEL_DESCRIPTORS::M1_M2_M3_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M5_ACCEL_DESCRIPTORS::M1_M5_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M5::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M5),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M5, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M5, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS::M1_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 20L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS),

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M5_ACCEL_DESCRIPTORS::M1_M5_ACCEL_DESCRIPTORS),

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  65568L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M6_M7_M8_M9_ACCEL_DESCRIPTORS::M6_M7_M8_M9_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M6_M7_M8_M9::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M6_M7_M8_M9),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M6_M7_M8_ACCEL_DESCRIPTORS::M6_M7_M8_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M6_M7_M8::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M6_M7_M8),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M6_M7_M8_M9_ACCEL_DESCRIPTORS::M6_M7_M8_M9_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M6_M7_M10_ACCEL_DESCRIPTORS::M6_M7_M10_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M6_M7_M10::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M6_M7_M10),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M6_M7_ACCEL_DESCRIPTORS::M6_M7_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M6_M7::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M6_M7),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M6_M7_M8_ACCEL_DESCRIPTORS::M6_M7_M8_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M6_M7_M10_ACCEL_DESCRIPTORS::M6_M7_M10_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  1026L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M6_ACCEL_DESCRIPTORS::M6_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M6::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M6),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 20L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M6_M7_ACCEL_DESCRIPTORS::M6_M7_ACCEL_DESCRIPTORS),

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  131072L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M12_M13_M14_ACCEL_DESCRIPTORS::M11_M12_M13_M14_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M12_M13_M14::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M12_M13_M14),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M12_M13_ACCEL_DESCRIPTORS::M11_M12_M13_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M12_M13::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M12_M13),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M12_M13_M14_ACCEL_DESCRIPTORS::M11_M12_M13_M14_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M12_M15_ACCEL_DESCRIPTORS::M11_M12_M15_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M12_M15::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M12_M15),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS::M11_M12_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M12::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M12),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M12_M13_ACCEL_DESCRIPTORS::M11_M12_M13_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M12_M15_ACCEL_DESCRIPTORS::M11_M12_M15_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  192L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M16_ACCEL_DESCRIPTORS::M11_M16_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M16::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M16),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M16, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M16, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_ACCEL_DESCRIPTORS::M11_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 14L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS::M11_M12_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M16_ACCEL_DESCRIPTORS::M11_M16_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  18L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_M18_M19_M20_ACCEL_DESCRIPTORS::M17_M18_M19_M20_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17_M18_M19_M20::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17_M18_M19_M20),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19_M20, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 9L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19_M20, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_M18_M19_ACCEL_DESCRIPTORS::M17_M18_M19_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17_M18_M19::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17_M18_M19),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M17_M18_M19_M20_ACCEL_DESCRIPTORS::M17_M18_M19_M20_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS::M17_M18_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17_M18::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17_M18),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M17_M18_M19_ACCEL_DESCRIPTORS::M17_M18_M19_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS::M17_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS::M17_M18_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M22_M23_M24_ACCEL_DESCRIPTORS::M21_M22_M23_M24_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M22_M23_M24::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M22_M23_M24),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M22_M23_ACCEL_DESCRIPTORS::M21_M22_M23_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M22_M23::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M22_M23),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M22_M23_M24_ACCEL_DESCRIPTORS::M21_M22_M23_M24_ACCEL_DESCRIPTORS),

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS::M21_M22_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M22::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M22),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M22_M23_ACCEL_DESCRIPTORS::M21_M22_M23_ACCEL_DESCRIPTORS),

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS::M21_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS::M21_M22_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  64L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M26_M27_M28_ACCEL_DESCRIPTORS::M25_M26_M27_M28_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M26_M27_M28::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M26_M27_M28),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS::M25_M26_M27_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M26_M27::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M26_M27),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M26_M27_M28_ACCEL_DESCRIPTORS::M25_M26_M27_M28_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS::M25_M26_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M26::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M26),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS::M25_M26_M27_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M29_ACCEL_DESCRIPTORS::M25_M29_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M29::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M29),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M29, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M29, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS::M25_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS::M25_M26_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M29_ACCEL_DESCRIPTORS::M25_M29_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  132L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M31_M32_M33_ACCEL_DESCRIPTORS::M30_M31_M32_M33_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M31_M32_M33::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M31_M32_M33),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M31_M32_M34_ACCEL_DESCRIPTORS::M30_M31_M32_M34_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M31_M32_M34::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M31_M32_M34),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M34, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M34, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M31_M32_ACCEL_DESCRIPTORS::M30_M31_M32_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M31_M32::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M31_M32),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M31_M32_M33_ACCEL_DESCRIPTORS::M30_M31_M32_M33_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M31_M32_M34_ACCEL_DESCRIPTORS::M30_M31_M32_M34_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  260L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS::M30_M31_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M31::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M31),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 6L) << 32) |
  /* max field num */ (((uint64_t) 17L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M31_M32_ACCEL_DESCRIPTORS::M30_M31_M32_ACCEL_DESCRIPTORS),

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS::M30_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 16L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS::M30_M31_ACCEL_DESCRIPTORS),

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  32768L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M35_M36_M37_M38_ACCEL_DESCRIPTORS::M35_M36_M37_M38_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M35_M36_M37_M38::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M35_M36_M37_M38),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M35_M36_M37_ACCEL_DESCRIPTORS::M35_M36_M37_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M35_M36_M37::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M35_M36_M37),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M35_M36_M37_M38_ACCEL_DESCRIPTORS::M35_M36_M37_M38_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  128L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M35_M36_ACCEL_DESCRIPTORS::M35_M36_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M35_M36::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M35_M36),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 5L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M35_M36_M37_ACCEL_DESCRIPTORS::M35_M36_M37_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M35_ACCEL_DESCRIPTORS::M35_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M35::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M35),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M35_M36_ACCEL_DESCRIPTORS::M35_M36_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  32L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M39_M40_M41_M42_ACCEL_DESCRIPTORS::M39_M40_M41_M42_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M39_M40_M41_M42::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M39_M40_M41_M42),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M39_M40_M41_ACCEL_DESCRIPTORS::M39_M40_M41_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M39_M40_M41::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M39_M40_M41),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M39_M40_M41_M42_ACCEL_DESCRIPTORS::M39_M40_M41_M42_ACCEL_DESCRIPTORS),

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4096L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M39_M40_ACCEL_DESCRIPTORS::M39_M40_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M39_M40::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M39_M40),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M39_M40_M41_ACCEL_DESCRIPTORS::M39_M40_M41_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M39_ACCEL_DESCRIPTORS::M39_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M39::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M39),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M39_M40_ACCEL_DESCRIPTORS::M39_M40_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1024L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_M45_M46_ACCEL_DESCRIPTORS::M43_M44_M45_M46_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44_M45_M46::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44_M45_M46),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS::M43_M44_M45_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44_M45::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44_M45),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_M45_M46_ACCEL_DESCRIPTORS::M43_M44_M45_M46_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS::M43_M44_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43_M44::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43_M44),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_M45_ACCEL_DESCRIPTORS::M43_M44_M45_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M43_ACCEL_DESCRIPTORS::M43_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M43::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M43),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M43_M44_ACCEL_DESCRIPTORS::M43_M44_ACCEL_DESCRIPTORS),

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  128L,
};

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_benchmark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3_M4, f5_),
  1,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2_M3, f9_),
  1,
  2,
  4,
  6,
  7,
  8,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_),
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M5, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_),
  1,
  2,
  3,
  4,
  5,
  6,
  10,
  11,
  15,
  16,
  18,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8_M9, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M8, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7_M10, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6_M7, f8_),
  1,
  2,
  3,
  4,
  6,
  7,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M6, f11_),
  1,
  9,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  20,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13_M14, f5_),
  1,
  2,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M13, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12_M15, f3_),
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f5_),
  1,
  2,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M16, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f13_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19_M20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19_M20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19_M20, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18_M19, f4_),
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f5_),
  1,
  2,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23_M24, f4_),
  1,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22_M23, f6_),
  1,
  3,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f4_),
  1,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f7_),
  1,
  3,
  4,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27_M28, f3_),
  1,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f5_),
  1,
  2,
  5,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f2_),
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M29, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M29, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M29, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f9_),
  1,
  2,
  3,
  6,
  7,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M33, f4_),
  1,
  4,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M34, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M34, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32_M34, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31_M32, f8_),
  1,
  2,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f9_),
  1,
  2,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f12_),
  1,
  2,
  3,
  4,
  5,
  9,
  10,
  11,
  12,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37_M38, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36_M37, f3_),
  1,
  2,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35_M36, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M35, f5_),
  1,
  2,
  4,
  5,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41_M42, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40_M41, f9_),
  1,
  4,
  6,
  7,
  9,
  10,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39_M40, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M39, f10_),
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45_M46, f3_),
  1,
  2,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44_M45, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43_M44, f4_),
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M43, f5_),
  1,
  2,
  6,
  7,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::hyperprotobench::M1_M2_M3_M4)},
  { 15, 29, sizeof(::hyperprotobench::M1_M2_M3)},
  { 38, 51, sizeof(::hyperprotobench::M1_M2)},
  { 59, 65, sizeof(::hyperprotobench::M1_M5)},
  { 66, 82, sizeof(::hyperprotobench::M1)},
  { 93, 100, sizeof(::hyperprotobench::M6_M7_M8_M9)},
  { 102, 109, sizeof(::hyperprotobench::M6_M7_M8)},
  { 111, 119, sizeof(::hyperprotobench::M6_M7_M10)},
  { 122, 135, sizeof(::hyperprotobench::M6_M7)},
  { 143, 159, sizeof(::hyperprotobench::M6)},
  { 170, 180, sizeof(::hyperprotobench::M11_M12_M13_M14)},
  { 185, 192, sizeof(::hyperprotobench::M11_M12_M13)},
  { 194, 202, sizeof(::hyperprotobench::M11_M12_M15)},
  { 205, 215, sizeof(::hyperprotobench::M11_M12)},
  { 220, 226, sizeof(::hyperprotobench::M11_M16)},
  { 227, 245, sizeof(::hyperprotobench::M11)},
  { 258, 264, sizeof(::hyperprotobench::M17_M18_M19_M20)},
  { 265, 274, sizeof(::hyperprotobench::M17_M18_M19)},
  { 278, 286, sizeof(::hyperprotobench::M17_M18)},
  { 289, 299, sizeof(::hyperprotobench::M17)},
  { 304, 313, sizeof(::hyperprotobench::M21_M22_M23_M24)},
  { 317, 328, sizeof(::hyperprotobench::M21_M22_M23)},
  { 334, 343, sizeof(::hyperprotobench::M21_M22)},
  { 347, 359, sizeof(::hyperprotobench::M21)},
  { 366, 374, sizeof(::hyperprotobench::M25_M26_M27_M28)},
  { 377, 387, sizeof(::hyperprotobench::M25_M26_M27)},
  { 392, 399, sizeof(::hyperprotobench::M25_M26)},
  { 401, 407, sizeof(::hyperprotobench::M25_M29)},
  { 408, 422, sizeof(::hyperprotobench::M25)},
  { 431, 440, sizeof(::hyperprotobench::M30_M31_M32_M33)},
  { 444, 450, sizeof(::hyperprotobench::M30_M31_M32_M34)},
  { 451, 464, sizeof(::hyperprotobench::M30_M31_M32)},
  { 472, 486, sizeof(::hyperprotobench::M30_M31)},
  { 495, 512, sizeof(::hyperprotobench::M30)},
  { 524, 531, sizeof(::hyperprotobench::M35_M36_M37_M38)},
  { 533, 541, sizeof(::hyperprotobench::M35_M36_M37)},
  { 544, 552, sizeof(::hyperprotobench::M35_M36)},
  { 555, 565, sizeof(::hyperprotobench::M35)},
  { 570, 578, sizeof(::hyperprotobench::M39_M40_M41_M42)},
  { 581, 595, sizeof(::hyperprotobench::M39_M40_M41)},
  { 604, 612, sizeof(::hyperprotobench::M39_M40)},
  { 615, 630, sizeof(::hyperprotobench::M39)},
  { 640, 648, sizeof(::hyperprotobench::M43_M44_M45_M46)},
  { 651, 658, sizeof(::hyperprotobench::M43_M44_M45)},
  { 660, 669, sizeof(::hyperprotobench::M43_M44)},
  { 673, 683, sizeof(::hyperprotobench::M43)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_M3_M4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_M3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M6_M7_M8_M9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M6_M7_M8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M6_M7_M10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M6_M7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M12_M13_M14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M12_M13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M12_M15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_M18_M19_M20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_M18_M19_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_M18_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M22_M23_M24_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M22_M23_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M26_M27_M28_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M26_M27_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M26_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M29_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M31_M32_M33_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M31_M32_M34_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M31_M32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M31_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M35_M36_M37_M38_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M35_M36_M37_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M35_M36_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M35_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M39_M40_M41_M42_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M39_M40_M41_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M39_M40_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M39_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_M45_M46_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_M45_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_M44_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M43_default_instance_),
};

const char descriptor_table_protodef_benchmark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017benchmark.proto\022\017hyperprotobench\"\206\006\n\002M"
  "1\022\n\n\002f1\030\003 \001(\t\022\n\n\002f2\030\004 \001(\t\022\n\n\002f3\030\005 \001(\005\022\n\n"
  "\002f4\030\006 \001(\005\022\"\n\002f5\030\007 \001(\0132\026.hyperprotobench."
  "M1.M2\022\n\n\002f6\030\010 \001(\005\022\n\n\002f7\030\014 \001(\005\022\n\n\002f8\030\r \001("
  "\t\022\n\n\002f9\030\021 \001(\005\022#\n\003f10\030\022 \001(\0132\026.hyperprotob"
  "ench.M1.M5\022\013\n\003f11\030\024 \001(\t\032\267\004\n\002M2\022%\n\002f1\030\001 \001"
  "(\0162\031.hyperprotobench.M1.M2.E1\022\n\n\002f2\030\002 \001("
  "\005\022\n\n\002f3\030\003 \001(\005\022\n\n\002f4\030\005 \001(\001\022\n\n\002f5\030\006 \001(\t\022\n\n"
  "\002f6\030\007 \001(\003\022%\n\002f7\030\010 \001(\0132\031.hyperprotobench."
  "M1.M2.M3\022\n\n\002f8\030\t \001(\t\032\304\002\n\002M3\022(\n\002f1\030\002 \001(\0132"
  "\034.hyperprotobench.M1.M2.M3.M4\022\n\n\002f2\030\003 \001("
  "\003\022\n\n\002f3\030\005 \001(\010\022\n\n\002f4\030\007 \001(\005\022(\n\002f5\030\010 \001(\0162\034."
  "hyperprotobench.M1.M2.M3.E1\022\n\n\002f6\030\t \001(\010\022"
  "\n\n\002f7\030\n \001(\010\022\n\n\002f8\030\r \001(\010\022\n\n\002f9\030\016 \001(\010\032@\n\002M"
  "4\022\n\n\002f1\030\002 \001(\t\022\n\n\002f2\030\003 \001(\t\022\n\n\002f3\030\005 \001(\004\022\n\n"
  "\002f4\030\006 \001(\006\022\n\n\002f5\030\007 \001(\t\"T\n\002E1\022\016\n\nE1_CONST_"
  "1\020C\022\016\n\nE1_CONST_2\020J\022\016\n\nE1_CONST_3\020N\022\016\n\nE"
  "1_CONST_4\020\020\022\016\n\nE1_CONST_5\020\032\"T\n\002E1\022\016\n\nE1_"
  "CONST_1\020I\022\016\n\nE1_CONST_2\020\t\022\016\n\nE1_CONST_3\020"
  "n\022\016\n\nE1_CONST_4\0203\022\016\n\nE1_CONST_5\020\025\032\020\n\002M5\022"
  "\n\n\002f1\030\001 \001(\t\"\266\004\n\002M6\022\n\n\002f1\030\001 \001(\010\022\n\n\002f2\030\t \001"
  "(\005\022\n\n\002f3\030\013 \001(\010\022\n\n\002f4\030\014 \001(\006\022\n\n\002f5\030\r \001(\t\022\n"
  "\n\002f6\030\016 \001(\004\022\n\n\002f7\030\017 \001(\004\022\n\n\002f8\030\020 \001(\014\022\"\n\002f9"
  "\030\021 \001(\0132\026.hyperprotobench.M6.M7\022\013\n\003f10\030\023 "
  "\001(\006\022\013\n\003f11\030\024 \001(\005\032\221\003\n\002M7\022%\n\002f1\030\001 \001(\0132\031.hy"
  "perprotobench.M6.M7.M8\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3"
  "\030\003 \001(\001\022\n\n\002f4\030\004 \001(\003\022\n\n\002f5\030\006 \001(\004\022%\n\002f6\030\007 \001"
  "(\0162\031.hyperprotobench.M6.M7.E1\022\n\n\002f7\030\t \001("
  "\010\022&\n\002f8\030\n \001(\0132\032.hyperprotobench.M6.M7.M1"
  "0\032X\n\002M8\022\n\n\002f1\030\001 \001(\t\022(\n\002f2\030\002 \001(\0132\034.hyperp"
  "rotobench.M6.M7.M8.M9\032\034\n\002M9\022\n\n\002f1\030\001 \001(\t\022"
  "\n\n\002f2\030\002 \001(\014\032)\n\003M10\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001"
  "(\t\022\n\n\002f3\030\003 \001(\006\"T\n\002E1\022\016\n\nE1_CONST_1\020!\022\016\n\n"
  "E1_CONST_2\020C\022\016\n\nE1_CONST_3\020\'\022\016\n\nE1_CONST"
  "_4\020s\022\016\n\nE1_CONST_5\020<\"\230\005\n\003M11\022$\n\002f1\030\001 \001(\013"
  "2\030.hyperprotobench.M11.M12\022\n\n\002f2\030\002 \001(\t\022\n"
  "\n\002f3\030\003 \001(\t\022$\n\002f4\030\004 \001(\0132\030.hyperprotobench"
  ".M11.M16\022\n\n\002f5\030\005 \001(\005\022\n\n\002f6\030\006 \001(\005\022\n\n\002f7\030\007"
  " \001(\t\022\n\n\002f8\030\010 \001(\006\022\n\n\002f9\030\n \001(\010\022\013\n\003f10\030\013 \001("
  "\010\022\013\n\003f11\030\014 \001(\005\022\013\n\003f12\030\r \001(\003\022\013\n\003f13\030\016 \001(\006"
  "\032\251\003\n\003M12\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\002 \001(\t\022\n\n\002f3\030\004"
  " \001(\005\022(\n\002f4\030\006 \001(\0132\034.hyperprotobench.M11.M"
  "12.M13\022(\n\002f5\030\007 \001(\0132\034.hyperprotobench.M11"
  ".M12.M15\032\376\001\n\003M13\022\n\n\002f1\030\001 \001(\010\022,\n\002f2\030\002 \001(\013"
  "2 .hyperprotobench.M11.M12.M13.M14\032\274\001\n\003M"
  "14\022\n\n\002f1\030\002 \001(\003\022\n\n\002f2\030\003 \001(\010\022\n\n\002f3\030\004 \001(\006\022\n"
  "\n\002f4\030\005 \001(\007\022/\n\002f5\030\007 \001(\0162#.hyperprotobench"
  ".M11.M12.M13.M14.E1\"T\n\002E1\022\016\n\nE1_CONST_1\020"
  "\005\022\016\n\nE1_CONST_2\020K\022\016\n\nE1_CONST_3\020n\022\016\n\nE1_"
  "CONST_4\020X\022\016\n\nE1_CONST_5\020<\032)\n\003M15\022\n\n\002f1\030\002"
  " \001(\t\022\n\n\002f2\030\005 \001(\t\022\n\n\002f3\030\006 \001(\003\032\021\n\003M16\022\n\n\002f"
  "1\030\001 \001(\010\"\221\002\n\003M17\022$\n\002f1\030\001 \001(\0132\030.hyperproto"
  "bench.M17.M18\022\n\n\002f2\030\002 \001(\t\022\n\n\002f3\030\005 \001(\003\022\n\n"
  "\002f4\030\006 \001(\t\022\n\n\002f5\030\007 \001(\006\032\263\001\n\003M18\022\n\n\002f1\030\001 \001("
  "\001\022(\n\002f2\030\002 \001(\0132\034.hyperprotobench.M17.M18."
  "M19\022\n\n\002f3\030\003 \001(\t\032j\n\003M19\022\n\n\002f1\030\001 \001(\005\022,\n\002f2"
  "\030\002 \001(\0132 .hyperprotobench.M17.M18.M19.M20"
  "\022\n\n\002f3\030\003 \001(\t\022\n\n\002f4\030\004 \001(\005\032\021\n\003M20\022\n\n\002f1\030\t "
  "\001(\004\"\362\002\n\003M21\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\003 \001(\004\022\n\n\002f"
  "3\030\004 \001(\t\022$\n\002f4\030\006 \001(\0132\030.hyperprotobench.M2"
  "1.M22\022\n\n\002f5\030\007 \001(\010\022\n\n\002f6\030\010 \001(\014\022\n\n\002f7\030\t \001("
  "\004\032\374\001\n\003M22\022\n\n\002f1\030\002 \001(\010\022(\n\002f2\030\005 \001(\0132\034.hype"
  "rprotobench.M21.M22.M23\022\n\n\002f3\030\006 \001(\004\022\n\n\002f"
  "4\030\010 \001(\001\032\246\001\n\003M23\022\n\n\002f1\030\003 \001(\005\022,\n\002f2\030\005 \001(\0132"
  " .hyperprotobench.M21.M22.M23.M24\022\n\n\002f3\030"
  "\006 \001(\005\022\n\n\002f4\030\010 \001(\010\022\n\n\002f5\030\t \001(\t\022\n\n\002f6\030\n \001("
  "\007\0325\n\003M24\022\n\n\002f1\030\001 \001(\007\022\n\n\002f2\030\004 \001(\005\022\n\n\002f3\030\006"
  " \001(\003\022\n\n\002f4\030\007 \001(\005\"\376\003\n\003M25\022\n\n\002f1\030\002 \001(\014\022$\n\002"
  "f2\030\003 \001(\0132\030.hyperprotobench.M25.M26\022\n\n\002f3"
  "\030\004 \001(\006\022\n\n\002f4\030\007 \001(\004\022$\n\002f5\030\010 \001(\0132\030.hyperpr"
  "otobench.M25.M29\022\n\n\002f6\030\t \001(\005\022\n\n\002f7\030\n \001(\005"
  "\022\n\n\002f8\030\013 \001(\004\022\n\n\002f9\030\014 \001(\001\032\303\002\n\003M26\022\n\n\002f1\030\001"
  " \001(\t\022(\n\002f2\030\004 \001(\0132\034.hyperprotobench.M25.M"
  "26.M27\032\205\002\n\003M27\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\t\022\n"
  "\n\002f3\030\005 \001(\005\022+\n\002f4\030\007 \001(\0162\037.hyperprotobench"
  ".M25.M26.M27.E1\022,\n\002f5\030\010 \001(\0132 .hyperproto"
  "bench.M25.M26.M27.M28\032)\n\003M28\022\n\n\002f1\030\001 \001(\t"
  "\022\n\n\002f2\030\004 \001(\t\022\n\n\002f3\030\005 \001(\010\"T\n\002E1\022\016\n\nE1_CON"
  "ST_1\020d\022\016\n\nE1_CONST_2\020\004\022\016\n\nE1_CONST_3\020$\022\016"
  "\n\nE1_CONST_4\020O\022\016\n\nE1_CONST_5\020S\032\021\n\003M29\022\n\n"
  "\002f1\030\001 \001(\t\"\261\005\n\003M30\022\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001("
  "\t\022\n\n\002f3\030\003 \001(\010\022\n\n\002f4\030\004 \001(\t\022\n\n\002f5\030\005 \001(\006\022\n\n"
  "\002f6\030\t \001(\t\022\n\n\002f7\030\n \001(\t\022\n\n\002f8\030\013 \001(\007\022\n\n\002f9\030"
  "\014 \001(\t\022\013\n\003f10\030\016 \001(\t\022%\n\003f11\030\017 \001(\0132\030.hyperp"
  "rotobench.M30.M31\022\013\n\003f12\030\020 \001(\006\032\374\003\n\003M31\022\n"
  "\n\002f1\030\006 \001(\t\022\n\n\002f2\030\007 \001(\005\022\n\n\002f3\030\013 \001(\001\022\n\n\002f4"
  "\030\014 \001(\t\022(\n\002f5\030\r \001(\0132\034.hyperprotobench.M30"
  ".M31.M32\022\n\n\002f6\030\016 \001(\010\022\n\n\002f7\030\017 \001(\006\022\n\n\002f8\030\020"
  " \001(\005\022\n\n\002f9\030\021 \001(\007\032\352\002\n\003M32\022\n\n\002f1\030\001 \001(\004\022,\n\002"
  "f2\030\002 \001(\0132 .hyperprotobench.M30.M31.M32.M"
  "33\022+\n\002f3\030\004 \001(\0162\037.hyperprotobench.M30.M31"
  ".M32.E1\022\n\n\002f4\030\005 \001(\006\022\n\n\002f5\030\006 \001(\010\022\n\n\002f6\030\007 "
  "\001(\003\022,\n\002f7\030\010 \001(\0132 .hyperprotobench.M30.M3"
  "1.M32.M34\022\n\n\002f8\030\t \001(\005\0325\n\003M33\022\n\n\002f1\030\001 \001(\005"
  "\022\n\n\002f2\030\004 \001(\t\022\n\n\002f3\030\006 \001(\014\022\n\n\002f4\030\007 \001(\t\032\021\n\003"
  "M34\022\n\n\002f1\030\001 \001(\003\"T\n\002E1\022\016\n\nE1_CONST_1\020J\022\016\n"
  "\nE1_CONST_2\0202\022\016\n\nE1_CONST_3\020\025\022\016\n\nE1_CONS"
  "T_4\0207\022\016\n\nE1_CONST_5\0208\"\221\002\n\003M35\022\n\n\002f1\030\002 \001("
  "\t\022\n\n\002f2\030\003 \001(\005\022\n\n\002f3\030\005 \001(\005\022$\n\002f4\030\006 \001(\0132\030."
  "hyperprotobench.M35.M36\022\n\n\002f5\030\013 \001(\001\032\263\001\n\003"
  "M36\022\n\n\002f1\030\005 \001(\014\022\n\n\002f2\030\006 \001(\005\022(\n\002f3\030\007 \001(\0132"
  "\034.hyperprotobench.M35.M36.M37\032j\n\003M37\022\n\n\002"
  "f1\030\001 \001(\010\022\n\n\002f2\030\002 \001(\005\022,\n\002f3\030\007 \001(\0132 .hyper"
  "protobench.M35.M36.M37.M38\032\035\n\003M38\022\n\n\002f1\030"
  "\002 \001(\014\022\n\n\002f2\030\004 \001(\004\"\222\004\n\003M39\022\n\n\002f1\030\001 \001(\003\022\n\n"
  "\002f2\030\002 \001(\t\022\n\n\002f3\030\003 \001(\010\022#\n\002f4\030\004 \001(\0162\027.hype"
  "rprotobench.M39.E1\022\n\n\002f5\030\005 \001(\003\022\n\n\002f6\030\006 \001"
  "(\t\022\n\n\002f7\030\010 \001(\t\022\n\n\002f8\030\t \001(\014\022$\n\002f9\030\n \001(\0132\030"
  ".hyperprotobench.M39.M40\022\013\n\003f10\030\013 \001(\001\032\210\002"
  "\n\003M40\022(\n\002f1\030\001 \001(\0132\034.hyperprotobench.M39."
  "M40.M41\022\n\n\002f2\030\003 \001(\005\022\n\n\002f3\030\004 \001(\010\032\276\001\n\003M41\022"
  "\n\n\002f1\030\002 \001(\005\022\n\n\002f2\030\005 \001(\006\022\n\n\002f3\030\007 \001(\007\022\n\n\002f"
  "4\030\010 \001(\010\022\n\n\002f5\030\n \001(\t\022\n\n\002f6\030\013 \001(\t\022,\n\002f7\030\r "
  "\001(\0132 .hyperprotobench.M39.M40.M41.M42\022\n\n"
  "\002f8\030\016 \001(\010\022\n\n\002f9\030\017 \001(\005\032)\n\003M42\022\n\n\002f1\030\002 \001(\005"
  "\022\n\n\002f2\030\004 \001(\010\022\n\n\002f3\030\005 \001(\005\"T\n\002E1\022\016\n\nE1_CON"
  "ST_1\020A\022\016\n\nE1_CONST_2\020\025\022\016\n\nE1_CONST_3\020\030\022\016"
  "\n\nE1_CONST_4\020z\022\016\n\nE1_CONST_5\020\?\"\214\003\n\003M43\022\n"
  "\n\002f1\030\001 \001(\014\022\n\n\002f2\030\002 \001(\001\022#\n\002f3\030\006 \001(\0162\027.hyp"
  "erprotobench.M43.E1\022$\n\002f4\030\007 \001(\0132\030.hyperp"
  "rotobench.M43.M44\022\n\n\002f5\030\n \001(\006\032\277\001\n\003M44\022\n\n"
  "\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\005\022\n\n\002f3\030\003 \001(\t\022(\n\002f4\030"
  "\004 \001(\0132\034.hyperprotobench.M43.M44.M45\032j\n\003M"
  "45\022\n\n\002f1\030\001 \001(\010\022,\n\002f2\030\003 \001(\0132 .hyperprotob"
  "ench.M43.M44.M45.M46\032)\n\003M46\022\n\n\002f1\030\003 \001(\010\022"
  "\n\n\002f2\030\004 \001(\t\022\n\n\002f3\030\014 \001(\005\"T\n\002E1\022\016\n\nE1_CONS"
  "T_1\020g\022\016\n\nE1_CONST_2\020\016\022\016\n\nE1_CONST_3\020q\022\016\n"
  "\nE1_CONST_4\020t\022\016\n\nE1_CONST_5\020\032B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_benchmark_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_benchmark_2eproto_sccs[46] = {
  &scc_info_M1_benchmark_2eproto.base,
  &scc_info_M1_M2_benchmark_2eproto.base,
  &scc_info_M1_M2_M3_benchmark_2eproto.base,
  &scc_info_M1_M2_M3_M4_benchmark_2eproto.base,
  &scc_info_M1_M5_benchmark_2eproto.base,
  &scc_info_M11_benchmark_2eproto.base,
  &scc_info_M11_M12_benchmark_2eproto.base,
  &scc_info_M11_M12_M13_benchmark_2eproto.base,
  &scc_info_M11_M12_M13_M14_benchmark_2eproto.base,
  &scc_info_M11_M12_M15_benchmark_2eproto.base,
  &scc_info_M11_M16_benchmark_2eproto.base,
  &scc_info_M17_benchmark_2eproto.base,
  &scc_info_M17_M18_benchmark_2eproto.base,
  &scc_info_M17_M18_M19_benchmark_2eproto.base,
  &scc_info_M17_M18_M19_M20_benchmark_2eproto.base,
  &scc_info_M21_benchmark_2eproto.base,
  &scc_info_M21_M22_benchmark_2eproto.base,
  &scc_info_M21_M22_M23_benchmark_2eproto.base,
  &scc_info_M21_M22_M23_M24_benchmark_2eproto.base,
  &scc_info_M25_benchmark_2eproto.base,
  &scc_info_M25_M26_benchmark_2eproto.base,
  &scc_info_M25_M26_M27_benchmark_2eproto.base,
  &scc_info_M25_M26_M27_M28_benchmark_2eproto.base,
  &scc_info_M25_M29_benchmark_2eproto.base,
  &scc_info_M30_benchmark_2eproto.base,
  &scc_info_M30_M31_benchmark_2eproto.base,
  &scc_info_M30_M31_M32_benchmark_2eproto.base,
  &scc_info_M30_M31_M32_M33_benchmark_2eproto.base,
  &scc_info_M30_M31_M32_M34_benchmark_2eproto.base,
  &scc_info_M35_benchmark_2eproto.base,
  &scc_info_M35_M36_benchmark_2eproto.base,
  &scc_info_M35_M36_M37_benchmark_2eproto.base,
  &scc_info_M35_M36_M37_M38_benchmark_2eproto.base,
  &scc_info_M39_benchmark_2eproto.base,
  &scc_info_M39_M40_benchmark_2eproto.base,
  &scc_info_M39_M40_M41_benchmark_2eproto.base,
  &scc_info_M39_M40_M41_M42_benchmark_2eproto.base,
  &scc_info_M43_benchmark_2eproto.base,
  &scc_info_M43_M44_benchmark_2eproto.base,
  &scc_info_M43_M44_M45_benchmark_2eproto.base,
  &scc_info_M43_M44_M45_M46_benchmark_2eproto.base,
  &scc_info_M6_benchmark_2eproto.base,
  &scc_info_M6_M7_benchmark_2eproto.base,
  &scc_info_M6_M7_M10_benchmark_2eproto.base,
  &scc_info_M6_M7_M8_benchmark_2eproto.base,
  &scc_info_M6_M7_M8_M9_benchmark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_benchmark_2eproto_once;
static bool descriptor_table_benchmark_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto = {
  &descriptor_table_benchmark_2eproto_initialized, descriptor_table_protodef_benchmark_2eproto, "benchmark.proto", 5114,
  &descriptor_table_benchmark_2eproto_once, descriptor_table_benchmark_2eproto_sccs, descriptor_table_benchmark_2eproto_deps, 46, 0,
  schemas, file_default_instances, TableStruct_benchmark_2eproto::offsets,
  file_level_metadata_benchmark_2eproto, 46, file_level_enum_descriptors_benchmark_2eproto, file_level_service_descriptors_benchmark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_benchmark_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_benchmark_2eproto), true);
namespace hyperprotobench {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_M3_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[0];
}
bool M1_M2_M3_E1_IsValid(int value) {
  switch (value) {
    case 16:
    case 26:
    case 67:
    case 74:
    case 78:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_M2_M3_E1 M1_M2_M3::E1_CONST_1;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_CONST_2;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_CONST_3;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_CONST_4;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_CONST_5;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_MIN;
constexpr M1_M2_M3_E1 M1_M2_M3::E1_MAX;
constexpr int M1_M2_M3::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_M2_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[1];
}
bool M1_M2_E1_IsValid(int value) {
  switch (value) {
    case 9:
    case 21:
    case 51:
    case 73:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_M2_E1 M1_M2::E1_CONST_1;
constexpr M1_M2_E1 M1_M2::E1_CONST_2;
constexpr M1_M2_E1 M1_M2::E1_CONST_3;
constexpr M1_M2_E1 M1_M2::E1_CONST_4;
constexpr M1_M2_E1 M1_M2::E1_CONST_5;
constexpr M1_M2_E1 M1_M2::E1_MIN;
constexpr M1_M2_E1 M1_M2::E1_MAX;
constexpr int M1_M2::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M6_M7_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[2];
}
bool M6_M7_E1_IsValid(int value) {
  switch (value) {
    case 33:
    case 39:
    case 60:
    case 67:
    case 115:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M6_M7_E1 M6_M7::E1_CONST_1;
constexpr M6_M7_E1 M6_M7::E1_CONST_2;
constexpr M6_M7_E1 M6_M7::E1_CONST_3;
constexpr M6_M7_E1 M6_M7::E1_CONST_4;
constexpr M6_M7_E1 M6_M7::E1_CONST_5;
constexpr M6_M7_E1 M6_M7::E1_MIN;
constexpr M6_M7_E1 M6_M7::E1_MAX;
constexpr int M6_M7::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M11_M12_M13_M14_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[3];
}
bool M11_M12_M13_M14_E1_IsValid(int value) {
  switch (value) {
    case 5:
    case 60:
    case 75:
    case 88:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_CONST_1;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_CONST_2;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_CONST_3;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_CONST_4;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_CONST_5;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_MIN;
constexpr M11_M12_M13_M14_E1 M11_M12_M13_M14::E1_MAX;
constexpr int M11_M12_M13_M14::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M26_M27_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[4];
}
bool M25_M26_M27_E1_IsValid(int value) {
  switch (value) {
    case 4:
    case 36:
    case 79:
    case 83:
    case 100:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M25_M26_M27_E1 M25_M26_M27::E1_CONST_1;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_CONST_2;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_CONST_3;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_CONST_4;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_CONST_5;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_MIN;
constexpr M25_M26_M27_E1 M25_M26_M27::E1_MAX;
constexpr int M25_M26_M27::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M30_M31_M32_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[5];
}
bool M30_M31_M32_E1_IsValid(int value) {
  switch (value) {
    case 21:
    case 50:
    case 55:
    case 56:
    case 74:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M30_M31_M32_E1 M30_M31_M32::E1_CONST_1;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_CONST_2;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_CONST_3;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_CONST_4;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_CONST_5;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_MIN;
constexpr M30_M31_M32_E1 M30_M31_M32::E1_MAX;
constexpr int M30_M31_M32::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M39_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[6];
}
bool M39_E1_IsValid(int value) {
  switch (value) {
    case 21:
    case 24:
    case 63:
    case 65:
    case 122:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M39_E1 M39::E1_CONST_1;
constexpr M39_E1 M39::E1_CONST_2;
constexpr M39_E1 M39::E1_CONST_3;
constexpr M39_E1 M39::E1_CONST_4;
constexpr M39_E1 M39::E1_CONST_5;
constexpr M39_E1 M39::E1_MIN;
constexpr M39_E1 M39::E1_MAX;
constexpr int M39::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M43_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[7];
}
bool M43_E1_IsValid(int value) {
  switch (value) {
    case 14:
    case 26:
    case 103:
    case 113:
    case 116:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M43_E1 M43::E1_CONST_1;
constexpr M43_E1 M43::E1_CONST_2;
constexpr M43_E1 M43::E1_CONST_3;
constexpr M43_E1 M43::E1_CONST_4;
constexpr M43_E1 M43::E1_CONST_5;
constexpr M43_E1 M43::E1_MIN;
constexpr M43_E1 M43::E1_MAX;
constexpr int M43::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void M1_M2_M3_M4::InitAsDefaultInstance() {
}
class M1_M2_M3_M4::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2_M3_M4>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

M1_M2_M3_M4::M1_M2_M3_M4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2.M3.M4)
}
M1_M2_M3_M4::M1_M2_M3_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2.M3.M4)
}
M1_M2_M3_M4::M1_M2_M3_M4(const M1_M2_M3_M4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2.M3.M4)
}

void M1_M2_M3_M4::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_M3_M4_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
}

M1_M2_M3_M4::~M1_M2_M3_M4() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2.M3.M4)
  SharedDtor();
}

void M1_M2_M3_M4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M2_M3_M4::ArenaDtor(void* object) {
  M1_M2_M3_M4* _this = reinterpret_cast< M1_M2_M3_M4* >(object);
  (void)_this;
}
void M1_M2_M3_M4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2_M3_M4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2_M3_M4& M1_M2_M3_M4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_M3_M4_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2_M3_M4::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2.M3.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2_M3_M4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M2.M3.M4.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M2.M3.M4.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M2.M3.M4.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2_M3_M4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2.M3.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M2.M3.M4.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional string f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M2.M3.M4.f2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional uint64 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional fixed64 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_f4(), target);
  }

  // optional string f5 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M2.M3.M4.f5");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2.M3.M4)
  return target;
}

size_t M1_M2_M3_M4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2.M3.M4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000076u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional string f5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional uint64 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f3());
    }

    // optional fixed64 f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2_M3_M4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2.M3.M4)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2_M3_M4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2_M3_M4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2.M3.M4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2.M3.M4)
    MergeFrom(*source);
  }
}

void M1_M2_M3_M4::MergeFrom(const M1_M2_M3_M4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2.M3.M4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000076u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M2_M3_M4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2.M3.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2_M3_M4::CopyFrom(const M1_M2_M3_M4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2.M3.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2_M3_M4::IsInitialized() const {
  return true;
}

void M1_M2_M3_M4::InternalSwap(M1_M2_M3_M4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2_M3_M4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M2_M3::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M2_M3_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M2_M3_M4*>(
      ::hyperprotobench::M1_M2_M3_M4::internal_default_instance());
}
class M1_M2_M3::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2_M3>()._has_bits_);
  static const ::hyperprotobench::M1_M2_M3_M4& f1(const M1_M2_M3* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::hyperprotobench::M1_M2_M3_M4&
M1_M2_M3::_Internal::f1(const M1_M2_M3* msg) {
  return *msg->f1_;
}
void M1_M2_M3::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M2_M3_M4* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.M3.f1)
}
M1_M2_M3::M1_M2_M3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2.M3)
}
M1_M2_M3::M1_M2_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2.M3)
}
M1_M2_M3::M1_M2_M3(const M1_M2_M3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M2_M3_M4(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2.M3)
}

void M1_M2_M3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_M3_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
  f5_ = 67;
}

M1_M2_M3::~M1_M2_M3() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2.M3)
  SharedDtor();
}

void M1_M2_M3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M1_M2_M3::ArenaDtor(void* object) {
  M1_M2_M3* _this = reinterpret_cast< M1_M2_M3* >(object);
  (void)_this;
}
void M1_M2_M3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2_M3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2_M3& M1_M2_M3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_M3_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2_M3::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000054u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  }
  if (cached_has_bits & 0x00003300u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f9_));
  }
  f5_ = 67;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2_M3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M2.M3.M4 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2.M3.E1 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_M2_M3_E1_IsValid(val))) {
            _internal_set_f5(static_cast<::hyperprotobench::M1_M2_M3_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f9 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2_M3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M2.M3.M4 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional int64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f2(), target);
  }

  // optional bool f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f3(), target);
  }

  // optional int32 f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M1.M2.M3.E1 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_f5(), target);
  }

  // optional bool f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_f6(), target);
  }

  // optional bool f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_f7(), target);
  }

  // optional bool f8 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_f8(), target);
  }

  // optional bool f9 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2.M3)
  return target;
}

size_t M1_M2_M3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2.M3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000056u) {
    // optional .hyperprotobench.M1.M2.M3.M4 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional int32 f4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional bool f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003300u) {
    // optional bool f6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool f8 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool f9 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  // optional .hyperprotobench.M1.M2.M3.E1 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f5());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2_M3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2.M3)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2_M3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2_M3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2.M3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2.M3)
    MergeFrom(*source);
  }
}

void M1_M2_M3::MergeFrom(const M1_M2_M3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2.M3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000056u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M1_M2_M3_M4::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003300u) {
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00001000u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00002000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000080u) {
    _internal_set_f5(from._internal_f5());
  }
}

void M1_M2_M3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2_M3::CopyFrom(const M1_M2_M3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2_M3::IsInitialized() const {
  return true;
}

void M1_M2_M3::InternalSwap(M1_M2_M3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2_M3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M2::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M2_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M1_M2_M3*>(
      ::hyperprotobench::M1_M2_M3::internal_default_instance());
}
class M1_M2::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M1_M2_M3& f7(const M1_M2* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M1_M2_M3&
M1_M2::_Internal::f7(const M1_M2* msg) {
  return *msg->f7_;
}
void M1_M2::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M1_M2_M3* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f7)
}
M1_M2::M1_M2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(const M1_M2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M1_M2_M3(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2)
}

void M1_M2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f7_)) + sizeof(f6_));
  f1_ = 73;
}

M1_M2::~M1_M2() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2)
  SharedDtor();
}

void M1_M2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f7_;
}

void M1_M2::ArenaDtor(void* object) {
  M1_M2* _this = reinterpret_cast< M1_M2* >(object);
  (void)_this;
}
void M1_M2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2& M1_M2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    f5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000200u) {
      f8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  if (cached_has_bits & 0x000000aeu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
    f1_ = 73;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M2.E1 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_M2_E1_IsValid(val))) {
            _internal_set_f1(static_cast<::hyperprotobench::M1_M2_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M2.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2.M3 f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M2.f8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M2.E1 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  // optional double f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_f4(), target);
  }

  // optional string f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M2.f5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f5(), target);
  }

  // optional int64 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M1.M2.M3 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f7(this), target, stream);
  }

  // optional string f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f8().data(), static_cast<int>(this->_internal_f8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M2.f8");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2)
  return target;
}

size_t M1_M2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f5 = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f5());
  }

  if (cached_has_bits & 0x00000300u) {
    // optional string f8 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f8());
    }

    // optional .hyperprotobench.M1.M2.M3 f7 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  if (cached_has_bits & 0x000000aeu) {
    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional double f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

    // optional .hyperprotobench.M1.M2.E1 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2)
    MergeFrom(*source);
  }
}

void M1_M2::MergeFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f5()) {
    _internal_set_f5(from._internal_f5());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f8(from._internal_f8());
    }
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_f7()->::hyperprotobench::M1_M2_M3::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x000000aeu) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2::CopyFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2::IsInitialized() const {
  return true;
}

void M1_M2::InternalSwap(M1_M2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f7_, other->f7_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M5::InitAsDefaultInstance() {
}
class M1_M5::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M5>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M5::M1_M5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M5)
}
M1_M5::M1_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M5)
}
M1_M5::M1_M5(const M1_M5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M5)
}

void M1_M5::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M5_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M1_M5::~M1_M5() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M5)
  SharedDtor();
}

void M1_M5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M5::ArenaDtor(void* object) {
  M1_M5* _this = reinterpret_cast< M1_M5* >(object);
  (void)_this;
}
void M1_M5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M5& M1_M5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M5_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M5::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M5.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M5.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M5)
  return target;
}

size_t M1_M5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M5)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M5)
    MergeFrom(*source);
  }
}

void M1_M5::MergeFrom(const M1_M5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M5::CopyFrom(const M1_M5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M5::IsInitialized() const {
  return true;
}

void M1_M5::InternalSwap(M1_M5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M1_M2*>(
      ::hyperprotobench::M1_M2::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M1_M5*>(
      ::hyperprotobench::M1_M5::internal_default_instance());
}
class M1::_Internal {
 public:
  using HasBits = decltype(std::declval<M1>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hyperprotobench::M1_M2& f5(const M1* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::hyperprotobench::M1_M5& f10(const M1* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::hyperprotobench::M1_M2&
M1::_Internal::f5(const M1* msg) {
  return *msg->f5_;
}
const ::hyperprotobench::M1_M5&
M1::_Internal::f10(const M1* msg) {
  return *msg->f10_;
}
void M1::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M1_M2* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f5)
}
void M1::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M1_M5* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f10)
}
M1::M1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1)
}
M1::M1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1)
}
M1::M1(const M1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f11()) {
    f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f11(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M1_M2(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M1_M5(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1)
}

void M1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f9_));
}

M1::~M1() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1)
  SharedDtor();
}

void M1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
  if (this != internal_default_instance()) delete f10_;
}

void M1::ArenaDtor(void* object) {
  M1* _this = reinterpret_cast< M1* >(object);
  (void)_this;
}
void M1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1& M1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000800u) {
    f8_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00040000u) {
    f11_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000020u) {
    GOOGLE_DCHECK(f5_ != nullptr);
    f5_->Clear();
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(f10_ != nullptr);
    f10_->Clear();
  }
  if (cached_has_bits & 0x00000058u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00008400u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M5 f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_f11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f11");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f1");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f1(), target);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional int32 f4 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M1.M2 f5 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f5(this), target, stream);
  }

  // optional int32 f6 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_f6(), target);
  }

  // optional int32 f7 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f7(), target);
  }

  // optional string f8 = 13;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f8().data(), static_cast<int>(this->_internal_f8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f8");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_f8(), target);
  }

  // optional int32 f9 = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f9(), target);
  }

  // optional .hyperprotobench.M1.M5 f10 = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::f10(this), target, stream);
  }

  // optional string f11 = 20;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f11().data(), static_cast<int>(this->_internal_f11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f11");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_f11(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1)
  return target;
}

size_t M1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

  }
  // optional string f8 = 13;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f8());
  }

  // optional string f11 = 20;
  if (cached_has_bits & 0x00040000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f11());
  }

  // optional .hyperprotobench.M1.M2 f5 = 7;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f5_);
  }

  // optional .hyperprotobench.M1.M5 f10 = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f10_);
  }

  if (cached_has_bits & 0x00000058u) {
    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f4 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional int32 f6 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

  }
  if (cached_has_bits & 0x00008400u) {
    // optional int32 f7 = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional int32 f9 = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  const M1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1)
    MergeFrom(*source);
  }
}

void M1::MergeFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00040000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_mutable_f5()->::hyperprotobench::M1_M2::MergeFrom(from._internal_f5());
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_mutable_f10()->::hyperprotobench::M1_M5::MergeFrom(from._internal_f10());
  }
  if (cached_has_bits & 0x00000058u) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00008400u) {
    if (cached_has_bits & 0x00000400u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00008000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1::CopyFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1::IsInitialized() const {
  return true;
}

void M1::InternalSwap(M1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f11_.Swap(&other->f11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f10_, other->f10_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M6_M7_M8_M9::InitAsDefaultInstance() {
}
class M6_M7_M8_M9::_Internal {
 public:
  using HasBits = decltype(std::declval<M6_M7_M8_M9>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M6_M7_M8_M9::M6_M7_M8_M9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M6.M7.M8.M9)
}
M6_M7_M8_M9::M6_M7_M8_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M6.M7.M8.M9)
}
M6_M7_M8_M9::M6_M7_M8_M9(const M6_M7_M8_M9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M6.M7.M8.M9)
}

void M6_M7_M8_M9::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M6_M7_M8_M9_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M6_M7_M8_M9::~M6_M7_M8_M9() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M6.M7.M8.M9)
  SharedDtor();
}

void M6_M7_M8_M9::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M6_M7_M8_M9::ArenaDtor(void* object) {
  M6_M7_M8_M9* _this = reinterpret_cast< M6_M7_M8_M9* >(object);
  (void)_this;
}
void M6_M7_M8_M9::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M6_M7_M8_M9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M6_M7_M8_M9& M6_M7_M8_M9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M6_M7_M8_M9_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M6_M7_M8_M9::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M6.M7.M8.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M6_M7_M8_M9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M6.M7.M8.M9.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M6_M7_M8_M9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M6.M7.M8.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M6.M7.M8.M9.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M6.M7.M8.M9)
  return target;
}

size_t M6_M7_M8_M9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M6.M7.M8.M9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional bytes f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M6_M7_M8_M9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M6.M7.M8.M9)
  GOOGLE_DCHECK_NE(&from, this);
  const M6_M7_M8_M9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M6_M7_M8_M9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M6.M7.M8.M9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M6.M7.M8.M9)
    MergeFrom(*source);
  }
}

void M6_M7_M8_M9::MergeFrom(const M6_M7_M8_M9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M6.M7.M8.M9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
  }
}

void M6_M7_M8_M9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M6.M7.M8.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M6_M7_M8_M9::CopyFrom(const M6_M7_M8_M9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M6.M7.M8.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M6_M7_M8_M9::IsInitialized() const {
  return true;
}

void M6_M7_M8_M9::InternalSwap(M6_M7_M8_M9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M6_M7_M8_M9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M6_M7_M8::InitAsDefaultInstance() {
  ::hyperprotobench::_M6_M7_M8_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M6_M7_M8_M9*>(
      ::hyperprotobench::M6_M7_M8_M9::internal_default_instance());
}
class M6_M7_M8::_Internal {
 public:
  using HasBits = decltype(std::declval<M6_M7_M8>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M6_M7_M8_M9& f2(const M6_M7_M8* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M6_M7_M8_M9&
M6_M7_M8::_Internal::f2(const M6_M7_M8* msg) {
  return *msg->f2_;
}
void M6_M7_M8::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M6_M7_M8_M9* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.M8.f2)
}
M6_M7_M8::M6_M7_M8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M6.M7.M8)
}
M6_M7_M8::M6_M7_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M6.M7.M8)
}
M6_M7_M8::M6_M7_M8(const M6_M7_M8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M6_M7_M8_M9(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M6.M7.M8)
}

void M6_M7_M8::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M6_M7_M8_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = nullptr;
}

M6_M7_M8::~M6_M7_M8() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M6.M7.M8)
  SharedDtor();
}

void M6_M7_M8::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M6_M7_M8::ArenaDtor(void* object) {
  M6_M7_M8* _this = reinterpret_cast< M6_M7_M8* >(object);
  (void)_this;
}
void M6_M7_M8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M6_M7_M8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M6_M7_M8& M6_M7_M8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M6_M7_M8_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M6_M7_M8::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M6.M7.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M6_M7_M8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M6.M7.M8.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M6.M7.M8.M9 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M6_M7_M8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M6.M7.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M6.M7.M8.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M6.M7.M8.M9 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M6.M7.M8)
  return target;
}

size_t M6_M7_M8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M6.M7.M8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M6.M7.M8.M9 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M6_M7_M8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M6.M7.M8)
  GOOGLE_DCHECK_NE(&from, this);
  const M6_M7_M8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M6_M7_M8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M6.M7.M8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M6.M7.M8)
    MergeFrom(*source);
  }
}

void M6_M7_M8::MergeFrom(const M6_M7_M8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M6.M7.M8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M6_M7_M8_M9::MergeFrom(from._internal_f2());
    }
  }
}

void M6_M7_M8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M6.M7.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M6_M7_M8::CopyFrom(const M6_M7_M8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M6.M7.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M6_M7_M8::IsInitialized() const {
  return true;
}

void M6_M7_M8::InternalSwap(M6_M7_M8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M6_M7_M8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M6_M7_M10::InitAsDefaultInstance() {
}
class M6_M7_M10::_Internal {
 public:
  using HasBits = decltype(std::declval<M6_M7_M10>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M6_M7_M10::M6_M7_M10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M6.M7.M10)
}
M6_M7_M10::M6_M7_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M6.M7.M10)
}
M6_M7_M10::M6_M7_M10(const M6_M7_M10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M6.M7.M10)
}

void M6_M7_M10::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M6_M7_M10_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M6_M7_M10::~M6_M7_M10() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M6.M7.M10)
  SharedDtor();
}

void M6_M7_M10::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M6_M7_M10::ArenaDtor(void* object) {
  M6_M7_M10* _this = reinterpret_cast< M6_M7_M10* >(object);
  (void)_this;
}
void M6_M7_M10::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M6_M7_M10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M6_M7_M10& M6_M7_M10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M6_M7_M10_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M6_M7_M10::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M6.M7.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M6_M7_M10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M6.M7.M10.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M6_M7_M10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M6.M7.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M6.M7.M10.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M6.M7.M10)
  return target;
}

size_t M6_M7_M10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M6.M7.M10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M6_M7_M10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M6.M7.M10)
  GOOGLE_DCHECK_NE(&from, this);
  const M6_M7_M10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M6_M7_M10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M6.M7.M10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M6.M7.M10)
    MergeFrom(*source);
  }
}

void M6_M7_M10::MergeFrom(const M6_M7_M10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M6.M7.M10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M6_M7_M10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M6.M7.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M6_M7_M10::CopyFrom(const M6_M7_M10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M6.M7.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M6_M7_M10::IsInitialized() const {
  return true;
}

void M6_M7_M10::InternalSwap(M6_M7_M10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M6_M7_M10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M6_M7::InitAsDefaultInstance() {
  ::hyperprotobench::_M6_M7_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M6_M7_M8*>(
      ::hyperprotobench::M6_M7_M8::internal_default_instance());
  ::hyperprotobench::_M6_M7_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M6_M7_M10*>(
      ::hyperprotobench::M6_M7_M10::internal_default_instance());
}
class M6_M7::_Internal {
 public:
  using HasBits = decltype(std::declval<M6_M7>()._has_bits_);
  static const ::hyperprotobench::M6_M7_M8& f1(const M6_M7* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M6_M7_M10& f8(const M6_M7* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::hyperprotobench::M6_M7_M8&
M6_M7::_Internal::f1(const M6_M7* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M6_M7_M10&
M6_M7::_Internal::f8(const M6_M7* msg) {
  return *msg->f8_;
}
void M6_M7::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M6_M7_M8* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.f1)
}
void M6_M7::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M6_M7_M10* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.M7.f8)
}
M6_M7::M6_M7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M6.M7)
}
M6_M7::M6_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M6.M7)
}
M6_M7::M6_M7(const M6_M7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M6_M7_M8(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M6_M7_M10(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M6.M7)
}

void M6_M7::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M6_M7_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  f6_ = 33;
}

M6_M7::~M6_M7() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M6.M7)
  SharedDtor();
}

void M6_M7::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f8_;
}

void M6_M7::ArenaDtor(void* object) {
  M6_M7* _this = reinterpret_cast< M6_M7* >(object);
  (void)_this;
}
void M6_M7::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M6_M7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M6_M7& M6_M7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M6_M7_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M6_M7::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M6.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000400u) {
    GOOGLE_DCHECK(f8_ != nullptr);
    f8_->Clear();
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f2_));
  }
  f7_ = false;
  if (cached_has_bits & 0x000000c0u) {
    f5_ = PROTOBUF_ULONGLONG(0);
    f6_ = 33;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M6_M7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M6.M7.M8 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M6.M7.E1 f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M6_M7_E1_IsValid(val))) {
            _internal_set_f6(static_cast<::hyperprotobench::M6_M7_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool f7 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M6.M7.M10 f8 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M6_M7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M6.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M6.M7.M8 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional double f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f3(), target);
  }

  // optional int64 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f4(), target);
  }

  // optional uint64 f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M6.M7.E1 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f6(), target);
  }

  // optional bool f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M6.M7.M10 f8 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f8(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M6.M7)
  return target;
}

size_t M6_M7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M6.M7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hyperprotobench.M6.M7.M8 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // optional .hyperprotobench.M6.M7.M10 f8 = 10;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f8_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional double f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int64 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  // optional bool f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional uint64 f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f5());
    }

    // optional .hyperprotobench.M6.M7.E1 f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M6_M7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M6.M7)
  GOOGLE_DCHECK_NE(&from, this);
  const M6_M7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M6_M7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M6.M7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M6.M7)
    MergeFrom(*source);
  }
}

void M6_M7::MergeFrom(const M6_M7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M6.M7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::hyperprotobench::M6_M7_M8::MergeFrom(from._internal_f1());
  }
  if (from._internal_has_f8()) {
    _internal_mutable_f8()->::hyperprotobench::M6_M7_M10::MergeFrom(from._internal_f8());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x000000c0u) {
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M6_M7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M6.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M6_M7::CopyFrom(const M6_M7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M6.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M6_M7::IsInitialized() const {
  return true;
}

void M6_M7::InternalSwap(M6_M7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f8_, other->f8_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f2_, other->f2_);
  swap(f7_, other->f7_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M6_M7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M6::InitAsDefaultInstance() {
  ::hyperprotobench::_M6_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M6_M7*>(
      ::hyperprotobench::M6_M7::internal_default_instance());
}
class M6::_Internal {
 public:
  using HasBits = decltype(std::declval<M6>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::hyperprotobench::M6_M7& f9(const M6* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::hyperprotobench::M6_M7&
M6::_Internal::f9(const M6* msg) {
  return *msg->f9_;
}
void M6::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M6_M7* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M6.f9)
}
M6::M6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M6)
}
M6::M6(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M6)
}
M6::M6(const M6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M6_M7(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M6)
}

void M6::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M6_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f9_)) + sizeof(f10_));
}

M6::~M6() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M6)
  SharedDtor();
}

void M6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f9_;
}

void M6::ArenaDtor(void* object) {
  M6* _this = reinterpret_cast< M6* >(object);
  (void)_this;
}
void M6::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M6& M6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M6_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M6::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00002000u) {
    f5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      f8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
  }
  f1_ = false;
  if (cached_has_bits & 0x00001a00u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  f11_ = 0;
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f7_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f7_));
  }
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M6.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M6.M7 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 f11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f2(), target);
  }

  // optional bool f3 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_f3(), target);
  }

  // optional fixed64 f4 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_f4(), target);
  }

  // optional string f5 = 13;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M6.f5");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_f5(), target);
  }

  // optional uint64 f6 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_f6(), target);
  }

  // optional uint64 f7 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_f7(), target);
  }

  // optional bytes f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M6.M7 f9 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::f9(this), target, stream);
  }

  // optional fixed64 f10 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(19, this->_internal_f10(), target);
  }

  // optional int32 f11 = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_f11(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M6)
  return target;
}

size_t M6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f5 = 13;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f5());
  }

  if (cached_has_bits & 0x00030000u) {
    // optional bytes f8 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f8());
    }

    // optional .hyperprotobench.M6.M7 f9 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

  }
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00001a00u) {
    // optional bool f3 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 f2 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional fixed64 f4 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  // optional int32 f11 = 20;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f11());
  }

  if (cached_has_bits & 0x0000c000u) {
    // optional uint64 f6 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f6());
    }

    // optional uint64 f7 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f7());
    }

  }
  // optional fixed64 f10 = 19;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M6)
  GOOGLE_DCHECK_NE(&from, this);
  const M6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M6)
    MergeFrom(*source);
  }
}

void M6::MergeFrom(const M6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f5()) {
    _internal_set_f5(from._internal_f5());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_f8(from._internal_f8());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_f9()->::hyperprotobench::M6_M7::MergeFrom(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00001a00u) {
    if (cached_has_bits & 0x00000800u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000200u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00001000u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x0000c000u) {
    if (cached_has_bits & 0x00004000u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00008000u) {
      f7_ = from.f7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00080000u) {
    _internal_set_f10(from._internal_f10());
  }
}

void M6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M6::CopyFrom(const M6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M6::IsInitialized() const {
  return true;
}

void M6::InternalSwap(M6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f9_, other->f9_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f11_, other->f11_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M12_M13_M14::InitAsDefaultInstance() {
}
class M11_M12_M13_M14::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M12_M13_M14>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

M11_M12_M13_M14::M11_M12_M13_M14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M12.M13.M14)
}
M11_M12_M13_M14::M11_M12_M13_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M12.M13.M14)
}
M11_M12_M13_M14::M11_M12_M13_M14(const M11_M12_M13_M14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M12.M13.M14)
}

void M11_M12_M13_M14::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  f5_ = 5;
}

M11_M12_M13_M14::~M11_M12_M13_M14() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M12.M13.M14)
  SharedDtor();
}

void M11_M12_M13_M14::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M11_M12_M13_M14::ArenaDtor(void* object) {
  M11_M12_M13_M14* _this = reinterpret_cast< M11_M12_M13_M14* >(object);
  (void)_this;
}
void M11_M12_M13_M14::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M12_M13_M14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M12_M13_M14& M11_M12_M13_M14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M12_M13_M14_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M12_M13_M14::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M12.M13.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000005eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
    f5_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M12_M13_M14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12.M13.M14.E1 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M11_M12_M13_M14_E1_IsValid(val))) {
            _internal_set_f5(static_cast<::hyperprotobench::M11_M12_M13_M14_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M12_M13_M14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M12.M13.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional bool f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_f3(), target);
  }

  // optional fixed32 f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M11.M12.M13.M14.E1 f5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M12.M13.M14)
  return target;
}

size_t M11_M12_M13_M14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M12.M13.M14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000005eu) {
    // optional int64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed64 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional bool f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed32 f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .hyperprotobench.M11.M12.M13.M14.E1 f5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M12_M13_M14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M12.M13.M14)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M12_M13_M14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M12_M13_M14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M12.M13.M14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M12.M13.M14)
    MergeFrom(*source);
  }
}

void M11_M12_M13_M14::MergeFrom(const M11_M12_M13_M14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M12.M13.M14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000005eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11_M12_M13_M14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M12.M13.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M12_M13_M14::CopyFrom(const M11_M12_M13_M14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M12.M13.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M12_M13_M14::IsInitialized() const {
  return true;
}

void M11_M12_M13_M14::InternalSwap(M11_M12_M13_M14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M12_M13_M14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M12_M13::InitAsDefaultInstance() {
  ::hyperprotobench::_M11_M12_M13_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M11_M12_M13_M14*>(
      ::hyperprotobench::M11_M12_M13_M14::internal_default_instance());
}
class M11_M12_M13::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M12_M13>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M11_M12_M13_M14& f2(const M11_M12_M13* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M11_M12_M13_M14&
M11_M12_M13::_Internal::f2(const M11_M12_M13* msg) {
  return *msg->f2_;
}
void M11_M12_M13::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M11_M12_M13_M14* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.M13.f2)
}
M11_M12_M13::M11_M12_M13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M12.M13)
}
M11_M12_M13::M11_M12_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M12.M13)
}
M11_M12_M13::M11_M12_M13(const M11_M12_M13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M11_M12_M13_M14(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M12.M13)
}

void M11_M12_M13::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_M12_M13_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M11_M12_M13::~M11_M12_M13() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M12.M13)
  SharedDtor();
}

void M11_M12_M13::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M11_M12_M13::ArenaDtor(void* object) {
  M11_M12_M13* _this = reinterpret_cast< M11_M12_M13* >(object);
  (void)_this;
}
void M11_M12_M13::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M12_M13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M12_M13& M11_M12_M13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M12_M13_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M12_M13::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M12.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M12_M13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12.M13.M14 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M12_M13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M12.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M11.M12.M13.M14 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M12.M13)
  return target;
}

size_t M11_M12_M13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M12.M13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M11.M12.M13.M14 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional bool f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M12_M13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M12.M13)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M12_M13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M12_M13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M12.M13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M12.M13)
    MergeFrom(*source);
  }
}

void M11_M12_M13::MergeFrom(const M11_M12_M13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M12.M13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M11_M12_M13_M14::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11_M12_M13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M12.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M12_M13::CopyFrom(const M11_M12_M13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M12.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M12_M13::IsInitialized() const {
  return true;
}

void M11_M12_M13::InternalSwap(M11_M12_M13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M12_M13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M12_M15::InitAsDefaultInstance() {
}
class M11_M12_M15::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M12_M15>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M11_M12_M15::M11_M12_M15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M12.M15)
}
M11_M12_M15::M11_M12_M15(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M12.M15)
}
M11_M12_M15::M11_M12_M15(const M11_M12_M15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M12.M15)
}

void M11_M12_M15::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_M12_M15_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_ = PROTOBUF_LONGLONG(0);
}

M11_M12_M15::~M11_M12_M15() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M12.M15)
  SharedDtor();
}

void M11_M12_M15::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M11_M12_M15::ArenaDtor(void* object) {
  M11_M12_M15* _this = reinterpret_cast< M11_M12_M15* >(object);
  (void)_this;
}
void M11_M12_M15::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M12_M15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M12_M15& M11_M12_M15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M12_M15_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M12_M15::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M12.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M12_M15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.M12.M15.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.M12.M15.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M12_M15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M12.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.M12.M15.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional string f2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.M12.M15.f2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_f2(), target);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M12.M15)
  return target;
}

size_t M11_M12_M15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M12.M15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000032u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M12_M15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M12.M15)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M12_M15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M12_M15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M12.M15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M12.M15)
    MergeFrom(*source);
  }
}

void M11_M12_M15::MergeFrom(const M11_M12_M15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M12.M15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000032u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11_M12_M15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M12.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M12_M15::CopyFrom(const M11_M12_M15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M12.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M12_M15::IsInitialized() const {
  return true;
}

void M11_M12_M15::InternalSwap(M11_M12_M15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M12_M15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M12::InitAsDefaultInstance() {
  ::hyperprotobench::_M11_M12_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M11_M12_M13*>(
      ::hyperprotobench::M11_M12_M13::internal_default_instance());
  ::hyperprotobench::_M11_M12_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M11_M12_M15*>(
      ::hyperprotobench::M11_M12_M15::internal_default_instance());
}
class M11_M12::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M12>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hyperprotobench::M11_M12_M13& f4(const M11_M12* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M11_M12_M15& f5(const M11_M12* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M11_M12_M13&
M11_M12::_Internal::f4(const M11_M12* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M11_M12_M15&
M11_M12::_Internal::f5(const M11_M12* msg) {
  return *msg->f5_;
}
void M11_M12::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M11_M12_M13* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.f4)
}
void M11_M12::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M11_M12_M15* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.M12.f5)
}
M11_M12::M11_M12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M12)
}
M11_M12::M11_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M12)
}
M11_M12::M11_M12(const M11_M12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M11_M12_M13(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M11_M12_M15(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M12)
}

void M11_M12::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_M12_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f3_));
}

M11_M12::~M11_M12() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M12)
  SharedDtor();
}

void M11_M12::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f5_;
}

void M11_M12::ArenaDtor(void* object) {
  M11_M12* _this = reinterpret_cast< M11_M12* >(object);
  (void)_this;
}
void M11_M12::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M12& M11_M12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M12_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M12::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000c6u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
  }
  f3_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.M12.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12.M13 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12.M15 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.M12.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M11.M12.M13 f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f4(this), target, stream);
  }

  // optional .hyperprotobench.M11.M12.M15 f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f5(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M12)
  return target;
}

size_t M11_M12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000d6u) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M11.M12.M13 f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional .hyperprotobench.M11.M12.M15 f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional int32 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M12)
    MergeFrom(*source);
  }
}

void M11_M12::MergeFrom(const M11_M12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000d6u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_f4()->::hyperprotobench::M11_M12_M13::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_f5()->::hyperprotobench::M11_M12_M15::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11_M12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M12::CopyFrom(const M11_M12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M12::IsInitialized() const {
  return true;
}

void M11_M12::InternalSwap(M11_M12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M16::InitAsDefaultInstance() {
}
class M11_M16::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M16>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M11_M16::M11_M16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M16)
}
M11_M16::M11_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M16)
}
M11_M16::M11_M16(const M11_M16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M16)
}

void M11_M16::SharedCtor() {
  f1_ = false;
}

M11_M16::~M11_M16() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M16)
  SharedDtor();
}

void M11_M16::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M11_M16::ArenaDtor(void* object) {
  M11_M16* _this = reinterpret_cast< M11_M16* >(object);
  (void)_this;
}
void M11_M16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M16& M11_M16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M16_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M16::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M16)
  return target;
}

size_t M11_M16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M16)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M16)
    MergeFrom(*source);
  }
}

void M11_M16::MergeFrom(const M11_M16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M11_M16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M16::CopyFrom(const M11_M16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M16::IsInitialized() const {
  return true;
}

void M11_M16::InternalSwap(M11_M16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11::InitAsDefaultInstance() {
  ::hyperprotobench::_M11_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M11_M12*>(
      ::hyperprotobench::M11_M12::internal_default_instance());
  ::hyperprotobench::_M11_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M11_M16*>(
      ::hyperprotobench::M11_M16::internal_default_instance());
}
class M11::_Internal {
 public:
  using HasBits = decltype(std::declval<M11>()._has_bits_);
  static const ::hyperprotobench::M11_M12& f1(const M11* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M11_M16& f4(const M11* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::hyperprotobench::M11_M12&
M11::_Internal::f1(const M11* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M11_M16&
M11::_Internal::f4(const M11* msg) {
  return *msg->f4_;
}
void M11::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M11_M12* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f1)
}
void M11::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M11_M16* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f4)
}
M11::M11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11)
}
M11::M11(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11)
}
M11::M11(const M11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M11_M12(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M11_M16(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f5_, &from.f5_,
    static_cast<size_t>(reinterpret_cast<char*>(&f13_) -
    reinterpret_cast<char*>(&f5_)) + sizeof(f13_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11)
}

void M11::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f13_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f13_));
}

M11::~M11() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11)
  SharedDtor();
}

void M11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f4_;
}

void M11::ArenaDtor(void* object) {
  M11* _this = reinterpret_cast< M11* >(object);
  (void)_this;
}
void M11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11& M11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000009eu) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00007d00u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f13_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f13_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M11.M12 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M16 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool f9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f11 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f12 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f13 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_f13(&has_bits);
          f13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M11.M12 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional string f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.f3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M11.M16 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f4(this), target, stream);
  }

  // optional int32 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f5(), target);
  }

  // optional int32 f6 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f6(), target);
  }

  // optional string f7 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.f7");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f7(), target);
  }

  // optional fixed64 f8 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_f8(), target);
  }

  // optional bool f9 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_f9(), target);
  }

  // optional bool f10 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_f10(), target);
  }

  // optional int32 f11 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f11(), target);
  }

  // optional int64 f12 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f12(), target);
  }

  // optional fixed64 f13 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_f13(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11)
  return target;
}

size_t M11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional string f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional string f7 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

    // optional .hyperprotobench.M11.M12 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M11.M16 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int32 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

    // optional int32 f6 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

  }
  if (cached_has_bits & 0x00007d00u) {
    // optional fixed64 f8 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional bool f9 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool f10 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int32 f11 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f11());
    }

    // optional int64 f12 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f12());
    }

    // optional fixed64 f13 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11)
  GOOGLE_DCHECK_NE(&from, this);
  const M11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11)
    MergeFrom(*source);
  }
}

void M11::MergeFrom(const M11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M11_M12::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f4()->::hyperprotobench::M11_M16::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000040u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007d00u) {
    if (cached_has_bits & 0x00000100u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000400u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00000800u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00001000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00002000u) {
      f12_ = from.f12_;
    }
    if (cached_has_bits & 0x00004000u) {
      f13_ = from.f13_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11::CopyFrom(const M11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11::IsInitialized() const {
  return true;
}

void M11::InternalSwap(M11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f12_, other->f12_);
  swap(f13_, other->f13_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17_M18_M19_M20::InitAsDefaultInstance() {
}
class M17_M18_M19_M20::_Internal {
 public:
  using HasBits = decltype(std::declval<M17_M18_M19_M20>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M17_M18_M19_M20::M17_M18_M19_M20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17.M18.M19.M20)
}
M17_M18_M19_M20::M17_M18_M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17.M18.M19.M20)
}
M17_M18_M19_M20::M17_M18_M19_M20(const M17_M18_M19_M20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17.M18.M19.M20)
}

void M17_M18_M19_M20::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M17_M18_M19_M20::~M17_M18_M19_M20() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17.M18.M19.M20)
  SharedDtor();
}

void M17_M18_M19_M20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M17_M18_M19_M20::ArenaDtor(void* object) {
  M17_M18_M19_M20* _this = reinterpret_cast< M17_M18_M19_M20* >(object);
  (void)_this;
}
void M17_M18_M19_M20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17_M18_M19_M20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17_M18_M19_M20& M17_M18_M19_M20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_M18_M19_M20_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17_M18_M19_M20::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17.M18.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17_M18_M19_M20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17_M18_M19_M20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17.M18.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17.M18.M19.M20)
  return target;
}

size_t M17_M18_M19_M20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17.M18.M19.M20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 f1 = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17_M18_M19_M20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17.M18.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  const M17_M18_M19_M20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17_M18_M19_M20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17.M18.M19.M20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17.M18.M19.M20)
    MergeFrom(*source);
  }
}

void M17_M18_M19_M20::MergeFrom(const M17_M18_M19_M20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17.M18.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M17_M18_M19_M20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17.M18.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17_M18_M19_M20::CopyFrom(const M17_M18_M19_M20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17.M18.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17_M18_M19_M20::IsInitialized() const {
  return true;
}

void M17_M18_M19_M20::InternalSwap(M17_M18_M19_M20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17_M18_M19_M20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17_M18_M19::InitAsDefaultInstance() {
  ::hyperprotobench::_M17_M18_M19_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M17_M18_M19_M20*>(
      ::hyperprotobench::M17_M18_M19_M20::internal_default_instance());
}
class M17_M18_M19::_Internal {
 public:
  using HasBits = decltype(std::declval<M17_M18_M19>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M17_M18_M19_M20& f2(const M17_M18_M19* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M17_M18_M19_M20&
M17_M18_M19::_Internal::f2(const M17_M18_M19* msg) {
  return *msg->f2_;
}
void M17_M18_M19::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M17_M18_M19_M20* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.M18.M19.f2)
}
M17_M18_M19::M17_M18_M19()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17.M18.M19)
}
M17_M18_M19::M17_M18_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17.M18.M19)
}
M17_M18_M19::M17_M18_M19(const M17_M18_M19& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M17_M18_M19_M20(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17.M18.M19)
}

void M17_M18_M19::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M17_M18_M19_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
}

M17_M18_M19::~M17_M18_M19() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17.M18.M19)
  SharedDtor();
}

void M17_M18_M19::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M17_M18_M19::ArenaDtor(void* object) {
  M17_M18_M19* _this = reinterpret_cast< M17_M18_M19* >(object);
  (void)_this;
}
void M17_M18_M19::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17_M18_M19::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17_M18_M19& M17_M18_M19::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_M18_M19_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17_M18_M19::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17.M18.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000012u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17_M18_M19::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M17.M18.M19.M20 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M17.M18.M19.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17_M18_M19::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17.M18.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M17.M18.M19.M20 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional string f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M17.M18.M19.f3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f3(), target);
  }

  // optional int32 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17.M18.M19)
  return target;
}

size_t M17_M18_M19::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17.M18.M19)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M17.M18.M19.M20 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17_M18_M19::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17.M18.M19)
  GOOGLE_DCHECK_NE(&from, this);
  const M17_M18_M19* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17_M18_M19>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17.M18.M19)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17.M18.M19)
    MergeFrom(*source);
  }
}

void M17_M18_M19::MergeFrom(const M17_M18_M19& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17.M18.M19)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M17_M18_M19_M20::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M17_M18_M19::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17.M18.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17_M18_M19::CopyFrom(const M17_M18_M19& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17.M18.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17_M18_M19::IsInitialized() const {
  return true;
}

void M17_M18_M19::InternalSwap(M17_M18_M19* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17_M18_M19::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17_M18::InitAsDefaultInstance() {
  ::hyperprotobench::_M17_M18_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M17_M18_M19*>(
      ::hyperprotobench::M17_M18_M19::internal_default_instance());
}
class M17_M18::_Internal {
 public:
  using HasBits = decltype(std::declval<M17_M18>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M17_M18_M19& f2(const M17_M18* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M17_M18_M19&
M17_M18::_Internal::f2(const M17_M18* msg) {
  return *msg->f2_;
}
void M17_M18::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M17_M18_M19* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.M18.f2)
}
M17_M18::M17_M18()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17.M18)
}
M17_M18::M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17.M18)
}
M17_M18::M17_M18(const M17_M18& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M17_M18_M19(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17.M18)
}

void M17_M18::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M17_M18_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M17_M18::~M17_M18() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17.M18)
  SharedDtor();
}

void M17_M18::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M17_M18::ArenaDtor(void* object) {
  M17_M18* _this = reinterpret_cast< M17_M18* >(object);
  (void)_this;
}
void M17_M18::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17_M18::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17_M18& M17_M18::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_M18_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17_M18::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17_M18::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M17.M18.M19 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M17.M18.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17_M18::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M17.M18.M19 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional string f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M17.M18.f3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17.M18)
  return target;
}

size_t M17_M18::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17.M18)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M17.M18.M19 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional double f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17_M18::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  const M17_M18* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17_M18>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17.M18)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17.M18)
    MergeFrom(*source);
  }
}

void M17_M18::MergeFrom(const M17_M18& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M17_M18_M19::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M17_M18::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17_M18::CopyFrom(const M17_M18& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17_M18::IsInitialized() const {
  return true;
}

void M17_M18::InternalSwap(M17_M18* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17_M18::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17::InitAsDefaultInstance() {
  ::hyperprotobench::_M17_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M17_M18*>(
      ::hyperprotobench::M17_M18::internal_default_instance());
}
class M17::_Internal {
 public:
  using HasBits = decltype(std::declval<M17>()._has_bits_);
  static const ::hyperprotobench::M17_M18& f1(const M17* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M17_M18&
M17::_Internal::f1(const M17* msg) {
  return *msg->f1_;
}
void M17::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M17_M18* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f1)
}
M17::M17()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17)
}
M17::M17(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17)
}
M17::M17(const M17& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M17_M18(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17)
}

void M17::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M17_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M17::~M17() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17)
  SharedDtor();
}

void M17::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M17::ArenaDtor(void* object) {
  M17* _this = reinterpret_cast< M17* >(object);
  (void)_this;
}
void M17::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17& M17::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
  }
  if (cached_has_bits & 0x000000a0u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M17.M18 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M17.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M17.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M17.M18 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M17.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional string f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M17.f4");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f4(), target);
  }

  // optional fixed64 f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17)
  return target;
}

size_t M17::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e6u) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional string f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

    // optional .hyperprotobench.M17.M18 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional fixed64 f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17)
  GOOGLE_DCHECK_NE(&from, this);
  const M17* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17)
    MergeFrom(*source);
  }
}

void M17::MergeFrom(const M17& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000e6u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M17_M18::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M17::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17::CopyFrom(const M17& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17::IsInitialized() const {
  return true;
}

void M17::InternalSwap(M17* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M22_M23_M24::InitAsDefaultInstance() {
}
class M21_M22_M23_M24::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M22_M23_M24>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M21_M22_M23_M24::M21_M22_M23_M24()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M22.M23.M24)
}
M21_M22_M23_M24::M21_M22_M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M22.M23.M24)
}
M21_M22_M23_M24::M21_M22_M23_M24(const M21_M22_M23_M24& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M22.M23.M24)
}

void M21_M22_M23_M24::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M21_M22_M23_M24::~M21_M22_M23_M24() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M22.M23.M24)
  SharedDtor();
}

void M21_M22_M23_M24::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M21_M22_M23_M24::ArenaDtor(void* object) {
  M21_M22_M23_M24* _this = reinterpret_cast< M21_M22_M23_M24* >(object);
  (void)_this;
}
void M21_M22_M23_M24::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M22_M23_M24::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M22_M23_M24& M21_M22_M23_M24::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M22_M23_M24_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M22_M23_M24::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M22.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000d2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M22_M23_M24::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M22_M23_M24::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M22.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f2(), target);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  // optional int32 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M22.M23.M24)
  return target;
}

size_t M21_M22_M23_M24::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M22.M23.M24)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000d2u) {
    // optional fixed32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional int32 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M22_M23_M24::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M22.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M22_M23_M24* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M22_M23_M24>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M22.M23.M24)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M22.M23.M24)
    MergeFrom(*source);
  }
}

void M21_M22_M23_M24::MergeFrom(const M21_M22_M23_M24& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M22.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000d2u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M21_M22_M23_M24::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M22.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M22_M23_M24::CopyFrom(const M21_M22_M23_M24& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M22.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M22_M23_M24::IsInitialized() const {
  return true;
}

void M21_M22_M23_M24::InternalSwap(M21_M22_M23_M24* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M22_M23_M24::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M22_M23::InitAsDefaultInstance() {
  ::hyperprotobench::_M21_M22_M23_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M21_M22_M23_M24*>(
      ::hyperprotobench::M21_M22_M23_M24::internal_default_instance());
}
class M21_M22_M23::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M22_M23>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M21_M22_M23_M24& f2(const M21_M22_M23* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::hyperprotobench::M21_M22_M23_M24&
M21_M22_M23::_Internal::f2(const M21_M22_M23* msg) {
  return *msg->f2_;
}
void M21_M22_M23::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M21_M22_M23_M24* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.M23.f2)
}
M21_M22_M23::M21_M22_M23()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M22.M23)
}
M21_M22_M23::M21_M22_M23(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M22.M23)
}
M21_M22_M23::M21_M22_M23(const M21_M22_M23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M21_M22_M23_M24(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M22.M23)
}

void M21_M22_M23::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_M22_M23_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
}

M21_M22_M23::~M21_M22_M23() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M22.M23)
  SharedDtor();
}

void M21_M22_M23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M21_M22_M23::ArenaDtor(void* object) {
  M21_M22_M23* _this = reinterpret_cast< M21_M22_M23* >(object);
  (void)_this;
}
void M21_M22_M23::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M22_M23::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M22_M23& M21_M22_M23::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M22_M23_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M22_M23::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M22.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000088u) {
    if (cached_has_bits & 0x00000080u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000052u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  f6_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M22_M23::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M22.M23.M24 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M21.M22.M23.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M22_M23::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M22.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M21.M22.M23.M24 f2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::f2(this), target, stream);
  }

  // optional int32 f3 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f3(), target);
  }

  // optional bool f4 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_f4(), target);
  }

  // optional string f5 = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M21.M22.M23.f5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f5(), target);
  }

  // optional fixed32 f6 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M22.M23)
  return target;
}

size_t M21_M22_M23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M22.M23)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000dau) {
    // optional string f5 = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional .hyperprotobench.M21.M22.M23.M24 f2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional bool f4 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  // optional fixed32 f6 = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M22_M23::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M22.M23)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M22_M23* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M22_M23>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M22.M23)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M22.M23)
    MergeFrom(*source);
  }
}

void M21_M22_M23::MergeFrom(const M21_M22_M23& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M22.M23)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000dau) {
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M21_M22_M23_M24::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_f6(from._internal_f6());
  }
}

void M21_M22_M23::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M22.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M22_M23::CopyFrom(const M21_M22_M23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M22.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M22_M23::IsInitialized() const {
  return true;
}

void M21_M22_M23::InternalSwap(M21_M22_M23* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M22_M23::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M22::InitAsDefaultInstance() {
  ::hyperprotobench::_M21_M22_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M21_M22_M23*>(
      ::hyperprotobench::M21_M22_M23::internal_default_instance());
}
class M21_M22::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M22>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M21_M22_M23& f2(const M21_M22* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M21_M22_M23&
M21_M22::_Internal::f2(const M21_M22* msg) {
  return *msg->f2_;
}
void M21_M22::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M21_M22_M23* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.f2)
}
M21_M22::M21_M22()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M22)
}
M21_M22::M21_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M22)
}
M21_M22::M21_M22(const M21_M22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M21_M22_M23(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M22)
}

void M21_M22::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_M22_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
}

M21_M22::~M21_M22() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M22)
  SharedDtor();
}

void M21_M22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M21_M22::ArenaDtor(void* object) {
  M21_M22* _this = reinterpret_cast< M21_M22* >(object);
  (void)_this;
}
void M21_M22::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M22& M21_M22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M22_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M22::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  if (cached_has_bits & 0x000000a2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M22.M23 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M21.M22.M23 f2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::f2(this), target, stream);
  }

  // optional uint64 f3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_f3(), target);
  }

  // optional double f4 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M22)
  return target;
}

size_t M21_M22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000b2u) {
    // optional .hyperprotobench.M21.M22.M23 f2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional bool f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint64 f3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f3());
    }

    // optional double f4 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M22)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M22)
    MergeFrom(*source);
  }
}

void M21_M22::MergeFrom(const M21_M22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000b2u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M21_M22_M23::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M21_M22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M22::CopyFrom(const M21_M22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M22::IsInitialized() const {
  return true;
}

void M21_M22::InternalSwap(M21_M22* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21::InitAsDefaultInstance() {
  ::hyperprotobench::_M21_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M21_M22*>(
      ::hyperprotobench::M21_M22::internal_default_instance());
}
class M21::_Internal {
 public:
  using HasBits = decltype(std::declval<M21>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hyperprotobench::M21_M22& f4(const M21* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M21_M22&
M21::_Internal::f4(const M21* msg) {
  return *msg->f4_;
}
void M21::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M21_M22* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f4)
}
M21::M21()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21)
}
M21::M21(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21)
}
M21::M21(const M21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M21_M22(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21)
}

void M21::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f7_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f7_));
}

M21::~M21() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21)
  SharedDtor();
}

void M21::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M21::ArenaDtor(void* object) {
  M21* _this = reinterpret_cast< M21* >(object);
  (void)_this;
}
void M21::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21& M21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    f3_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000040u) {
    GOOGLE_DCHECK(f4_ != nullptr);
    f4_->Clear();
  }
  if (cached_has_bits & 0x0000008au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M21.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M22 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f7 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_f2(), target);
  }

  // optional string f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M21.f3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M21.M22 f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f4(this), target, stream);
  }

  // optional bool f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_f5(), target);
  }

  // optional bytes f6 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f6(), target);
  }

  // optional uint64 f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21)
  return target;
}

size_t M21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f3 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f3());
  }

  // optional bytes f6 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x000000cau) {
    // optional .hyperprotobench.M21.M22 f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional uint64 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

    // optional bool f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint64 f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f7());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21)
  GOOGLE_DCHECK_NE(&from, this);
  const M21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21)
    MergeFrom(*source);
  }
}

void M21::MergeFrom(const M21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f3()) {
    _internal_set_f3(from._internal_f3());
  }
  if (from._internal_has_f6()) {
    _internal_set_f6(from._internal_f6());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000cau) {
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_f4()->::hyperprotobench::M21_M22::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f7(from._internal_f7());
  }
}

void M21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21::CopyFrom(const M21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21::IsInitialized() const {
  return true;
}

void M21::InternalSwap(M21* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M26_M27_M28::InitAsDefaultInstance() {
}
class M25_M26_M27_M28::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M26_M27_M28>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M25_M26_M27_M28::M25_M26_M27_M28()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M26.M27.M28)
}
M25_M26_M27_M28::M25_M26_M27_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M26.M27.M28)
}
M25_M26_M27_M28::M25_M26_M27_M28(const M25_M26_M27_M28& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M26.M27.M28)
}

void M25_M26_M27_M28::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M26_M27_M28_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_ = false;
}

M25_M26_M27_M28::~M25_M26_M27_M28() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M26.M27.M28)
  SharedDtor();
}

void M25_M26_M27_M28::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M25_M26_M27_M28::ArenaDtor(void* object) {
  M25_M26_M27_M28* _this = reinterpret_cast< M25_M26_M27_M28* >(object);
  (void)_this;
}
void M25_M26_M27_M28::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M26_M27_M28::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M26_M27_M28& M25_M26_M27_M28::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M26_M27_M28_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M26_M27_M28::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M26.M27.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  f3_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M26_M27_M28::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.M26.M27.M28.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.M26.M27.M28.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M26_M27_M28::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M26.M27.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.M26.M27.M28.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.M26.M27.M28.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional bool f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M26.M27.M28)
  return target;
}

size_t M25_M26_M27_M28::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M26.M27.M28)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000032u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional bool f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M26_M27_M28::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M26.M27.M28)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M26_M27_M28* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M26_M27_M28>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M26.M27.M28)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M26.M27.M28)
    MergeFrom(*source);
  }
}

void M25_M26_M27_M28::MergeFrom(const M25_M26_M27_M28& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M26.M27.M28)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000032u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M25_M26_M27_M28::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M26.M27.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M26_M27_M28::CopyFrom(const M25_M26_M27_M28& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M26.M27.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M26_M27_M28::IsInitialized() const {
  return true;
}

void M25_M26_M27_M28::InternalSwap(M25_M26_M27_M28* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M26_M27_M28::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M26_M27::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_M26_M27_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M25_M26_M27_M28*>(
      ::hyperprotobench::M25_M26_M27_M28::internal_default_instance());
}
class M25_M26_M27::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M26_M27>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M25_M26_M27_M28& f5(const M25_M26_M27* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::hyperprotobench::M25_M26_M27_M28&
M25_M26_M27::_Internal::f5(const M25_M26_M27* msg) {
  return *msg->f5_;
}
void M25_M26_M27::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M25_M26_M27_M28* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.M27.f5)
}
M25_M26_M27::M25_M26_M27()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M26.M27)
}
M25_M26_M27::M25_M26_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M26.M27)
}
M25_M26_M27::M25_M26_M27(const M25_M26_M27& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M25_M26_M27_M28(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M26.M27)
}

void M25_M26_M27::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M26_M27_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f3_));
  f4_ = 100;
}

M25_M26_M27::~M25_M26_M27() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M26.M27)
  SharedDtor();
}

void M25_M26_M27::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
}

void M25_M26_M27::ArenaDtor(void* object) {
  M25_M26_M27* _this = reinterpret_cast< M25_M26_M27* >(object);
  (void)_this;
}
void M25_M26_M27::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M26_M27::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M26_M27& M25_M26_M27::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M26_M27_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M26_M27::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f5_ != nullptr);
    f5_->Clear();
  }
  if (cached_has_bits & 0x000000a2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
    f4_ = 100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M26_M27::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.M26.M27.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26.M27.E1 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M25_M26_M27_E1_IsValid(val))) {
            _internal_set_f4(static_cast<::hyperprotobench::M25_M26_M27_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26.M27.M28 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M26_M27::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.M26.M27.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M25.M26.M27.E1 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M25.M26.M27.M28 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f5(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M26.M27)
  return target;
}

size_t M25_M26_M27::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M26.M27)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f2 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f2());
  }

  // optional .hyperprotobench.M25.M26.M27.M28 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f5_);
  }

  if (cached_has_bits & 0x000000a2u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M25.M26.M27.E1 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M26_M27::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M26_M27* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M26_M27>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M26.M27)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M26.M27)
    MergeFrom(*source);
  }
}

void M25_M26_M27::MergeFrom(const M25_M26_M27& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f5()) {
    _internal_mutable_f5()->::hyperprotobench::M25_M26_M27_M28::MergeFrom(from._internal_f5());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000a2u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M25_M26_M27::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M26_M27::CopyFrom(const M25_M26_M27& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M26_M27::IsInitialized() const {
  return true;
}

void M25_M26_M27::InternalSwap(M25_M26_M27* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M26_M27::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M26::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_M26_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M25_M26_M27*>(
      ::hyperprotobench::M25_M26_M27::internal_default_instance());
}
class M25_M26::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M26>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M25_M26_M27& f2(const M25_M26* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M25_M26_M27&
M25_M26::_Internal::f2(const M25_M26* msg) {
  return *msg->f2_;
}
void M25_M26::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M25_M26_M27* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.f2)
}
M25_M26::M25_M26()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M26)
}
M25_M26::M25_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M26)
}
M25_M26::M25_M26(const M25_M26& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M25_M26_M27(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M26)
}

void M25_M26::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M26_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = nullptr;
}

M25_M26::~M25_M26() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M26)
  SharedDtor();
}

void M25_M26::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M25_M26::ArenaDtor(void* object) {
  M25_M26* _this = reinterpret_cast< M25_M26* >(object);
  (void)_this;
}
void M25_M26::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M26::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M26& M25_M26::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M26_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M26::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M26::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.M26.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26.M27 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M26::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.M26.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M25.M26.M27 f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M26)
  return target;
}

size_t M25_M26::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M26)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M25.M26.M27 f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M26::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M26)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M26* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M26>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M26)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M26)
    MergeFrom(*source);
  }
}

void M25_M26::MergeFrom(const M25_M26& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M26)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f2()->::hyperprotobench::M25_M26_M27::MergeFrom(from._internal_f2());
    }
  }
}

void M25_M26::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M26::CopyFrom(const M25_M26& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M26::IsInitialized() const {
  return true;
}

void M25_M26::InternalSwap(M25_M26* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M26::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M29::InitAsDefaultInstance() {
}
class M25_M29::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M29>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M25_M29::M25_M29()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M29)
}
M25_M29::M25_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M29)
}
M25_M29::M25_M29(const M25_M29& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M29)
}

void M25_M29::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M29_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M25_M29::~M25_M29() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M29)
  SharedDtor();
}

void M25_M29::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M25_M29::ArenaDtor(void* object) {
  M25_M29* _this = reinterpret_cast< M25_M29* >(object);
  (void)_this;
}
void M25_M29::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M29::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M29& M25_M29::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M29_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M29::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M29::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.M29.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M29::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.M29.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M29)
  return target;
}

size_t M25_M29::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M29)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M29::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M29)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M29* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M29>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M29)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M29)
    MergeFrom(*source);
  }
}

void M25_M29::MergeFrom(const M25_M29& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M29)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M25_M29::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M29::CopyFrom(const M25_M29& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M29::IsInitialized() const {
  return true;
}

void M25_M29::InternalSwap(M25_M29* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M29::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M25_M26*>(
      ::hyperprotobench::M25_M26::internal_default_instance());
  ::hyperprotobench::_M25_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M25_M29*>(
      ::hyperprotobench::M25_M29::internal_default_instance());
}
class M25::_Internal {
 public:
  using HasBits = decltype(std::declval<M25>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M25_M26& f2(const M25* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M25_M29& f5(const M25* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::hyperprotobench::M25_M26&
M25::_Internal::f2(const M25* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M25_M29&
M25::_Internal::f5(const M25* msg) {
  return *msg->f5_;
}
void M25::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M25_M26* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f2)
}
void M25::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M25_M29* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f5)
}
M25::M25()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25)
}
M25::M25(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25)
}
M25::M25(const M25& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M25_M26(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M25_M29(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25)
}

void M25::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f9_));
}

M25::~M25() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25)
  SharedDtor();
}

void M25::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f5_;
}

void M25::ArenaDtor(void* object) {
  M25* _this = reinterpret_cast< M25* >(object);
  (void)_this;
}
void M25::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25& M25::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
  }
  if (cached_has_bits & 0x00000048u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M29 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f9 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M25.M26 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional fixed64 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_f3(), target);
  }

  // optional uint64 f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M25.M29 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f5(this), target, stream);
  }

  // optional int32 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f6(), target);
  }

  // optional int32 f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f7(), target);
  }

  // optional uint64 f8 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_f8(), target);
  }

  // optional double f9 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25)
  return target;
}

size_t M25::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ceu) {
    // optional bytes f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M25.M26 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M25.M29 f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional fixed64 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint64 f4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 f6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

    // optional int32 f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional uint64 f8 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f8());
    }

    // optional double f9 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25)
  GOOGLE_DCHECK_NE(&from, this);
  const M25* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25)
    MergeFrom(*source);
  }
}

void M25::MergeFrom(const M25& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ceu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M25_M26::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_f5()->::hyperprotobench::M25_M29::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000800u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M25::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25::CopyFrom(const M25& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25::IsInitialized() const {
  return true;
}

void M25::InternalSwap(M25* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f5_, other->f5_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M31_M32_M33::InitAsDefaultInstance() {
}
class M30_M31_M32_M33::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M31_M32_M33>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M30_M31_M32_M33::M30_M31_M32_M33()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M31.M32.M33)
}
M30_M31_M32_M33::M30_M31_M32_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M31.M32.M33)
}
M30_M31_M32_M33::M30_M31_M32_M33(const M30_M31_M32_M33& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M31.M32.M33)
}

void M30_M31_M32_M33::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M31_M32_M33_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = 0;
}

M30_M31_M32_M33::~M30_M31_M32_M33() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M31.M32.M33)
  SharedDtor();
}

void M30_M31_M32_M33::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M30_M31_M32_M33::ArenaDtor(void* object) {
  M30_M31_M32_M33* _this = reinterpret_cast< M30_M31_M32_M33* >(object);
  (void)_this;
}
void M30_M31_M32_M33::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M31_M32_M33::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M31_M32_M33& M30_M31_M32_M33::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M31_M32_M33_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M31_M32_M33::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M31.M32.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000d0u) {
    if (cached_has_bits & 0x00000010u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M31_M32_M33::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M31.M32.M33.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M31.M32.M33.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M31_M32_M33::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M31.M32.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M31.M32.M33.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional bytes f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f3(), target);
  }

  // optional string f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M31.M32.M33.f4");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M31.M32.M33)
  return target;
}

size_t M30_M31_M32_M33::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M31.M32.M33)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000d2u) {
    // optional string f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional bytes f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional string f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M31_M32_M33::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M31.M32.M33)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M31_M32_M33* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M31_M32_M33>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M31.M32.M33)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M31.M32.M33)
    MergeFrom(*source);
  }
}

void M30_M31_M32_M33::MergeFrom(const M30_M31_M32_M33& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M31.M32.M33)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000d2u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M30_M31_M32_M33::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M31.M32.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M31_M32_M33::CopyFrom(const M30_M31_M32_M33& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M31.M32.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M31_M32_M33::IsInitialized() const {
  return true;
}

void M30_M31_M32_M33::InternalSwap(M30_M31_M32_M33* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M31_M32_M33::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M31_M32_M34::InitAsDefaultInstance() {
}
class M30_M31_M32_M34::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M31_M32_M34>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M30_M31_M32_M34::M30_M31_M32_M34()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M31.M32.M34)
}
M30_M31_M32_M34::M30_M31_M32_M34(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M31.M32.M34)
}
M30_M31_M32_M34::M30_M31_M32_M34(const M30_M31_M32_M34& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M31.M32.M34)
}

void M30_M31_M32_M34::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M30_M31_M32_M34::~M30_M31_M32_M34() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M31.M32.M34)
  SharedDtor();
}

void M30_M31_M32_M34::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M30_M31_M32_M34::ArenaDtor(void* object) {
  M30_M31_M32_M34* _this = reinterpret_cast< M30_M31_M32_M34* >(object);
  (void)_this;
}
void M30_M31_M32_M34::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M31_M32_M34::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M31_M32_M34& M30_M31_M32_M34::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M31_M32_M34_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M31_M32_M34::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M31.M32.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M31_M32_M34::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M31_M32_M34::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M31.M32.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M31.M32.M34)
  return target;
}

size_t M30_M31_M32_M34::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M31.M32.M34)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M31_M32_M34::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M31.M32.M34)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M31_M32_M34* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M31_M32_M34>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M31.M32.M34)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M31.M32.M34)
    MergeFrom(*source);
  }
}

void M30_M31_M32_M34::MergeFrom(const M30_M31_M32_M34& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M31.M32.M34)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M30_M31_M32_M34::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M31.M32.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M31_M32_M34::CopyFrom(const M30_M31_M32_M34& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M31.M32.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M31_M32_M34::IsInitialized() const {
  return true;
}

void M30_M31_M32_M34::InternalSwap(M30_M31_M32_M34* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M31_M32_M34::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M31_M32::InitAsDefaultInstance() {
  ::hyperprotobench::_M30_M31_M32_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M30_M31_M32_M33*>(
      ::hyperprotobench::M30_M31_M32_M33::internal_default_instance());
  ::hyperprotobench::_M30_M31_M32_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M30_M31_M32_M34*>(
      ::hyperprotobench::M30_M31_M32_M34::internal_default_instance());
}
class M30_M31_M32::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M31_M32>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M30_M31_M32_M33& f2(const M30_M31_M32* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M30_M31_M32_M34& f7(const M30_M31_M32* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::hyperprotobench::M30_M31_M32_M33&
M30_M31_M32::_Internal::f2(const M30_M31_M32* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M30_M31_M32_M34&
M30_M31_M32::_Internal::f7(const M30_M31_M32* msg) {
  return *msg->f7_;
}
void M30_M31_M32::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M30_M31_M32_M33* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.M32.f2)
}
void M30_M31_M32::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M30_M31_M32_M34* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.M32.f7)
}
M30_M31_M32::M30_M31_M32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M31.M32)
}
M30_M31_M32::M30_M31_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M31.M32)
}
M30_M31_M32::M30_M31_M32(const M30_M31_M32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M30_M31_M32_M33(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M30_M31_M32_M34(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M31.M32)
}

void M30_M31_M32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M31_M32_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f8_));
  f3_ = 74;
}

M30_M31_M32::~M30_M31_M32() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M31.M32)
  SharedDtor();
}

void M30_M31_M32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f7_;
}

void M30_M31_M32::ArenaDtor(void* object) {
  M30_M31_M32* _this = reinterpret_cast< M30_M31_M32* >(object);
  (void)_this;
}
void M30_M31_M32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M31_M32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M31_M32& M30_M31_M32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M31_M32_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M31_M32::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M31.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f7_ != nullptr);
    f7_->Clear();
  }
  if (cached_has_bits & 0x000000e2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  f8_ = 0;
  f3_ = 74;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M31_M32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M31.M32.M33 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M31.M32.E1 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M30_M31_M32_E1_IsValid(val))) {
            _internal_set_f3(static_cast<::hyperprotobench::M30_M31_M32_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M31.M32.M34 f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M31_M32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M31.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M30.M31.M32.M33 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M30.M31.M32.E1 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_f3(), target);
  }

  // optional fixed64 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f4(), target);
  }

  // optional bool f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_f5(), target);
  }

  // optional int64 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M30.M31.M32.M34 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f7(this), target, stream);
  }

  // optional int32 f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M31.M32)
  return target;
}

size_t M30_M31_M32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M31.M32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hyperprotobench.M30.M31.M32.M33 f2 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  // optional .hyperprotobench.M30.M31.M32.M34 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f7_);
  }

  if (cached_has_bits & 0x000000e2u) {
    // optional uint64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f1());
    }

    // optional fixed64 f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

    // optional bool f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f8());
  }

  // optional .hyperprotobench.M30.M31.M32.E1 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M31_M32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M31.M32)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M31_M32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M31_M32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M31.M32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M31.M32)
    MergeFrom(*source);
  }
}

void M30_M31_M32::MergeFrom(const M30_M31_M32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M31.M32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::hyperprotobench::M30_M31_M32_M33::MergeFrom(from._internal_f2());
  }
  if (from._internal_has_f7()) {
    _internal_mutable_f7()->::hyperprotobench::M30_M31_M32_M34::MergeFrom(from._internal_f7());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000e2u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00000010u) {
    _internal_set_f3(from._internal_f3());
  }
}

void M30_M31_M32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M31.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M31_M32::CopyFrom(const M30_M31_M32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M31.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M31_M32::IsInitialized() const {
  return true;
}

void M30_M31_M32::InternalSwap(M30_M31_M32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M31_M32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M31::InitAsDefaultInstance() {
  ::hyperprotobench::_M30_M31_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M30_M31_M32*>(
      ::hyperprotobench::M30_M31_M32::internal_default_instance());
}
class M30_M31::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M31>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M30_M31_M32& f5(const M30_M31* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::hyperprotobench::M30_M31_M32&
M30_M31::_Internal::f5(const M30_M31* msg) {
  return *msg->f5_;
}
void M30_M31::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M30_M31_M32* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M31.f5)
}
M30_M31::M30_M31()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M31)
}
M30_M31::M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M31)
}
M30_M31::M30_M31(const M30_M31& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M30_M31_M32(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M31)
}

void M30_M31::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M31_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f9_));
}

M30_M31::~M30_M31() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M31)
  SharedDtor();
}

void M30_M31::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
}

void M30_M31::ArenaDtor(void* object) {
  M30_M31* _this = reinterpret_cast< M30_M31* >(object);
  (void)_this;
}
void M30_M31::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M31::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M31& M30_M31::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M31_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M31::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f5_ != nullptr);
    f5_->Clear();
  }
  f2_ = 0;
  f6_ = false;
  f3_ = 0;
  if (cached_has_bits & 0x00001c00u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M31::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M31.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M31.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M31.M32 f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M31::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M31.f1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f1(), target);
  }

  // optional int32 f2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f2(), target);
  }

  // optional double f3 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_f3(), target);
  }

  // optional string f4 = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M31.f4");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M30.M31.M32 f5 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::f5(this), target, stream);
  }

  // optional bool f6 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_f6(), target);
  }

  // optional fixed64 f7 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_f7(), target);
  }

  // optional int32 f8 = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_f8(), target);
  }

  // optional fixed32 f9 = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(17, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M31)
  return target;
}

size_t M30_M31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M31)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    // optional string f1 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f4 = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

  }
  // optional .hyperprotobench.M30.M31.M32 f5 = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f5_);
  }

  // optional int32 f2 = 7;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f2());
  }

  // optional bool f6 = 14;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 + 1;
  }

  // optional double f3 = 11;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 + 8;
  }

  if (cached_has_bits & 0x00001c00u) {
    // optional fixed64 f7 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int32 f8 = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

    // optional fixed32 f9 = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M31::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M31* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M31>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M31)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M31)
    MergeFrom(*source);
  }
}

void M30_M31::MergeFrom(const M30_M31& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f4(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_f5()->::hyperprotobench::M30_M31_M32::MergeFrom(from._internal_f5());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_f2(from._internal_f2());
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x00000040u) {
    _internal_set_f3(from._internal_f3());
  }
  if (cached_has_bits & 0x00001c00u) {
    if (cached_has_bits & 0x00000400u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000800u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00001000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M30_M31::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M31::CopyFrom(const M30_M31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M31::IsInitialized() const {
  return true;
}

void M30_M31::InternalSwap(M30_M31* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f2_, other->f2_);
  swap(f6_, other->f6_);
  swap(f3_, other->f3_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M31::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30::InitAsDefaultInstance() {
  ::hyperprotobench::_M30_default_instance_._instance.get_mutable()->f11_ = const_cast< ::hyperprotobench::M30_M31*>(
      ::hyperprotobench::M30_M31::internal_default_instance());
}
class M30::_Internal {
 public:
  using HasBits = decltype(std::declval<M30>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::hyperprotobench::M30_M31& f11(const M30* msg);
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::hyperprotobench::M30_M31&
M30::_Internal::f11(const M30* msg) {
  return *msg->f11_;
}
void M30::unsafe_arena_set_allocated_f11(
    ::hyperprotobench::M30_M31* f11) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f11_;
  }
  f11_ = f11;
  if (f11) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f11)
}
M30::M30()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30)
}
M30::M30(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30)
}
M30::M30(const M30& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f11()) {
    f11_ = new ::hyperprotobench::M30_M31(*from.f11_);
  } else {
    f11_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f12_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f12_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30)
}

void M30::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f12_) -
      reinterpret_cast<char*>(&f11_)) + sizeof(f12_));
}

M30::~M30() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30)
  SharedDtor();
}

void M30::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f11_;
}

void M30::ArenaDtor(void* object) {
  M30* _this = reinterpret_cast< M30* >(object);
  (void)_this;
}
void M30::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30& M30::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000d600u) {
    if (cached_has_bits & 0x00000200u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      f9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      f10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(f11_ != nullptr);
      f11_->Clear();
    }
  }
  if (cached_has_bits & 0x0000002au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  f8_ = 0u;
  f12_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string f9 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f9");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f10 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.f10");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M31 f11 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_f11(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f12 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional bool f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f3(), target);
  }

  // optional string f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f4");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f4(), target);
  }

  // optional fixed64 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f5(), target);
  }

  // optional string f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f6");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f6(), target);
  }

  // optional string f7 = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f7");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_f7(), target);
  }

  // optional fixed32 f8 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_f8(), target);
  }

  // optional string f9 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f9().data(), static_cast<int>(this->_internal_f9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f9");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_f9(), target);
  }

  // optional string f10 = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f10().data(), static_cast<int>(this->_internal_f10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.f10");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_f10(), target);
  }

  // optional .hyperprotobench.M30.M31 f11 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::f11(this), target, stream);
  }

  // optional fixed64 f12 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30)
  return target;
}

size_t M30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional string f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x0000d600u) {
    // optional string f6 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional string f7 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

    // optional string f9 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f9());
    }

    // optional string f10 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f10());
    }

    // optional .hyperprotobench.M30.M31 f11 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f11_);
    }

  }
  if (cached_has_bits & 0x0000002au) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional bool f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional fixed64 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed32 f8 = 11;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 + 4;
  }

  // optional fixed64 f12 = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30)
  GOOGLE_DCHECK_NE(&from, this);
  const M30* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30)
    MergeFrom(*source);
  }
}

void M30::MergeFrom(const M30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f4(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x0000d600u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f9(from._internal_f9());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_f10(from._internal_f10());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_f11()->::hyperprotobench::M30_M31::MergeFrom(from._internal_f11());
    }
  }
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f12(from._internal_f12());
  }
}

void M30::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30::CopyFrom(const M30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30::IsInitialized() const {
  return true;
}

void M30::InternalSwap(M30* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f11_, other->f11_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f12_, other->f12_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M35_M36_M37_M38::InitAsDefaultInstance() {
}
class M35_M36_M37_M38::_Internal {
 public:
  using HasBits = decltype(std::declval<M35_M36_M37_M38>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M35_M36_M37_M38::M35_M36_M37_M38()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M35.M36.M37.M38)
}
M35_M36_M37_M38::M35_M36_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M35.M36.M37.M38)
}
M35_M36_M37_M38::M35_M36_M37_M38(const M35_M36_M37_M38& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M35.M36.M37.M38)
}

void M35_M36_M37_M38::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M35_M36_M37_M38_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_ = PROTOBUF_ULONGLONG(0);
}

M35_M36_M37_M38::~M35_M36_M37_M38() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M35.M36.M37.M38)
  SharedDtor();
}

void M35_M36_M37_M38::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M35_M36_M37_M38::ArenaDtor(void* object) {
  M35_M36_M37_M38* _this = reinterpret_cast< M35_M36_M37_M38* >(object);
  (void)_this;
}
void M35_M36_M37_M38::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M35_M36_M37_M38::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M35_M36_M37_M38& M35_M36_M37_M38::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M35_M36_M37_M38_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M35_M36_M37_M38::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M35.M36.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M35_M36_M37_M38::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M35_M36_M37_M38::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M35.M36.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M35.M36.M37.M38)
  return target;
}

size_t M35_M36_M37_M38::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M35.M36.M37.M38)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional bytes f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional uint64 f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M35_M36_M37_M38::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M35.M36.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  const M35_M36_M37_M38* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M35_M36_M37_M38>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M35.M36.M37.M38)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M35.M36.M37.M38)
    MergeFrom(*source);
  }
}

void M35_M36_M37_M38::MergeFrom(const M35_M36_M37_M38& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M35.M36.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M35_M36_M37_M38::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M35.M36.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M35_M36_M37_M38::CopyFrom(const M35_M36_M37_M38& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M35.M36.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M35_M36_M37_M38::IsInitialized() const {
  return true;
}

void M35_M36_M37_M38::InternalSwap(M35_M36_M37_M38* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M35_M36_M37_M38::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M35_M36_M37::InitAsDefaultInstance() {
  ::hyperprotobench::_M35_M36_M37_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M35_M36_M37_M38*>(
      ::hyperprotobench::M35_M36_M37_M38::internal_default_instance());
}
class M35_M36_M37::_Internal {
 public:
  using HasBits = decltype(std::declval<M35_M36_M37>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M35_M36_M37_M38& f3(const M35_M36_M37* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M35_M36_M37_M38&
M35_M36_M37::_Internal::f3(const M35_M36_M37* msg) {
  return *msg->f3_;
}
void M35_M36_M37::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M35_M36_M37_M38* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.M36.M37.f3)
}
M35_M36_M37::M35_M36_M37()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M35.M36.M37)
}
M35_M36_M37::M35_M36_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M35.M36.M37)
}
M35_M36_M37::M35_M36_M37(const M35_M36_M37& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M35_M36_M37_M38(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M35.M36.M37)
}

void M35_M36_M37::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M35_M36_M37_benchmark_2eproto.base);
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f2_));
}

M35_M36_M37::~M35_M36_M37() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M35.M36.M37)
  SharedDtor();
}

void M35_M36_M37::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f3_;
}

void M35_M36_M37::ArenaDtor(void* object) {
  M35_M36_M37* _this = reinterpret_cast< M35_M36_M37* >(object);
  (void)_this;
}
void M35_M36_M37::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M35_M36_M37::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M35_M36_M37& M35_M36_M37::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M35_M36_M37_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M35_M36_M37::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M35.M36.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    GOOGLE_DCHECK(f3_ != nullptr);
    f3_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M35_M36_M37::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M35.M36.M37.M38 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M35_M36_M37::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M35.M36.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M35.M36.M37.M38 f3 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M35.M36.M37)
  return target;
}

size_t M35_M36_M37::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M35.M36.M37)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    // optional .hyperprotobench.M35.M36.M37.M38 f3 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional bool f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M35_M36_M37::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M35.M36.M37)
  GOOGLE_DCHECK_NE(&from, this);
  const M35_M36_M37* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M35_M36_M37>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M35.M36.M37)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M35.M36.M37)
    MergeFrom(*source);
  }
}

void M35_M36_M37::MergeFrom(const M35_M36_M37& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M35.M36.M37)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_f3()->::hyperprotobench::M35_M36_M37_M38::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M35_M36_M37::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M35.M36.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M35_M36_M37::CopyFrom(const M35_M36_M37& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M35.M36.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M35_M36_M37::IsInitialized() const {
  return true;
}

void M35_M36_M37::InternalSwap(M35_M36_M37* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M35_M36_M37::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M35_M36::InitAsDefaultInstance() {
  ::hyperprotobench::_M35_M36_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M35_M36_M37*>(
      ::hyperprotobench::M35_M36_M37::internal_default_instance());
}
class M35_M36::_Internal {
 public:
  using HasBits = decltype(std::declval<M35_M36>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M35_M36_M37& f3(const M35_M36* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M35_M36_M37&
M35_M36::_Internal::f3(const M35_M36* msg) {
  return *msg->f3_;
}
void M35_M36::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M35_M36_M37* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.M36.f3)
}
M35_M36::M35_M36()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M35.M36)
}
M35_M36::M35_M36(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M35.M36)
}
M35_M36::M35_M36(const M35_M36& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M35_M36_M37(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M35.M36)
}

void M35_M36::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M35_M36_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f2_));
}

M35_M36::~M35_M36() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M35.M36)
  SharedDtor();
}

void M35_M36::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f3_;
}

void M35_M36::ArenaDtor(void* object) {
  M35_M36* _this = reinterpret_cast< M35_M36* >(object);
  (void)_this;
}
void M35_M36::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M35_M36::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M35_M36& M35_M36::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M35_M36_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M35_M36::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M35.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M35_M36::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M35.M36.M37 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M35_M36::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M35.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f1(), target);
  }

  // optional int32 f2 = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M35.M36.M37 f3 = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M35.M36)
  return target;
}

size_t M35_M36::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M35.M36)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bytes f1 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M35.M36.M37 f3 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional int32 f2 = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M35_M36::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M35.M36)
  GOOGLE_DCHECK_NE(&from, this);
  const M35_M36* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M35_M36>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M35.M36)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M35.M36)
    MergeFrom(*source);
  }
}

void M35_M36::MergeFrom(const M35_M36& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M35.M36)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M35_M36_M37::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M35_M36::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M35.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M35_M36::CopyFrom(const M35_M36& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M35.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M35_M36::IsInitialized() const {
  return true;
}

void M35_M36::InternalSwap(M35_M36* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M35_M36::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M35::InitAsDefaultInstance() {
  ::hyperprotobench::_M35_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M35_M36*>(
      ::hyperprotobench::M35_M36::internal_default_instance());
}
class M35::_Internal {
 public:
  using HasBits = decltype(std::declval<M35>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hyperprotobench::M35_M36& f4(const M35* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::hyperprotobench::M35_M36&
M35::_Internal::f4(const M35* msg) {
  return *msg->f4_;
}
void M35::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M35_M36* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M35.f4)
}
M35::M35()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M35)
}
M35::M35(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M35)
}
M35::M35(const M35& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M35_M36(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M35)
}

void M35::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M35_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
}

M35::~M35() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M35)
  SharedDtor();
}

void M35::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M35::ArenaDtor(void* object) {
  M35* _this = reinterpret_cast< M35* >(object);
  (void)_this;
}
void M35::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M35::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M35& M35::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M35_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M35::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x00000014u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  }
  f5_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M35::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M35.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M35.M36 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M35::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M35.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M35.M36 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f4(this), target, stream);
  }

  // optional double f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M35)
  return target;
}

size_t M35::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M35)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000036u) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M35.M36 f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  // optional double f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M35::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M35)
  GOOGLE_DCHECK_NE(&from, this);
  const M35* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M35>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M35)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M35)
    MergeFrom(*source);
  }
}

void M35::MergeFrom(const M35& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M35)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000036u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_f4()->::hyperprotobench::M35_M36::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000400u) {
    _internal_set_f5(from._internal_f5());
  }
}

void M35::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M35::CopyFrom(const M35& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M35::IsInitialized() const {
  return true;
}

void M35::InternalSwap(M35* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M35::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M39_M40_M41_M42::InitAsDefaultInstance() {
}
class M39_M40_M41_M42::_Internal {
 public:
  using HasBits = decltype(std::declval<M39_M40_M41_M42>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

M39_M40_M41_M42::M39_M40_M41_M42()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M39.M40.M41.M42)
}
M39_M40_M41_M42::M39_M40_M41_M42(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M39.M40.M41.M42)
}
M39_M40_M41_M42::M39_M40_M41_M42(const M39_M40_M41_M42& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M39.M40.M41.M42)
}

void M39_M40_M41_M42::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M39_M40_M41_M42::~M39_M40_M41_M42() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M39.M40.M41.M42)
  SharedDtor();
}

void M39_M40_M41_M42::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M39_M40_M41_M42::ArenaDtor(void* object) {
  M39_M40_M41_M42* _this = reinterpret_cast< M39_M40_M41_M42* >(object);
  (void)_this;
}
void M39_M40_M41_M42::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M39_M40_M41_M42::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M39_M40_M41_M42& M39_M40_M41_M42::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M39_M40_M41_M42_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M39_M40_M41_M42::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M39.M40.M41.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M39_M40_M41_M42::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M39_M40_M41_M42::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M39.M40.M41.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional bool f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f2(), target);
  }

  // optional int32 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M39.M40.M41.M42)
  return target;
}

size_t M39_M40_M41_M42::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M39.M40.M41.M42)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional bool f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M39_M40_M41_M42::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M39.M40.M41.M42)
  GOOGLE_DCHECK_NE(&from, this);
  const M39_M40_M41_M42* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M39_M40_M41_M42>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M39.M40.M41.M42)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M39.M40.M41.M42)
    MergeFrom(*source);
  }
}

void M39_M40_M41_M42::MergeFrom(const M39_M40_M41_M42& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M39.M40.M41.M42)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M39_M40_M41_M42::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M39.M40.M41.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M39_M40_M41_M42::CopyFrom(const M39_M40_M41_M42& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M39.M40.M41.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M39_M40_M41_M42::IsInitialized() const {
  return true;
}

void M39_M40_M41_M42::InternalSwap(M39_M40_M41_M42* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M39_M40_M41_M42::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M39_M40_M41::InitAsDefaultInstance() {
  ::hyperprotobench::_M39_M40_M41_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M39_M40_M41_M42*>(
      ::hyperprotobench::M39_M40_M41_M42::internal_default_instance());
}
class M39_M40_M41::_Internal {
 public:
  using HasBits = decltype(std::declval<M39_M40_M41>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::hyperprotobench::M39_M40_M41_M42& f7(const M39_M40_M41* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::hyperprotobench::M39_M40_M41_M42&
M39_M40_M41::_Internal::f7(const M39_M40_M41* msg) {
  return *msg->f7_;
}
void M39_M40_M41::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M39_M40_M41_M42* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.M40.M41.f7)
}
M39_M40_M41::M39_M40_M41()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M39.M40.M41)
}
M39_M40_M41::M39_M40_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M39.M40.M41)
}
M39_M40_M41::M39_M40_M41(const M39_M40_M41& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M39_M40_M41_M42(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M39.M40.M41)
}

void M39_M40_M41::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M39_M40_M41_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f7_)) + sizeof(f9_));
}

M39_M40_M41::~M39_M40_M41() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M39.M40.M41)
  SharedDtor();
}

void M39_M40_M41::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f7_;
}

void M39_M40_M41::ArenaDtor(void* object) {
  M39_M40_M41* _this = reinterpret_cast< M39_M40_M41* >(object);
  (void)_this;
}
void M39_M40_M41::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M39_M40_M41::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M39_M40_M41& M39_M40_M41::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M39_M40_M41_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M39_M40_M41::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M39.M40.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001600u) {
    if (cached_has_bits & 0x00000200u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  if (cached_has_bits & 0x000000d2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00006000u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M39_M40_M41::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M39.M40.M41.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M39.M40.M41.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M39.M40.M41.M42 f7 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M39_M40_M41::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M39.M40.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f2(), target);
  }

  // optional fixed32 f3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_f3(), target);
  }

  // optional bool f4 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_f4(), target);
  }

  // optional string f5 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M39.M40.M41.f5");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_f5(), target);
  }

  // optional string f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M39.M40.M41.f6");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M39.M40.M41.M42 f7 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::f7(this), target, stream);
  }

  // optional bool f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_f8(), target);
  }

  // optional int32 f9 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M39.M40.M41)
  return target;
}

size_t M39_M40_M41::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M39.M40.M41)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001600u) {
    // optional string f5 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional string f6 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional .hyperprotobench.M39.M40.M41.M42 f7 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  if (cached_has_bits & 0x000000d2u) {
    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional fixed32 f3 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed64 f2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional bool f4 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00006000u) {
    // optional bool f8 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional int32 f9 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M39_M40_M41::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M39.M40.M41)
  GOOGLE_DCHECK_NE(&from, this);
  const M39_M40_M41* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M39_M40_M41>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M39.M40.M41)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M39.M40.M41)
    MergeFrom(*source);
  }
}

void M39_M40_M41::MergeFrom(const M39_M40_M41& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M39.M40.M41)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00001600u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_f7()->::hyperprotobench::M39_M40_M41_M42::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x000000d2u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00006000u) {
    if (cached_has_bits & 0x00002000u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00004000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M39_M40_M41::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M39.M40.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M39_M40_M41::CopyFrom(const M39_M40_M41& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M39.M40.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M39_M40_M41::IsInitialized() const {
  return true;
}

void M39_M40_M41::InternalSwap(M39_M40_M41* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M39_M40_M41::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M39_M40::InitAsDefaultInstance() {
  ::hyperprotobench::_M39_M40_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M39_M40_M41*>(
      ::hyperprotobench::M39_M40_M41::internal_default_instance());
}
class M39_M40::_Internal {
 public:
  using HasBits = decltype(std::declval<M39_M40>()._has_bits_);
  static const ::hyperprotobench::M39_M40_M41& f1(const M39_M40* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M39_M40_M41&
M39_M40::_Internal::f1(const M39_M40* msg) {
  return *msg->f1_;
}
void M39_M40::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M39_M40_M41* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.M40.f1)
}
M39_M40::M39_M40()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M39.M40)
}
M39_M40::M39_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M39.M40)
}
M39_M40::M39_M40(const M39_M40& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M39_M40_M41(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M39.M40)
}

void M39_M40::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M39_M40_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M39_M40::~M39_M40() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M39.M40)
  SharedDtor();
}

void M39_M40::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M39_M40::ArenaDtor(void* object) {
  M39_M40* _this = reinterpret_cast< M39_M40* >(object);
  (void)_this;
}
void M39_M40::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M39_M40::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M39_M40& M39_M40::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M39_M40_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M39_M40::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M39.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M39_M40::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M39.M40.M41 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M39_M40::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M39.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M39.M40.M41 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  // optional bool f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M39.M40)
  return target;
}

size_t M39_M40::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M39.M40)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional .hyperprotobench.M39.M40.M41 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional bool f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M39_M40::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M39.M40)
  GOOGLE_DCHECK_NE(&from, this);
  const M39_M40* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M39_M40>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M39.M40)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M39.M40)
    MergeFrom(*source);
  }
}

void M39_M40::MergeFrom(const M39_M40& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M39.M40)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M39_M40_M41::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M39_M40::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M39.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M39_M40::CopyFrom(const M39_M40& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M39.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M39_M40::IsInitialized() const {
  return true;
}

void M39_M40::InternalSwap(M39_M40* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M39_M40::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M39::InitAsDefaultInstance() {
  ::hyperprotobench::_M39_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M39_M40*>(
      ::hyperprotobench::M39_M40::internal_default_instance());
}
class M39::_Internal {
 public:
  using HasBits = decltype(std::declval<M39>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M39_M40& f9(const M39* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::hyperprotobench::M39_M40&
M39::_Internal::f9(const M39* msg) {
  return *msg->f9_;
}
void M39::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M39_M40* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M39.f9)
}
M39::M39()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M39)
}
M39::M39(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M39)
}
M39::M39(const M39& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M39_M40(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M39)
}

void M39::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M39_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f9_)) + sizeof(f3_));
  f4_ = 65;
}

M39::~M39() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M39)
  SharedDtor();
}

void M39::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f9_;
}

void M39::ArenaDtor(void* object) {
  M39* _this = reinterpret_cast< M39* >(object);
  (void)_this;
}
void M39::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M39::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M39& M39::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M39_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M39::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000044u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f6_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      f8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
  }
  if (cached_has_bits & 0x00000022u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  f10_ = 0;
  if (cached_has_bits & 0x00000018u) {
    f3_ = false;
    f4_ = 65;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M39::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M39.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M39.E1 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M39_E1_IsValid(val))) {
            _internal_set_f4(static_cast<::hyperprotobench::M39_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M39.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M39.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M39.M40 f9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f10 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M39::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional string f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M39.f2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional bool f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M39.E1 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_f4(), target);
  }

  // optional int64 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f5(), target);
  }

  // optional string f6 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M39.f6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f6(), target);
  }

  // optional string f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M39.f7");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f7(), target);
  }

  // optional bytes f8 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M39.M40 f9 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f9(this), target, stream);
  }

  // optional double f10 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M39)
  return target;
}

size_t M39::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M39)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000044u) {
    // optional string f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional string f6 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional string f7 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

    // optional bytes f8 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f8());
    }

    // optional .hyperprotobench.M39.M40 f9 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

  }
  if (cached_has_bits & 0x00000022u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  // optional double f10 = 11;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 + 8;
  }

  if (cached_has_bits & 0x00000018u) {
    // optional bool f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional .hyperprotobench.M39.E1 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M39::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M39)
  GOOGLE_DCHECK_NE(&from, this);
  const M39* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M39>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M39)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M39)
    MergeFrom(*source);
  }
}

void M39::MergeFrom(const M39& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M39)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000044u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f6(from._internal_f6());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f8(from._internal_f8());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f9()->::hyperprotobench::M39_M40::MergeFrom(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f10(from._internal_f10());
  }
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M39::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M39::CopyFrom(const M39& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M39::IsInitialized() const {
  return true;
}

void M39::InternalSwap(M39* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f9_, other->f9_);
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
  swap(f10_, other->f10_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M39::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44_M45_M46::InitAsDefaultInstance() {
}
class M43_M44_M45_M46::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44_M45_M46>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

M43_M44_M45_M46::M43_M44_M45_M46()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44.M45.M46)
}
M43_M44_M45_M46::M43_M44_M45_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44.M45.M46)
}
M43_M44_M45_M46::M43_M44_M45_M46(const M43_M44_M45_M46& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44.M45.M46)
}

void M43_M44_M45_M46::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M44_M45_M46_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M43_M44_M45_M46::~M43_M44_M45_M46() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44.M45.M46)
  SharedDtor();
}

void M43_M44_M45_M46::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M43_M44_M45_M46::ArenaDtor(void* object) {
  M43_M44_M45_M46* _this = reinterpret_cast< M43_M44_M45_M46* >(object);
  (void)_this;
}
void M43_M44_M45_M46::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44_M45_M46::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44_M45_M46& M43_M44_M45_M46::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_M45_M46_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44_M45_M46::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44.M45.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  f1_ = false;
  f3_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44_M45_M46::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M44.M45.M46.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44_M45_M46::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44.M45.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f1(), target);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M44.M45.M46.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional int32 f3 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44.M45.M46)
  return target;
}

size_t M43_M44_M45_M46::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44.M45.M46)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional bool f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  // optional int32 f3 = 12;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44_M45_M46::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44.M45.M46)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44_M45_M46* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44_M45_M46>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44.M45.M46)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44.M45.M46)
    MergeFrom(*source);
  }
}

void M43_M44_M45_M46::MergeFrom(const M43_M44_M45_M46& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44.M45.M46)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000400u) {
    _internal_set_f3(from._internal_f3());
  }
}

void M43_M44_M45_M46::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44.M45.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44_M45_M46::CopyFrom(const M43_M44_M45_M46& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44.M45.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44_M45_M46::IsInitialized() const {
  return true;
}

void M43_M44_M45_M46::InternalSwap(M43_M44_M45_M46* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44_M45_M46::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44_M45::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M44_M45_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M43_M44_M45_M46*>(
      ::hyperprotobench::M43_M44_M45_M46::internal_default_instance());
}
class M43_M44_M45::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44_M45>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M43_M44_M45_M46& f2(const M43_M44_M45* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M43_M44_M45_M46&
M43_M44_M45::_Internal::f2(const M43_M44_M45* msg) {
  return *msg->f2_;
}
void M43_M44_M45::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M43_M44_M45_M46* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.M45.f2)
}
M43_M44_M45::M43_M44_M45()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44.M45)
}
M43_M44_M45::M43_M44_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44.M45)
}
M43_M44_M45::M43_M44_M45(const M43_M44_M45& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M43_M44_M45_M46(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44.M45)
}

void M43_M44_M45::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M44_M45_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M43_M44_M45::~M43_M44_M45() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44.M45)
  SharedDtor();
}

void M43_M44_M45::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M43_M44_M45::ArenaDtor(void* object) {
  M43_M44_M45* _this = reinterpret_cast< M43_M44_M45* >(object);
  (void)_this;
}
void M43_M44_M45::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44_M45::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44_M45& M43_M44_M45::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_M45_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44_M45::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44_M45::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44.M45.M46 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44_M45::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M43.M44.M45.M46 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44.M45)
  return target;
}

size_t M43_M44_M45::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44.M45)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M43.M44.M45.M46 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional bool f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44_M45::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44.M45)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44_M45* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44_M45>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44.M45)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44.M45)
    MergeFrom(*source);
  }
}

void M43_M44_M45::MergeFrom(const M43_M44_M45& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44.M45)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M43_M44_M45_M46::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M44_M45::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44_M45::CopyFrom(const M43_M44_M45& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44_M45::IsInitialized() const {
  return true;
}

void M43_M44_M45::InternalSwap(M43_M44_M45* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44_M45::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43_M44::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_M44_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M43_M44_M45*>(
      ::hyperprotobench::M43_M44_M45::internal_default_instance());
}
class M43_M44::_Internal {
 public:
  using HasBits = decltype(std::declval<M43_M44>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M43_M44_M45& f4(const M43_M44* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M43_M44_M45&
M43_M44::_Internal::f4(const M43_M44* msg) {
  return *msg->f4_;
}
void M43_M44::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M43_M44_M45* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.M44.f4)
}
M43_M44::M43_M44()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43.M44)
}
M43_M44::M43_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43.M44)
}
M43_M44::M43_M44(const M43_M44& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M43_M44_M45(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43.M44)
}

void M43_M44::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_M44_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f2_));
}

M43_M44::~M43_M44() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43.M44)
  SharedDtor();
}

void M43_M44::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M43_M44::ArenaDtor(void* object) {
  M43_M44* _this = reinterpret_cast< M43_M44* >(object);
  (void)_this;
}
void M43_M44::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43_M44::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43_M44& M43_M44::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_M44_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43_M44::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43_M44::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M43.M44.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44.M45 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43_M44::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional string f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M43.M44.f3");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M43.M44.M45 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f4(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43.M44)
  return target;
}

size_t M43_M44::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43.M44)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional string f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M43.M44.M45 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43_M44::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43.M44)
  GOOGLE_DCHECK_NE(&from, this);
  const M43_M44* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43_M44>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43.M44)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43.M44)
    MergeFrom(*source);
  }
}

void M43_M44::MergeFrom(const M43_M44& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43.M44)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f4()->::hyperprotobench::M43_M44_M45::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M43_M44::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43_M44::CopyFrom(const M43_M44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43_M44::IsInitialized() const {
  return true;
}

void M43_M44::InternalSwap(M43_M44* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43_M44::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M43::InitAsDefaultInstance() {
  ::hyperprotobench::_M43_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M43_M44*>(
      ::hyperprotobench::M43_M44::internal_default_instance());
}
class M43::_Internal {
 public:
  using HasBits = decltype(std::declval<M43>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M43_M44& f4(const M43* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::hyperprotobench::M43_M44&
M43::_Internal::f4(const M43* msg) {
  return *msg->f4_;
}
void M43::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M43_M44* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M43.f4)
}
M43::M43()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M43)
}
M43::M43(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M43)
}
M43::M43(const M43& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M43_M44(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M43)
}

void M43::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M43_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
  f3_ = 103;
}

M43::~M43() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M43)
  SharedDtor();
}

void M43::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M43::ArenaDtor(void* object) {
  M43* _this = reinterpret_cast< M43* >(object);
  (void)_this;
}
void M43::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M43::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M43& M43::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M43_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M43::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  f2_ = 0;
  f5_ = PROTOBUF_ULONGLONG(0);
  f3_ = 103;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M43::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.E1 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M43_E1_IsValid(val))) {
            _internal_set_f3(static_cast<::hyperprotobench::M43_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M43.M44 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M43::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional double f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M43.E1 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M43.M44 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f4(this), target, stream);
  }

  // optional fixed64 f5 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M43)
  return target;
}

size_t M43::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M43)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M43.M44 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional double f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed64 f5 = 10;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 8;
  }

  // optional .hyperprotobench.M43.E1 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M43::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M43)
  GOOGLE_DCHECK_NE(&from, this);
  const M43* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M43>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M43)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M43)
    MergeFrom(*source);
  }
}

void M43::MergeFrom(const M43& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M43)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_f4()->::hyperprotobench::M43_M44::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000400u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00000040u) {
    _internal_set_f3(from._internal_f3());
  }
}

void M43::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M43::CopyFrom(const M43& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M43::IsInitialized() const {
  return true;
}

void M43::InternalSwap(M43* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f2_, other->f2_);
  swap(f5_, other->f5_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M43::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2_M3_M4* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2_M3_M4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2_M3_M4 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2_M3* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2_M3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2_M3 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M5* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M5 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1* Arena::CreateMaybeMessage< ::hyperprotobench::M1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M6_M7_M8_M9* Arena::CreateMaybeMessage< ::hyperprotobench::M6_M7_M8_M9 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M6_M7_M8_M9 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M6_M7_M8* Arena::CreateMaybeMessage< ::hyperprotobench::M6_M7_M8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M6_M7_M8 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M6_M7_M10* Arena::CreateMaybeMessage< ::hyperprotobench::M6_M7_M10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M6_M7_M10 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M6_M7* Arena::CreateMaybeMessage< ::hyperprotobench::M6_M7 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M6_M7 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M6* Arena::CreateMaybeMessage< ::hyperprotobench::M6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M6 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M12_M13_M14* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M12_M13_M14 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M12_M13_M14 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M12_M13* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M12_M13 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M12_M13 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M12_M15* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M12_M15 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M12_M15 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M12* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M12 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M12 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M16* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M16 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11* Arena::CreateMaybeMessage< ::hyperprotobench::M11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17_M18_M19_M20* Arena::CreateMaybeMessage< ::hyperprotobench::M17_M18_M19_M20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17_M18_M19_M20 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17_M18_M19* Arena::CreateMaybeMessage< ::hyperprotobench::M17_M18_M19 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17_M18_M19 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17_M18* Arena::CreateMaybeMessage< ::hyperprotobench::M17_M18 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17_M18 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17* Arena::CreateMaybeMessage< ::hyperprotobench::M17 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M22_M23_M24* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M22_M23_M24 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M22_M23_M24 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M22_M23* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M22_M23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M22_M23 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M22* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M22 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21* Arena::CreateMaybeMessage< ::hyperprotobench::M21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M26_M27_M28* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M26_M27_M28 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M26_M27_M28 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M26_M27* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M26_M27 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M26_M27 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M26* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M26 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M26 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M29* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M29 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M29 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25* Arena::CreateMaybeMessage< ::hyperprotobench::M25 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M31_M32_M33* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M31_M32_M33 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M31_M32_M33 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M31_M32_M34* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M31_M32_M34 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M31_M32_M34 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M31_M32* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M31_M32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M31_M32 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M31* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M31 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M31 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30* Arena::CreateMaybeMessage< ::hyperprotobench::M30 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M35_M36_M37_M38* Arena::CreateMaybeMessage< ::hyperprotobench::M35_M36_M37_M38 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M35_M36_M37_M38 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M35_M36_M37* Arena::CreateMaybeMessage< ::hyperprotobench::M35_M36_M37 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M35_M36_M37 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M35_M36* Arena::CreateMaybeMessage< ::hyperprotobench::M35_M36 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M35_M36 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M35* Arena::CreateMaybeMessage< ::hyperprotobench::M35 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M35 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M39_M40_M41_M42* Arena::CreateMaybeMessage< ::hyperprotobench::M39_M40_M41_M42 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M39_M40_M41_M42 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M39_M40_M41* Arena::CreateMaybeMessage< ::hyperprotobench::M39_M40_M41 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M39_M40_M41 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M39_M40* Arena::CreateMaybeMessage< ::hyperprotobench::M39_M40 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M39_M40 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M39* Arena::CreateMaybeMessage< ::hyperprotobench::M39 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M39 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44_M45_M46* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44_M45_M46 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44_M45_M46 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44_M45* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44_M45 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44_M45 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43_M44* Arena::CreateMaybeMessage< ::hyperprotobench::M43_M44 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43_M44 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M43* Arena::CreateMaybeMessage< ::hyperprotobench::M43 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M43 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
