// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#include "benchmark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M3_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_M4_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M4_M5_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M4_M6_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M7_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M8_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M8_M9_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M10_M11_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M11_M12_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M13_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M14_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M16_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M15_M17_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M17_M18_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M17_M19_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M20_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M22_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M23_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M23_M24_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M26_M27_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M28_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M28_M29_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M30_M32_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M32_M33_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M34_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M35_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M36_M37_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M37_M38_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M37_M39_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M40_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M41_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M43_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M44_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M42_M45_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M45_M46_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M47_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M48_M49_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M48_M50_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M48_M50_M51_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M53_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M54_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M55_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M52_M56_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M56_M57_benchmark_2eproto;
namespace hyperprotobench {
class M1_M2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2> _instance;
} _M1_M2_default_instance_;
class M1_M3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M3> _instance;
} _M1_M3_default_instance_;
class M1_M4_M5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M4_M5> _instance;
} _M1_M4_M5_default_instance_;
class M1_M4_M6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M4_M6> _instance;
} _M1_M4_M6_default_instance_;
class M1_M4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M4> _instance;
} _M1_M4_default_instance_;
class M1_M7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M7> _instance;
} _M1_M7_default_instance_;
class M1_M8_M9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M8_M9> _instance;
} _M1_M8_M9_default_instance_;
class M1_M8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M8> _instance;
} _M1_M8_default_instance_;
class M1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1> _instance;
} _M1_default_instance_;
class M10_M11_M12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M10_M11_M12> _instance;
} _M10_M11_M12_default_instance_;
class M10_M11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M10_M11> _instance;
} _M10_M11_default_instance_;
class M10_M13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M10_M13> _instance;
} _M10_M13_default_instance_;
class M10_M14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M10_M14> _instance;
} _M10_M14_default_instance_;
class M10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M10> _instance;
} _M10_default_instance_;
class M15_M16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15_M16> _instance;
} _M15_M16_default_instance_;
class M15_M17_M18DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15_M17_M18> _instance;
} _M15_M17_M18_default_instance_;
class M15_M17_M19DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15_M17_M19> _instance;
} _M15_M17_M19_default_instance_;
class M15_M17DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15_M17> _instance;
} _M15_M17_default_instance_;
class M15_M20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15_M20> _instance;
} _M15_M20_default_instance_;
class M15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M15> _instance;
} _M15_default_instance_;
class M21_M22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M22> _instance;
} _M21_M22_default_instance_;
class M21_M23_M24DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M23_M24> _instance;
} _M21_M23_M24_default_instance_;
class M21_M23DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21_M23> _instance;
} _M21_M23_default_instance_;
class M21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M21> _instance;
} _M21_default_instance_;
class M25_M26_M27DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M26_M27> _instance;
} _M25_M26_M27_default_instance_;
class M25_M26DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M26> _instance;
} _M25_M26_default_instance_;
class M25_M28_M29DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M28_M29> _instance;
} _M25_M28_M29_default_instance_;
class M25_M28DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25_M28> _instance;
} _M25_M28_default_instance_;
class M25DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M25> _instance;
} _M25_default_instance_;
class M30_M31DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M31> _instance;
} _M30_M31_default_instance_;
class M30_M32_M33DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M32_M33> _instance;
} _M30_M32_M33_default_instance_;
class M30_M32DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M32> _instance;
} _M30_M32_default_instance_;
class M30_M34DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M34> _instance;
} _M30_M34_default_instance_;
class M30_M35DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30_M35> _instance;
} _M30_M35_default_instance_;
class M30DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M30> _instance;
} _M30_default_instance_;
class M36_M37_M38DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36_M37_M38> _instance;
} _M36_M37_M38_default_instance_;
class M36_M37_M39DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36_M37_M39> _instance;
} _M36_M37_M39_default_instance_;
class M36_M37DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36_M37> _instance;
} _M36_M37_default_instance_;
class M36_M40DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36_M40> _instance;
} _M36_M40_default_instance_;
class M36_M41DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36_M41> _instance;
} _M36_M41_default_instance_;
class M36DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M36> _instance;
} _M36_default_instance_;
class M42_M43DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42_M43> _instance;
} _M42_M43_default_instance_;
class M42_M44DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42_M44> _instance;
} _M42_M44_default_instance_;
class M42_M45_M46DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42_M45_M46> _instance;
} _M42_M45_M46_default_instance_;
class M42_M45DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42_M45> _instance;
} _M42_M45_default_instance_;
class M42_M47DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42_M47> _instance;
} _M42_M47_default_instance_;
class M42DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M42> _instance;
} _M42_default_instance_;
class M48_M49DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M48_M49> _instance;
} _M48_M49_default_instance_;
class M48_M50_M51DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M48_M50_M51> _instance;
} _M48_M50_M51_default_instance_;
class M48_M50DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M48_M50> _instance;
} _M48_M50_default_instance_;
class M48DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M48> _instance;
} _M48_default_instance_;
class M52_M53DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52_M53> _instance;
} _M52_M53_default_instance_;
class M52_M54DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52_M54> _instance;
} _M52_M54_default_instance_;
class M52_M55DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52_M55> _instance;
} _M52_M55_default_instance_;
class M52_M56_M57DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52_M56_M57> _instance;
} _M52_M56_M57_default_instance_;
class M52_M56DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52_M56> _instance;
} _M52_M56_default_instance_;
class M52DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M52> _instance;
} _M52_default_instance_;
}  // namespace hyperprotobench
static void InitDefaultsscc_info_M1_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_default_instance_;
    new (ptr) ::hyperprotobench::M1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_M1_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_M1_benchmark_2eproto}, {
      &scc_info_M1_M2_benchmark_2eproto.base,
      &scc_info_M1_M3_benchmark_2eproto.base,
      &scc_info_M1_M4_benchmark_2eproto.base,
      &scc_info_M1_M7_benchmark_2eproto.base,
      &scc_info_M1_M8_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M2_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M3_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M3_default_instance_;
    new (ptr) ::hyperprotobench::M1_M3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M3_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M3_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M4_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M4_default_instance_;
    new (ptr) ::hyperprotobench::M1_M4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M1_M4_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M1_M4_benchmark_2eproto}, {
      &scc_info_M1_M4_M5_benchmark_2eproto.base,
      &scc_info_M1_M4_M6_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M4_M5_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M4_M5_default_instance_;
    new (ptr) ::hyperprotobench::M1_M4_M5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M4_M5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M4_M5_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M4_M5_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M4_M6_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M4_M6_default_instance_;
    new (ptr) ::hyperprotobench::M1_M4_M6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M4_M6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M4_M6_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M4_M6_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M7_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M7_default_instance_;
    new (ptr) ::hyperprotobench::M1_M7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M7_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M7_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M1_M8_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M8_default_instance_;
    new (ptr) ::hyperprotobench::M1_M8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_M8_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_M8_benchmark_2eproto}, {
      &scc_info_M1_M8_M9_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M8_M9_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M8_M9_default_instance_;
    new (ptr) ::hyperprotobench::M1_M8_M9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M8_M9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M8_M9_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M8_M9_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M10_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M10_default_instance_;
    new (ptr) ::hyperprotobench::M10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M10_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M10_benchmark_2eproto}, {
      &scc_info_M10_M11_benchmark_2eproto.base,
      &scc_info_M10_M13_benchmark_2eproto.base,
      &scc_info_M10_M14_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M10_M11_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M10_M11_default_instance_;
    new (ptr) ::hyperprotobench::M10_M11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M10_M11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M10_M11_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M10_M11_benchmark_2eproto}, {
      &scc_info_M10_M11_M12_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M10_M11_M12_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M10_M11_M12_default_instance_;
    new (ptr) ::hyperprotobench::M10_M11_M12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M10_M11_M12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M11_M12_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M10_M11_M12_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M10_M13_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M10_M13_default_instance_;
    new (ptr) ::hyperprotobench::M10_M13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M10_M13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M13_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M10_M13_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M10_M14_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M10_M14_default_instance_;
    new (ptr) ::hyperprotobench::M10_M14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M10_M14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M10_M14_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M10_M14_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M15_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_default_instance_;
    new (ptr) ::hyperprotobench::M15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M15_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M15_benchmark_2eproto}, {
      &scc_info_M15_M16_benchmark_2eproto.base,
      &scc_info_M15_M17_benchmark_2eproto.base,
      &scc_info_M15_M20_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M15_M16_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_M16_default_instance_;
    new (ptr) ::hyperprotobench::M15_M16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15_M16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M16_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M15_M16_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M15_M17_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_M17_default_instance_;
    new (ptr) ::hyperprotobench::M15_M17();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15_M17::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M15_M17_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M15_M17_benchmark_2eproto}, {
      &scc_info_M15_M17_M18_benchmark_2eproto.base,
      &scc_info_M15_M17_M19_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M15_M17_M18_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_M17_M18_default_instance_;
    new (ptr) ::hyperprotobench::M15_M17_M18();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15_M17_M18::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M17_M18_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M15_M17_M18_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M15_M17_M19_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_M17_M19_default_instance_;
    new (ptr) ::hyperprotobench::M15_M17_M19();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15_M17_M19::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M17_M19_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M15_M17_M19_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M15_M20_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M15_M20_default_instance_;
    new (ptr) ::hyperprotobench::M15_M20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M15_M20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M15_M20_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M15_M20_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M21_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_default_instance_;
    new (ptr) ::hyperprotobench::M21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M21_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M21_benchmark_2eproto}, {
      &scc_info_M21_M22_benchmark_2eproto.base,
      &scc_info_M21_M23_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M21_M22_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M22_default_instance_;
    new (ptr) ::hyperprotobench::M21_M22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M22_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M21_M22_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M21_M23_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M23_default_instance_;
    new (ptr) ::hyperprotobench::M21_M23();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M23::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M21_M23_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M21_M23_benchmark_2eproto}, {
      &scc_info_M21_M23_M24_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M21_M23_M24_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M21_M23_M24_default_instance_;
    new (ptr) ::hyperprotobench::M21_M23_M24();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M21_M23_M24::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M21_M23_M24_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M21_M23_M24_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M25_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_default_instance_;
    new (ptr) ::hyperprotobench::M25();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M25_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M25_benchmark_2eproto}, {
      &scc_info_M25_M26_benchmark_2eproto.base,
      &scc_info_M25_M28_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M26_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M26_default_instance_;
    new (ptr) ::hyperprotobench::M25_M26();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M26::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M26_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M25_M26_benchmark_2eproto}, {
      &scc_info_M25_M26_M27_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M26_M27_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M26_M27_default_instance_;
    new (ptr) ::hyperprotobench::M25_M26_M27();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M26_M27::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M26_M27_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M25_M26_M27_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M25_M28_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M28_default_instance_;
    new (ptr) ::hyperprotobench::M25_M28();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M28::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M25_M28_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M25_M28_benchmark_2eproto}, {
      &scc_info_M25_M28_M29_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M25_M28_M29_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M25_M28_M29_default_instance_;
    new (ptr) ::hyperprotobench::M25_M28_M29();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M25_M28_M29::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M25_M28_M29_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M25_M28_M29_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_default_instance_;
    new (ptr) ::hyperprotobench::M30();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M30_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M30_benchmark_2eproto}, {
      &scc_info_M30_M31_benchmark_2eproto.base,
      &scc_info_M30_M32_benchmark_2eproto.base,
      &scc_info_M30_M34_benchmark_2eproto.base,
      &scc_info_M30_M35_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M30_M31_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M31_default_instance_;
    new (ptr) ::hyperprotobench::M30_M31();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M31::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M31_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M31_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_M32_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M32_default_instance_;
    new (ptr) ::hyperprotobench::M30_M32();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M32::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M30_M32_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M30_M32_benchmark_2eproto}, {
      &scc_info_M30_M32_M33_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M30_M32_M33_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M32_M33_default_instance_;
    new (ptr) ::hyperprotobench::M30_M32_M33();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M32_M33::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M32_M33_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M32_M33_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_M34_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M34_default_instance_;
    new (ptr) ::hyperprotobench::M30_M34();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M34::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M34_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M34_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M30_M35_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M30_M35_default_instance_;
    new (ptr) ::hyperprotobench::M30_M35();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M30_M35::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M30_M35_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M30_M35_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M36_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_default_instance_;
    new (ptr) ::hyperprotobench::M36();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M36_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M36_benchmark_2eproto}, {
      &scc_info_M36_M37_benchmark_2eproto.base,
      &scc_info_M36_M40_benchmark_2eproto.base,
      &scc_info_M36_M41_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M36_M37_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_M37_default_instance_;
    new (ptr) ::hyperprotobench::M36_M37();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36_M37::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M36_M37_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M36_M37_benchmark_2eproto}, {
      &scc_info_M36_M37_M38_benchmark_2eproto.base,
      &scc_info_M36_M37_M39_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M36_M37_M38_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_M37_M38_default_instance_;
    new (ptr) ::hyperprotobench::M36_M37_M38();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36_M37_M38::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M37_M38_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M36_M37_M38_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M36_M37_M39_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_M37_M39_default_instance_;
    new (ptr) ::hyperprotobench::M36_M37_M39();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36_M37_M39::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M37_M39_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M36_M37_M39_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M36_M40_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_M40_default_instance_;
    new (ptr) ::hyperprotobench::M36_M40();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36_M40::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M40_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M36_M40_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M36_M41_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M36_M41_default_instance_;
    new (ptr) ::hyperprotobench::M36_M41();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M36_M41::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M36_M41_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M36_M41_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M42_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_default_instance_;
    new (ptr) ::hyperprotobench::M42();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M42_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M42_benchmark_2eproto}, {
      &scc_info_M42_M43_benchmark_2eproto.base,
      &scc_info_M42_M44_benchmark_2eproto.base,
      &scc_info_M42_M45_benchmark_2eproto.base,
      &scc_info_M42_M47_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M42_M43_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_M43_default_instance_;
    new (ptr) ::hyperprotobench::M42_M43();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42_M43::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M43_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M42_M43_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M42_M44_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_M44_default_instance_;
    new (ptr) ::hyperprotobench::M42_M44();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42_M44::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M44_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M42_M44_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M42_M45_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_M45_default_instance_;
    new (ptr) ::hyperprotobench::M42_M45();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42_M45::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M42_M45_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M42_M45_benchmark_2eproto}, {
      &scc_info_M42_M45_M46_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M42_M45_M46_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_M45_M46_default_instance_;
    new (ptr) ::hyperprotobench::M42_M45_M46();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42_M45_M46::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M45_M46_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M42_M45_M46_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M42_M47_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M42_M47_default_instance_;
    new (ptr) ::hyperprotobench::M42_M47();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M42_M47::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M42_M47_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M42_M47_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M48_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M48_default_instance_;
    new (ptr) ::hyperprotobench::M48();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M48::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M48_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M48_benchmark_2eproto}, {
      &scc_info_M48_M49_benchmark_2eproto.base,
      &scc_info_M48_M50_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M48_M49_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M48_M49_default_instance_;
    new (ptr) ::hyperprotobench::M48_M49();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M48_M49::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M48_M49_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M48_M49_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M48_M50_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M48_M50_default_instance_;
    new (ptr) ::hyperprotobench::M48_M50();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M48_M50::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M48_M50_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M48_M50_benchmark_2eproto}, {
      &scc_info_M48_M50_M51_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M48_M50_M51_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M48_M50_M51_default_instance_;
    new (ptr) ::hyperprotobench::M48_M50_M51();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M48_M50_M51::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M48_M50_M51_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M48_M50_M51_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M52_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_default_instance_;
    new (ptr) ::hyperprotobench::M52();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M52_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M52_benchmark_2eproto}, {
      &scc_info_M52_M53_benchmark_2eproto.base,
      &scc_info_M52_M54_benchmark_2eproto.base,
      &scc_info_M52_M55_benchmark_2eproto.base,
      &scc_info_M52_M56_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M52_M53_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_M53_default_instance_;
    new (ptr) ::hyperprotobench::M52_M53();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52_M53::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M53_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M52_M53_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M52_M54_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_M54_default_instance_;
    new (ptr) ::hyperprotobench::M52_M54();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52_M54::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M54_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M52_M54_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M52_M55_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_M55_default_instance_;
    new (ptr) ::hyperprotobench::M52_M55();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52_M55::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M55_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M52_M55_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M52_M56_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_M56_default_instance_;
    new (ptr) ::hyperprotobench::M52_M56();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52_M56::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M52_M56_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M52_M56_benchmark_2eproto}, {
      &scc_info_M52_M56_M57_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M52_M56_M57_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M52_M56_M57_default_instance_;
    new (ptr) ::hyperprotobench::M52_M56_M57();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M52_M56_M57::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M52_M56_M57_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M52_M56_M57_benchmark_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_benchmark_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_benchmark_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_benchmark_2eproto = nullptr;

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 14L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M3_ACCEL_DESCRIPTORS::M1_M3_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M3::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M3),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M3, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M3, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M4_M5_ACCEL_DESCRIPTORS::M1_M4_M5_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M4_M5::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M4_M5),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M5, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M5, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M4_M6_ACCEL_DESCRIPTORS::M1_M4_M6_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M4_M6::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M4_M6),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M6, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M6, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M4_ACCEL_DESCRIPTORS::M1_M4_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M4::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M4),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M4_M5_ACCEL_DESCRIPTORS::M1_M4_M5_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M4_M6_ACCEL_DESCRIPTORS::M1_M4_M6_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  6L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M7_ACCEL_DESCRIPTORS::M1_M7_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M7::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M7),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M8_M9_ACCEL_DESCRIPTORS::M1_M8_M9_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M8_M9::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M8_M9),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f3_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M8_ACCEL_DESCRIPTORS::M1_M8_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M8::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M8),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M8_M9_ACCEL_DESCRIPTORS::M1_M8_M9_ACCEL_DESCRIPTORS),

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS::M1_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 25L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M3_ACCEL_DESCRIPTORS::M1_M3_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M4_ACCEL_DESCRIPTORS::M1_M4_ACCEL_DESCRIPTORS),

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f15_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f16_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M7_ACCEL_DESCRIPTORS::M1_M7_ACCEL_DESCRIPTORS),

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f17_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M8_ACCEL_DESCRIPTORS::M1_M8_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  26214658L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M10_M11_M12_ACCEL_DESCRIPTORS::M10_M11_M12_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M10_M11_M12::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M10_M11_M12),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M10_M11_ACCEL_DESCRIPTORS::M10_M11_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M10_M11::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M10_M11),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M10_M11_M12_ACCEL_DESCRIPTORS::M10_M11_M12_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M10_M13_ACCEL_DESCRIPTORS::M10_M13_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M10_M13::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M10_M13),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M10_M14_ACCEL_DESCRIPTORS::M10_M14_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M10_M14::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M10_M14),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M10_ACCEL_DESCRIPTORS::M10_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M10::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M10),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M10_M11_ACCEL_DESCRIPTORS::M10_M11_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M10_M13_ACCEL_DESCRIPTORS::M10_M13_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M10_M14_ACCEL_DESCRIPTORS::M10_M14_ACCEL_DESCRIPTORS),

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  148L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS::M15_M16_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15_M16::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15_M16),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f3_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_M17_M18_ACCEL_DESCRIPTORS::M15_M17_M18_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15_M17_M18::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15_M17_M18),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M18, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M18, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_M17_M19_ACCEL_DESCRIPTORS::M15_M17_M19_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15_M17_M19::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15_M17_M19),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M19, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M19, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_M17_ACCEL_DESCRIPTORS::M15_M17_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15_M17::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15_M17),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M15_M17_M18_ACCEL_DESCRIPTORS::M15_M17_M18_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M15_M17_M19_ACCEL_DESCRIPTORS::M15_M17_M19_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  6L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_M20_ACCEL_DESCRIPTORS::M15_M20_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15_M20::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15_M20),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M15_ACCEL_DESCRIPTORS::M15_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M15::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M15),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 24L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS::M15_M16_ACCEL_DESCRIPTORS),

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M15_M17_ACCEL_DESCRIPTORS::M15_M17_ACCEL_DESCRIPTORS),

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M15_M20_ACCEL_DESCRIPTORS::M15_M20_ACCEL_DESCRIPTORS),

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4751360L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS::M21_M22_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M22::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M22),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 24L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f8_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M23_M24_ACCEL_DESCRIPTORS::M21_M23_M24_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M23_M24::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M23_M24),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_M23_ACCEL_DESCRIPTORS::M21_M23_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21_M23::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21_M23),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M23_M24_ACCEL_DESCRIPTORS::M21_M23_M24_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS::M21_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M21::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M21),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 29L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS::M21_M22_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M21_M23_ACCEL_DESCRIPTORS::M21_M23_ACCEL_DESCRIPTORS),

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 26 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f13_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 27 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 28 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 29 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  33024L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS::M25_M26_M27_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M26_M27::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M26_M27),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS::M25_M26_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M26::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M26),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS::M25_M26_M27_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M28_M29_ACCEL_DESCRIPTORS::M25_M28_M29_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M28_M29::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M28_M29),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_M28_ACCEL_DESCRIPTORS::M25_M28_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25_M28::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25_M28),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 19L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M28_M29_ACCEL_DESCRIPTORS::M25_M28_M29_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS::M25_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M25::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M25),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 25L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS::M25_M26_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M25_M28_ACCEL_DESCRIPTORS::M25_M28_ACCEL_DESCRIPTORS),

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  8389632L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS::M30_M31_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M31::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M31),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M32_M33_ACCEL_DESCRIPTORS::M30_M32_M33_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M32_M33::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M32_M33),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M32_ACCEL_DESCRIPTORS::M30_M32_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M32::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M32),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M32_M33_ACCEL_DESCRIPTORS::M30_M32_M33_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M34_ACCEL_DESCRIPTORS::M30_M34_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M34::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M34),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M34, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M34, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_M35_ACCEL_DESCRIPTORS::M30_M35_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30_M35::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30_M35),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f4_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS::M30_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M30::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M30),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 25L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS::M30_M31_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M32_ACCEL_DESCRIPTORS::M30_M32_ACCEL_DESCRIPTORS),

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M34_ACCEL_DESCRIPTORS::M30_M34_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f7_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M30_M35_ACCEL_DESCRIPTORS::M30_M35_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  4194318L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_M37_M38_ACCEL_DESCRIPTORS::M36_M37_M38_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36_M37_M38::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36_M37_M38),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_M37_M39_ACCEL_DESCRIPTORS::M36_M37_M39_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36_M37_M39::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36_M37_M39),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_M37_ACCEL_DESCRIPTORS::M36_M37_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36_M37::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36_M37),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M36_M37_M38_ACCEL_DESCRIPTORS::M36_M37_M38_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M36_M37_M39_ACCEL_DESCRIPTORS::M36_M37_M39_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  12L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_M40_ACCEL_DESCRIPTORS::M36_M40_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36_M40::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36_M40),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)13) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_M41_ACCEL_DESCRIPTORS::M36_M41_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36_M41::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36_M41),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 16L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M36_ACCEL_DESCRIPTORS::M36_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M36::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M36),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 25L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M36_M37_ACCEL_DESCRIPTORS::M36_M37_ACCEL_DESCRIPTORS),

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M36_M40_ACCEL_DESCRIPTORS::M36_M40_ACCEL_DESCRIPTORS),

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M36_M41_ACCEL_DESCRIPTORS::M36_M41_ACCEL_DESCRIPTORS),

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f15_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  4202500L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_M43_ACCEL_DESCRIPTORS::M42_M43_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42_M43::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42_M43),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 6L) << 32) |
  /* max field num */ (((uint64_t) 22L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f4_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_M44_ACCEL_DESCRIPTORS::M42_M44_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42_M44::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42_M44),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 15L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_M45_M46_ACCEL_DESCRIPTORS::M42_M45_M46_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42_M45_M46::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42_M45_M46),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_M45_ACCEL_DESCRIPTORS::M42_M45_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42_M45::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42_M45),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M42_M45_M46_ACCEL_DESCRIPTORS::M42_M45_M46_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_M47_ACCEL_DESCRIPTORS::M42_M47_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42_M47::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42_M47),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M47, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M47, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M42_ACCEL_DESCRIPTORS::M42_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M42::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M42),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 32L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M42_M43_ACCEL_DESCRIPTORS::M42_M43_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M42_M44_ACCEL_DESCRIPTORS::M42_M44_ACCEL_DESCRIPTORS),

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M42_M45_ACCEL_DESCRIPTORS::M42_M45_ACCEL_DESCRIPTORS),

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 26 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 27 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 28 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 29 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 30 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M42_M47_ACCEL_DESCRIPTORS::M42_M47_ACCEL_DESCRIPTORS),

  /* field 31 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f15_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 32 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f16_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1074530304L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M48_M49_ACCEL_DESCRIPTORS::M48_M49_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M48_M49::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M48_M49),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M49, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 10L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M49, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M48_M50_M51_ACCEL_DESCRIPTORS::M48_M50_M51_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M48_M50_M51::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M48_M50_M51),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50_M51, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50_M51, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M48_M50_ACCEL_DESCRIPTORS::M48_M50_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M48_M50::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M48_M50),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M48_M50_M51_ACCEL_DESCRIPTORS::M48_M50_M51_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f5_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  8L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M48_ACCEL_DESCRIPTORS::M48_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M48::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M48),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 16L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M48_M49_ACCEL_DESCRIPTORS::M48_M49_ACCEL_DESCRIPTORS),

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M48_M50_ACCEL_DESCRIPTORS::M48_M50_ACCEL_DESCRIPTORS),

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  1536L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_M53_ACCEL_DESCRIPTORS::M52_M53_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52_M53::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52_M53),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M53, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M53, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_M54_ACCEL_DESCRIPTORS::M52_M54_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52_M54::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52_M54),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_M55_ACCEL_DESCRIPTORS::M52_M55_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52_M55::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52_M55),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M55, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M55, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_M56_M57_ACCEL_DESCRIPTORS::M52_M56_M57_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52_M56_M57::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52_M56_M57),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 12L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_M56_ACCEL_DESCRIPTORS::M52_M56_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52_M56::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52_M56),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M52_M56_M57_ACCEL_DESCRIPTORS::M52_M56_M57_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M52_ACCEL_DESCRIPTORS::M52_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M52::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M52),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 27L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M52_M53_ACCEL_DESCRIPTORS::M52_M53_ACCEL_DESCRIPTORS),

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M52_M54_ACCEL_DESCRIPTORS::M52_M54_ACCEL_DESCRIPTORS),

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 26 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M52_M55_ACCEL_DESCRIPTORS::M52_M55_ACCEL_DESCRIPTORS),

  /* field 27 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M52_M56_ACCEL_DESCRIPTORS::M52_M56_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  201523200L,
};

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_benchmark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f10_),
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M3, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M5, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M6, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4_M6, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M4, f3_),
  1,
  2,
  6,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M7, f4_),
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8_M9, f4_),
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M8, f4_),
  1,
  2,
  4,
  8,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f14_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f15_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f16_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f17_),
  1,
  2,
  3,
  4,
  5,
  8,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11_M12, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M11, f2_),
  1,
  8,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M13, f5_),
  1,
  2,
  3,
  4,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10_M14, f4_),
  1,
  2,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M10, f10_),
  1,
  2,
  4,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M16, f7_),
  1,
  4,
  5,
  8,
  10,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M18, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M18, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M18, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M19, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M19, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17_M19, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M17, f3_),
  1,
  2,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15_M20, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M15, f13_),
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  11,
  15,
  19,
  21,
  22,
  23,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M22, f12_),
  1,
  3,
  10,
  13,
  14,
  15,
  16,
  17,
  20,
  21,
  22,
  24,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23_M24, f12_),
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  11,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21_M23, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M21, f14_),
  1,
  2,
  3,
  6,
  8,
  9,
  15,
  17,
  20,
  22,
  24,
  25,
  26,
  29,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26_M27, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M26, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28_M29, f8_),
  1,
  2,
  4,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25_M28, f10_),
  1,
  2,
  6,
  8,
  9,
  10,
  12,
  13,
  17,
  18,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M25, f13_),
  1,
  2,
  3,
  4,
  8,
  10,
  11,
  12,
  18,
  19,
  20,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M31, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32_M33, f5_),
  1,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M32, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M34, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M34, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M34, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30_M35, f9_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M30, f14_),
  1,
  2,
  3,
  4,
  5,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  20,
  22,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M38, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37_M39, f4_),
  1,
  2,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M37, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M40, f8_),
  1,
  3,
  4,
  5,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36_M41, f7_),
  1,
  3,
  6,
  8,
  9,
  12,
  16,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f14_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M36, f15_),
  1,
  2,
  4,
  5,
  10,
  11,
  12,
  13,
  14,
  15,
  18,
  19,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M43, f11_),
  1,
  3,
  4,
  6,
  8,
  9,
  10,
  11,
  14,
  15,
  17,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M44, f9_),
  1,
  3,
  4,
  8,
  9,
  11,
  12,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45_M46, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M45, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M47, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M47, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42_M47, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f14_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f15_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M42, f16_),
  1,
  4,
  5,
  6,
  9,
  10,
  11,
  13,
  18,
  19,
  22,
  28,
  29,
  30,
  31,
  32,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M49, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M49, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M49, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50_M51, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50_M51, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50_M51, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48_M50, f6_),
  1,
  2,
  3,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M48, f8_),
  1,
  4,
  5,
  7,
  9,
  10,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M53, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M53, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M53, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M54, f6_),
  1,
  2,
  3,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M55, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M55, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M55, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56_M57, f5_),
  1,
  7,
  8,
  10,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52_M56, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M52, f13_),
  1,
  2,
  3,
  5,
  6,
  7,
  8,
  16,
  17,
  19,
  25,
  26,
  27,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::hyperprotobench::M1_M2)},
  { 25, 31, sizeof(::hyperprotobench::M1_M3)},
  { 32, 38, sizeof(::hyperprotobench::M1_M4_M5)},
  { 39, 45, sizeof(::hyperprotobench::M1_M4_M6)},
  { 46, 54, sizeof(::hyperprotobench::M1_M4)},
  { 57, 66, sizeof(::hyperprotobench::M1_M7)},
  { 70, 79, sizeof(::hyperprotobench::M1_M8_M9)},
  { 83, 92, sizeof(::hyperprotobench::M1_M8)},
  { 96, 118, sizeof(::hyperprotobench::M1)},
  { 135, 142, sizeof(::hyperprotobench::M10_M11_M12)},
  { 144, 151, sizeof(::hyperprotobench::M10_M11)},
  { 153, 163, sizeof(::hyperprotobench::M10_M13)},
  { 168, 177, sizeof(::hyperprotobench::M10_M14)},
  { 181, 196, sizeof(::hyperprotobench::M10)},
  { 206, 218, sizeof(::hyperprotobench::M15_M16)},
  { 225, 231, sizeof(::hyperprotobench::M15_M17_M18)},
  { 232, 238, sizeof(::hyperprotobench::M15_M17_M19)},
  { 239, 247, sizeof(::hyperprotobench::M15_M17)},
  { 250, 257, sizeof(::hyperprotobench::M15_M20)},
  { 259, 277, sizeof(::hyperprotobench::M15)},
  { 290, 307, sizeof(::hyperprotobench::M21_M22)},
  { 319, 336, sizeof(::hyperprotobench::M21_M23_M24)},
  { 348, 355, sizeof(::hyperprotobench::M21_M23)},
  { 357, 376, sizeof(::hyperprotobench::M21)},
  { 390, 396, sizeof(::hyperprotobench::M25_M26_M27)},
  { 397, 405, sizeof(::hyperprotobench::M25_M26)},
  { 408, 421, sizeof(::hyperprotobench::M25_M28_M29)},
  { 429, 444, sizeof(::hyperprotobench::M25_M28)},
  { 454, 472, sizeof(::hyperprotobench::M25)},
  { 485, 491, sizeof(::hyperprotobench::M30_M31)},
  { 492, 502, sizeof(::hyperprotobench::M30_M32_M33)},
  { 507, 514, sizeof(::hyperprotobench::M30_M32)},
  { 516, 522, sizeof(::hyperprotobench::M30_M34)},
  { 523, 537, sizeof(::hyperprotobench::M30_M35)},
  { 546, 565, sizeof(::hyperprotobench::M30)},
  { 579, 586, sizeof(::hyperprotobench::M36_M37_M38)},
  { 588, 597, sizeof(::hyperprotobench::M36_M37_M39)},
  { 601, 609, sizeof(::hyperprotobench::M36_M37)},
  { 612, 625, sizeof(::hyperprotobench::M36_M40)},
  { 633, 645, sizeof(::hyperprotobench::M36_M41)},
  { 652, 672, sizeof(::hyperprotobench::M36)},
  { 687, 703, sizeof(::hyperprotobench::M42_M43)},
  { 714, 728, sizeof(::hyperprotobench::M42_M44)},
  { 737, 745, sizeof(::hyperprotobench::M42_M45_M46)},
  { 748, 755, sizeof(::hyperprotobench::M42_M45)},
  { 757, 763, sizeof(::hyperprotobench::M42_M47)},
  { 764, 785, sizeof(::hyperprotobench::M42)},
  { 801, 807, sizeof(::hyperprotobench::M48_M49)},
  { 808, 814, sizeof(::hyperprotobench::M48_M50_M51)},
  { 815, 826, sizeof(::hyperprotobench::M48_M50)},
  { 832, 845, sizeof(::hyperprotobench::M48)},
  { 853, 859, sizeof(::hyperprotobench::M52_M53)},
  { 860, 871, sizeof(::hyperprotobench::M52_M54)},
  { 877, 883, sizeof(::hyperprotobench::M52_M55)},
  { 884, 894, sizeof(::hyperprotobench::M52_M56_M57)},
  { 899, 906, sizeof(::hyperprotobench::M52_M56)},
  { 908, 926, sizeof(::hyperprotobench::M52)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M4_M5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M4_M6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M8_M9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M10_M11_M12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M10_M11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M10_M13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M10_M14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_M16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_M17_M18_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_M17_M19_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_M17_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_M20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M23_M24_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_M23_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M26_M27_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M26_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M28_M29_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_M28_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M25_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M31_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M32_M33_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M32_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M34_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_M35_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M30_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_M37_M38_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_M37_M39_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_M37_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_M40_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_M41_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M36_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_M43_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_M44_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_M45_M46_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_M45_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_M47_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M42_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M48_M49_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M48_M50_M51_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M48_M50_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M48_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_M53_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_M54_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_M55_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_M56_M57_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_M56_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M52_default_instance_),
};

const char descriptor_table_protodef_benchmark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017benchmark.proto\022\017hyperprotobench\"\200\010\n\002M"
  "1\022\"\n\002f1\030\002 \001(\0132\026.hyperprotobench.M1.M2\022\"\n"
  "\002f2\030\003 \001(\0162\026.hyperprotobench.M1.E1\022\n\n\002f3\030"
  "\004 \001(\003\022\n\n\002f4\030\005 \001(\005\022\n\n\002f5\030\006 \001(\006\022\"\n\002f6\030\t \001("
  "\0132\026.hyperprotobench.M1.M3\022\n\n\002f7\030\017 \001(\003\022\n\n"
  "\002f8\030\020 \001(\006\022\n\n\002f9\030\021 \001(\007\022\013\n\003f10\030\022 \001(\010\022\013\n\003f1"
  "1\030\023 \001(\006\022#\n\003f12\030\024 \001(\0162\026.hyperprotobench.M"
  "1.E2\022#\n\003f13\030\025 \001(\0132\026.hyperprotobench.M1.M"
  "4\022\013\n\003f14\030\026 \001(\004\022\013\n\003f15\030\027 \001(\001\022#\n\003f16\030\030 \001(\013"
  "2\026.hyperprotobench.M1.M7\022#\n\003f17\030\031 \001(\0132\026."
  "hyperprotobench.M1.M8\032}\n\002M2\022\n\n\002f1\030\003 \001(\003\022"
  "\n\n\002f2\030\004 \001(\014\022\n\n\002f3\030\005 \001(\003\022\n\n\002f4\030\006 \001(\003\022\n\n\002f"
  "5\030\007 \001(\014\022\n\n\002f6\030\n \001(\014\022\n\n\002f7\030\013 \001(\014\022\n\n\002f8\030\014 "
  "\001(\003\022\n\n\002f9\030\r \001(\014\022\013\n\003f10\030\016 \001(\003\032\020\n\002M3\022\n\n\002f1"
  "\030\001 \001(\003\032\202\001\n\002M4\022%\n\002f1\030\001 \001(\0132\031.hyperprotobe"
  "nch.M1.M4.M5\022%\n\002f2\030\002 \001(\0132\031.hyperprotoben"
  "ch.M1.M4.M6\022\n\n\002f3\030\006 \001(\003\032\020\n\002M5\022\n\n\002f1\030\001 \001("
  "\006\032\020\n\002M6\022\n\n\002f1\030\001 \001(\003\0324\n\002M7\022\n\n\002f1\030\002 \001(\t\022\n\n"
  "\002f2\030\003 \001(\t\022\n\n\002f3\030\004 \001(\010\022\n\n\002f4\030\006 \001(\010\032\205\001\n\002M8"
  "\022\n\n\002f1\030\004 \001(\014\022%\n\002f2\030\005 \001(\0132\031.hyperprotoben"
  "ch.M1.M8.M9\022\n\n\002f3\030\007 \001(\010\022\n\n\002f4\030\013 \001(\004\0324\n\002M"
  "9\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\010\022\n\n\002f3\030\003 \003(\014\022\n\n"
  "\002f4\030\005 \001(\014\"T\n\002E1\022\016\n\nE1_CONST_1\020\n\022\016\n\nE1_CO"
  "NST_2\020\r\022\016\n\nE1_CONST_3\020\032\022\016\n\nE1_CONST_4\020;\022"
  "\016\n\nE1_CONST_5\020\034\"T\n\002E2\022\016\n\nE2_CONST_1\020\t\022\016\n"
  "\nE2_CONST_2\020,\022\016\n\nE2_CONST_3\020n\022\016\n\nE2_CONS"
  "T_4\020\035\022\016\n\nE2_CONST_5\020_\"\242\003\n\003M10\022\n\n\002f1\030\001 \001("
  "\005\022$\n\002f2\030\002 \001(\0132\030.hyperprotobench.M10.M11\022"
  "$\n\002f3\030\004 \001(\0132\030.hyperprotobench.M10.M13\022\n\n"
  "\002f4\030\005 \001(\003\022$\n\002f5\030\007 \001(\0132\030.hyperprotobench."
  "M10.M14\022\n\n\002f6\030\010 \001(\014\022\n\n\002f7\030\t \001(\004\022\n\n\002f8\030\n "
  "\001(\006\022\n\n\002f9\030\013 \001(\005\022\013\n\003f10\030\014 \001(\006\032Z\n\003M11\022(\n\002f"
  "1\030\001 \001(\0132\034.hyperprotobench.M10.M11.M12\022\n\n"
  "\002f2\030\010 \001(\014\032\035\n\003M12\022\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\005"
  "\032A\n\003M13\022\n\n\002f1\030\002 \001(\014\022\n\n\002f2\030\003 \001(\006\022\n\n\002f3\030\004 "
  "\001(\007\022\n\n\002f4\030\005 \001(\007\022\n\n\002f5\030\010 \001(\010\0325\n\003M14\022\n\n\002f1"
  "\030\001 \001(\003\022\n\n\002f2\030\002 \001(\001\022\n\n\002f3\030\005 \001(\010\022\n\n\002f4\030\007 \001"
  "(\003\"\373\003\n\003M15\022\n\n\002f1\030\002 \001(\t\022\n\n\002f2\030\003 \001(\007\022\n\n\002f3"
  "\030\004 \001(\014\022\n\n\002f4\030\005 \001(\010\022\n\n\002f5\030\006 \001(\t\022\n\n\002f6\030\010 \001"
  "(\003\022\n\n\002f7\030\n \001(\010\022\n\n\002f8\030\014 \001(\014\022$\n\002f9\030\020 \001(\0132\030"
  ".hyperprotobench.M15.M16\022%\n\003f10\030\024 \001(\0132\030."
  "hyperprotobench.M15.M17\022\013\n\003f11\030\026 \001(\014\022%\n\003"
  "f12\030\027 \001(\0132\030.hyperprotobench.M15.M20\022\013\n\003f"
  "13\030\030 \001(\010\032Y\n\003M16\022\n\n\002f1\030\001 \001(\007\022\n\n\002f2\030\004 \001(\014\022"
  "\n\n\002f3\030\005 \003(\014\022\n\n\002f4\030\010 \001(\t\022\n\n\002f5\030\n \001(\003\022\n\n\002f"
  "6\030\016 \001(\t\022\n\n\002f7\030\017 \001(\003\032\213\001\n\003M17\022(\n\002f1\030\001 \001(\0132"
  "\034.hyperprotobench.M15.M17.M18\022(\n\002f2\030\002 \001("
  "\0132\034.hyperprotobench.M15.M17.M19\022\n\n\002f3\030\007 "
  "\001(\003\032\021\n\003M18\022\n\n\002f1\030\001 \001(\014\032\021\n\003M19\022\n\n\002f1\030\002 \001("
  "\003\032\035\n\003M20\022\n\n\002f1\030\002 \001(\003\022\n\n\002f2\030\003 \001(\003\"\311\005\n\003M21"
  "\022\n\n\002f1\030\001 \001(\006\022\n\n\002f2\030\002 \001(\003\022\n\n\002f3\030\003 \001(\006\022\n\n\002"
  "f4\030\006 \001(\014\022$\n\002f5\030\010 \001(\0132\030.hyperprotobench.M"
  "21.M22\022\n\n\002f6\030\t \001(\006\022$\n\002f7\030\017 \001(\0132\030.hyperpr"
  "otobench.M21.M23\022\n\n\002f8\030\021 \001(\014\022#\n\002f9\030\024 \001(\016"
  "2\027.hyperprotobench.M21.E1\022\013\n\003f10\030\026 \001(\003\022\013"
  "\n\003f11\030\030 \001(\003\022\013\n\003f12\030\031 \001(\005\022\013\n\003f13\030\032 \003(\014\022\013\n"
  "\003f14\030\035 \001(\014\032\230\001\n\003M22\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\003 \001"
  "(\003\022\n\n\002f3\030\n \001(\005\022\n\n\002f4\030\r \001(\006\022\n\n\002f5\030\016 \001(\003\022\n"
  "\n\002f6\030\017 \001(\005\022\n\n\002f7\030\020 \001(\003\022\n\n\002f8\030\021 \003(\t\022\n\n\002f9"
  "\030\024 \001(\014\022\013\n\003f10\030\025 \001(\014\022\013\n\003f11\030\026 \001(\003\022\013\n\003f12\030"
  "\030 \001(\014\032\326\001\n\003M23\022\n\n\002f1\030\001 \001(\003\022(\n\002f2\030\002 \001(\0132\034."
  "hyperprotobench.M21.M23.M24\032\230\001\n\003M24\022\n\n\002f"
  "1\030\001 \001(\014\022\n\n\002f2\030\003 \001(\014\022\n\n\002f3\030\004 \001(\010\022\n\n\002f4\030\005 "
  "\001(\014\022\n\n\002f5\030\006 \001(\014\022\n\n\002f6\030\007 \001(\004\022\n\n\002f7\030\010 \001(\006\022"
  "\n\n\002f8\030\n \001(\003\022\n\n\002f9\030\013 \001(\014\022\013\n\003f10\030\r \001(\006\022\013\n\003"
  "f11\030\016 \001(\003\022\013\n\003f12\030\017 \001(\004\"T\n\002E1\022\016\n\nE1_CONST"
  "_1\020D\022\016\n\nE1_CONST_2\020+\022\016\n\nE1_CONST_3\020N\022\016\n\n"
  "E1_CONST_4\020O\022\016\n\nE1_CONST_5\0208\"\221\007\n\003M25\022\n\n\002"
  "f1\030\002 \001(\007\022\n\n\002f2\030\003 \001(\006\022\n\n\002f3\030\004 \001(\006\022\n\n\002f4\030\005"
  " \001(\001\022\n\n\002f5\030\t \001(\t\022$\n\002f6\030\013 \001(\0132\030.hyperprot"
  "obench.M25.M26\022\n\n\002f7\030\014 \001(\010\022\n\n\002f8\030\r \001(\014\022\n"
  "\n\002f9\030\023 \001(\014\022\013\n\003f10\030\024 \001(\014\022\013\n\003f11\030\025 \001(\010\022%\n\003"
  "f12\030\030 \001(\0132\030.hyperprotobench.M25.M28\022$\n\003f"
  "13\030\031 \001(\0162\027.hyperprotobench.M25.E1\032\315\001\n\003M2"
  "6\022\n\n\002f1\030\001 \001(\006\022\'\n\002f2\030\002 \001(\0162\033.hyperprotobe"
  "nch.M25.M26.E1\022(\n\002f3\030\003 \001(\0132\034.hyperprotob"
  "ench.M25.M26.M27\032\021\n\003M27\022\n\n\002f1\030\001 \001(\014\"T\n\002E"
  "1\022\016\n\nE1_CONST_1\020A\022\016\n\nE1_CONST_2\020\010\022\016\n\nE1_"
  "CONST_3\020N\022\016\n\nE1_CONST_4\020n\022\016\n\nE1_CONST_5\020"
  "W\032\366\002\n\003M28\022\n\n\002f1\030\002 \001(\014\022(\n\002f2\030\003 \001(\0132\034.hype"
  "rprotobench.M25.M28.M29\022\n\n\002f3\030\007 \001(\003\022\n\n\002f"
  "4\030\t \001(\003\022\n\n\002f5\030\n \001(\003\022\n\n\002f6\030\013 \001(\014\022\'\n\002f7\030\r "
  "\001(\0162\033.hyperprotobench.M25.M28.E1\022\n\n\002f8\030\016"
  " \001(\007\022\n\n\002f9\030\022 \001(\014\022\013\n\003f10\030\023 \001(\010\032e\n\003M29\022\n\n\002"
  "f1\030\002 \001(\003\022\n\n\002f2\030\003 \001(\006\022\n\n\002f3\030\005 \001(\006\022\n\n\002f4\030\007"
  " \001(\010\022\n\n\002f5\030\010 \001(\010\022\n\n\002f6\030\t \001(\003\022\n\n\002f7\030\n \001(\003"
  "\022\n\n\002f8\030\013 \001(\010\"T\n\002E1\022\016\n\nE1_CONST_1\020%\022\016\n\nE1"
  "_CONST_2\020+\022\016\n\nE1_CONST_3\020L\022\016\n\nE1_CONST_4"
  "\020\032\022\016\n\nE1_CONST_5\020[\"T\n\002E1\022\016\n\nE1_CONST_1\020J"
  "\022\016\n\nE1_CONST_2\020O\022\016\n\nE1_CONST_3\020\022\022\016\n\nE1_C"
  "ONST_4\020t\022\016\n\nE1_CONST_5\0207\"\263\004\n\003M30\022$\n\002f1\030\004"
  " \001(\0132\030.hyperprotobench.M30.M31\022$\n\002f2\030\005 \001"
  "(\0132\030.hyperprotobench.M30.M32\022$\n\002f3\030\006 \001(\013"
  "2\030.hyperprotobench.M30.M34\022\n\n\002f4\030\007 \001(\010\022\n"
  "\n\002f5\030\010 \001(\003\022\n\n\002f6\030\013 \001(\010\022\n\n\002f7\030\014 \003(\014\022\n\n\002f8"
  "\030\r \001(\003\022\n\n\002f9\030\016 \001(\014\022\013\n\003f10\030\017 \001(\006\022\013\n\003f11\030\020"
  " \001(\003\022\013\n\003f12\030\021 \001(\014\022\013\n\003f13\030\027 \001(\014\022%\n\003f14\030\031 "
  "\001(\0132\030.hyperprotobench.M30.M35\032\021\n\003M31\022\n\n\002"
  "f1\030\001 \001(\006\032~\n\003M32\022(\n\002f1\030\001 \001(\0132\034.hyperproto"
  "bench.M30.M32.M33\022\n\n\002f2\030\003 \001(\004\032A\n\003M33\022\n\n\002"
  "f1\030\001 \001(\003\022\n\n\002f2\030\003 \001(\006\022\n\n\002f3\030\004 \001(\006\022\n\n\002f4\030\005"
  " \001(\005\022\n\n\002f5\030\007 \001(\014\032\021\n\003M34\022\n\n\002f1\030\003 \001(\006\032q\n\003M"
  "35\022\n\n\002f1\030\001 \001(\t\022\n\n\002f2\030\002 \001(\014\022\n\n\002f3\030\003 \001(\005\022\n"
  "\n\002f4\030\004 \003(\014\022\n\n\002f5\030\005 \001(\014\022\n\n\002f6\030\006 \001(\t\022\n\n\002f7"
  "\030\007 \001(\t\022\n\n\002f8\030\010 \001(\014\022\n\n\002f9\030\n \001(\014\"\202\006\n\003M36\022\n"
  "\n\002f1\030\002 \001(\003\022$\n\002f2\030\003 \001(\0132\030.hyperprotobench"
  ".M36.M37\022\n\n\002f3\030\005 \001(\014\022\n\n\002f4\030\006 \001(\005\022\n\n\002f5\030\013"
  " \001(\003\022\n\n\002f6\030\014 \001(\010\022\n\n\002f7\030\r \001(\003\022$\n\002f8\030\016 \001(\013"
  "2\030.hyperprotobench.M36.M40\022\n\n\002f9\030\017 \001(\001\022\013"
  "\n\003f10\030\020 \001(\010\022\013\n\003f11\030\023 \001(\001\022\013\n\003f12\030\024 \001(\003\022%\n"
  "\003f13\030\027 \001(\0132\030.hyperprotobench.M36.M41\022\013\n\003"
  "f14\030\030 \001(\003\022\013\n\003f15\030\031 \001(\004\032\273\001\n\003M37\022\n\n\002f1\030\001 \001"
  "(\003\022(\n\002f2\030\002 \001(\0132\034.hyperprotobench.M36.M37"
  ".M38\022(\n\002f3\030\003 \001(\0132\034.hyperprotobench.M36.M"
  "37.M39\032\035\n\003M38\022\n\n\002f1\030\002 \001(\010\022\n\n\002f2\030\003 \001(\003\0325\n"
  "\003M39\022\n\n\002f1\030\001 \001(\001\022\n\n\002f2\030\002 \001(\003\022\n\n\002f3\030\003 \001(\014"
  "\022\n\n\002f4\030\005 \001(\003\032\331\001\n\003M40\022\n\n\002f1\030\002 \001(\003\022\n\n\002f2\030\004"
  " \001(\014\022\n\n\002f3\030\005 \001(\014\022\n\n\002f4\030\006 \001(\007\022\n\n\002f5\030\010 \001(\r"
  "\022\'\n\002f6\030\t \001(\0162\033.hyperprotobench.M36.M40.E"
  "1\022\n\n\002f7\030\n \001(\003\022\n\n\002f8\030\013 \001(\003\"U\n\002E1\022\016\n\nE1_CO"
  "NST_1\020C\022\016\n\nE1_CONST_2\020&\022\017\n\nE1_CONST_3\020\253O"
  "\022\016\n\nE1_CONST_4\020N\022\016\n\nE1_CONST_5\020\017\032Y\n\003M41\022"
  "\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\003 \001(\014\022\n\n\002f3\030\006 \001(\003\022\n\n\002f"
  "4\030\010 \001(\t\022\n\n\002f5\030\t \001(\010\022\n\n\002f6\030\014 \001(\005\022\n\n\002f7\030\020 "
  "\001(\014\"\244\006\n\003M42\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\004 \001(\t\022\n\n\002f"
  "3\030\005 \001(\004\022\n\n\002f4\030\006 \001(\003\022\n\n\002f5\030\t \001(\003\022\n\n\002f6\030\n "
  "\001(\003\022$\n\002f7\030\013 \001(\0132\030.hyperprotobench.M42.M4"
  "3\022\n\n\002f8\030\r \001(\003\022$\n\002f9\030\022 \001(\0132\030.hyperprotobe"
  "nch.M42.M44\022%\n\003f10\030\023 \001(\0132\030.hyperprotoben"
  "ch.M42.M45\022\013\n\003f11\030\026 \001(\001\022\013\n\003f12\030\034 \001(\010\022\013\n\003"
  "f13\030\035 \001(\014\022%\n\003f14\030\036 \001(\0132\030.hyperprotobench"
  ".M42.M47\022\013\n\003f15\030\037 \001(\003\022\013\n\003f16\030  \001(\t\032\213\001\n\003M"
  "43\022\n\n\002f1\030\006 \001(\014\022\n\n\002f2\030\010 \001(\014\022\n\n\002f3\030\t \001(\003\022\n"
  "\n\002f4\030\013 \003(\014\022\n\n\002f5\030\r \001(\003\022\n\n\002f6\030\016 \001(\006\022\n\n\002f7"
  "\030\017 \001(\006\022\n\n\002f8\030\020 \001(\014\022\n\n\002f9\030\023 \001(\003\022\013\n\003f10\030\024 "
  "\001(\003\022\013\n\003f11\030\026 \001(\t\032\344\001\n\003M44\022\n\n\002f1\030\001 \001(\003\022\'\n\002"
  "f2\030\003 \001(\0162\033.hyperprotobench.M42.M44.E1\022\n\n"
  "\002f3\030\004 \001(\003\022\n\n\002f4\030\010 \001(\006\022\n\n\002f5\030\t \001(\014\022\n\n\002f6\030"
  "\013 \001(\007\022\n\n\002f7\030\014 \001(\005\022\n\n\002f8\030\016 \001(\003\022\n\n\002f9\030\017 \001("
  "\014\"T\n\002E1\022\016\n\nE1_CONST_1\020%\022\016\n\nE1_CONST_2\0201\022"
  "\016\n\nE1_CONST_3\020X\022\016\n\nE1_CONST_4\020x\022\016\n\nE1_CO"
  "NST_5\020}\032f\n\003M45\022\n\n\002f1\030\002 \001(\005\022(\n\002f2\030\004 \001(\0132\034"
  ".hyperprotobench.M42.M45.M46\032)\n\003M46\022\n\n\002f"
  "1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\003\022\n\n\002f3\030\003 \001(\003\032\021\n\003M47\022\n"
  "\n\002f1\030\002 \001(\003\"\254\002\n\003M48\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\004 \001"
  "(\001\022\n\n\002f3\030\005 \001(\003\022\n\n\002f4\030\007 \001(\014\022$\n\002f5\030\t \001(\0132\030"
  ".hyperprotobench.M48.M49\022$\n\002f6\030\n \001(\0132\030.h"
  "yperprotobench.M48.M50\022\n\n\002f7\030\017 \001(\014\022\n\n\002f8"
  "\030\020 \001(\006\032\021\n\003M49\022\n\n\002f1\030\n \001(\006\032~\n\003M50\022\n\n\002f1\030\002"
  " \001(\014\022\n\n\002f2\030\003 \001(\006\022(\n\002f3\030\004 \001(\0132\034.hyperprot"
  "obench.M48.M50.M51\022\n\n\002f4\030\006 \001(\003\022\n\n\002f5\030\007 \003"
  "(\014\022\n\n\002f6\030\010 \001(\003\032\021\n\003M51\022\n\n\002f1\030\001 \001(\014\"\202\004\n\003M5"
  "2\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\014\022\n\n\002f3\030\003 \001(\003\022\n\n"
  "\002f4\030\005 \001(\007\022\n\n\002f5\030\006 \001(\003\022\n\n\002f6\030\007 \001(\003\022\n\n\002f7\030"
  "\010 \001(\004\022$\n\002f8\030\020 \001(\0132\030.hyperprotobench.M52."
  "M53\022$\n\002f9\030\021 \001(\0132\030.hyperprotobench.M52.M5"
  "4\022\013\n\003f10\030\023 \001(\014\022\013\n\003f11\030\031 \001(\003\022%\n\003f12\030\032 \001(\013"
  "2\030.hyperprotobench.M52.M55\022%\n\003f13\030\033 \001(\0132"
  "\030.hyperprotobench.M52.M56\032\021\n\003M53\022\n\n\002f1\030\001"
  " \001(\004\032M\n\003M54\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\004\022\n\n\002f"
  "3\030\003 \001(\006\022\n\n\002f4\030\004 \001(\003\022\n\n\002f5\030\005 \001(\003\022\n\n\002f6\030\007 "
  "\001(\014\032\021\n\003M55\022\n\n\002f1\030\001 \001(\006\032~\n\003M56\022(\n\002f1\030\002 \001("
  "\0132\034.hyperprotobench.M52.M56.M57\022\n\n\002f2\030\004 "
  "\001(\007\032A\n\003M57\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\007 \001(\007\022\n\n\002f3"
  "\030\010 \001(\t\022\n\n\002f4\030\n \001(\003\022\n\n\002f5\030\014 \001(\003B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_benchmark_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_benchmark_2eproto_sccs[57] = {
  &scc_info_M1_benchmark_2eproto.base,
  &scc_info_M1_M2_benchmark_2eproto.base,
  &scc_info_M1_M3_benchmark_2eproto.base,
  &scc_info_M1_M4_benchmark_2eproto.base,
  &scc_info_M1_M4_M5_benchmark_2eproto.base,
  &scc_info_M1_M4_M6_benchmark_2eproto.base,
  &scc_info_M1_M7_benchmark_2eproto.base,
  &scc_info_M1_M8_benchmark_2eproto.base,
  &scc_info_M1_M8_M9_benchmark_2eproto.base,
  &scc_info_M10_benchmark_2eproto.base,
  &scc_info_M10_M11_benchmark_2eproto.base,
  &scc_info_M10_M11_M12_benchmark_2eproto.base,
  &scc_info_M10_M13_benchmark_2eproto.base,
  &scc_info_M10_M14_benchmark_2eproto.base,
  &scc_info_M15_benchmark_2eproto.base,
  &scc_info_M15_M16_benchmark_2eproto.base,
  &scc_info_M15_M17_benchmark_2eproto.base,
  &scc_info_M15_M17_M18_benchmark_2eproto.base,
  &scc_info_M15_M17_M19_benchmark_2eproto.base,
  &scc_info_M15_M20_benchmark_2eproto.base,
  &scc_info_M21_benchmark_2eproto.base,
  &scc_info_M21_M22_benchmark_2eproto.base,
  &scc_info_M21_M23_benchmark_2eproto.base,
  &scc_info_M21_M23_M24_benchmark_2eproto.base,
  &scc_info_M25_benchmark_2eproto.base,
  &scc_info_M25_M26_benchmark_2eproto.base,
  &scc_info_M25_M26_M27_benchmark_2eproto.base,
  &scc_info_M25_M28_benchmark_2eproto.base,
  &scc_info_M25_M28_M29_benchmark_2eproto.base,
  &scc_info_M30_benchmark_2eproto.base,
  &scc_info_M30_M31_benchmark_2eproto.base,
  &scc_info_M30_M32_benchmark_2eproto.base,
  &scc_info_M30_M32_M33_benchmark_2eproto.base,
  &scc_info_M30_M34_benchmark_2eproto.base,
  &scc_info_M30_M35_benchmark_2eproto.base,
  &scc_info_M36_benchmark_2eproto.base,
  &scc_info_M36_M37_benchmark_2eproto.base,
  &scc_info_M36_M37_M38_benchmark_2eproto.base,
  &scc_info_M36_M37_M39_benchmark_2eproto.base,
  &scc_info_M36_M40_benchmark_2eproto.base,
  &scc_info_M36_M41_benchmark_2eproto.base,
  &scc_info_M42_benchmark_2eproto.base,
  &scc_info_M42_M43_benchmark_2eproto.base,
  &scc_info_M42_M44_benchmark_2eproto.base,
  &scc_info_M42_M45_benchmark_2eproto.base,
  &scc_info_M42_M45_M46_benchmark_2eproto.base,
  &scc_info_M42_M47_benchmark_2eproto.base,
  &scc_info_M48_benchmark_2eproto.base,
  &scc_info_M48_M49_benchmark_2eproto.base,
  &scc_info_M48_M50_benchmark_2eproto.base,
  &scc_info_M48_M50_M51_benchmark_2eproto.base,
  &scc_info_M52_benchmark_2eproto.base,
  &scc_info_M52_M53_benchmark_2eproto.base,
  &scc_info_M52_M54_benchmark_2eproto.base,
  &scc_info_M52_M55_benchmark_2eproto.base,
  &scc_info_M52_M56_benchmark_2eproto.base,
  &scc_info_M52_M56_M57_benchmark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_benchmark_2eproto_once;
static bool descriptor_table_benchmark_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto = {
  &descriptor_table_benchmark_2eproto_initialized, descriptor_table_protodef_benchmark_2eproto, "benchmark.proto", 6595,
  &descriptor_table_benchmark_2eproto_once, descriptor_table_benchmark_2eproto_sccs, descriptor_table_benchmark_2eproto_deps, 57, 0,
  schemas, file_default_instances, TableStruct_benchmark_2eproto::offsets,
  file_level_metadata_benchmark_2eproto, 57, file_level_enum_descriptors_benchmark_2eproto, file_level_service_descriptors_benchmark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_benchmark_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_benchmark_2eproto), true);
namespace hyperprotobench {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[0];
}
bool M1_E1_IsValid(int value) {
  switch (value) {
    case 10:
    case 13:
    case 26:
    case 28:
    case 59:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_E1 M1::E1_CONST_1;
constexpr M1_E1 M1::E1_CONST_2;
constexpr M1_E1 M1::E1_CONST_3;
constexpr M1_E1 M1::E1_CONST_4;
constexpr M1_E1 M1::E1_CONST_5;
constexpr M1_E1 M1::E1_MIN;
constexpr M1_E1 M1::E1_MAX;
constexpr int M1::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[1];
}
bool M1_E2_IsValid(int value) {
  switch (value) {
    case 9:
    case 29:
    case 44:
    case 95:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_E2 M1::E2_CONST_1;
constexpr M1_E2 M1::E2_CONST_2;
constexpr M1_E2 M1::E2_CONST_3;
constexpr M1_E2 M1::E2_CONST_4;
constexpr M1_E2 M1::E2_CONST_5;
constexpr M1_E2 M1::E2_MIN;
constexpr M1_E2 M1::E2_MAX;
constexpr int M1::E2_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M21_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[2];
}
bool M21_E1_IsValid(int value) {
  switch (value) {
    case 43:
    case 56:
    case 68:
    case 78:
    case 79:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M21_E1 M21::E1_CONST_1;
constexpr M21_E1 M21::E1_CONST_2;
constexpr M21_E1 M21::E1_CONST_3;
constexpr M21_E1 M21::E1_CONST_4;
constexpr M21_E1 M21::E1_CONST_5;
constexpr M21_E1 M21::E1_MIN;
constexpr M21_E1 M21::E1_MAX;
constexpr int M21::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M26_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[3];
}
bool M25_M26_E1_IsValid(int value) {
  switch (value) {
    case 8:
    case 65:
    case 78:
    case 87:
    case 110:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M25_M26_E1 M25_M26::E1_CONST_1;
constexpr M25_M26_E1 M25_M26::E1_CONST_2;
constexpr M25_M26_E1 M25_M26::E1_CONST_3;
constexpr M25_M26_E1 M25_M26::E1_CONST_4;
constexpr M25_M26_E1 M25_M26::E1_CONST_5;
constexpr M25_M26_E1 M25_M26::E1_MIN;
constexpr M25_M26_E1 M25_M26::E1_MAX;
constexpr int M25_M26::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M28_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[4];
}
bool M25_M28_E1_IsValid(int value) {
  switch (value) {
    case 26:
    case 37:
    case 43:
    case 76:
    case 91:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M25_M28_E1 M25_M28::E1_CONST_1;
constexpr M25_M28_E1 M25_M28::E1_CONST_2;
constexpr M25_M28_E1 M25_M28::E1_CONST_3;
constexpr M25_M28_E1 M25_M28::E1_CONST_4;
constexpr M25_M28_E1 M25_M28::E1_CONST_5;
constexpr M25_M28_E1 M25_M28::E1_MIN;
constexpr M25_M28_E1 M25_M28::E1_MAX;
constexpr int M25_M28::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[5];
}
bool M25_E1_IsValid(int value) {
  switch (value) {
    case 18:
    case 55:
    case 74:
    case 79:
    case 116:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M25_E1 M25::E1_CONST_1;
constexpr M25_E1 M25::E1_CONST_2;
constexpr M25_E1 M25::E1_CONST_3;
constexpr M25_E1 M25::E1_CONST_4;
constexpr M25_E1 M25::E1_CONST_5;
constexpr M25_E1 M25::E1_MIN;
constexpr M25_E1 M25::E1_MAX;
constexpr int M25::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M36_M40_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[6];
}
bool M36_M40_E1_IsValid(int value) {
  switch (value) {
    case 15:
    case 38:
    case 67:
    case 78:
    case 10155:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M36_M40_E1 M36_M40::E1_CONST_1;
constexpr M36_M40_E1 M36_M40::E1_CONST_2;
constexpr M36_M40_E1 M36_M40::E1_CONST_3;
constexpr M36_M40_E1 M36_M40::E1_CONST_4;
constexpr M36_M40_E1 M36_M40::E1_CONST_5;
constexpr M36_M40_E1 M36_M40::E1_MIN;
constexpr M36_M40_E1 M36_M40::E1_MAX;
constexpr int M36_M40::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M42_M44_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[7];
}
bool M42_M44_E1_IsValid(int value) {
  switch (value) {
    case 37:
    case 49:
    case 88:
    case 120:
    case 125:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M42_M44_E1 M42_M44::E1_CONST_1;
constexpr M42_M44_E1 M42_M44::E1_CONST_2;
constexpr M42_M44_E1 M42_M44::E1_CONST_3;
constexpr M42_M44_E1 M42_M44::E1_CONST_4;
constexpr M42_M44_E1 M42_M44::E1_CONST_5;
constexpr M42_M44_E1 M42_M44::E1_MIN;
constexpr M42_M44_E1 M42_M44::E1_MAX;
constexpr int M42_M44::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void M1_M2::InitAsDefaultInstance() {
}
class M1_M2::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

M1_M2::M1_M2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(const M1_M2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2)
}

void M1_M2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f10_));
}

M1_M2::~M1_M2() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2)
  SharedDtor();
}

void M1_M2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M2::ArenaDtor(void* object) {
  M1_M2* _this = reinterpret_cast< M1_M2* >(object);
  (void)_this;
}
void M1_M2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2& M1_M2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000b00u) {
    if (cached_has_bits & 0x00000100u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      f9_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00001400u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f10 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional int64 f4 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f4(), target);
  }

  // optional bytes f5 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_f5(), target);
  }

  // optional bytes f6 = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_f6(), target);
  }

  // optional bytes f7 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_f7(), target);
  }

  // optional int64 f8 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_f8(), target);
  }

  // optional bytes f9 = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_f9(), target);
  }

  // optional int64 f10 = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2)
  return target;
}

size_t M1_M2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    // optional bytes f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional bytes f5 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00000b00u) {
    // optional bytes f6 = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f6());
    }

    // optional bytes f7 = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f7());
    }

    // optional bytes f9 = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

  }
  if (cached_has_bits & 0x0000001au) {
    // optional int64 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f3 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int64 f4 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00001400u) {
    // optional int64 f8 = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional int64 f10 = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f10());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2)
    MergeFrom(*source);
  }
}

void M1_M2::MergeFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000024u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f5(from._internal_f5());
    }
  }
  if (cached_has_bits & 0x00000b00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_f9(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00001000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2::CopyFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2::IsInitialized() const {
  return true;
}

void M1_M2::InternalSwap(M1_M2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M3::InitAsDefaultInstance() {
}
class M1_M3::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M3>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M3::M1_M3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M3)
}
M1_M3::M1_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M3)
}
M1_M3::M1_M3(const M1_M3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M3)
}

void M1_M3::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M1_M3::~M1_M3() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M3)
  SharedDtor();
}

void M1_M3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M3::ArenaDtor(void* object) {
  M1_M3* _this = reinterpret_cast< M1_M3* >(object);
  (void)_this;
}
void M1_M3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M3& M1_M3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M3_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M3::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M3)
  return target;
}

size_t M1_M3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M3)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M3)
    MergeFrom(*source);
  }
}

void M1_M3::MergeFrom(const M1_M3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M3::CopyFrom(const M1_M3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M3::IsInitialized() const {
  return true;
}

void M1_M3::InternalSwap(M1_M3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M4_M5::InitAsDefaultInstance() {
}
class M1_M4_M5::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M4_M5>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M4_M5::M1_M4_M5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M4.M5)
}
M1_M4_M5::M1_M4_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M4.M5)
}
M1_M4_M5::M1_M4_M5(const M1_M4_M5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M4.M5)
}

void M1_M4_M5::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M1_M4_M5::~M1_M4_M5() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M4.M5)
  SharedDtor();
}

void M1_M4_M5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M4_M5::ArenaDtor(void* object) {
  M1_M4_M5* _this = reinterpret_cast< M1_M4_M5* >(object);
  (void)_this;
}
void M1_M4_M5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M4_M5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M4_M5& M1_M4_M5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M4_M5_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M4_M5::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M4.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M4_M5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M4_M5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M4.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M4.M5)
  return target;
}

size_t M1_M4_M5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M4.M5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M4_M5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M4.M5)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M4_M5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M4_M5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M4.M5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M4.M5)
    MergeFrom(*source);
  }
}

void M1_M4_M5::MergeFrom(const M1_M4_M5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M4.M5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M4_M5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M4.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M4_M5::CopyFrom(const M1_M4_M5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M4.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M4_M5::IsInitialized() const {
  return true;
}

void M1_M4_M5::InternalSwap(M1_M4_M5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M4_M5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M4_M6::InitAsDefaultInstance() {
}
class M1_M4_M6::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M4_M6>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M1_M4_M6::M1_M4_M6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M4.M6)
}
M1_M4_M6::M1_M4_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M4.M6)
}
M1_M4_M6::M1_M4_M6(const M1_M4_M6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M4.M6)
}

void M1_M4_M6::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M1_M4_M6::~M1_M4_M6() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M4.M6)
  SharedDtor();
}

void M1_M4_M6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M1_M4_M6::ArenaDtor(void* object) {
  M1_M4_M6* _this = reinterpret_cast< M1_M4_M6* >(object);
  (void)_this;
}
void M1_M4_M6::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M4_M6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M4_M6& M1_M4_M6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M4_M6_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M4_M6::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M4.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M4_M6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M4_M6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M4.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M4.M6)
  return target;
}

size_t M1_M4_M6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M4.M6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M4_M6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M4.M6)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M4_M6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M4_M6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M4.M6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M4.M6)
    MergeFrom(*source);
  }
}

void M1_M4_M6::MergeFrom(const M1_M4_M6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M4.M6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M1_M4_M6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M4.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M4_M6::CopyFrom(const M1_M4_M6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M4.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M4_M6::IsInitialized() const {
  return true;
}

void M1_M4_M6::InternalSwap(M1_M4_M6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M4_M6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M4::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M4_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M4_M5*>(
      ::hyperprotobench::M1_M4_M5::internal_default_instance());
  ::hyperprotobench::_M1_M4_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M1_M4_M6*>(
      ::hyperprotobench::M1_M4_M6::internal_default_instance());
}
class M1_M4::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M4>()._has_bits_);
  static const ::hyperprotobench::M1_M4_M5& f1(const M1_M4* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M1_M4_M6& f2(const M1_M4* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::hyperprotobench::M1_M4_M5&
M1_M4::_Internal::f1(const M1_M4* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M1_M4_M6&
M1_M4::_Internal::f2(const M1_M4* msg) {
  return *msg->f2_;
}
void M1_M4::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M4_M5* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M4.f1)
}
void M1_M4::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M1_M4_M6* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M4.f2)
}
M1_M4::M1_M4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M4)
}
M1_M4::M1_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M4)
}
M1_M4::M1_M4(const M1_M4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M4_M5(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M1_M4_M6(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M4)
}

void M1_M4::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M4_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M1_M4::~M1_M4() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M4)
  SharedDtor();
}

void M1_M4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void M1_M4::ArenaDtor(void* object) {
  M1_M4* _this = reinterpret_cast< M1_M4* >(object);
  (void)_this;
}
void M1_M4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M4& M1_M4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M4_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M4::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M4.M5 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M4.M6 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M4.M5 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M1.M4.M6 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M4)
  return target;
}

size_t M1_M4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    // optional .hyperprotobench.M1.M4.M5 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M1.M4.M6 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M4)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M4)
    MergeFrom(*source);
  }
}

void M1_M4::MergeFrom(const M1_M4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000046u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M1_M4_M5::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M1_M4_M6::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M4::CopyFrom(const M1_M4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M4::IsInitialized() const {
  return true;
}

void M1_M4::InternalSwap(M1_M4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M7::InitAsDefaultInstance() {
}
class M1_M7::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M7>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M1_M7::M1_M7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M7)
}
M1_M7::M1_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M7)
}
M1_M7::M1_M7(const M1_M7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M7)
}

void M1_M7::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M7_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
}

M1_M7::~M1_M7() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M7)
  SharedDtor();
}

void M1_M7::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M7::ArenaDtor(void* object) {
  M1_M7* _this = reinterpret_cast< M1_M7* >(object);
  (void)_this;
}
void M1_M7::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M7& M1_M7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M7_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M7::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M7.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.M7.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M7.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional string f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.M7.f2");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional bool f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f3(), target);
  }

  // optional bool f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M7)
  return target;
}

size_t M1_M7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional string f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

    // optional bool f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M7)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M7)
    MergeFrom(*source);
  }
}

void M1_M7::MergeFrom(const M1_M7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M7::CopyFrom(const M1_M7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M7::IsInitialized() const {
  return true;
}

void M1_M7::InternalSwap(M1_M7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M8_M9::InitAsDefaultInstance() {
}
class M1_M8_M9::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M8_M9>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M1_M8_M9::M1_M8_M9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M8.M9)
}
M1_M8_M9::M1_M8_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f3_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M8.M9)
}
M1_M8_M9::M1_M8_M9(const M1_M8_M9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f3_(from.f3_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M8.M9)
}

void M1_M8_M9::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M8_M9_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M1_M8_M9::~M1_M8_M9() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M8.M9)
  SharedDtor();
}

void M1_M8_M9::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M8_M9::ArenaDtor(void* object) {
  M1_M8_M9* _this = reinterpret_cast< M1_M8_M9* >(object);
  (void)_this;
}
void M1_M8_M9::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M8_M9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M8_M9& M1_M8_M9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M8_M9_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M8_M9::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M8.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f3_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    f4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M8_M9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f3();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M8_M9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M8.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bool f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f2(), target);
  }

  // repeated bytes f3 = 3;
  for (int i = 0, n = this->_internal_f3_size(); i < n; i++) {
    const auto& s = this->_internal_f3(i);
    target = stream->WriteBytes(3, s, target);
  }

  // optional bytes f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M8.M9)
  return target;
}

size_t M1_M8_M9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M8.M9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f3 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f3_.size());
  for (int i = 0, n = f3_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f3_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000026u) {
    // optional bytes f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional bool f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M8_M9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M8.M9)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M8_M9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M8_M9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M8.M9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M8.M9)
    MergeFrom(*source);
  }
}

void M1_M8_M9::MergeFrom(const M1_M8_M9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M8.M9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f3_.MergeFrom(from.f3_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000026u) {
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M8_M9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M8.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M8_M9::CopyFrom(const M1_M8_M9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M8.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M8_M9::IsInitialized() const {
  return true;
}

void M1_M8_M9::InternalSwap(M1_M8_M9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.InternalSwap(&other->f3_);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M8_M9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1_M8::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_M8_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M1_M8_M9*>(
      ::hyperprotobench::M1_M8_M9::internal_default_instance());
}
class M1_M8::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M8>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M1_M8_M9& f2(const M1_M8* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::hyperprotobench::M1_M8_M9&
M1_M8::_Internal::f2(const M1_M8* msg) {
  return *msg->f2_;
}
void M1_M8::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M1_M8_M9* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M8.f2)
}
M1_M8::M1_M8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M8)
}
M1_M8::M1_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M8)
}
M1_M8::M1_M8(const M1_M8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M1_M8_M9(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M8)
}

void M1_M8::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M8_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f4_));
}

M1_M8::~M1_M8() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M8)
  SharedDtor();
}

void M1_M8::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M1_M8::ArenaDtor(void* object) {
  M1_M8* _this = reinterpret_cast< M1_M8* >(object);
  (void)_this;
}
void M1_M8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M8& M1_M8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M8_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M8::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f3_ = false;
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M8.M9 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M1.M8.M9 f2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::f2(this), target, stream);
  }

  // optional bool f3 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_f3(), target);
  }

  // optional uint64 f4 = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M8)
  return target;
}

size_t M1_M8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000016u) {
    // optional bytes f1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M1.M8.M9 f2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional bool f3 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  // optional uint64 f4 = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M8)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M8)
    MergeFrom(*source);
  }
}

void M1_M8::MergeFrom(const M1_M8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000016u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M1_M8_M9::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_f4(from._internal_f4());
  }
}

void M1_M8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M8::CopyFrom(const M1_M8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M8::IsInitialized() const {
  return true;
}

void M1_M8::InternalSwap(M1_M8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M1_M2*>(
      ::hyperprotobench::M1_M2::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M1_M3*>(
      ::hyperprotobench::M1_M3::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f13_ = const_cast< ::hyperprotobench::M1_M4*>(
      ::hyperprotobench::M1_M4::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f16_ = const_cast< ::hyperprotobench::M1_M7*>(
      ::hyperprotobench::M1_M7::internal_default_instance());
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f17_ = const_cast< ::hyperprotobench::M1_M8*>(
      ::hyperprotobench::M1_M8::internal_default_instance());
}
class M1::_Internal {
 public:
  using HasBits = decltype(std::declval<M1>()._has_bits_);
  static const ::hyperprotobench::M1_M2& f1(const M1* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hyperprotobench::M1_M3& f6(const M1* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::hyperprotobench::M1_M4& f13(const M1* msg);
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_f15(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::hyperprotobench::M1_M7& f16(const M1* msg);
  static void set_has_f16(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::hyperprotobench::M1_M8& f17(const M1* msg);
  static void set_has_f17(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::hyperprotobench::M1_M2&
M1::_Internal::f1(const M1* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M1_M3&
M1::_Internal::f6(const M1* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M1_M4&
M1::_Internal::f13(const M1* msg) {
  return *msg->f13_;
}
const ::hyperprotobench::M1_M7&
M1::_Internal::f16(const M1* msg) {
  return *msg->f16_;
}
const ::hyperprotobench::M1_M8&
M1::_Internal::f17(const M1* msg) {
  return *msg->f17_;
}
void M1::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M1_M2* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f1)
}
void M1::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M1_M3* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f6)
}
void M1::unsafe_arena_set_allocated_f13(
    ::hyperprotobench::M1_M4* f13) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f13_;
  }
  f13_ = f13;
  if (f13) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f13)
}
void M1::unsafe_arena_set_allocated_f16(
    ::hyperprotobench::M1_M7* f16) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f16_;
  }
  f16_ = f16;
  if (f16) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f16)
}
void M1::unsafe_arena_set_allocated_f17(
    ::hyperprotobench::M1_M8* f17) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f17_;
  }
  f17_ = f17;
  if (f17) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f17)
}
M1::M1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1)
}
M1::M1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1)
}
M1::M1(const M1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M1_M2(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M1_M3(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f13()) {
    f13_ = new ::hyperprotobench::M1_M4(*from.f13_);
  } else {
    f13_ = nullptr;
  }
  if (from._internal_has_f16()) {
    f16_ = new ::hyperprotobench::M1_M7(*from.f16_);
  } else {
    f16_ = nullptr;
  }
  if (from._internal_has_f17()) {
    f17_ = new ::hyperprotobench::M1_M8(*from.f17_);
  } else {
    f17_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f12_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f12_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1)
}

void M1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f15_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f15_));
  f2_ = 10;
  f12_ = 9;
}

M1::~M1() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1)
  SharedDtor();
}

void M1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f13_;
  if (this != internal_default_instance()) delete f16_;
  if (this != internal_default_instance()) delete f17_;
}

void M1::ArenaDtor(void* object) {
  M1* _this = reinterpret_cast< M1* >(object);
  (void)_this;
}
void M1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1& M1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f6_ != nullptr);
    f6_->Clear();
  }
  if (cached_has_bits & 0x00900000u) {
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(f13_ != nullptr);
      f13_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(f16_ != nullptr);
      f16_->Clear();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    GOOGLE_DCHECK(f17_ != nullptr);
    f17_->Clear();
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  f9_ = 0u;
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f8_));
  }
  if (cached_has_bits & 0x00660000u) {
    ::memset(&f10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f15_) -
        reinterpret_cast<char*>(&f10_)) + sizeof(f15_));
  }
  f2_ = 10;
  f12_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M1.M2 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M1_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M3 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f11 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.E2 f12 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_E2_IsValid(val))) {
            _internal_set_f12(static_cast<::hyperprotobench::M1_E2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M4 f13 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_f13(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f14 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_f14(&has_bits);
          f14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f15 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          _Internal::set_has_f15(&has_bits);
          f15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M7 f16 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_f16(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M8 f17 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_f17(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M1.M2 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M1.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  // optional int64 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f3(), target);
  }

  // optional int32 f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f4(), target);
  }

  // optional fixed64 f5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M1.M3 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f6(this), target, stream);
  }

  // optional int64 f7 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_f7(), target);
  }

  // optional fixed64 f8 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_f8(), target);
  }

  // optional fixed32 f9 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(17, this->_internal_f9(), target);
  }

  // optional bool f10 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_f10(), target);
  }

  // optional fixed64 f11 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(19, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M1.E2 f12 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_f12(), target);
  }

  // optional .hyperprotobench.M1.M4 f13 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::f13(this), target, stream);
  }

  // optional uint64 f14 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(22, this->_internal_f14(), target);
  }

  // optional double f15 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_f15(), target);
  }

  // optional .hyperprotobench.M1.M7 f16 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::f16(this), target, stream);
  }

  // optional .hyperprotobench.M1.M8 f17 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::f17(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1)
  return target;
}

size_t M1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .hyperprotobench.M1.M2 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  // optional .hyperprotobench.M1.M3 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f6_);
  }

  if (cached_has_bits & 0x00900000u) {
    // optional .hyperprotobench.M1.M4 f13 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f13_);
    }

    // optional .hyperprotobench.M1.M7 f16 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f16_);
    }

  }
  // optional .hyperprotobench.M1.M8 f17 = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f17_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional int64 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional fixed64 f5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int32 f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  // optional fixed32 f9 = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  if (cached_has_bits & 0x0000c000u) {
    // optional int64 f7 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

    // optional fixed64 f8 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00660000u) {
    // optional bool f10 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional fixed64 f11 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional uint64 f14 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f14());
    }

    // optional double f15 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

  }
  // optional .hyperprotobench.M1.E1 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
  }

  // optional .hyperprotobench.M1.E2 f12 = 20;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f12());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  const M1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1)
    MergeFrom(*source);
  }
}

void M1::MergeFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::hyperprotobench::M1_M2::MergeFrom(from._internal_f1());
  }
  if (from._internal_has_f6()) {
    _internal_mutable_f6()->::hyperprotobench::M1_M3::MergeFrom(from._internal_f6());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00900000u) {
    if (cached_has_bits & 0x00100000u) {
      _internal_mutable_f13()->::hyperprotobench::M1_M4::MergeFrom(from._internal_f13());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_f16()->::hyperprotobench::M1_M7::MergeFrom(from._internal_f16());
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_mutable_f17()->::hyperprotobench::M1_M8::MergeFrom(from._internal_f17());
  }
  if (cached_has_bits & 0x00000038u) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f9(from._internal_f9());
  }
  if (cached_has_bits & 0x0000c000u) {
    if (cached_has_bits & 0x00004000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00008000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00660000u) {
    if (cached_has_bits & 0x00020000u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00040000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00200000u) {
      f14_ = from.f14_;
    }
    if (cached_has_bits & 0x00400000u) {
      f15_ = from.f15_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_f2(from._internal_f2());
  }
  if (cached_has_bits & 0x00080000u) {
    _internal_set_f12(from._internal_f12());
  }
}

void M1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1::CopyFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1::IsInitialized() const {
  return true;
}

void M1::InternalSwap(M1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f6_, other->f6_);
  swap(f13_, other->f13_);
  swap(f16_, other->f16_);
  swap(f17_, other->f17_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f4_, other->f4_);
  swap(f9_, other->f9_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f14_, other->f14_);
  swap(f15_, other->f15_);
  swap(f2_, other->f2_);
  swap(f12_, other->f12_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M10_M11_M12::InitAsDefaultInstance() {
}
class M10_M11_M12::_Internal {
 public:
  using HasBits = decltype(std::declval<M10_M11_M12>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M10_M11_M12::M10_M11_M12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M10.M11.M12)
}
M10_M11_M12::M10_M11_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M10.M11.M12)
}
M10_M11_M12::M10_M11_M12(const M10_M11_M12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M10.M11.M12)
}

void M10_M11_M12::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M10_M11_M12::~M10_M11_M12() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M10.M11.M12)
  SharedDtor();
}

void M10_M11_M12::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M10_M11_M12::ArenaDtor(void* object) {
  M10_M11_M12* _this = reinterpret_cast< M10_M11_M12* >(object);
  (void)_this;
}
void M10_M11_M12::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M10_M11_M12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M10_M11_M12& M10_M11_M12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M10_M11_M12_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M10_M11_M12::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M10.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M10_M11_M12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M10_M11_M12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M10.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M10.M11.M12)
  return target;
}

size_t M10_M11_M12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M10.M11.M12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M10_M11_M12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M10.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  const M10_M11_M12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M10_M11_M12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M10.M11.M12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M10.M11.M12)
    MergeFrom(*source);
  }
}

void M10_M11_M12::MergeFrom(const M10_M11_M12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M10.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M10_M11_M12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M10.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M10_M11_M12::CopyFrom(const M10_M11_M12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M10.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M10_M11_M12::IsInitialized() const {
  return true;
}

void M10_M11_M12::InternalSwap(M10_M11_M12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M10_M11_M12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M10_M11::InitAsDefaultInstance() {
  ::hyperprotobench::_M10_M11_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M10_M11_M12*>(
      ::hyperprotobench::M10_M11_M12::internal_default_instance());
}
class M10_M11::_Internal {
 public:
  using HasBits = decltype(std::declval<M10_M11>()._has_bits_);
  static const ::hyperprotobench::M10_M11_M12& f1(const M10_M11* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::hyperprotobench::M10_M11_M12&
M10_M11::_Internal::f1(const M10_M11* msg) {
  return *msg->f1_;
}
void M10_M11::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M10_M11_M12* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.M11.f1)
}
M10_M11::M10_M11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M10.M11)
}
M10_M11::M10_M11(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M10.M11)
}
M10_M11::M10_M11(const M10_M11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M10_M11_M12(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M10.M11)
}

void M10_M11::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M10_M11_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f1_ = nullptr;
}

M10_M11::~M10_M11() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M10.M11)
  SharedDtor();
}

void M10_M11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M10_M11::ArenaDtor(void* object) {
  M10_M11* _this = reinterpret_cast< M10_M11* >(object);
  (void)_this;
}
void M10_M11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M10_M11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M10_M11& M10_M11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M10_M11_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M10_M11::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M10.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M10_M11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M10.M11.M12 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M10_M11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M10.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M10.M11.M12 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional bytes f2 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M10.M11)
  return target;
}

size_t M10_M11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M10.M11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f2 = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  // optional .hyperprotobench.M10.M11.M12 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f1_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M10_M11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M10.M11)
  GOOGLE_DCHECK_NE(&from, this);
  const M10_M11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M10_M11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M10.M11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M10.M11)
    MergeFrom(*source);
  }
}

void M10_M11::MergeFrom(const M10_M11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M10.M11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f1()) {
    _internal_mutable_f1()->::hyperprotobench::M10_M11_M12::MergeFrom(from._internal_f1());
  }
}

void M10_M11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M10.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M10_M11::CopyFrom(const M10_M11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M10.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M10_M11::IsInitialized() const {
  return true;
}

void M10_M11::InternalSwap(M10_M11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M10_M11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M10_M13::InitAsDefaultInstance() {
}
class M10_M13::_Internal {
 public:
  using HasBits = decltype(std::declval<M10_M13>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M10_M13::M10_M13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M10.M13)
}
M10_M13::M10_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M10.M13)
}
M10_M13::M10_M13(const M10_M13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M10.M13)
}

void M10_M13::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M10_M13_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
}

M10_M13::~M10_M13() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M10.M13)
  SharedDtor();
}

void M10_M13::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M10_M13::ArenaDtor(void* object) {
  M10_M13* _this = reinterpret_cast< M10_M13* >(object);
  (void)_this;
}
void M10_M13::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M10_M13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M10_M13& M10_M13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M10_M13_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M10_M13::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M10.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000009cu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M10_M13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M10_M13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M10.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional fixed32 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_f3(), target);
  }

  // optional fixed32 f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_f4(), target);
  }

  // optional bool f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M10.M13)
  return target;
}

size_t M10_M13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M10.M13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000009eu) {
    // optional bytes f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M10_M13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M10.M13)
  GOOGLE_DCHECK_NE(&from, this);
  const M10_M13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M10_M13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M10.M13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M10.M13)
    MergeFrom(*source);
  }
}

void M10_M13::MergeFrom(const M10_M13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M10.M13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000009eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M10_M13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M10.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M10_M13::CopyFrom(const M10_M13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M10.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M10_M13::IsInitialized() const {
  return true;
}

void M10_M13::InternalSwap(M10_M13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M10_M13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M10_M14::InitAsDefaultInstance() {
}
class M10_M14::_Internal {
 public:
  using HasBits = decltype(std::declval<M10_M14>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M10_M14::M10_M14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M10.M14)
}
M10_M14::M10_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M10.M14)
}
M10_M14::M10_M14(const M10_M14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M10.M14)
}

void M10_M14::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
}

M10_M14::~M10_M14() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M10.M14)
  SharedDtor();
}

void M10_M14::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M10_M14::ArenaDtor(void* object) {
  M10_M14* _this = reinterpret_cast< M10_M14* >(object);
  (void)_this;
}
void M10_M14::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M10_M14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M10_M14& M10_M14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M10_M14_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M10_M14::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M10.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000a6u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M10_M14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M10_M14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M10.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional double f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f2(), target);
  }

  // optional bool f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f3(), target);
  }

  // optional int64 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M10.M14)
  return target;
}

size_t M10_M14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M10.M14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000a6u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional double f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional bool f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int64 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M10_M14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M10.M14)
  GOOGLE_DCHECK_NE(&from, this);
  const M10_M14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M10_M14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M10.M14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M10.M14)
    MergeFrom(*source);
  }
}

void M10_M14::MergeFrom(const M10_M14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M10.M14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000a6u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M10_M14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M10.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M10_M14::CopyFrom(const M10_M14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M10.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M10_M14::IsInitialized() const {
  return true;
}

void M10_M14::InternalSwap(M10_M14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M10_M14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M10::InitAsDefaultInstance() {
  ::hyperprotobench::_M10_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M10_M11*>(
      ::hyperprotobench::M10_M11::internal_default_instance());
  ::hyperprotobench::_M10_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M10_M13*>(
      ::hyperprotobench::M10_M13::internal_default_instance());
  ::hyperprotobench::_M10_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M10_M14*>(
      ::hyperprotobench::M10_M14::internal_default_instance());
}
class M10::_Internal {
 public:
  using HasBits = decltype(std::declval<M10>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M10_M11& f2(const M10* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M10_M13& f3(const M10* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hyperprotobench::M10_M14& f5(const M10* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

const ::hyperprotobench::M10_M11&
M10::_Internal::f2(const M10* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M10_M13&
M10::_Internal::f3(const M10* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M10_M14&
M10::_Internal::f5(const M10* msg) {
  return *msg->f5_;
}
void M10::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M10_M11* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.f2)
}
void M10::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M10_M13* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.f3)
}
void M10::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M10_M14* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.f5)
}
M10::M10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M10)
}
M10::M10(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M10)
}
M10::M10(const M10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M10_M11(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M10_M13(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M10_M14(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  ::memcpy(&f4_, &from.f4_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f4_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M10)
}

void M10::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M10_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f10_));
}

M10::~M10() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M10)
  SharedDtor();
}

void M10::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f5_;
}

void M10::ArenaDtor(void* object) {
  M10* _this = reinterpret_cast< M10* >(object);
  (void)_this;
}
void M10::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M10& M10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M10_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M10::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000094u) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
  }
  if (cached_has_bits & 0x00000022u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f1_));
  }
  if (cached_has_bits & 0x00001e00u) {
    ::memset(&f9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f9_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M10.M11 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M10.M13 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M10.M14 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f7 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f8 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f10 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M10.M11 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M10.M13 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  // optional int64 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M10.M14 f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::f5(this), target, stream);
  }

  // optional bytes f6 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f6(), target);
  }

  // optional uint64 f7 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_f7(), target);
  }

  // optional fixed64 f8 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_f8(), target);
  }

  // optional int32 f9 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_f9(), target);
  }

  // optional fixed64 f10 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(12, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M10)
  return target;
}

size_t M10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f6 = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x000000b6u) {
    // optional .hyperprotobench.M10.M11 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M10.M13 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional .hyperprotobench.M10.M14 f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional int64 f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (cached_has_bits & 0x00001e00u) {
    // optional int32 f9 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional uint64 f7 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f7());
    }

    // optional fixed64 f8 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional fixed64 f10 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M10)
  GOOGLE_DCHECK_NE(&from, this);
  const M10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M10)
    MergeFrom(*source);
  }
}

void M10::MergeFrom(const M10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f6()) {
    _internal_set_f6(from._internal_f6());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000b6u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M10_M11::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f3()->::hyperprotobench::M10_M13::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_f5()->::hyperprotobench::M10_M14::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001e00u) {
    if (cached_has_bits & 0x00000800u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00001000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M10::CopyFrom(const M10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M10::IsInitialized() const {
  return true;
}

void M10::InternalSwap(M10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f9_, other->f9_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15_M16::InitAsDefaultInstance() {
}
class M15_M16::_Internal {
 public:
  using HasBits = decltype(std::declval<M15_M16>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

M15_M16::M15_M16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15.M16)
}
M15_M16::M15_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f3_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15.M16)
}
M15_M16::M15_M16(const M15_M16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f3_(from.f3_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15.M16)
}

void M15_M16::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M15_M16_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f7_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f7_));
}

M15_M16::~M15_M16() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15.M16)
  SharedDtor();
}

void M15_M16::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M15_M16::ArenaDtor(void* object) {
  M15_M16* _this = reinterpret_cast< M15_M16* >(object);
  (void)_this;
}
void M15_M16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15_M16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15_M16& M15_M16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_M16_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15_M16::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f3_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00000100u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      f6_.ClearNonDefaultToEmpty();
    }
  }
  f1_ = 0u;
  if (cached_has_bits & 0x00008400u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f7_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f7_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15_M16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f3();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M15.M16.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M15.M16.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15_M16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // repeated bytes f3 = 5;
  for (int i = 0, n = this->_internal_f3_size(); i < n; i++) {
    const auto& s = this->_internal_f3(i);
    target = stream->WriteBytes(5, s, target);
  }

  // optional string f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M15.M16.f4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f4(), target);
  }

  // optional int64 f5 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f5(), target);
  }

  // optional string f6 = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M15.M16.f6");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_f6(), target);
  }

  // optional int64 f7 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15.M16)
  return target;
}

size_t M15_M16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15.M16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f3 = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f3_.size());
  for (int i = 0, n = f3_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f3_.Get(i));
  }

  // optional bytes f2 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  if (cached_has_bits & 0x00004100u) {
    // optional string f4 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

    // optional string f6 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

  }
  // optional fixed32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00008400u) {
    // optional int64 f5 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional int64 f7 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15_M16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15.M16)
  GOOGLE_DCHECK_NE(&from, this);
  const M15_M16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15_M16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15.M16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15.M16)
    MergeFrom(*source);
  }
}

void M15_M16::MergeFrom(const M15_M16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15.M16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f3_.MergeFrom(from.f3_);
  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00004100u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_f6(from._internal_f6());
    }
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00008400u) {
    if (cached_has_bits & 0x00000400u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00008000u) {
      f7_ = from.f7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M15_M16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15_M16::CopyFrom(const M15_M16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15_M16::IsInitialized() const {
  return true;
}

void M15_M16::InternalSwap(M15_M16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.InternalSwap(&other->f3_);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M15_M16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15_M17_M18::InitAsDefaultInstance() {
}
class M15_M17_M18::_Internal {
 public:
  using HasBits = decltype(std::declval<M15_M17_M18>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M15_M17_M18::M15_M17_M18()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15.M17.M18)
}
M15_M17_M18::M15_M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15.M17.M18)
}
M15_M17_M18::M15_M17_M18(const M15_M17_M18& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15.M17.M18)
}

void M15_M17_M18::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M15_M17_M18_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M15_M17_M18::~M15_M17_M18() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15.M17.M18)
  SharedDtor();
}

void M15_M17_M18::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M15_M17_M18::ArenaDtor(void* object) {
  M15_M17_M18* _this = reinterpret_cast< M15_M17_M18* >(object);
  (void)_this;
}
void M15_M17_M18::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15_M17_M18::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15_M17_M18& M15_M17_M18::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_M17_M18_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15_M17_M18::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15_M17_M18::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15_M17_M18::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15.M17.M18)
  return target;
}

size_t M15_M17_M18::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15.M17.M18)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15_M17_M18::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  const M15_M17_M18* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15_M17_M18>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15.M17.M18)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15.M17.M18)
    MergeFrom(*source);
  }
}

void M15_M17_M18::MergeFrom(const M15_M17_M18& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M15_M17_M18::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15_M17_M18::CopyFrom(const M15_M17_M18& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15_M17_M18::IsInitialized() const {
  return true;
}

void M15_M17_M18::InternalSwap(M15_M17_M18* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M15_M17_M18::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15_M17_M19::InitAsDefaultInstance() {
}
class M15_M17_M19::_Internal {
 public:
  using HasBits = decltype(std::declval<M15_M17_M19>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M15_M17_M19::M15_M17_M19()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15.M17.M19)
}
M15_M17_M19::M15_M17_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15.M17.M19)
}
M15_M17_M19::M15_M17_M19(const M15_M17_M19& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15.M17.M19)
}

void M15_M17_M19::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M15_M17_M19::~M15_M17_M19() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15.M17.M19)
  SharedDtor();
}

void M15_M17_M19::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M15_M17_M19::ArenaDtor(void* object) {
  M15_M17_M19* _this = reinterpret_cast< M15_M17_M19* >(object);
  (void)_this;
}
void M15_M17_M19::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15_M17_M19::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15_M17_M19& M15_M17_M19::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_M17_M19_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15_M17_M19::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15.M17.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15_M17_M19::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15_M17_M19::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15.M17.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15.M17.M19)
  return target;
}

size_t M15_M17_M19::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15.M17.M19)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15_M17_M19::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15.M17.M19)
  GOOGLE_DCHECK_NE(&from, this);
  const M15_M17_M19* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15_M17_M19>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15.M17.M19)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15.M17.M19)
    MergeFrom(*source);
  }
}

void M15_M17_M19::MergeFrom(const M15_M17_M19& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15.M17.M19)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M15_M17_M19::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15.M17.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15_M17_M19::CopyFrom(const M15_M17_M19& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15.M17.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15_M17_M19::IsInitialized() const {
  return true;
}

void M15_M17_M19::InternalSwap(M15_M17_M19* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M15_M17_M19::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15_M17::InitAsDefaultInstance() {
  ::hyperprotobench::_M15_M17_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M15_M17_M18*>(
      ::hyperprotobench::M15_M17_M18::internal_default_instance());
  ::hyperprotobench::_M15_M17_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M15_M17_M19*>(
      ::hyperprotobench::M15_M17_M19::internal_default_instance());
}
class M15_M17::_Internal {
 public:
  using HasBits = decltype(std::declval<M15_M17>()._has_bits_);
  static const ::hyperprotobench::M15_M17_M18& f1(const M15_M17* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M15_M17_M19& f2(const M15_M17* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M15_M17_M18&
M15_M17::_Internal::f1(const M15_M17* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M15_M17_M19&
M15_M17::_Internal::f2(const M15_M17* msg) {
  return *msg->f2_;
}
void M15_M17::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M15_M17_M18* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M17.f1)
}
void M15_M17::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M15_M17_M19* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M17.f2)
}
M15_M17::M15_M17()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15.M17)
}
M15_M17::M15_M17(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15.M17)
}
M15_M17::M15_M17(const M15_M17& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M15_M17_M18(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M15_M17_M19(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15.M17)
}

void M15_M17::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M15_M17_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M15_M17::~M15_M17() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15.M17)
  SharedDtor();
}

void M15_M17::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
}

void M15_M17::ArenaDtor(void* object) {
  M15_M17* _this = reinterpret_cast< M15_M17* >(object);
  (void)_this;
}
void M15_M17::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15_M17::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15_M17& M15_M17::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_M17_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15_M17::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15_M17::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M15.M17.M18 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M15.M17.M19 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15_M17::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M15.M17.M18 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M15.M17.M19 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional int64 f3 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15.M17)
  return target;
}

size_t M15_M17::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15.M17)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    // optional .hyperprotobench.M15.M17.M18 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M15.M17.M19 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int64 f3 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15_M17::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15.M17)
  GOOGLE_DCHECK_NE(&from, this);
  const M15_M17* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15_M17>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15.M17)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15.M17)
    MergeFrom(*source);
  }
}

void M15_M17::MergeFrom(const M15_M17& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15.M17)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000086u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M15_M17_M18::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M15_M17_M19::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000080u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M15_M17::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15_M17::CopyFrom(const M15_M17& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15_M17::IsInitialized() const {
  return true;
}

void M15_M17::InternalSwap(M15_M17* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M15_M17::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15_M20::InitAsDefaultInstance() {
}
class M15_M20::_Internal {
 public:
  using HasBits = decltype(std::declval<M15_M20>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M15_M20::M15_M20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15.M20)
}
M15_M20::M15_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15.M20)
}
M15_M20::M15_M20(const M15_M20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15.M20)
}

void M15_M20::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M15_M20::~M15_M20() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15.M20)
  SharedDtor();
}

void M15_M20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M15_M20::ArenaDtor(void* object) {
  M15_M20* _this = reinterpret_cast< M15_M20* >(object);
  (void)_this;
}
void M15_M20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15_M20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15_M20& M15_M20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_M20_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15_M20::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15_M20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15_M20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional int64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15.M20)
  return target;
}

size_t M15_M20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15.M20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15_M20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15.M20)
  GOOGLE_DCHECK_NE(&from, this);
  const M15_M20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15_M20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15.M20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15.M20)
    MergeFrom(*source);
  }
}

void M15_M20::MergeFrom(const M15_M20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15.M20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M15_M20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15_M20::CopyFrom(const M15_M20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15_M20::IsInitialized() const {
  return true;
}

void M15_M20::InternalSwap(M15_M20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M15_M20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M15::InitAsDefaultInstance() {
  ::hyperprotobench::_M15_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M15_M16*>(
      ::hyperprotobench::M15_M16::internal_default_instance());
  ::hyperprotobench::_M15_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M15_M17*>(
      ::hyperprotobench::M15_M17::internal_default_instance());
  ::hyperprotobench::_M15_default_instance_._instance.get_mutable()->f12_ = const_cast< ::hyperprotobench::M15_M20*>(
      ::hyperprotobench::M15_M20::internal_default_instance());
}
class M15::_Internal {
 public:
  using HasBits = decltype(std::declval<M15>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::hyperprotobench::M15_M16& f9(const M15* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::hyperprotobench::M15_M17& f10(const M15* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::hyperprotobench::M15_M20& f12(const M15* msg);
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::hyperprotobench::M15_M16&
M15::_Internal::f9(const M15* msg) {
  return *msg->f9_;
}
const ::hyperprotobench::M15_M17&
M15::_Internal::f10(const M15* msg) {
  return *msg->f10_;
}
const ::hyperprotobench::M15_M20&
M15::_Internal::f12(const M15* msg) {
  return *msg->f12_;
}
void M15::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M15_M16* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f9)
}
void M15::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M15_M17* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f10)
}
void M15::unsafe_arena_set_allocated_f12(
    ::hyperprotobench::M15_M20* f12) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f12_;
  }
  f12_ = f12;
  if (f12) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f12)
}
M15::M15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M15)
}
M15::M15(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M15)
}
M15::M15(const M15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f11()) {
    f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f11(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M15_M16(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M15_M17(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  if (from._internal_has_f12()) {
    f12_ = new ::hyperprotobench::M15_M20(*from.f12_);
  } else {
    f12_ = nullptr;
  }
  ::memcpy(&f6_, &from.f6_,
    static_cast<size_t>(reinterpret_cast<char*>(&f13_) -
    reinterpret_cast<char*>(&f6_)) + sizeof(f13_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M15)
}

void M15::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M15_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f9_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f13_) -
      reinterpret_cast<char*>(&f9_)) + sizeof(f13_));
}

M15::~M15() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M15)
  SharedDtor();
}

void M15::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f9_;
  if (this != internal_default_instance()) delete f10_;
  if (this != internal_default_instance()) delete f12_;
}

void M15::ArenaDtor(void* object) {
  M15* _this = reinterpret_cast< M15* >(object);
  (void)_this;
}
void M15::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M15& M15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M15_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M15::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000800u) {
    f8_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00200000u) {
    f11_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00008000u) {
    GOOGLE_DCHECK(f9_ != nullptr);
    f9_->Clear();
  }
  if (cached_has_bits & 0x00480000u) {
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(f10_ != nullptr);
      f10_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(f12_ != nullptr);
      f12_->Clear();
    }
  }
  if (cached_has_bits & 0x00000094u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f4_));
  }
  f7_ = false;
  f13_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M15.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M15.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M15.M16 f9 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M15.M17 f10 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f11 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_f11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M15.M20 f12 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_f12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f13 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_f13(&has_bits);
          f13_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M15.f1");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional fixed32 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_f2(), target);
  }

  // optional bytes f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f3(), target);
  }

  // optional bool f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f4(), target);
  }

  // optional string f5 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M15.f5");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f5(), target);
  }

  // optional int64 f6 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_f6(), target);
  }

  // optional bool f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_f7(), target);
  }

  // optional bytes f8 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M15.M16 f9 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::f9(this), target, stream);
  }

  // optional .hyperprotobench.M15.M17 f10 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::f10(this), target, stream);
  }

  // optional bytes f11 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M15.M20 f12 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::f12(this), target, stream);
  }

  // optional bool f13 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_f13(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M15)
  return target;
}

size_t M15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    // optional string f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional bytes f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional string f5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

  }
  // optional bytes f8 = 12;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8());
  }

  // optional bytes f11 = 22;
  if (cached_has_bits & 0x00200000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f11());
  }

  // optional .hyperprotobench.M15.M16 f9 = 16;
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f9_);
  }

  if (cached_has_bits & 0x00480000u) {
    // optional .hyperprotobench.M15.M17 f10 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f10_);
    }

    // optional .hyperprotobench.M15.M20 f12 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f12_);
    }

  }
  if (cached_has_bits & 0x00000094u) {
    // optional int64 f6 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

    // optional fixed32 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  // optional bool f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 + 1;
  }

  // optional bool f13 = 24;
  if (cached_has_bits & 0x00800000u) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M15)
  GOOGLE_DCHECK_NE(&from, this);
  const M15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M15)
    MergeFrom(*source);
  }
}

void M15::MergeFrom(const M15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f5(from._internal_f5());
    }
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00200000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x00008000u) {
    _internal_mutable_f9()->::hyperprotobench::M15_M16::MergeFrom(from._internal_f9());
  }
  if (cached_has_bits & 0x00480000u) {
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_f10()->::hyperprotobench::M15_M17::MergeFrom(from._internal_f10());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_f12()->::hyperprotobench::M15_M20::MergeFrom(from._internal_f12());
    }
  }
  if (cached_has_bits & 0x00000094u) {
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x00800000u) {
    _internal_set_f13(from._internal_f13());
  }
}

void M15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M15::CopyFrom(const M15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M15::IsInitialized() const {
  return true;
}

void M15::InternalSwap(M15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f11_.Swap(&other->f11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f12_, other->f12_);
  swap(f6_, other->f6_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f7_, other->f7_);
  swap(f13_, other->f13_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M22::InitAsDefaultInstance() {
}
class M21_M22::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M22>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

M21_M22::M21_M22()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M22)
}
M21_M22::M21_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f8_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M22)
}
M21_M22::M21_M22(const M21_M22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f8_(from.f8_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f12()) {
    f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f12(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f11_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f11_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M22)
}

void M21_M22::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_M22_benchmark_2eproto.base);
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f11_));
}

M21_M22::~M21_M22() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M22)
  SharedDtor();
}

void M21_M22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M21_M22::ArenaDtor(void* object) {
  M21_M22* _this = reinterpret_cast< M21_M22* >(object);
  (void)_this;
}
void M21_M22::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M22& M21_M22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M22_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M22::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f8_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00300000u) {
    if (cached_has_bits & 0x00100000u) {
      f9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      f10_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x01000000u) {
    f12_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x0000e400u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00410000u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f11_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f11_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string f8 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_f8();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M21.M22.f8");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f12 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_f12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional int64 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f2(), target);
  }

  // optional int32 f3 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_f3(), target);
  }

  // optional fixed64 f4 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(13, this->_internal_f4(), target);
  }

  // optional int64 f5 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_f5(), target);
  }

  // optional int32 f6 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_f6(), target);
  }

  // optional int64 f7 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_f7(), target);
  }

  // repeated string f8 = 17;
  for (int i = 0, n = this->_internal_f8_size(); i < n; i++) {
    const auto& s = this->_internal_f8(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M21.M22.f8");
    target = stream->WriteString(17, s, target);
  }

  // optional bytes f9 = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_f9(), target);
  }

  // optional bytes f10 = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->WriteBytesMaybeAliased(
        21, this->_internal_f10(), target);
  }

  // optional int64 f11 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_f11(), target);
  }

  // optional bytes f12 = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->WriteBytesMaybeAliased(
        24, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M22)
  return target;
}

size_t M21_M22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string f8 = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f8_.size());
  for (int i = 0, n = f8_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      f8_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00300000u) {
    // optional bytes f9 = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

    // optional bytes f10 = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f10());
    }

  }
  // optional bytes f12 = 24;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f12());
  }

  if (cached_has_bits & 0x0000000au) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

  }
  if (cached_has_bits & 0x0000e400u) {
    // optional int32 f3 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f6 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

    // optional fixed64 f4 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

    // optional int64 f5 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00410000u) {
    // optional int64 f7 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

    // optional int64 f11 = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f11());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M22)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M22)
    MergeFrom(*source);
  }
}

void M21_M22::MergeFrom(const M21_M22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f8_.MergeFrom(from.f8_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00300000u) {
    if (cached_has_bits & 0x00100000u) {
      _internal_set_f9(from._internal_f9());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_f10(from._internal_f10());
    }
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_f12(from._internal_f12());
  }
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000e400u) {
    if (cached_has_bits & 0x00000400u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00008000u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00002000u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00004000u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00410000u) {
    if (cached_has_bits & 0x00010000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00400000u) {
      f11_ = from.f11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M21_M22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M22::CopyFrom(const M21_M22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M22::IsInitialized() const {
  return true;
}

void M21_M22::InternalSwap(M21_M22* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f8_.InternalSwap(&other->f8_);
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f12_.Swap(&other->f12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f11_, other->f11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M23_M24::InitAsDefaultInstance() {
}
class M21_M23_M24::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M23_M24>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

M21_M23_M24::M21_M23_M24()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M23.M24)
}
M21_M23_M24::M21_M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M23.M24)
}
M21_M23_M24::M21_M23_M24(const M21_M23_M24& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f6_, &from.f6_,
    static_cast<size_t>(reinterpret_cast<char*>(&f12_) -
    reinterpret_cast<char*>(&f6_)) + sizeof(f12_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M23.M24)
}

void M21_M23_M24::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_M23_M24_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f12_) -
      reinterpret_cast<char*>(&f6_)) + sizeof(f12_));
}

M21_M23_M24::~M21_M23_M24() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M23.M24)
  SharedDtor();
}

void M21_M23_M24::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M21_M23_M24::ArenaDtor(void* object) {
  M21_M23_M24* _this = reinterpret_cast< M21_M23_M24* >(object);
  (void)_this;
}
void M21_M23_M24::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M23_M24::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M23_M24& M21_M23_M24::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M23_M24_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M23_M24::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000006au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000800u) {
    f9_.ClearNonDefaultToEmpty();
  }
  f6_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x00002500u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f10_));
  }
  f3_ = false;
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&f11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f12_) -
        reinterpret_cast<char*>(&f11_)) + sizeof(f12_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M23_M24::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f10 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f12 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M23_M24::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M23.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional bool f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f3(), target);
  }

  // optional bytes f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f4(), target);
  }

  // optional bytes f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f5(), target);
  }

  // optional uint64 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_f6(), target);
  }

  // optional fixed64 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_f7(), target);
  }

  // optional int64 f8 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f8(), target);
  }

  // optional bytes f9 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_f9(), target);
  }

  // optional fixed64 f10 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(13, this->_internal_f10(), target);
  }

  // optional int64 f11 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_f11(), target);
  }

  // optional uint64 f12 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M23.M24)
  return target;
}

size_t M21_M23_M24::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M23.M24)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000006au) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional bytes f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional bytes f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional bytes f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

  }
  // optional bytes f9 = 11;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f9());
  }

  // optional uint64 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x00002500u) {
    // optional fixed64 f7 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional int64 f8 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional fixed64 f10 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 8;
    }

  }
  // optional bool f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x0000c000u) {
    // optional int64 f11 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f11());
    }

    // optional uint64 f12 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f12());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M23_M24::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M23_M24* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M23_M24>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M23.M24)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M23.M24)
    MergeFrom(*source);
  }
}

void M21_M23_M24::MergeFrom(const M21_M23_M24& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M23.M24)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000006au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f5(from._internal_f5());
    }
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f9(from._internal_f9());
  }
  if (cached_has_bits & 0x00000080u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x00002500u) {
    if (cached_has_bits & 0x00000100u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00002000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000010u) {
    _internal_set_f3(from._internal_f3());
  }
  if (cached_has_bits & 0x0000c000u) {
    if (cached_has_bits & 0x00004000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00008000u) {
      f12_ = from.f12_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M21_M23_M24::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M23_M24::CopyFrom(const M21_M23_M24& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M23.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M23_M24::IsInitialized() const {
  return true;
}

void M21_M23_M24::InternalSwap(M21_M23_M24* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f3_, other->f3_);
  swap(f11_, other->f11_);
  swap(f12_, other->f12_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M23_M24::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21_M23::InitAsDefaultInstance() {
  ::hyperprotobench::_M21_M23_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M21_M23_M24*>(
      ::hyperprotobench::M21_M23_M24::internal_default_instance());
}
class M21_M23::_Internal {
 public:
  using HasBits = decltype(std::declval<M21_M23>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M21_M23_M24& f2(const M21_M23* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::hyperprotobench::M21_M23_M24&
M21_M23::_Internal::f2(const M21_M23* msg) {
  return *msg->f2_;
}
void M21_M23::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M21_M23_M24* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.f2)
}
M21_M23::M21_M23()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21.M23)
}
M21_M23::M21_M23(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21.M23)
}
M21_M23::M21_M23(const M21_M23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M21_M23_M24(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21.M23)
}

void M21_M23::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_M23_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M21_M23::~M21_M23() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21.M23)
  SharedDtor();
}

void M21_M23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M21_M23::ArenaDtor(void* object) {
  M21_M23* _this = reinterpret_cast< M21_M23* >(object);
  (void)_this;
}
void M21_M23::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21_M23::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21_M23& M21_M23::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_M23_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21_M23::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21_M23::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M23.M24 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21_M23::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M21.M23.M24 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21.M23)
  return target;
}

size_t M21_M23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21.M23)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .hyperprotobench.M21.M23.M24 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21_M23::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21.M23)
  GOOGLE_DCHECK_NE(&from, this);
  const M21_M23* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21_M23>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21.M23)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21.M23)
    MergeFrom(*source);
  }
}

void M21_M23::MergeFrom(const M21_M23& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21.M23)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M21_M23_M24::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M21_M23::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21_M23::CopyFrom(const M21_M23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21_M23::IsInitialized() const {
  return true;
}

void M21_M23::InternalSwap(M21_M23* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21_M23::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M21::InitAsDefaultInstance() {
  ::hyperprotobench::_M21_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M21_M22*>(
      ::hyperprotobench::M21_M22::internal_default_instance());
  ::hyperprotobench::_M21_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M21_M23*>(
      ::hyperprotobench::M21_M23::internal_default_instance());
}
class M21::_Internal {
 public:
  using HasBits = decltype(std::declval<M21>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M21_M22& f5(const M21* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M21_M23& f7(const M21* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::hyperprotobench::M21_M22&
M21::_Internal::f5(const M21* msg) {
  return *msg->f5_;
}
const ::hyperprotobench::M21_M23&
M21::_Internal::f7(const M21* msg) {
  return *msg->f7_;
}
void M21::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M21_M22* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f5)
}
void M21::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M21_M23* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f7)
}
M21::M21()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M21)
}
M21::M21(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f13_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M21)
}
M21::M21(const M21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f13_(from.f13_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f14_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f14()) {
    f14_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f14(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M21_M22(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M21_M23(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M21)
}

void M21::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M21_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f14_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f11_));
  f9_ = 68;
}

M21::~M21() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M21)
  SharedDtor();
}

void M21::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f14_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
  if (this != internal_default_instance()) delete f7_;
}

void M21::ArenaDtor(void* object) {
  M21* _this = reinterpret_cast< M21* >(object);
  (void)_this;
}
void M21::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M21& M21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M21_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M21::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f13_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    f4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00020000u) {
    f8_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x20000000u) {
    f14_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00008100u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  f6_ = PROTOBUF_ULONGLONG(0);
  f12_ = 0;
  f10_ = PROTOBUF_LONGLONG(0);
  f11_ = PROTOBUF_LONGLONG(0);
  f9_ = 68;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M22 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.M23 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M21.E1 f9 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M21_E1_IsValid(val))) {
            _internal_set_f9(static_cast<::hyperprotobench::M21_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(20, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 f10 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f12 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f13 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_f13();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes f14 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_f14();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  // optional int64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f3(), target);
  }

  // optional bytes f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M21.M22 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f5(this), target, stream);
  }

  // optional fixed64 f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(9, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M21.M23 f7 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::f7(this), target, stream);
  }

  // optional bytes f8 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M21.E1 f9 = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_f9(), target);
  }

  // optional int64 f10 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_f10(), target);
  }

  // optional int64 f11 = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_f11(), target);
  }

  // optional int32 f12 = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_f12(), target);
  }

  // repeated bytes f13 = 26;
  for (int i = 0, n = this->_internal_f13_size(); i < n; i++) {
    const auto& s = this->_internal_f13(i);
    target = stream->WriteBytes(26, s, target);
  }

  // optional bytes f14 = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->WriteBytesMaybeAliased(
        29, this->_internal_f14(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M21)
  return target;
}

size_t M21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f13 = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f13_.size());
  for (int i = 0, n = f13_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f13_.Get(i));
  }

  // optional bytes f4 = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f4());
  }

  // optional bytes f8 = 17;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8());
  }

  // optional bytes f14 = 29;
  if (cached_has_bits & 0x20000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f14());
  }

  if (cached_has_bits & 0x00008100u) {
    // optional .hyperprotobench.M21.M22 f5 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional .hyperprotobench.M21.M23 f7 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

  }
  if (cached_has_bits & 0x0000000eu) {
    // optional fixed64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional fixed64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  // optional fixed64 f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 + 8;
  }

  // optional int32 f12 = 25;
  if (cached_has_bits & 0x02000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f12());
  }

  // optional int64 f10 = 22;
  if (cached_has_bits & 0x00400000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f10());
  }

  // optional int64 f11 = 24;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f11());
  }

  // optional .hyperprotobench.M21.E1 f9 = 20;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M21)
  GOOGLE_DCHECK_NE(&from, this);
  const M21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M21)
    MergeFrom(*source);
  }
}

void M21::MergeFrom(const M21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f13_.MergeFrom(from.f13_);
  if (from._internal_has_f4()) {
    _internal_set_f4(from._internal_f4());
  }
  if (from._internal_has_f8()) {
    _internal_set_f8(from._internal_f8());
  }
  if (from._internal_has_f14()) {
    _internal_set_f14(from._internal_f14());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00008100u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_f5()->::hyperprotobench::M21_M22::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_f7()->::hyperprotobench::M21_M23::MergeFrom(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x02000000u) {
    _internal_set_f12(from._internal_f12());
  }
  if (cached_has_bits & 0x00400000u) {
    _internal_set_f10(from._internal_f10());
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_set_f9(from._internal_f9());
  }
}

void M21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M21::CopyFrom(const M21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M21::IsInitialized() const {
  return true;
}

void M21::InternalSwap(M21* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f13_.InternalSwap(&other->f13_);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f14_.Swap(&other->f14_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f12_, other->f12_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M26_M27::InitAsDefaultInstance() {
}
class M25_M26_M27::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M26_M27>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M25_M26_M27::M25_M26_M27()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M26.M27)
}
M25_M26_M27::M25_M26_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M26.M27)
}
M25_M26_M27::M25_M26_M27(const M25_M26_M27& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M26.M27)
}

void M25_M26_M27::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M26_M27_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M25_M26_M27::~M25_M26_M27() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M26.M27)
  SharedDtor();
}

void M25_M26_M27::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M25_M26_M27::ArenaDtor(void* object) {
  M25_M26_M27* _this = reinterpret_cast< M25_M26_M27* >(object);
  (void)_this;
}
void M25_M26_M27::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M26_M27::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M26_M27& M25_M26_M27::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M26_M27_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M26_M27::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M26_M27::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M26_M27::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M26.M27)
  return target;
}

size_t M25_M26_M27::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M26.M27)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M26_M27::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M26_M27* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M26_M27>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M26.M27)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M26.M27)
    MergeFrom(*source);
  }
}

void M25_M26_M27::MergeFrom(const M25_M26_M27& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M25_M26_M27::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M26_M27::CopyFrom(const M25_M26_M27& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M26_M27::IsInitialized() const {
  return true;
}

void M25_M26_M27::InternalSwap(M25_M26_M27* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M26_M27::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M26::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_M26_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M25_M26_M27*>(
      ::hyperprotobench::M25_M26_M27::internal_default_instance());
}
class M25_M26::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M26>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M25_M26_M27& f3(const M25_M26* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M25_M26_M27&
M25_M26::_Internal::f3(const M25_M26* msg) {
  return *msg->f3_;
}
void M25_M26::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M25_M26_M27* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.f3)
}
M25_M26::M25_M26()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M26)
}
M25_M26::M25_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M26)
}
M25_M26::M25_M26(const M25_M26& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M25_M26_M27(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M26)
}

void M25_M26::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M26_benchmark_2eproto.base);
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
  f2_ = 65;
}

M25_M26::~M25_M26() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M26)
  SharedDtor();
}

void M25_M26::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f3_;
}

void M25_M26::ArenaDtor(void* object) {
  M25_M26* _this = reinterpret_cast< M25_M26* >(object);
  (void)_this;
}
void M25_M26::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M26::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M26& M25_M26::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M26_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M26::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f3_ != nullptr);
    f3_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    f1_ = PROTOBUF_ULONGLONG(0);
    f2_ = 65;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M26::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26.E1 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M25_M26_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M25_M26_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26.M27 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M26::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M25.M26.E1 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M25.M26.M27 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M26)
  return target;
}

size_t M25_M26::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M26)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .hyperprotobench.M25.M26.M27 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional fixed64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .hyperprotobench.M25.M26.E1 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M26::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M26)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M26* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M26>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M26)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M26)
    MergeFrom(*source);
  }
}

void M25_M26::MergeFrom(const M25_M26& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M26)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M25_M26_M27::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M25_M26::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M26::CopyFrom(const M25_M26& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M26::IsInitialized() const {
  return true;
}

void M25_M26::InternalSwap(M25_M26* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M26::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M28_M29::InitAsDefaultInstance() {
}
class M25_M28_M29::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M28_M29>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

M25_M28_M29::M25_M28_M29()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M28.M29)
}
M25_M28_M29::M25_M28_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M28.M29)
}
M25_M28_M29::M25_M28_M29(const M25_M28_M29& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M28.M29)
}

void M25_M28_M29::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f7_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f7_));
}

M25_M28_M29::~M25_M28_M29() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M28.M29)
  SharedDtor();
}

void M25_M28_M29::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M25_M28_M29::ArenaDtor(void* object) {
  M25_M28_M29* _this = reinterpret_cast< M25_M28_M29* >(object);
  (void)_this;
}
void M25_M28_M29::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M28_M29::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M28_M29& M25_M28_M29::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M28_M29_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M28_M29::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M28.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000016u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  f6_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f7_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f7_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M28_M29::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M28_M29::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M28.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f3(), target);
  }

  // optional bool f4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_f4(), target);
  }

  // optional bool f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_f5(), target);
  }

  // optional int64 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_f6(), target);
  }

  // optional int64 f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f7(), target);
  }

  // optional bool f8 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M28.M29)
  return target;
}

size_t M25_M28_M29::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M28.M29)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000016u) {
    // optional int64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  // optional int64 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional bool f4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional bool f8 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int64 f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M28_M29::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M28.M29)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M28_M29* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M28_M29>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M28.M29)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M28.M29)
    MergeFrom(*source);
  }
}

void M25_M28_M29::MergeFrom(const M25_M28_M29& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M28.M29)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000016u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x000000c0u) {
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M25_M28_M29::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M28.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M28_M29::CopyFrom(const M25_M28_M29& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M28.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M28_M29::IsInitialized() const {
  return true;
}

void M25_M28_M29::InternalSwap(M25_M28_M29* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M28_M29::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25_M28::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_M28_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M25_M28_M29*>(
      ::hyperprotobench::M25_M28_M29::internal_default_instance());
}
class M25_M28::_Internal {
 public:
  using HasBits = decltype(std::declval<M25_M28>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M25_M28_M29& f2(const M25_M28* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::hyperprotobench::M25_M28_M29&
M25_M28::_Internal::f2(const M25_M28* msg) {
  return *msg->f2_;
}
void M25_M28::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M25_M28_M29* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M28.f2)
}
M25_M28::M25_M28()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25.M28)
}
M25_M28::M25_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25.M28)
}
M25_M28::M25_M28(const M25_M28& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M25_M28_M29(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25.M28)
}

void M25_M28::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_M28_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f10_));
  f7_ = 37;
}

M25_M28::~M25_M28() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25.M28)
  SharedDtor();
}

void M25_M28::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
}

void M25_M28::ArenaDtor(void* object) {
  M25_M28* _this = reinterpret_cast< M25_M28* >(object);
  (void)_this;
}
void M25_M28::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25_M28::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25_M28& M25_M28::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_M28_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25_M28::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000400u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00020000u) {
    f9_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f3_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00002300u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f8_));
  }
  f10_ = false;
  f7_ = 37;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25_M28::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M28.M29 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M28.E1 f7 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M25_M28_E1_IsValid(val))) {
            _internal_set_f7(static_cast<::hyperprotobench::M25_M28_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25_M28::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M25.M28.M29 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional int64 f3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f3(), target);
  }

  // optional int64 f4 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_f4(), target);
  }

  // optional int64 f5 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f5(), target);
  }

  // optional bytes f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M25.M28.E1 f7 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_f7(), target);
  }

  // optional fixed32 f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(14, this->_internal_f8(), target);
  }

  // optional bytes f9 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteBytesMaybeAliased(
        18, this->_internal_f9(), target);
  }

  // optional bool f10 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25.M28)
  return target;
}

size_t M25_M28::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25.M28)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  // optional bytes f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f6());
  }

  // optional bytes f9 = 18;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f9());
  }

  if (cached_has_bits & 0x00000044u) {
    // optional .hyperprotobench.M25.M28.M29 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int64 f3 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (cached_has_bits & 0x00002300u) {
    // optional int64 f4 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int64 f5 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional fixed32 f8 = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  // optional bool f10 = 19;
  if (cached_has_bits & 0x00040000u) {
    total_size += 2 + 1;
  }

  // optional .hyperprotobench.M25.M28.E1 f7 = 13;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f7());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25_M28::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25.M28)
  GOOGLE_DCHECK_NE(&from, this);
  const M25_M28* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25_M28>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25.M28)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25.M28)
    MergeFrom(*source);
  }
}

void M25_M28::MergeFrom(const M25_M28& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25.M28)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
  if (from._internal_has_f6()) {
    _internal_set_f6(from._internal_f6());
  }
  if (from._internal_has_f9()) {
    _internal_set_f9(from._internal_f9());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000044u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M25_M28_M29::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00002300u) {
    if (cached_has_bits & 0x00000100u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000200u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00002000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00040000u) {
    _internal_set_f10(from._internal_f10());
  }
  if (cached_has_bits & 0x00001000u) {
    _internal_set_f7(from._internal_f7());
  }
}

void M25_M28::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25_M28::CopyFrom(const M25_M28& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25_M28::IsInitialized() const {
  return true;
}

void M25_M28::InternalSwap(M25_M28* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25_M28::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M25::InitAsDefaultInstance() {
  ::hyperprotobench::_M25_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M25_M26*>(
      ::hyperprotobench::M25_M26::internal_default_instance());
  ::hyperprotobench::_M25_default_instance_._instance.get_mutable()->f12_ = const_cast< ::hyperprotobench::M25_M28*>(
      ::hyperprotobench::M25_M28::internal_default_instance());
}
class M25::_Internal {
 public:
  using HasBits = decltype(std::declval<M25>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hyperprotobench::M25_M26& f6(const M25* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::hyperprotobench::M25_M28& f12(const M25* msg);
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::hyperprotobench::M25_M26&
M25::_Internal::f6(const M25* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M25_M28&
M25::_Internal::f12(const M25* msg) {
  return *msg->f12_;
}
void M25::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M25_M26* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f6)
}
void M25::unsafe_arena_set_allocated_f12(
    ::hyperprotobench::M25_M28* f12) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f12_;
  }
  f12_ = f12;
  if (f12) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f12)
}
M25::M25()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M25)
}
M25::M25(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M25)
}
M25::M25(const M25& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M25_M26(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f12()) {
    f12_ = new ::hyperprotobench::M25_M28(*from.f12_);
  } else {
    f12_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f13_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f13_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M25)
}

void M25::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M25_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f6_)) + sizeof(f11_));
  f13_ = 74;
}

M25::~M25() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M25)
  SharedDtor();
}

void M25::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f12_;
}

void M25::ArenaDtor(void* object) {
  M25* _this = reinterpret_cast< M25* >(object);
  (void)_this;
}
void M25::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M25::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M25& M25::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M25_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M25::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001100u) {
    if (cached_has_bits & 0x00000100u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      f8_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000c0000u) {
    if (cached_has_bits & 0x00040000u) {
      f9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      f10_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000400u) {
    GOOGLE_DCHECK(f6_ != nullptr);
    f6_->Clear();
  }
  if (cached_has_bits & 0x00800000u) {
    GOOGLE_DCHECK(f12_ != nullptr);
    f12_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  f7_ = false;
  f11_ = false;
  f13_ = 74;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M25::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional double f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M25.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M26 f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f11 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.M28 f12 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_f12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M25.E1 f13 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M25_E1_IsValid(val))) {
            _internal_set_f13(static_cast<::hyperprotobench::M25_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(25, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M25::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_f3(), target);
  }

  // optional double f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_f4(), target);
  }

  // optional string f5 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M25.f5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M25.M26 f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f6(this), target, stream);
  }

  // optional bool f7 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_f7(), target);
  }

  // optional bytes f8 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_f8(), target);
  }

  // optional bytes f9 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_f9(), target);
  }

  // optional bytes f10 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->WriteBytesMaybeAliased(
        20, this->_internal_f10(), target);
  }

  // optional bool f11 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M25.M28 f12 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::f12(this), target, stream);
  }

  // optional .hyperprotobench.M25.E1 f13 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_f13(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M25)
  return target;
}

size_t M25::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M25)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001100u) {
    // optional string f5 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional bytes f8 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f8());
    }

  }
  if (cached_has_bits & 0x000c0000u) {
    // optional bytes f9 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

    // optional bytes f10 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f10());
    }

  }
  // optional .hyperprotobench.M25.M26 f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f6_);
  }

  // optional .hyperprotobench.M25.M28 f12 = 24;
  if (cached_has_bits & 0x00800000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f12_);
  }

  if (cached_has_bits & 0x0000001eu) {
    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed64 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  // optional bool f7 = 12;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 + 1;
  }

  // optional bool f11 = 21;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 + 1;
  }

  // optional .hyperprotobench.M25.E1 f13 = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f13());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M25::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M25)
  GOOGLE_DCHECK_NE(&from, this);
  const M25* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M25>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M25)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M25)
    MergeFrom(*source);
  }
}

void M25::MergeFrom(const M25& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M25)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00001100u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f8(from._internal_f8());
    }
  }
  if (cached_has_bits & 0x000c0000u) {
    if (cached_has_bits & 0x00040000u) {
      _internal_set_f9(from._internal_f9());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_f10(from._internal_f10());
    }
  }
  if (cached_has_bits & 0x00000400u) {
    _internal_mutable_f6()->::hyperprotobench::M25_M26::MergeFrom(from._internal_f6());
  }
  if (cached_has_bits & 0x00800000u) {
    _internal_mutable_f12()->::hyperprotobench::M25_M28::MergeFrom(from._internal_f12());
  }
  if (cached_has_bits & 0x0000001eu) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_f13(from._internal_f13());
  }
}

void M25::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M25::CopyFrom(const M25& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M25::IsInitialized() const {
  return true;
}

void M25::InternalSwap(M25* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f6_, other->f6_);
  swap(f12_, other->f12_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f7_, other->f7_);
  swap(f11_, other->f11_);
  swap(f13_, other->f13_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M25::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M31::InitAsDefaultInstance() {
}
class M30_M31::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M31>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M30_M31::M30_M31()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M31)
}
M30_M31::M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M31)
}
M30_M31::M30_M31(const M30_M31& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M31)
}

void M30_M31::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M30_M31::~M30_M31() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M31)
  SharedDtor();
}

void M30_M31::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M30_M31::ArenaDtor(void* object) {
  M30_M31* _this = reinterpret_cast< M30_M31* >(object);
  (void)_this;
}
void M30_M31::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M31::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M31& M30_M31::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M31_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M31::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M31::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M31::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M31)
  return target;
}

size_t M30_M31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M31)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M31::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M31* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M31>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M31)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M31)
    MergeFrom(*source);
  }
}

void M30_M31::MergeFrom(const M30_M31& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M31)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M30_M31::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M31::CopyFrom(const M30_M31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M31::IsInitialized() const {
  return true;
}

void M30_M31::InternalSwap(M30_M31* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M31::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M32_M33::InitAsDefaultInstance() {
}
class M30_M32_M33::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M32_M33>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M30_M32_M33::M30_M32_M33()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M32.M33)
}
M30_M32_M33::M30_M32_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M32.M33)
}
M30_M32_M33::M30_M32_M33(const M30_M32_M33& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M32.M33)
}

void M30_M32_M33::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M32_M33_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
}

M30_M32_M33::~M30_M32_M33() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M32.M33)
  SharedDtor();
}

void M30_M32_M33::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M30_M32_M33::ArenaDtor(void* object) {
  M30_M32_M33* _this = reinterpret_cast< M30_M32_M33* >(object);
  (void)_this;
}
void M30_M32_M33::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M32_M33::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M32_M33& M30_M32_M33::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M32_M33_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M32_M33::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M32.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    f5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M32_M33::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M32_M33::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M32.M33)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_f3(), target);
  }

  // optional int32 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f4(), target);
  }

  // optional bytes f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M32.M33)
  return target;
}

size_t M30_M32_M33::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M32.M33)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000bau) {
    // optional bytes f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M32_M33::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M32.M33)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M32_M33* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M32_M33>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M32.M33)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M32.M33)
    MergeFrom(*source);
  }
}

void M30_M32_M33::MergeFrom(const M30_M32_M33& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M32.M33)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000bau) {
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M30_M32_M33::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M32.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M32_M33::CopyFrom(const M30_M32_M33& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M32.M33)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M32_M33::IsInitialized() const {
  return true;
}

void M30_M32_M33::InternalSwap(M30_M32_M33* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M32_M33::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M32::InitAsDefaultInstance() {
  ::hyperprotobench::_M30_M32_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M30_M32_M33*>(
      ::hyperprotobench::M30_M32_M33::internal_default_instance());
}
class M30_M32::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M32>()._has_bits_);
  static const ::hyperprotobench::M30_M32_M33& f1(const M30_M32* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M30_M32_M33&
M30_M32::_Internal::f1(const M30_M32* msg) {
  return *msg->f1_;
}
void M30_M32::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M30_M32_M33* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M32.f1)
}
M30_M32::M30_M32()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M32)
}
M30_M32::M30_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M32)
}
M30_M32::M30_M32(const M30_M32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M30_M32_M33(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M32)
}

void M30_M32::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M32_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M30_M32::~M30_M32() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M32)
  SharedDtor();
}

void M30_M32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M30_M32::ArenaDtor(void* object) {
  M30_M32* _this = reinterpret_cast< M30_M32* >(object);
  (void)_this;
}
void M30_M32::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M32::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M32& M30_M32::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M32_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M32::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M32::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M30.M32.M33 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M32::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M32)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M30.M32.M33 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // optional uint64 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M32)
  return target;
}

size_t M30_M32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M32)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M30.M32.M33 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional uint64 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M32::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M32)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M32* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M32>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M32)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M32)
    MergeFrom(*source);
  }
}

void M30_M32::MergeFrom(const M30_M32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M30_M32_M33::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M30_M32::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M32::CopyFrom(const M30_M32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M32::IsInitialized() const {
  return true;
}

void M30_M32::InternalSwap(M30_M32* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M32::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M34::InitAsDefaultInstance() {
}
class M30_M34::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M34>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M30_M34::M30_M34()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M34)
}
M30_M34::M30_M34(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M34)
}
M30_M34::M30_M34(const M30_M34& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M34)
}

void M30_M34::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M30_M34::~M30_M34() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M34)
  SharedDtor();
}

void M30_M34::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M30_M34::ArenaDtor(void* object) {
  M30_M34* _this = reinterpret_cast< M30_M34* >(object);
  (void)_this;
}
void M30_M34::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M34::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M34& M30_M34::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M34_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M34::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M34::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M34::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M34)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M34)
  return target;
}

size_t M30_M34::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M34)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M34::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M34)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M34* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M34>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M34)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M34)
    MergeFrom(*source);
  }
}

void M30_M34::MergeFrom(const M30_M34& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M34)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M30_M34::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M34::CopyFrom(const M30_M34& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M34)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M34::IsInitialized() const {
  return true;
}

void M30_M34::InternalSwap(M30_M34* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M34::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30_M35::InitAsDefaultInstance() {
}
class M30_M35::_Internal {
 public:
  using HasBits = decltype(std::declval<M30_M35>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

M30_M35::M30_M35()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30.M35)
}
M30_M35::M30_M35(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f4_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30.M35)
}
M30_M35::M30_M35(const M30_M35& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f4_(from.f4_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  f3_ = from.f3_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30.M35)
}

void M30_M35::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_M35_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_ = 0;
}

M30_M35::~M30_M35() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30.M35)
  SharedDtor();
}

void M30_M35::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M30_M35::ArenaDtor(void* object) {
  M30_M35* _this = reinterpret_cast< M30_M35* >(object);
  (void)_this;
}
void M30_M35::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30_M35::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30_M35& M30_M35::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_M35_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30_M35::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f4_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e6u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f7_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000500u) {
    if (cached_has_bits & 0x00000100u) {
      f8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      f9_.ClearNonDefaultToEmpty();
    }
  }
  f3_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30_M35::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M35.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f4();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M35.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M30.M35.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30_M35::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30.M35)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M35.f1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  // repeated bytes f4 = 4;
  for (int i = 0, n = this->_internal_f4_size(); i < n; i++) {
    const auto& s = this->_internal_f4(i);
    target = stream->WriteBytes(4, s, target);
  }

  // optional bytes f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f5(), target);
  }

  // optional string f6 = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M35.f6");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_f6(), target);
  }

  // optional string f7 = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M30.M35.f7");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_f7(), target);
  }

  // optional bytes f8 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f8(), target);
  }

  // optional bytes f9 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30.M35)
  return target;
}

size_t M30_M35::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30.M35)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f4 = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f4_.size());
  for (int i = 0, n = f4_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f4_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000e6u) {
    // optional string f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional bytes f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional bytes f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional string f6 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional string f7 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

  }
  if (cached_has_bits & 0x00000500u) {
    // optional bytes f8 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f8());
    }

    // optional bytes f9 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

  }
  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30_M35::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30.M35)
  GOOGLE_DCHECK_NE(&from, this);
  const M30_M35* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30_M35>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30.M35)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30.M35)
    MergeFrom(*source);
  }
}

void M30_M35::MergeFrom(const M30_M35& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30.M35)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f4_.MergeFrom(from.f4_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000e6u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f7(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x00000500u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f8(from._internal_f8());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_f9(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_f3(from._internal_f3());
  }
}

void M30_M35::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30_M35::CopyFrom(const M30_M35& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30.M35)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30_M35::IsInitialized() const {
  return true;
}

void M30_M35::InternalSwap(M30_M35* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.InternalSwap(&other->f4_);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30_M35::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M30::InitAsDefaultInstance() {
  ::hyperprotobench::_M30_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M30_M31*>(
      ::hyperprotobench::M30_M31::internal_default_instance());
  ::hyperprotobench::_M30_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M30_M32*>(
      ::hyperprotobench::M30_M32::internal_default_instance());
  ::hyperprotobench::_M30_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M30_M34*>(
      ::hyperprotobench::M30_M34::internal_default_instance());
  ::hyperprotobench::_M30_default_instance_._instance.get_mutable()->f14_ = const_cast< ::hyperprotobench::M30_M35*>(
      ::hyperprotobench::M30_M35::internal_default_instance());
}
class M30::_Internal {
 public:
  using HasBits = decltype(std::declval<M30>()._has_bits_);
  static const ::hyperprotobench::M30_M31& f1(const M30* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M30_M32& f2(const M30* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M30_M34& f3(const M30* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::hyperprotobench::M30_M35& f14(const M30* msg);
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::hyperprotobench::M30_M31&
M30::_Internal::f1(const M30* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M30_M32&
M30::_Internal::f2(const M30* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M30_M34&
M30::_Internal::f3(const M30* msg) {
  return *msg->f3_;
}
const ::hyperprotobench::M30_M35&
M30::_Internal::f14(const M30* msg) {
  return *msg->f14_;
}
void M30::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M30_M31* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f1)
}
void M30::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M30_M32* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f2)
}
void M30::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M30_M34* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f3)
}
void M30::unsafe_arena_set_allocated_f14(
    ::hyperprotobench::M30_M35* f14) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f14_;
  }
  f14_ = f14;
  if (f14) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f14)
}
M30::M30()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M30)
}
M30::M30(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f7_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M30)
}
M30::M30(const M30& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f7_(from.f7_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f12()) {
    f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f12(),
      GetArenaNoVirtual());
  }
  f13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f13()) {
    f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f13(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M30_M31(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M30_M32(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M30_M34(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  if (from._internal_has_f14()) {
    f14_ = new ::hyperprotobench::M30_M35(*from.f14_);
  } else {
    f14_ = nullptr;
  }
  ::memcpy(&f5_, &from.f5_,
    static_cast<size_t>(reinterpret_cast<char*>(&f11_) -
    reinterpret_cast<char*>(&f5_)) + sizeof(f11_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M30)
}

void M30::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M30_benchmark_2eproto.base);
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f11_));
}

M30::~M30() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M30)
  SharedDtor();
}

void M30::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f13_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
  if (this != internal_default_instance()) delete f14_;
}

void M30::ArenaDtor(void* object) {
  M30* _this = reinterpret_cast< M30* >(object);
  (void)_this;
}
void M30::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M30::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M30& M30::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M30_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M30::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f7_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00004800u) {
    if (cached_has_bits & 0x00000800u) {
      f9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      f12_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00100000u) {
    f13_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  if (cached_has_bits & 0x00400000u) {
    GOOGLE_DCHECK(f14_ != nullptr);
    f14_->Clear();
  }
  f5_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00001400u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f10_));
  }
  f4_ = false;
  if (cached_has_bits & 0x00002100u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f11_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f11_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M30::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M30.M31 f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M32 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M34 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f7();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f10 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f12 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_f12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f13 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_f13();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M30.M35 f14 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_f14(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M30::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M30.M31 f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f1(this), target, stream);
  }

  // optional .hyperprotobench.M30.M32 f2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M30.M34 f3 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f3(this), target, stream);
  }

  // optional bool f4 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_f4(), target);
  }

  // optional int64 f5 = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_f5(), target);
  }

  // optional bool f6 = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_f6(), target);
  }

  // repeated bytes f7 = 12;
  for (int i = 0, n = this->_internal_f7_size(); i < n; i++) {
    const auto& s = this->_internal_f7(i);
    target = stream->WriteBytes(12, s, target);
  }

  // optional int64 f8 = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f8(), target);
  }

  // optional bytes f9 = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_f9(), target);
  }

  // optional fixed64 f10 = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_f10(), target);
  }

  // optional int64 f11 = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_f11(), target);
  }

  // optional bytes f12 = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_f12(), target);
  }

  // optional bytes f13 = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_f13(), target);
  }

  // optional .hyperprotobench.M30.M35 f14 = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::f14(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M30)
  return target;
}

size_t M30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M30)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f7 = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f7_.size());
  for (int i = 0, n = f7_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f7_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00004800u) {
    // optional bytes f9 = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

    // optional bytes f12 = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f12());
    }

  }
  // optional bytes f13 = 23;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f13());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional .hyperprotobench.M30.M31 f1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M30.M32 f2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M30.M34 f3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

  }
  // optional .hyperprotobench.M30.M35 f14 = 25;
  if (cached_has_bits & 0x00400000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f14_);
  }

  // optional int64 f5 = 8;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f5());
  }

  if (cached_has_bits & 0x00001400u) {
    // optional int64 f8 = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional fixed64 f10 = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

  }
  // optional bool f4 = 7;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00002100u) {
    // optional bool f6 = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int64 f11 = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f11());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M30::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M30)
  GOOGLE_DCHECK_NE(&from, this);
  const M30* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M30>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M30)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M30)
    MergeFrom(*source);
  }
}

void M30::MergeFrom(const M30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f7_.MergeFrom(from.f7_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00004800u) {
    if (cached_has_bits & 0x00000800u) {
      _internal_set_f9(from._internal_f9());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_f12(from._internal_f12());
    }
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_set_f13(from._internal_f13());
  }
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M30_M31::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M30_M32::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M30_M34::MergeFrom(from._internal_f3());
    }
  }
  if (cached_has_bits & 0x00400000u) {
    _internal_mutable_f14()->::hyperprotobench::M30_M35::MergeFrom(from._internal_f14());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00001000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000010u) {
    _internal_set_f4(from._internal_f4());
  }
  if (cached_has_bits & 0x00002100u) {
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00002000u) {
      f11_ = from.f11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M30::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M30::CopyFrom(const M30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M30::IsInitialized() const {
  return true;
}

void M30::InternalSwap(M30* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f7_.InternalSwap(&other->f7_);
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f12_.Swap(&other->f12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f13_.Swap(&other->f13_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f14_, other->f14_);
  swap(f5_, other->f5_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f11_, other->f11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M30::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36_M37_M38::InitAsDefaultInstance() {
}
class M36_M37_M38::_Internal {
 public:
  using HasBits = decltype(std::declval<M36_M37_M38>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M36_M37_M38::M36_M37_M38()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36.M37.M38)
}
M36_M37_M38::M36_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36.M37.M38)
}
M36_M37_M38::M36_M37_M38(const M36_M37_M38& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36.M37.M38)
}

void M36_M37_M38::SharedCtor() {
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M36_M37_M38::~M36_M37_M38() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36.M37.M38)
  SharedDtor();
}

void M36_M37_M38::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M36_M37_M38::ArenaDtor(void* object) {
  M36_M37_M38* _this = reinterpret_cast< M36_M37_M38* >(object);
  (void)_this;
}
void M36_M37_M38::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36_M37_M38::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36_M37_M38& M36_M37_M38::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_M37_M38_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36_M37_M38::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36_M37_M38::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36_M37_M38::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36.M37.M38)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f1(), target);
  }

  // optional int64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36.M37.M38)
  return target;
}

size_t M36_M37_M38::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36.M37.M38)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional bool f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36_M37_M38::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  const M36_M37_M38* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36_M37_M38>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36.M37.M38)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36.M37.M38)
    MergeFrom(*source);
  }
}

void M36_M37_M38::MergeFrom(const M36_M37_M38& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36.M37.M38)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M36_M37_M38::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36_M37_M38::CopyFrom(const M36_M37_M38& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36.M37.M38)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36_M37_M38::IsInitialized() const {
  return true;
}

void M36_M37_M38::InternalSwap(M36_M37_M38* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36_M37_M38::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36_M37_M39::InitAsDefaultInstance() {
}
class M36_M37_M39::_Internal {
 public:
  using HasBits = decltype(std::declval<M36_M37_M39>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M36_M37_M39::M36_M37_M39()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36.M37.M39)
}
M36_M37_M39::M36_M37_M39(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36.M37.M39)
}
M36_M37_M39::M36_M37_M39(const M36_M37_M39& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f4_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36.M37.M39)
}

void M36_M37_M39::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M36_M37_M39_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f4_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
}

M36_M37_M39::~M36_M37_M39() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36.M37.M39)
  SharedDtor();
}

void M36_M37_M39::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M36_M37_M39::ArenaDtor(void* object) {
  M36_M37_M39* _this = reinterpret_cast< M36_M37_M39* >(object);
  (void)_this;
}
void M36_M37_M39::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36_M37_M39::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36_M37_M39& M36_M37_M39::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_M37_M39_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36_M37_M39::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36.M37.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    f3_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000026u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36_M37_M39::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36_M37_M39::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36.M37.M39)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f1(), target);
  }

  // optional int64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional bytes f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f3(), target);
  }

  // optional int64 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36.M37.M39)
  return target;
}

size_t M36_M37_M39::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36.M37.M39)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    // optional bytes f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional double f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional int64 f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36_M37_M39::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36.M37.M39)
  GOOGLE_DCHECK_NE(&from, this);
  const M36_M37_M39* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36_M37_M39>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36.M37.M39)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36.M37.M39)
    MergeFrom(*source);
  }
}

void M36_M37_M39::MergeFrom(const M36_M37_M39& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36.M37.M39)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002eu) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M36_M37_M39::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36.M37.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36_M37_M39::CopyFrom(const M36_M37_M39& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36.M37.M39)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36_M37_M39::IsInitialized() const {
  return true;
}

void M36_M37_M39::InternalSwap(M36_M37_M39* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36_M37_M39::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36_M37::InitAsDefaultInstance() {
  ::hyperprotobench::_M36_M37_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M36_M37_M38*>(
      ::hyperprotobench::M36_M37_M38::internal_default_instance());
  ::hyperprotobench::_M36_M37_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M36_M37_M39*>(
      ::hyperprotobench::M36_M37_M39::internal_default_instance());
}
class M36_M37::_Internal {
 public:
  using HasBits = decltype(std::declval<M36_M37>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M36_M37_M38& f2(const M36_M37* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M36_M37_M39& f3(const M36_M37* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M36_M37_M38&
M36_M37::_Internal::f2(const M36_M37* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M36_M37_M39&
M36_M37::_Internal::f3(const M36_M37* msg) {
  return *msg->f3_;
}
void M36_M37::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M36_M37_M38* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M37.f2)
}
void M36_M37::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M36_M37_M39* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M37.f3)
}
M36_M37::M36_M37()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36.M37)
}
M36_M37::M36_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36.M37)
}
M36_M37::M36_M37(const M36_M37& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M36_M37_M38(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M36_M37_M39(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36.M37)
}

void M36_M37::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M36_M37_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M36_M37::~M36_M37() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36.M37)
  SharedDtor();
}

void M36_M37::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f3_;
}

void M36_M37::ArenaDtor(void* object) {
  M36_M37* _this = reinterpret_cast< M36_M37* >(object);
  (void)_this;
}
void M36_M37::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36_M37::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36_M37& M36_M37::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_M37_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36_M37::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36_M37::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M37.M38 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M37.M39 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36_M37::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36.M37)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M36.M37.M38 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional .hyperprotobench.M36.M37.M39 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36.M37)
  return target;
}

size_t M36_M37::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36.M37)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .hyperprotobench.M36.M37.M38 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional .hyperprotobench.M36.M37.M39 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36_M37::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36.M37)
  GOOGLE_DCHECK_NE(&from, this);
  const M36_M37* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36_M37>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36.M37)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36.M37)
    MergeFrom(*source);
  }
}

void M36_M37::MergeFrom(const M36_M37& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36.M37)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M36_M37_M38::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M36_M37_M39::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M36_M37::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36_M37::CopyFrom(const M36_M37& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36.M37)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36_M37::IsInitialized() const {
  return true;
}

void M36_M37::InternalSwap(M36_M37* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36_M37::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36_M40::InitAsDefaultInstance() {
}
class M36_M40::_Internal {
 public:
  using HasBits = decltype(std::declval<M36_M40>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

M36_M40::M36_M40()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36.M40)
}
M36_M40::M36_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36.M40)
}
M36_M40::M36_M40(const M36_M40& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36.M40)
}

void M36_M40::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M36_M40_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f8_));
  f6_ = 67;
}

M36_M40::~M36_M40() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36.M40)
  SharedDtor();
}

void M36_M40::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M36_M40::ArenaDtor(void* object) {
  M36_M40* _this = reinterpret_cast< M36_M40* >(object);
  (void)_this;
}
void M36_M40::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36_M40::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36_M40& M36_M40::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_M40_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36_M40::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f3_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000a2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&f7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f7_)) + sizeof(f8_));
    f6_ = 67;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36_M40::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M40.E1 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M36_M40_E1_IsValid(val))) {
            _internal_set_f6(static_cast<::hyperprotobench::M36_M40_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36_M40::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36.M40)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional bytes f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f3(), target);
  }

  // optional fixed32 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_f4(), target);
  }

  // optional uint32 f5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M36.M40.E1 f6 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_f6(), target);
  }

  // optional int64 f7 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f7(), target);
  }

  // optional int64 f8 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36.M40)
  return target;
}

size_t M36_M40::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36.M40)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000bau) {
    // optional bytes f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional bytes f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional int64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed32 f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 f5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_f5());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int64 f7 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

    // optional int64 f8 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

    // optional .hyperprotobench.M36.M40.E1 f6 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36_M40::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36.M40)
  GOOGLE_DCHECK_NE(&from, this);
  const M36_M40* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36_M40>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36.M40)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36.M40)
    MergeFrom(*source);
  }
}

void M36_M40::MergeFrom(const M36_M40& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36.M40)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000bau) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000200u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00000400u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00000100u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M36_M40::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36_M40::CopyFrom(const M36_M40& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36.M40)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36_M40::IsInitialized() const {
  return true;
}

void M36_M40::InternalSwap(M36_M40* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36_M40::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36_M41::InitAsDefaultInstance() {
}
class M36_M41::_Internal {
 public:
  using HasBits = decltype(std::declval<M36_M41>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

M36_M41::M36_M41()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36.M41)
}
M36_M41::M36_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36.M41)
}
M36_M41::M36_M41(const M36_M41& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36.M41)
}

void M36_M41::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M36_M41_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
}

M36_M41::~M36_M41() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36.M41)
  SharedDtor();
}

void M36_M41::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M36_M41::ArenaDtor(void* object) {
  M36_M41* _this = reinterpret_cast< M36_M41* >(object);
  (void)_this;
}
void M36_M41::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36_M41::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36_M41& M36_M41::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_M41_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36_M41::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    f4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00010000u) {
    f7_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000042u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  if (cached_has_bits & 0x00001200u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36_M41::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M36.M41.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f7 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36_M41::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36.M41)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  // optional string f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M36.M41.f4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f4(), target);
  }

  // optional bool f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_f5(), target);
  }

  // optional int32 f6 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f6(), target);
  }

  // optional bytes f7 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36.M41)
  return target;
}

size_t M36_M41::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36.M41)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f2 = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  // optional string f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f4());
  }

  // optional bytes f7 = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f7());
  }

  if (cached_has_bits & 0x00000042u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (cached_has_bits & 0x00001200u) {
    // optional bool f5 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 f6 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36_M41::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36.M41)
  GOOGLE_DCHECK_NE(&from, this);
  const M36_M41* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36_M41>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36.M41)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36.M41)
    MergeFrom(*source);
  }
}

void M36_M41::MergeFrom(const M36_M41& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36.M41)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f4()) {
    _internal_set_f4(from._internal_f4());
  }
  if (from._internal_has_f7()) {
    _internal_set_f7(from._internal_f7());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000042u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001200u) {
    if (cached_has_bits & 0x00000200u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00001000u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M36_M41::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36_M41::CopyFrom(const M36_M41& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36.M41)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36_M41::IsInitialized() const {
  return true;
}

void M36_M41::InternalSwap(M36_M41* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36_M41::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M36::InitAsDefaultInstance() {
  ::hyperprotobench::_M36_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M36_M37*>(
      ::hyperprotobench::M36_M37::internal_default_instance());
  ::hyperprotobench::_M36_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M36_M40*>(
      ::hyperprotobench::M36_M40::internal_default_instance());
  ::hyperprotobench::_M36_default_instance_._instance.get_mutable()->f13_ = const_cast< ::hyperprotobench::M36_M41*>(
      ::hyperprotobench::M36_M41::internal_default_instance());
}
class M36::_Internal {
 public:
  using HasBits = decltype(std::declval<M36>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M36_M37& f2(const M36* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M36_M40& f8(const M36* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::hyperprotobench::M36_M41& f13(const M36* msg);
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_f15(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
};

const ::hyperprotobench::M36_M37&
M36::_Internal::f2(const M36* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M36_M40&
M36::_Internal::f8(const M36* msg) {
  return *msg->f8_;
}
const ::hyperprotobench::M36_M41&
M36::_Internal::f13(const M36* msg) {
  return *msg->f13_;
}
void M36::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M36_M37* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.f2)
}
void M36::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M36_M40* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.f8)
}
void M36::unsafe_arena_set_allocated_f13(
    ::hyperprotobench::M36_M41* f13) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f13_;
  }
  f13_ = f13;
  if (f13) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.f13)
}
M36::M36()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M36)
}
M36::M36(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M36)
}
M36::M36(const M36& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M36_M37(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M36_M40(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  if (from._internal_has_f13()) {
    f13_ = new ::hyperprotobench::M36_M41(*from.f13_);
  } else {
    f13_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f15_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f15_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M36)
}

void M36::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M36_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f15_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f15_));
}

M36::~M36() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M36)
  SharedDtor();
}

void M36::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f8_;
  if (this != internal_default_instance()) delete f13_;
}

void M36::ArenaDtor(void* object) {
  M36* _this = reinterpret_cast< M36* >(object);
  (void)_this;
}
void M36::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M36::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M36& M36::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M36_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M36::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    if (cached_has_bits & 0x00000010u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(f2_ != nullptr);
      f2_->Clear();
    }
  }
  if (cached_has_bits & 0x00002000u) {
    GOOGLE_DCHECK(f8_ != nullptr);
    f8_->Clear();
  }
  if (cached_has_bits & 0x00400000u) {
    GOOGLE_DCHECK(f13_ != nullptr);
    f13_->Clear();
  }
  f1_ = PROTOBUF_LONGLONG(0);
  f5_ = PROTOBUF_LONGLONG(0);
  f4_ = 0;
  if (cached_has_bits & 0x0000d800u) {
    ::memset(&f6_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f6_)) + sizeof(f9_));
  }
  if (cached_has_bits & 0x008c0000u) {
    ::memset(&f11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f14_) -
        reinterpret_cast<char*>(&f11_)) + sizeof(f14_));
  }
  f15_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M36::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M37 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f6 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f7 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M40 f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f9 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool f10 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f11 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 f12 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M36.M41 f13 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_f13(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f14 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_f14(&has_bits);
          f14_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f15 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_f15(&has_bits);
          f15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M36::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M36)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M36.M37 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f2(this), target, stream);
  }

  // optional bytes f3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f3(), target);
  }

  // optional int32 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f4(), target);
  }

  // optional int64 f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f5(), target);
  }

  // optional bool f6 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_f6(), target);
  }

  // optional int64 f7 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M36.M40 f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::f8(this), target, stream);
  }

  // optional double f9 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_f9(), target);
  }

  // optional bool f10 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_f10(), target);
  }

  // optional double f11 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_f11(), target);
  }

  // optional int64 f12 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_f12(), target);
  }

  // optional .hyperprotobench.M36.M41 f13 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::f13(this), target, stream);
  }

  // optional int64 f14 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_f14(), target);
  }

  // optional uint64 f15 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_f15(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M36)
  return target;
}

size_t M36::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M36)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    // optional bytes f3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional .hyperprotobench.M36.M37 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

  }
  // optional .hyperprotobench.M36.M40 f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f8_);
  }

  // optional .hyperprotobench.M36.M41 f13 = 23;
  if (cached_has_bits & 0x00400000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f13_);
  }

  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  // optional int64 f5 = 11;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f5());
  }

  // optional int32 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f4());
  }

  if (cached_has_bits & 0x0000d800u) {
    // optional bool f6 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool f10 = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

    // optional int64 f7 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f7());
    }

    // optional double f9 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x008c0000u) {
    // optional double f11 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

    // optional int64 f12 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f12());
    }

    // optional int64 f14 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f14());
    }

  }
  // optional uint64 f15 = 25;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f15());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M36::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M36)
  GOOGLE_DCHECK_NE(&from, this);
  const M36* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M36>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M36)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M36)
    MergeFrom(*source);
  }
}

void M36::MergeFrom(const M36& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M36)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000014u) {
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_f2()->::hyperprotobench::M36_M37::MergeFrom(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00002000u) {
    _internal_mutable_f8()->::hyperprotobench::M36_M40::MergeFrom(from._internal_f8());
  }
  if (cached_has_bits & 0x00400000u) {
    _internal_mutable_f13()->::hyperprotobench::M36_M41::MergeFrom(from._internal_f13());
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
  if (cached_has_bits & 0x00000400u) {
    _internal_set_f5(from._internal_f5());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_set_f4(from._internal_f4());
  }
  if (cached_has_bits & 0x0000d800u) {
    if (cached_has_bits & 0x00000800u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00008000u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00001000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00004000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x008c0000u) {
    if (cached_has_bits & 0x00040000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00080000u) {
      f12_ = from.f12_;
    }
    if (cached_has_bits & 0x00800000u) {
      f14_ = from.f14_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_f15(from._internal_f15());
  }
}

void M36::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M36::CopyFrom(const M36& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M36)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M36::IsInitialized() const {
  return true;
}

void M36::InternalSwap(M36* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f8_, other->f8_);
  swap(f13_, other->f13_);
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f10_, other->f10_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f11_, other->f11_);
  swap(f12_, other->f12_);
  swap(f14_, other->f14_);
  swap(f15_, other->f15_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M36::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42_M43::InitAsDefaultInstance() {
}
class M42_M43::_Internal {
 public:
  using HasBits = decltype(std::declval<M42_M43>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

M42_M43::M42_M43()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42.M43)
}
M42_M43::M42_M43(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f4_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42.M43)
}
M42_M43::M42_M43(const M42_M43& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f4_(from.f4_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f8()) {
    f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f8(),
      GetArenaNoVirtual());
  }
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f11()) {
    f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f11(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f10_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f10_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42.M43)
}

void M42_M43::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M42_M43_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f10_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f10_));
}

M42_M43::~M42_M43() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42.M43)
  SharedDtor();
}

void M42_M43::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M42_M43::ArenaDtor(void* object) {
  M42_M43* _this = reinterpret_cast< M42_M43* >(object);
  (void)_this;
}
void M42_M43::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42_M43::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42_M43& M42_M43::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_M43_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42_M43::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f4_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000800u) {
    f8_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00020000u) {
    f11_.ClearNonDefaultToEmpty();
  }
  f3_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x0000c700u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f10_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42_M43::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f4();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_f8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f9 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f10 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f11 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_f11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M42.M43.f11");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42_M43::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42.M43)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f1(), target);
  }

  // optional bytes f2 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f2(), target);
  }

  // optional int64 f3 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_f3(), target);
  }

  // repeated bytes f4 = 11;
  for (int i = 0, n = this->_internal_f4_size(); i < n; i++) {
    const auto& s = this->_internal_f4(i);
    target = stream->WriteBytes(11, s, target);
  }

  // optional int64 f5 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f5(), target);
  }

  // optional fixed64 f6 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(14, this->_internal_f6(), target);
  }

  // optional fixed64 f7 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(15, this->_internal_f7(), target);
  }

  // optional bytes f8 = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_f8(), target);
  }

  // optional int64 f9 = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_f9(), target);
  }

  // optional int64 f10 = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_f10(), target);
  }

  // optional string f11 = 22;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f11().data(), static_cast<int>(this->_internal_f11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M42.M43.f11");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_f11(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42.M43)
  return target;
}

size_t M42_M43::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42.M43)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f4 = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f4_.size());
  for (int i = 0, n = f4_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f4_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional bytes f1 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional bytes f2 = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

  }
  // optional bytes f8 = 16;
  if (cached_has_bits & 0x00000800u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f8());
  }

  // optional string f11 = 22;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f11());
  }

  // optional int64 f3 = 9;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f3());
  }

  if (cached_has_bits & 0x0000c700u) {
    // optional int64 f5 = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional fixed64 f6 = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional fixed64 f7 = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional int64 f9 = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f9());
    }

    // optional int64 f10 = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f10());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42_M43::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42.M43)
  GOOGLE_DCHECK_NE(&from, this);
  const M42_M43* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42_M43>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42.M43)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42.M43)
    MergeFrom(*source);
  }
}

void M42_M43::MergeFrom(const M42_M43& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42.M43)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f4_.MergeFrom(from.f4_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00020000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x00000010u) {
    _internal_set_f3(from._internal_f3());
  }
  if (cached_has_bits & 0x0000c700u) {
    if (cached_has_bits & 0x00000100u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000200u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000400u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00004000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00008000u) {
      f10_ = from.f10_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M42_M43::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42_M43::CopyFrom(const M42_M43& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42.M43)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42_M43::IsInitialized() const {
  return true;
}

void M42_M43::InternalSwap(M42_M43* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.InternalSwap(&other->f4_);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f8_.Swap(&other->f8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f11_.Swap(&other->f11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42_M43::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42_M44::InitAsDefaultInstance() {
}
class M42_M44::_Internal {
 public:
  using HasBits = decltype(std::declval<M42_M44>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

M42_M44::M42_M44()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42.M44)
}
M42_M44::M42_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42.M44)
}
M42_M44::M42_M44(const M42_M44& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f9()) {
    f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f9(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42.M44)
}

void M42_M44::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M42_M44_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f8_));
  f2_ = 37;
}

M42_M44::~M42_M44() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42.M44)
  SharedDtor();
}

void M42_M44::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M42_M44::ArenaDtor(void* object) {
  M42_M44* _this = reinterpret_cast< M42_M44* >(object);
  (void)_this;
}
void M42_M44::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42_M44::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42_M44& M42_M44::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_M44_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42_M44::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00008200u) {
    if (cached_has_bits & 0x00000200u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      f9_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000012u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  if (cached_has_bits & 0x00005900u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f8_));
  }
  f2_ = 37;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42_M44::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M44.E1 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M42_M44_E1_IsValid(val))) {
            _internal_set_f2(static_cast<::hyperprotobench::M42_M44_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f9 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_f9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42_M44::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42.M44)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M42.M44.E1 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_f2(), target);
  }

  // optional int64 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f3(), target);
  }

  // optional fixed64 f4 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_f4(), target);
  }

  // optional bytes f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_f5(), target);
  }

  // optional fixed32 f6 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_f6(), target);
  }

  // optional int32 f7 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f7(), target);
  }

  // optional int64 f8 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_f8(), target);
  }

  // optional bytes f9 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_f9(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42.M44)
  return target;
}

size_t M42_M44::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42.M44)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00008200u) {
    // optional bytes f5 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional bytes f9 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f9());
    }

  }
  if (cached_has_bits & 0x00000012u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  if (cached_has_bits & 0x00005900u) {
    // optional fixed64 f4 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional fixed32 f6 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 f7 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

    // optional int64 f8 = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

  }
  // optional .hyperprotobench.M42.M44.E1 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42_M44::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42.M44)
  GOOGLE_DCHECK_NE(&from, this);
  const M42_M44* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42_M44>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42.M44)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42.M44)
    MergeFrom(*source);
  }
}

void M42_M44::MergeFrom(const M42_M44& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42.M44)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00008200u) {
    if (cached_has_bits & 0x00000200u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_f9(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000010u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00005900u) {
    if (cached_has_bits & 0x00000100u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000800u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00001000u) {
      f7_ = from.f7_;
    }
    if (cached_has_bits & 0x00004000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000008u) {
    _internal_set_f2(from._internal_f2());
  }
}

void M42_M44::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42_M44::CopyFrom(const M42_M44& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42.M44)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42_M44::IsInitialized() const {
  return true;
}

void M42_M44::InternalSwap(M42_M44* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f9_.Swap(&other->f9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42_M44::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42_M45_M46::InitAsDefaultInstance() {
}
class M42_M45_M46::_Internal {
 public:
  using HasBits = decltype(std::declval<M42_M45_M46>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M42_M45_M46::M42_M45_M46()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42.M45.M46)
}
M42_M45_M46::M42_M45_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42.M45.M46)
}
M42_M45_M46::M42_M45_M46(const M42_M45_M46& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42.M45.M46)
}

void M42_M45_M46::SharedCtor() {
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M42_M45_M46::~M42_M45_M46() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42.M45.M46)
  SharedDtor();
}

void M42_M45_M46::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M42_M45_M46::ArenaDtor(void* object) {
  M42_M45_M46* _this = reinterpret_cast< M42_M45_M46* >(object);
  (void)_this;
}
void M42_M45_M46::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42_M45_M46::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42_M45_M46& M42_M45_M46::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_M45_M46_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42_M45_M46::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42.M45.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42_M45_M46::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42_M45_M46::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42.M45.M46)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional int64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional int64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42.M45.M46)
  return target;
}

size_t M42_M45_M46::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42.M45.M46)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional int64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42_M45_M46::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42.M45.M46)
  GOOGLE_DCHECK_NE(&from, this);
  const M42_M45_M46* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42_M45_M46>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42.M45.M46)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42.M45.M46)
    MergeFrom(*source);
  }
}

void M42_M45_M46::MergeFrom(const M42_M45_M46& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42.M45.M46)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M42_M45_M46::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42.M45.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42_M45_M46::CopyFrom(const M42_M45_M46& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42.M45.M46)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42_M45_M46::IsInitialized() const {
  return true;
}

void M42_M45_M46::InternalSwap(M42_M45_M46* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42_M45_M46::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42_M45::InitAsDefaultInstance() {
  ::hyperprotobench::_M42_M45_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M42_M45_M46*>(
      ::hyperprotobench::M42_M45_M46::internal_default_instance());
}
class M42_M45::_Internal {
 public:
  using HasBits = decltype(std::declval<M42_M45>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M42_M45_M46& f2(const M42_M45* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M42_M45_M46&
M42_M45::_Internal::f2(const M42_M45* msg) {
  return *msg->f2_;
}
void M42_M45::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M42_M45_M46* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M45.f2)
}
M42_M45::M42_M45()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42.M45)
}
M42_M45::M42_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42.M45)
}
M42_M45::M42_M45(const M42_M45& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M42_M45_M46(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42.M45)
}

void M42_M45::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M42_M45_benchmark_2eproto.base);
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M42_M45::~M42_M45() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42.M45)
  SharedDtor();
}

void M42_M45::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f2_;
}

void M42_M45::ArenaDtor(void* object) {
  M42_M45* _this = reinterpret_cast< M42_M45* >(object);
  (void)_this;
}
void M42_M45::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42_M45::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42_M45& M42_M45::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_M45_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42_M45::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42_M45::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M45.M46 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42_M45::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42.M45)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M42.M45.M46 f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42.M45)
  return target;
}

size_t M42_M45::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42.M45)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M42.M45.M46 f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f2_);
    }

    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42_M45::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42.M45)
  GOOGLE_DCHECK_NE(&from, this);
  const M42_M45* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42_M45>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42.M45)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42.M45)
    MergeFrom(*source);
  }
}

void M42_M45::MergeFrom(const M42_M45& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42.M45)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f2()->::hyperprotobench::M42_M45_M46::MergeFrom(from._internal_f2());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M42_M45::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42_M45::CopyFrom(const M42_M45& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42.M45)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42_M45::IsInitialized() const {
  return true;
}

void M42_M45::InternalSwap(M42_M45* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42_M45::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42_M47::InitAsDefaultInstance() {
}
class M42_M47::_Internal {
 public:
  using HasBits = decltype(std::declval<M42_M47>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M42_M47::M42_M47()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42.M47)
}
M42_M47::M42_M47(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42.M47)
}
M42_M47::M42_M47(const M42_M47& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42.M47)
}

void M42_M47::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M42_M47::~M42_M47() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42.M47)
  SharedDtor();
}

void M42_M47::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M42_M47::ArenaDtor(void* object) {
  M42_M47* _this = reinterpret_cast< M42_M47* >(object);
  (void)_this;
}
void M42_M47::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42_M47::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42_M47& M42_M47::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_M47_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42_M47::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42.M47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42_M47::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42_M47::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42.M47)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42.M47)
  return target;
}

size_t M42_M47::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42.M47)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42_M47::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42.M47)
  GOOGLE_DCHECK_NE(&from, this);
  const M42_M47* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42_M47>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42.M47)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42.M47)
    MergeFrom(*source);
  }
}

void M42_M47::MergeFrom(const M42_M47& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42.M47)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M42_M47::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42.M47)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42_M47::CopyFrom(const M42_M47& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42.M47)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42_M47::IsInitialized() const {
  return true;
}

void M42_M47::InternalSwap(M42_M47* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42_M47::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M42::InitAsDefaultInstance() {
  ::hyperprotobench::_M42_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M42_M43*>(
      ::hyperprotobench::M42_M43::internal_default_instance());
  ::hyperprotobench::_M42_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M42_M44*>(
      ::hyperprotobench::M42_M44::internal_default_instance());
  ::hyperprotobench::_M42_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M42_M45*>(
      ::hyperprotobench::M42_M45::internal_default_instance());
  ::hyperprotobench::_M42_default_instance_._instance.get_mutable()->f14_ = const_cast< ::hyperprotobench::M42_M47*>(
      ::hyperprotobench::M42_M47::internal_default_instance());
}
class M42::_Internal {
 public:
  using HasBits = decltype(std::declval<M42>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::hyperprotobench::M42_M43& f7(const M42* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::hyperprotobench::M42_M44& f9(const M42* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::hyperprotobench::M42_M45& f10(const M42* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::hyperprotobench::M42_M47& f14(const M42* msg);
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_f15(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_f16(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
};

const ::hyperprotobench::M42_M43&
M42::_Internal::f7(const M42* msg) {
  return *msg->f7_;
}
const ::hyperprotobench::M42_M44&
M42::_Internal::f9(const M42* msg) {
  return *msg->f9_;
}
const ::hyperprotobench::M42_M45&
M42::_Internal::f10(const M42* msg) {
  return *msg->f10_;
}
const ::hyperprotobench::M42_M47&
M42::_Internal::f14(const M42* msg) {
  return *msg->f14_;
}
void M42::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M42_M43* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f7)
}
void M42::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M42_M44* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f9)
}
void M42::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M42_M45* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f10)
}
void M42::unsafe_arena_set_allocated_f14(
    ::hyperprotobench::M42_M47* f14) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f14_;
  }
  f14_ = f14;
  if (f14) {
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f14)
}
M42::M42()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M42)
}
M42::M42(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M42)
}
M42::M42(const M42& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f13()) {
    f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f13(),
      GetArenaNoVirtual());
  }
  f16_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f16()) {
    f16_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f16(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M42_M43(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M42_M44(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M42_M45(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  if (from._internal_has_f14()) {
    f14_ = new ::hyperprotobench::M42_M47(*from.f14_);
  } else {
    f14_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f15_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f15_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M42)
}

void M42::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M42_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f13_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f16_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f15_) -
      reinterpret_cast<char*>(&f7_)) + sizeof(f15_));
}

M42::~M42() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M42)
  SharedDtor();
}

void M42::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f13_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f16_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f7_;
  if (this != internal_default_instance()) delete f9_;
  if (this != internal_default_instance()) delete f10_;
  if (this != internal_default_instance()) delete f14_;
}

void M42::ArenaDtor(void* object) {
  M42* _this = reinterpret_cast< M42* >(object);
  (void)_this;
}
void M42::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M42::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M42& M42::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M42_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M42::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f2_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x20000000u) {
    f13_.ClearNonDefaultToEmpty();
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    f16_.ClearNonDefaultToEmpty();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000800u) {
    GOOGLE_DCHECK(f7_ != nullptr);
    f7_->Clear();
  }
  if (cached_has_bits & 0x000c0000u) {
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(f10_ != nullptr);
      f10_->Clear();
    }
  }
  if (cached_has_bits & 0x40000000u) {
    GOOGLE_DCHECK(f14_ != nullptr);
    f14_->Clear();
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00002600u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f8_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f8_));
  }
  f12_ = false;
  f11_ = 0;
  f15_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M42::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M42.f2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M43 f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M44 f9 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M45 f10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f11 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool f12 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f13 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_f13();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M42.M47 f14 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_f14(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f15 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_f15(&has_bits);
          f15_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f16 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_f16();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M42.f16");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M42::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M42)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional string f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f2().data(), static_cast<int>(this->_internal_f2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M42.f2");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional uint64 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional int64 f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f4(), target);
  }

  // optional int64 f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_f5(), target);
  }

  // optional int64 f6 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M42.M43 f7 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f7(this), target, stream);
  }

  // optional int64 f8 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M42.M44 f9 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::f9(this), target, stream);
  }

  // optional .hyperprotobench.M42.M45 f10 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::f10(this), target, stream);
  }

  // optional double f11 = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_f11(), target);
  }

  // optional bool f12 = 28;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_f12(), target);
  }

  // optional bytes f13 = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->WriteBytesMaybeAliased(
        29, this->_internal_f13(), target);
  }

  // optional .hyperprotobench.M42.M47 f14 = 30;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::f14(this), target, stream);
  }

  // optional int64 f15 = 31;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(31, this->_internal_f15(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional string f16 = 32;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f16().data(), static_cast<int>(this->_internal_f16().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M42.f16");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_f16(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M42)
  return target;
}

size_t M42::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M42)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional string f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f2());
    }

  }
  // optional bytes f13 = 29;
  if (cached_has_bits & 0x20000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f13());
  }

  // optional string f16 = 32;
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f16());
  }

  // optional .hyperprotobench.M42.M43 f7 = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f7_);
  }

  if (cached_has_bits & 0x000c0000u) {
    // optional .hyperprotobench.M42.M44 f9 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

    // optional .hyperprotobench.M42.M45 f10 = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f10_);
    }

  }
  // optional .hyperprotobench.M42.M47 f14 = 30;
  if (cached_has_bits & 0x40000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f14_);
  }

  if (cached_has_bits & 0x00000060u) {
    // optional uint64 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f3());
    }

    // optional int64 f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00002600u) {
    // optional int64 f5 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional int64 f6 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

    // optional int64 f8 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f8());
    }

  }
  // optional bool f12 = 28;
  if (cached_has_bits & 0x10000000u) {
    total_size += 2 + 1;
  }

  // optional double f11 = 22;
  if (cached_has_bits & 0x00400000u) {
    total_size += 2 + 8;
  }

  // optional int64 f15 = 31;
  if (cached_has_bits & 0x80000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f15());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M42::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M42)
  GOOGLE_DCHECK_NE(&from, this);
  const M42* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M42>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M42)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M42)
    MergeFrom(*source);
  }
}

void M42::MergeFrom(const M42& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M42)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f2(from._internal_f2());
    }
  }
  if (cached_has_bits & 0x20000000u) {
    _internal_set_f13(from._internal_f13());
  }
  if (from._internal_has_f16()) {
    _internal_set_f16(from._internal_f16());
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_mutable_f7()->::hyperprotobench::M42_M43::MergeFrom(from._internal_f7());
  }
  if (cached_has_bits & 0x000c0000u) {
    if (cached_has_bits & 0x00040000u) {
      _internal_mutable_f9()->::hyperprotobench::M42_M44::MergeFrom(from._internal_f9());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_f10()->::hyperprotobench::M42_M45::MergeFrom(from._internal_f10());
    }
  }
  if (cached_has_bits & 0x40000000u) {
    _internal_mutable_f14()->::hyperprotobench::M42_M47::MergeFrom(from._internal_f14());
  }
  if (cached_has_bits & 0x00000060u) {
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00002600u) {
    if (cached_has_bits & 0x00000200u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000400u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00002000u) {
      f8_ = from.f8_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x10000000u) {
    _internal_set_f12(from._internal_f12());
  }
  if (cached_has_bits & 0x00400000u) {
    _internal_set_f11(from._internal_f11());
  }
  if (cached_has_bits & 0x80000000u) {
    _internal_set_f15(from._internal_f15());
  }
}

void M42::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M42::CopyFrom(const M42& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M42)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M42::IsInitialized() const {
  return true;
}

void M42::InternalSwap(M42* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f13_.Swap(&other->f13_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f16_.Swap(&other->f16_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f14_, other->f14_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f8_, other->f8_);
  swap(f12_, other->f12_);
  swap(f11_, other->f11_);
  swap(f15_, other->f15_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M42::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M48_M49::InitAsDefaultInstance() {
}
class M48_M49::_Internal {
 public:
  using HasBits = decltype(std::declval<M48_M49>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M48_M49::M48_M49()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M48.M49)
}
M48_M49::M48_M49(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M48.M49)
}
M48_M49::M48_M49(const M48_M49& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M48.M49)
}

void M48_M49::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M48_M49::~M48_M49() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M48.M49)
  SharedDtor();
}

void M48_M49::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M48_M49::ArenaDtor(void* object) {
  M48_M49* _this = reinterpret_cast< M48_M49* >(object);
  (void)_this;
}
void M48_M49::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M48_M49::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M48_M49& M48_M49::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M48_M49_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M48_M49::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M48.M49)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M48_M49::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M48_M49::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M48.M49)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M48.M49)
  return target;
}

size_t M48_M49::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M48.M49)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M48_M49::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M48.M49)
  GOOGLE_DCHECK_NE(&from, this);
  const M48_M49* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M48_M49>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M48.M49)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M48.M49)
    MergeFrom(*source);
  }
}

void M48_M49::MergeFrom(const M48_M49& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M48.M49)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M48_M49::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M48.M49)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M48_M49::CopyFrom(const M48_M49& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M48.M49)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M48_M49::IsInitialized() const {
  return true;
}

void M48_M49::InternalSwap(M48_M49* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M48_M49::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M48_M50_M51::InitAsDefaultInstance() {
}
class M48_M50_M51::_Internal {
 public:
  using HasBits = decltype(std::declval<M48_M50_M51>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M48_M50_M51::M48_M50_M51()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M48.M50.M51)
}
M48_M50_M51::M48_M50_M51(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M48.M50.M51)
}
M48_M50_M51::M48_M50_M51(const M48_M50_M51& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M48.M50.M51)
}

void M48_M50_M51::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M48_M50_M51_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

M48_M50_M51::~M48_M50_M51() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M48.M50.M51)
  SharedDtor();
}

void M48_M50_M51::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M48_M50_M51::ArenaDtor(void* object) {
  M48_M50_M51* _this = reinterpret_cast< M48_M50_M51* >(object);
  (void)_this;
}
void M48_M50_M51::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M48_M50_M51::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M48_M50_M51& M48_M50_M51::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M48_M50_M51_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M48_M50_M51::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M48.M50.M51)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    f1_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M48_M50_M51::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M48_M50_M51::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M48.M50.M51)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M48.M50.M51)
  return target;
}

size_t M48_M50_M51::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M48.M50.M51)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M48_M50_M51::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M48.M50.M51)
  GOOGLE_DCHECK_NE(&from, this);
  const M48_M50_M51* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M48_M50_M51>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M48.M50.M51)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M48.M50.M51)
    MergeFrom(*source);
  }
}

void M48_M50_M51::MergeFrom(const M48_M50_M51& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M48.M50.M51)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M48_M50_M51::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M48.M50.M51)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M48_M50_M51::CopyFrom(const M48_M50_M51& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M48.M50.M51)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M48_M50_M51::IsInitialized() const {
  return true;
}

void M48_M50_M51::InternalSwap(M48_M50_M51* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata M48_M50_M51::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M48_M50::InitAsDefaultInstance() {
  ::hyperprotobench::_M48_M50_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M48_M50_M51*>(
      ::hyperprotobench::M48_M50_M51::internal_default_instance());
}
class M48_M50::_Internal {
 public:
  using HasBits = decltype(std::declval<M48_M50>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hyperprotobench::M48_M50_M51& f3(const M48_M50* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M48_M50_M51&
M48_M50::_Internal::f3(const M48_M50* msg) {
  return *msg->f3_;
}
void M48_M50::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M48_M50_M51* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.M50.f3)
}
M48_M50::M48_M50()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M48.M50)
}
M48_M50::M48_M50(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f5_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M48.M50)
}
M48_M50::M48_M50(const M48_M50& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f5_(from.f5_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M48_M50_M51(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M48.M50)
}

void M48_M50::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M48_M50_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f6_));
}

M48_M50::~M48_M50() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M48.M50)
  SharedDtor();
}

void M48_M50::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f3_;
}

void M48_M50::ArenaDtor(void* object) {
  M48_M50* _this = reinterpret_cast< M48_M50* >(object);
  (void)_this;
}
void M48_M50::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M48_M50::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M48_M50& M48_M50::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M48_M50_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M48_M50::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M48.M50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f5_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  if (cached_has_bits & 0x000000a4u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M48_M50::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M48.M50.M51 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_f5();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M48_M50::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M48.M50)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M48.M50.M51 f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  // optional int64 f4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f4(), target);
  }

  // repeated bytes f5 = 7;
  for (int i = 0, n = this->_internal_f5_size(); i < n; i++) {
    const auto& s = this->_internal_f5(i);
    target = stream->WriteBytes(7, s, target);
  }

  // optional int64 f6 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M48.M50)
  return target;
}

size_t M48_M50::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M48.M50)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes f5 = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(f5_.size());
  for (int i = 0, n = f5_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      f5_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000aeu) {
    // optional bytes f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M48.M50.M51 f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int64 f4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int64 f6 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M48_M50::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M48.M50)
  GOOGLE_DCHECK_NE(&from, this);
  const M48_M50* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M48_M50>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M48.M50)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M48.M50)
    MergeFrom(*source);
  }
}

void M48_M50::MergeFrom(const M48_M50& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M48.M50)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f5_.MergeFrom(from.f5_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000aeu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_f3()->::hyperprotobench::M48_M50_M51::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M48_M50::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M48.M50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M48_M50::CopyFrom(const M48_M50& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M48.M50)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M48_M50::IsInitialized() const {
  return true;
}

void M48_M50::InternalSwap(M48_M50* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f5_.InternalSwap(&other->f5_);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M48_M50::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M48::InitAsDefaultInstance() {
  ::hyperprotobench::_M48_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M48_M49*>(
      ::hyperprotobench::M48_M49::internal_default_instance());
  ::hyperprotobench::_M48_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M48_M50*>(
      ::hyperprotobench::M48_M50::internal_default_instance());
}
class M48::_Internal {
 public:
  using HasBits = decltype(std::declval<M48>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M48_M49& f5(const M48* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M48_M50& f6(const M48* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::hyperprotobench::M48_M49&
M48::_Internal::f5(const M48* msg) {
  return *msg->f5_;
}
const ::hyperprotobench::M48_M50&
M48::_Internal::f6(const M48* msg) {
  return *msg->f6_;
}
void M48::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M48_M49* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.f5)
}
void M48::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M48_M50* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.f6)
}
M48::M48()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M48)
}
M48::M48(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M48)
}
M48::M48(const M48& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M48_M49(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M48_M50(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f8_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f8_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M48)
}

void M48::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M48_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f8_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f8_));
}

M48::~M48() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M48)
  SharedDtor();
}

void M48::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
  if (this != internal_default_instance()) delete f6_;
}

void M48::ArenaDtor(void* object) {
  M48* _this = reinterpret_cast< M48* >(object);
  (void)_this;
}
void M48::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M48::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M48& M48::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M48_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M48::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M48)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00008600u) {
    if (cached_has_bits & 0x00008000u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f6_ != nullptr);
      f6_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f3_));
  }
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M48::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M48.M49 f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M48.M50 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M48::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M48)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional double f2 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_f2(), target);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional bytes f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M48.M49 f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::f5(this), target, stream);
  }

  // optional .hyperprotobench.M48.M50 f6 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::f6(this), target, stream);
  }

  // optional bytes f7 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_f7(), target);
  }

  // optional fixed64 f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->_internal_f8(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M48)
  return target;
}

size_t M48::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M48)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional bytes f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00008600u) {
    // optional bytes f7 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f7());
    }

    // optional .hyperprotobench.M48.M49 f5 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional .hyperprotobench.M48.M50 f6 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f6_);
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional double f2 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int64 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

  }
  // optional fixed64 f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M48::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M48)
  GOOGLE_DCHECK_NE(&from, this);
  const M48* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M48>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M48)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M48)
    MergeFrom(*source);
  }
}

void M48::MergeFrom(const M48& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M48)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f4(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x00008600u) {
    if (cached_has_bits & 0x00008000u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_f5()->::hyperprotobench::M48_M49::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f6()->::hyperprotobench::M48_M50::MergeFrom(from._internal_f6());
    }
  }
  if (cached_has_bits & 0x00000030u) {
    if (cached_has_bits & 0x00000010u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_f8(from._internal_f8());
  }
}

void M48::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M48)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M48::CopyFrom(const M48& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M48)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M48::IsInitialized() const {
  return true;
}

void M48::InternalSwap(M48* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f8_, other->f8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M48::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52_M53::InitAsDefaultInstance() {
}
class M52_M53::_Internal {
 public:
  using HasBits = decltype(std::declval<M52_M53>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M52_M53::M52_M53()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52.M53)
}
M52_M53::M52_M53(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52.M53)
}
M52_M53::M52_M53(const M52_M53& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52.M53)
}

void M52_M53::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M52_M53::~M52_M53() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52.M53)
  SharedDtor();
}

void M52_M53::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M52_M53::ArenaDtor(void* object) {
  M52_M53* _this = reinterpret_cast< M52_M53* >(object);
  (void)_this;
}
void M52_M53::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52_M53::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52_M53& M52_M53::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_M53_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52_M53::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52.M53)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52_M53::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52_M53::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52.M53)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52.M53)
  return target;
}

size_t M52_M53::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52.M53)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52_M53::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52.M53)
  GOOGLE_DCHECK_NE(&from, this);
  const M52_M53* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52_M53>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52.M53)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52.M53)
    MergeFrom(*source);
  }
}

void M52_M53::MergeFrom(const M52_M53& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52.M53)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M52_M53::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52.M53)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52_M53::CopyFrom(const M52_M53& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52.M53)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52_M53::IsInitialized() const {
  return true;
}

void M52_M53::InternalSwap(M52_M53* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52_M53::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52_M54::InitAsDefaultInstance() {
}
class M52_M54::_Internal {
 public:
  using HasBits = decltype(std::declval<M52_M54>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M52_M54::M52_M54()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52.M54)
}
M52_M54::M52_M54(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52.M54)
}
M52_M54::M52_M54(const M52_M54& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52.M54)
}

void M52_M54::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M52_M54_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M52_M54::~M52_M54() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52.M54)
  SharedDtor();
}

void M52_M54::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M52_M54::ArenaDtor(void* object) {
  M52_M54* _this = reinterpret_cast< M52_M54* >(object);
  (void)_this;
}
void M52_M54::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52_M54::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52_M54& M52_M54::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_M54_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52_M54::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52.M54)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52_M54::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52_M54::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52.M54)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f3(), target);
  }

  // optional int64 f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f4(), target);
  }

  // optional int64 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f5(), target);
  }

  // optional bytes f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52.M54)
  return target;
}

size_t M52_M54::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52.M54)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000beu) {
    // optional bytes f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f6());
    }

    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

    // optional fixed64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int64 f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int64 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52_M54::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52.M54)
  GOOGLE_DCHECK_NE(&from, this);
  const M52_M54* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52_M54>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52.M54)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52.M54)
    MergeFrom(*source);
  }
}

void M52_M54::MergeFrom(const M52_M54& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52.M54)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000beu) {
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M52_M54::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52.M54)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52_M54::CopyFrom(const M52_M54& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52.M54)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52_M54::IsInitialized() const {
  return true;
}

void M52_M54::InternalSwap(M52_M54* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52_M54::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52_M55::InitAsDefaultInstance() {
}
class M52_M55::_Internal {
 public:
  using HasBits = decltype(std::declval<M52_M55>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M52_M55::M52_M55()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52.M55)
}
M52_M55::M52_M55(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52.M55)
}
M52_M55::M52_M55(const M52_M55& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52.M55)
}

void M52_M55::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M52_M55::~M52_M55() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52.M55)
  SharedDtor();
}

void M52_M55::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M52_M55::ArenaDtor(void* object) {
  M52_M55* _this = reinterpret_cast< M52_M55* >(object);
  (void)_this;
}
void M52_M55::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52_M55::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52_M55& M52_M55::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_M55_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52_M55::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52.M55)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52_M55::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52_M55::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52.M55)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52.M55)
  return target;
}

size_t M52_M55::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52.M55)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52_M55::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52.M55)
  GOOGLE_DCHECK_NE(&from, this);
  const M52_M55* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52_M55>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52.M55)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52.M55)
    MergeFrom(*source);
  }
}

void M52_M55::MergeFrom(const M52_M55& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52.M55)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M52_M55::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52.M55)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52_M55::CopyFrom(const M52_M55& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52.M55)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52_M55::IsInitialized() const {
  return true;
}

void M52_M55::InternalSwap(M52_M55* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52_M55::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52_M56_M57::InitAsDefaultInstance() {
}
class M52_M56_M57::_Internal {
 public:
  using HasBits = decltype(std::declval<M52_M56_M57>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

M52_M56_M57::M52_M56_M57()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52.M56.M57)
}
M52_M56_M57::M52_M56_M57(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52.M56.M57)
}
M52_M56_M57::M52_M56_M57(const M52_M56_M57& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52.M56.M57)
}

void M52_M56_M57::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M52_M56_M57_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M52_M56_M57::~M52_M56_M57() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52.M56.M57)
  SharedDtor();
}

void M52_M56_M57::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M52_M56_M57::ArenaDtor(void* object) {
  M52_M56_M57* _this = reinterpret_cast< M52_M56_M57* >(object);
  (void)_this;
}
void M52_M56_M57::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52_M56_M57::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52_M56_M57& M52_M56_M57::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_M56_M57_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52_M56_M57::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52.M56.M57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    f3_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000082u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00001400u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52_M56_M57::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M52.M56.M57.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52_M56_M57::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52.M56.M57)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional fixed32 f2 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_f2(), target);
  }

  // optional string f3 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M52.M56.M57.f3");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f3(), target);
  }

  // optional int64 f4 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f4(), target);
  }

  // optional int64 f5 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52.M56.M57)
  return target;
}

size_t M52_M56_M57::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52.M56.M57)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f3 = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f3());
  }

  if (cached_has_bits & 0x00000082u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed32 f2 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001400u) {
    // optional int64 f4 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

    // optional int64 f5 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52_M56_M57::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52.M56.M57)
  GOOGLE_DCHECK_NE(&from, this);
  const M52_M56_M57* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52_M56_M57>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52.M56.M57)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52.M56.M57)
    MergeFrom(*source);
  }
}

void M52_M56_M57::MergeFrom(const M52_M56_M57& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52.M56.M57)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f3()) {
    _internal_set_f3(from._internal_f3());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000082u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000080u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00000400u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00001000u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M52_M56_M57::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52.M56.M57)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52_M56_M57::CopyFrom(const M52_M56_M57& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52.M56.M57)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52_M56_M57::IsInitialized() const {
  return true;
}

void M52_M56_M57::InternalSwap(M52_M56_M57* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52_M56_M57::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52_M56::InitAsDefaultInstance() {
  ::hyperprotobench::_M52_M56_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M52_M56_M57*>(
      ::hyperprotobench::M52_M56_M57::internal_default_instance());
}
class M52_M56::_Internal {
 public:
  using HasBits = decltype(std::declval<M52_M56>()._has_bits_);
  static const ::hyperprotobench::M52_M56_M57& f1(const M52_M56* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::hyperprotobench::M52_M56_M57&
M52_M56::_Internal::f1(const M52_M56* msg) {
  return *msg->f1_;
}
void M52_M56::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M52_M56_M57* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.M56.f1)
}
M52_M56::M52_M56()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52.M56)
}
M52_M56::M52_M56(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52.M56)
}
M52_M56::M52_M56(const M52_M56& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M52_M56_M57(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52.M56)
}

void M52_M56::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M52_M56_benchmark_2eproto.base);
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M52_M56::~M52_M56() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52.M56)
  SharedDtor();
}

void M52_M56::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete f1_;
}

void M52_M56::ArenaDtor(void* object) {
  M52_M56* _this = reinterpret_cast< M52_M56* >(object);
  (void)_this;
}
void M52_M56::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52_M56::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52_M56& M52_M56::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_M56_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52_M56::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52.M56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  f2_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52_M56::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M52.M56.M57 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52_M56::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52.M56)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M52.M56.M57 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f1(this), target, stream);
  }

  // optional fixed32 f2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52.M56)
  return target;
}

size_t M52_M56::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52.M56)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional .hyperprotobench.M52.M56.M57 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional fixed32 f2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52_M56::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52.M56)
  GOOGLE_DCHECK_NE(&from, this);
  const M52_M56* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52_M56>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52.M56)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52.M56)
    MergeFrom(*source);
  }
}

void M52_M56::MergeFrom(const M52_M56& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52.M56)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M52_M56_M57::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M52_M56::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52.M56)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52_M56::CopyFrom(const M52_M56& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52.M56)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52_M56::IsInitialized() const {
  return true;
}

void M52_M56::InternalSwap(M52_M56* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52_M56::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M52::InitAsDefaultInstance() {
  ::hyperprotobench::_M52_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M52_M53*>(
      ::hyperprotobench::M52_M53::internal_default_instance());
  ::hyperprotobench::_M52_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M52_M54*>(
      ::hyperprotobench::M52_M54::internal_default_instance());
  ::hyperprotobench::_M52_default_instance_._instance.get_mutable()->f12_ = const_cast< ::hyperprotobench::M52_M55*>(
      ::hyperprotobench::M52_M55::internal_default_instance());
  ::hyperprotobench::_M52_default_instance_._instance.get_mutable()->f13_ = const_cast< ::hyperprotobench::M52_M56*>(
      ::hyperprotobench::M52_M56::internal_default_instance());
}
class M52::_Internal {
 public:
  using HasBits = decltype(std::declval<M52>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hyperprotobench::M52_M53& f8(const M52* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::hyperprotobench::M52_M54& f9(const M52* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::hyperprotobench::M52_M55& f12(const M52* msg);
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::hyperprotobench::M52_M56& f13(const M52* msg);
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
};

const ::hyperprotobench::M52_M53&
M52::_Internal::f8(const M52* msg) {
  return *msg->f8_;
}
const ::hyperprotobench::M52_M54&
M52::_Internal::f9(const M52* msg) {
  return *msg->f9_;
}
const ::hyperprotobench::M52_M55&
M52::_Internal::f12(const M52* msg) {
  return *msg->f12_;
}
const ::hyperprotobench::M52_M56&
M52::_Internal::f13(const M52* msg) {
  return *msg->f13_;
}
void M52::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M52_M53* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f8)
}
void M52::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M52_M54* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f9)
}
void M52::unsafe_arena_set_allocated_f12(
    ::hyperprotobench::M52_M55* f12) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f12_;
  }
  f12_ = f12;
  if (f12) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f12)
}
void M52::unsafe_arena_set_allocated_f13(
    ::hyperprotobench::M52_M56* f13) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f13_;
  }
  f13_ = f13;
  if (f13) {
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f13)
}
M52::M52()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M52)
}
M52::M52(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M52)
}
M52::M52(const M52& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M52_M53(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M52_M54(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  if (from._internal_has_f12()) {
    f12_ = new ::hyperprotobench::M52_M55(*from.f12_);
  } else {
    f12_ = nullptr;
  }
  if (from._internal_has_f13()) {
    f13_ = new ::hyperprotobench::M52_M56(*from.f13_);
  } else {
    f13_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f11_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f11_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M52)
}

void M52::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M52_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f8_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f8_)) + sizeof(f11_));
}

M52::~M52() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M52)
  SharedDtor();
}

void M52::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f8_;
  if (this != internal_default_instance()) delete f9_;
  if (this != internal_default_instance()) delete f12_;
  if (this != internal_default_instance()) delete f13_;
}

void M52::ArenaDtor(void* object) {
  M52* _this = reinterpret_cast< M52* >(object);
  (void)_this;
}
void M52::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M52::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M52& M52::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M52_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M52::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000b0000u) {
    if (cached_has_bits & 0x00080000u) {
      f10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(f8_ != nullptr);
      f8_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
  }
  if (cached_has_bits & 0x0c000000u) {
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(f12_ != nullptr);
      f12_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(f13_ != nullptr);
      f13_->Clear();
    }
  }
  if (cached_has_bits & 0x000000cau) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  }
  f7_ = PROTOBUF_ULONGLONG(0);
  f4_ = 0u;
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M52::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f7 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M52.M53 f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M52.M54 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M52.M55 f12 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_f12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M52.M56 f13 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_f13(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M52::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M52)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_f2(), target);
  }

  // optional int64 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f3(), target);
  }

  // optional fixed32 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_f4(), target);
  }

  // optional int64 f5 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f5(), target);
  }

  // optional int64 f6 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f6(), target);
  }

  // optional uint64 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M52.M53 f8 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::f8(this), target, stream);
  }

  // optional .hyperprotobench.M52.M54 f9 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::f9(this), target, stream);
  }

  // optional bytes f10 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->WriteBytesMaybeAliased(
        19, this->_internal_f10(), target);
  }

  // optional int64 f11 = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(25, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M52.M55 f12 = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::f12(this), target, stream);
  }

  // optional .hyperprotobench.M52.M56 f13 = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::f13(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M52)
  return target;
}

size_t M52::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M52)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f2 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  if (cached_has_bits & 0x000b0000u) {
    // optional bytes f10 = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f10());
    }

    // optional .hyperprotobench.M52.M53 f8 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f8_);
    }

    // optional .hyperprotobench.M52.M54 f9 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

  }
  if (cached_has_bits & 0x0c000000u) {
    // optional .hyperprotobench.M52.M55 f12 = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f12_);
    }

    // optional .hyperprotobench.M52.M56 f13 = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f13_);
    }

  }
  if (cached_has_bits & 0x000000cau) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int64 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int64 f5 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional int64 f6 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

  }
  // optional uint64 f7 = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f7());
  }

  // optional fixed32 f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 4;
  }

  // optional int64 f11 = 25;
  if (cached_has_bits & 0x02000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f11());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M52::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M52)
  GOOGLE_DCHECK_NE(&from, this);
  const M52* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M52>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M52)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M52)
    MergeFrom(*source);
  }
}

void M52::MergeFrom(const M52& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M52)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000b0000u) {
    if (cached_has_bits & 0x00080000u) {
      _internal_set_f10(from._internal_f10());
    }
    if (cached_has_bits & 0x00010000u) {
      _internal_mutable_f8()->::hyperprotobench::M52_M53::MergeFrom(from._internal_f8());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_mutable_f9()->::hyperprotobench::M52_M54::MergeFrom(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x0c000000u) {
    if (cached_has_bits & 0x04000000u) {
      _internal_mutable_f12()->::hyperprotobench::M52_M55::MergeFrom(from._internal_f12());
    }
    if (cached_has_bits & 0x08000000u) {
      _internal_mutable_f13()->::hyperprotobench::M52_M56::MergeFrom(from._internal_f13());
    }
  }
  if (cached_has_bits & 0x000000cau) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000080u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x00000020u) {
    _internal_set_f4(from._internal_f4());
  }
  if (cached_has_bits & 0x02000000u) {
    _internal_set_f11(from._internal_f11());
  }
}

void M52::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M52)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M52::CopyFrom(const M52& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M52)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M52::IsInitialized() const {
  return true;
}

void M52::InternalSwap(M52* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f12_, other->f12_);
  swap(f13_, other->f13_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f7_, other->f7_);
  swap(f4_, other->f4_);
  swap(f11_, other->f11_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M52::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M3* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M3 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M4_M5* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M4_M5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M4_M5 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M4_M6* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M4_M6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M4_M6 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M4* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M4 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M7* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M7 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M7 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M8_M9* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M8_M9 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M8_M9 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M8* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M8 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1* Arena::CreateMaybeMessage< ::hyperprotobench::M1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M10_M11_M12* Arena::CreateMaybeMessage< ::hyperprotobench::M10_M11_M12 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M10_M11_M12 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M10_M11* Arena::CreateMaybeMessage< ::hyperprotobench::M10_M11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M10_M11 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M10_M13* Arena::CreateMaybeMessage< ::hyperprotobench::M10_M13 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M10_M13 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M10_M14* Arena::CreateMaybeMessage< ::hyperprotobench::M10_M14 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M10_M14 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M10* Arena::CreateMaybeMessage< ::hyperprotobench::M10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M10 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15_M16* Arena::CreateMaybeMessage< ::hyperprotobench::M15_M16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15_M16 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15_M17_M18* Arena::CreateMaybeMessage< ::hyperprotobench::M15_M17_M18 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15_M17_M18 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15_M17_M19* Arena::CreateMaybeMessage< ::hyperprotobench::M15_M17_M19 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15_M17_M19 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15_M17* Arena::CreateMaybeMessage< ::hyperprotobench::M15_M17 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15_M17 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15_M20* Arena::CreateMaybeMessage< ::hyperprotobench::M15_M20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15_M20 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M15* Arena::CreateMaybeMessage< ::hyperprotobench::M15 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M15 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M22* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M22 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M23_M24* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M23_M24 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M23_M24 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21_M23* Arena::CreateMaybeMessage< ::hyperprotobench::M21_M23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21_M23 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M21* Arena::CreateMaybeMessage< ::hyperprotobench::M21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M21 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M26_M27* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M26_M27 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M26_M27 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M26* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M26 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M26 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M28_M29* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M28_M29 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M28_M29 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25_M28* Arena::CreateMaybeMessage< ::hyperprotobench::M25_M28 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25_M28 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M25* Arena::CreateMaybeMessage< ::hyperprotobench::M25 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M25 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M31* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M31 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M31 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M32_M33* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M32_M33 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M32_M33 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M32* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M32 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M34* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M34 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M34 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30_M35* Arena::CreateMaybeMessage< ::hyperprotobench::M30_M35 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30_M35 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M30* Arena::CreateMaybeMessage< ::hyperprotobench::M30 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M30 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36_M37_M38* Arena::CreateMaybeMessage< ::hyperprotobench::M36_M37_M38 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36_M37_M38 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36_M37_M39* Arena::CreateMaybeMessage< ::hyperprotobench::M36_M37_M39 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36_M37_M39 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36_M37* Arena::CreateMaybeMessage< ::hyperprotobench::M36_M37 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36_M37 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36_M40* Arena::CreateMaybeMessage< ::hyperprotobench::M36_M40 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36_M40 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36_M41* Arena::CreateMaybeMessage< ::hyperprotobench::M36_M41 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36_M41 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M36* Arena::CreateMaybeMessage< ::hyperprotobench::M36 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M36 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42_M43* Arena::CreateMaybeMessage< ::hyperprotobench::M42_M43 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42_M43 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42_M44* Arena::CreateMaybeMessage< ::hyperprotobench::M42_M44 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42_M44 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42_M45_M46* Arena::CreateMaybeMessage< ::hyperprotobench::M42_M45_M46 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42_M45_M46 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42_M45* Arena::CreateMaybeMessage< ::hyperprotobench::M42_M45 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42_M45 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42_M47* Arena::CreateMaybeMessage< ::hyperprotobench::M42_M47 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42_M47 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M42* Arena::CreateMaybeMessage< ::hyperprotobench::M42 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M42 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M48_M49* Arena::CreateMaybeMessage< ::hyperprotobench::M48_M49 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M48_M49 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M48_M50_M51* Arena::CreateMaybeMessage< ::hyperprotobench::M48_M50_M51 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M48_M50_M51 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M48_M50* Arena::CreateMaybeMessage< ::hyperprotobench::M48_M50 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M48_M50 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M48* Arena::CreateMaybeMessage< ::hyperprotobench::M48 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M48 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52_M53* Arena::CreateMaybeMessage< ::hyperprotobench::M52_M53 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52_M53 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52_M54* Arena::CreateMaybeMessage< ::hyperprotobench::M52_M54 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52_M54 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52_M55* Arena::CreateMaybeMessage< ::hyperprotobench::M52_M55 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52_M55 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52_M56_M57* Arena::CreateMaybeMessage< ::hyperprotobench::M52_M56_M57 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52_M56_M57 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52_M56* Arena::CreateMaybeMessage< ::hyperprotobench::M52_M56 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52_M56 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M52* Arena::CreateMaybeMessage< ::hyperprotobench::M52 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M52 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
