// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[57]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto;

 struct hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M3_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M3_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M4_M5_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M4_M5_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M4_M6_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M4_M6_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M4_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M4_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M7_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M7_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M8_M9_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M8_M9_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_M8_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M8_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M10_M11_M12_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M10_M11_M12_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M10_M11_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M10_M11_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M10_M13_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M10_M13_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M10_M14_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M10_M14_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M10_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M10_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M16_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M17_M18_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M17_M18_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M17_M19_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M17_M19_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M17_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M17_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M20_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M20_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M23_M24_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_M23_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M21_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_M27_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M28_M29_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_M29_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M28_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M32_M33_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_M33_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M32_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M34_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M34_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_M35_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_M35_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M30_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_M37_M38_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_M37_M38_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_M37_M39_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_M37_M39_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_M37_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_M37_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_M40_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_M40_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_M41_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_M41_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M36_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M36_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_M43_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_M43_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_M44_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_M44_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_M45_M46_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_M45_M46_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_M45_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_M45_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_M47_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_M47_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M42_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M42_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M48_M49_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M48_M49_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M48_M50_M51_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M48_M50_M51_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M48_M50_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M48_M50_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M48_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M48_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_M53_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_M53_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_M54_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_M54_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_M55_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_M55_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_M56_M57_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_M56_M57_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_M56_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_M56_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M52_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M52_ACCEL_DESCRIPTORS[];
};
namespace hyperprotobench {
class M1;
class M1DefaultTypeInternal;
extern M1DefaultTypeInternal _M1_default_instance_;
class M10;
class M10DefaultTypeInternal;
extern M10DefaultTypeInternal _M10_default_instance_;
class M10_M11;
class M10_M11DefaultTypeInternal;
extern M10_M11DefaultTypeInternal _M10_M11_default_instance_;
class M10_M11_M12;
class M10_M11_M12DefaultTypeInternal;
extern M10_M11_M12DefaultTypeInternal _M10_M11_M12_default_instance_;
class M10_M13;
class M10_M13DefaultTypeInternal;
extern M10_M13DefaultTypeInternal _M10_M13_default_instance_;
class M10_M14;
class M10_M14DefaultTypeInternal;
extern M10_M14DefaultTypeInternal _M10_M14_default_instance_;
class M15;
class M15DefaultTypeInternal;
extern M15DefaultTypeInternal _M15_default_instance_;
class M15_M16;
class M15_M16DefaultTypeInternal;
extern M15_M16DefaultTypeInternal _M15_M16_default_instance_;
class M15_M17;
class M15_M17DefaultTypeInternal;
extern M15_M17DefaultTypeInternal _M15_M17_default_instance_;
class M15_M17_M18;
class M15_M17_M18DefaultTypeInternal;
extern M15_M17_M18DefaultTypeInternal _M15_M17_M18_default_instance_;
class M15_M17_M19;
class M15_M17_M19DefaultTypeInternal;
extern M15_M17_M19DefaultTypeInternal _M15_M17_M19_default_instance_;
class M15_M20;
class M15_M20DefaultTypeInternal;
extern M15_M20DefaultTypeInternal _M15_M20_default_instance_;
class M1_M2;
class M1_M2DefaultTypeInternal;
extern M1_M2DefaultTypeInternal _M1_M2_default_instance_;
class M1_M3;
class M1_M3DefaultTypeInternal;
extern M1_M3DefaultTypeInternal _M1_M3_default_instance_;
class M1_M4;
class M1_M4DefaultTypeInternal;
extern M1_M4DefaultTypeInternal _M1_M4_default_instance_;
class M1_M4_M5;
class M1_M4_M5DefaultTypeInternal;
extern M1_M4_M5DefaultTypeInternal _M1_M4_M5_default_instance_;
class M1_M4_M6;
class M1_M4_M6DefaultTypeInternal;
extern M1_M4_M6DefaultTypeInternal _M1_M4_M6_default_instance_;
class M1_M7;
class M1_M7DefaultTypeInternal;
extern M1_M7DefaultTypeInternal _M1_M7_default_instance_;
class M1_M8;
class M1_M8DefaultTypeInternal;
extern M1_M8DefaultTypeInternal _M1_M8_default_instance_;
class M1_M8_M9;
class M1_M8_M9DefaultTypeInternal;
extern M1_M8_M9DefaultTypeInternal _M1_M8_M9_default_instance_;
class M21;
class M21DefaultTypeInternal;
extern M21DefaultTypeInternal _M21_default_instance_;
class M21_M22;
class M21_M22DefaultTypeInternal;
extern M21_M22DefaultTypeInternal _M21_M22_default_instance_;
class M21_M23;
class M21_M23DefaultTypeInternal;
extern M21_M23DefaultTypeInternal _M21_M23_default_instance_;
class M21_M23_M24;
class M21_M23_M24DefaultTypeInternal;
extern M21_M23_M24DefaultTypeInternal _M21_M23_M24_default_instance_;
class M25;
class M25DefaultTypeInternal;
extern M25DefaultTypeInternal _M25_default_instance_;
class M25_M26;
class M25_M26DefaultTypeInternal;
extern M25_M26DefaultTypeInternal _M25_M26_default_instance_;
class M25_M26_M27;
class M25_M26_M27DefaultTypeInternal;
extern M25_M26_M27DefaultTypeInternal _M25_M26_M27_default_instance_;
class M25_M28;
class M25_M28DefaultTypeInternal;
extern M25_M28DefaultTypeInternal _M25_M28_default_instance_;
class M25_M28_M29;
class M25_M28_M29DefaultTypeInternal;
extern M25_M28_M29DefaultTypeInternal _M25_M28_M29_default_instance_;
class M30;
class M30DefaultTypeInternal;
extern M30DefaultTypeInternal _M30_default_instance_;
class M30_M31;
class M30_M31DefaultTypeInternal;
extern M30_M31DefaultTypeInternal _M30_M31_default_instance_;
class M30_M32;
class M30_M32DefaultTypeInternal;
extern M30_M32DefaultTypeInternal _M30_M32_default_instance_;
class M30_M32_M33;
class M30_M32_M33DefaultTypeInternal;
extern M30_M32_M33DefaultTypeInternal _M30_M32_M33_default_instance_;
class M30_M34;
class M30_M34DefaultTypeInternal;
extern M30_M34DefaultTypeInternal _M30_M34_default_instance_;
class M30_M35;
class M30_M35DefaultTypeInternal;
extern M30_M35DefaultTypeInternal _M30_M35_default_instance_;
class M36;
class M36DefaultTypeInternal;
extern M36DefaultTypeInternal _M36_default_instance_;
class M36_M37;
class M36_M37DefaultTypeInternal;
extern M36_M37DefaultTypeInternal _M36_M37_default_instance_;
class M36_M37_M38;
class M36_M37_M38DefaultTypeInternal;
extern M36_M37_M38DefaultTypeInternal _M36_M37_M38_default_instance_;
class M36_M37_M39;
class M36_M37_M39DefaultTypeInternal;
extern M36_M37_M39DefaultTypeInternal _M36_M37_M39_default_instance_;
class M36_M40;
class M36_M40DefaultTypeInternal;
extern M36_M40DefaultTypeInternal _M36_M40_default_instance_;
class M36_M41;
class M36_M41DefaultTypeInternal;
extern M36_M41DefaultTypeInternal _M36_M41_default_instance_;
class M42;
class M42DefaultTypeInternal;
extern M42DefaultTypeInternal _M42_default_instance_;
class M42_M43;
class M42_M43DefaultTypeInternal;
extern M42_M43DefaultTypeInternal _M42_M43_default_instance_;
class M42_M44;
class M42_M44DefaultTypeInternal;
extern M42_M44DefaultTypeInternal _M42_M44_default_instance_;
class M42_M45;
class M42_M45DefaultTypeInternal;
extern M42_M45DefaultTypeInternal _M42_M45_default_instance_;
class M42_M45_M46;
class M42_M45_M46DefaultTypeInternal;
extern M42_M45_M46DefaultTypeInternal _M42_M45_M46_default_instance_;
class M42_M47;
class M42_M47DefaultTypeInternal;
extern M42_M47DefaultTypeInternal _M42_M47_default_instance_;
class M48;
class M48DefaultTypeInternal;
extern M48DefaultTypeInternal _M48_default_instance_;
class M48_M49;
class M48_M49DefaultTypeInternal;
extern M48_M49DefaultTypeInternal _M48_M49_default_instance_;
class M48_M50;
class M48_M50DefaultTypeInternal;
extern M48_M50DefaultTypeInternal _M48_M50_default_instance_;
class M48_M50_M51;
class M48_M50_M51DefaultTypeInternal;
extern M48_M50_M51DefaultTypeInternal _M48_M50_M51_default_instance_;
class M52;
class M52DefaultTypeInternal;
extern M52DefaultTypeInternal _M52_default_instance_;
class M52_M53;
class M52_M53DefaultTypeInternal;
extern M52_M53DefaultTypeInternal _M52_M53_default_instance_;
class M52_M54;
class M52_M54DefaultTypeInternal;
extern M52_M54DefaultTypeInternal _M52_M54_default_instance_;
class M52_M55;
class M52_M55DefaultTypeInternal;
extern M52_M55DefaultTypeInternal _M52_M55_default_instance_;
class M52_M56;
class M52_M56DefaultTypeInternal;
extern M52_M56DefaultTypeInternal _M52_M56_default_instance_;
class M52_M56_M57;
class M52_M56_M57DefaultTypeInternal;
extern M52_M56_M57DefaultTypeInternal _M52_M56_M57_default_instance_;
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> ::hyperprotobench::M1* Arena::CreateMaybeMessage<::hyperprotobench::M1>(Arena*);
template<> ::hyperprotobench::M10* Arena::CreateMaybeMessage<::hyperprotobench::M10>(Arena*);
template<> ::hyperprotobench::M10_M11* Arena::CreateMaybeMessage<::hyperprotobench::M10_M11>(Arena*);
template<> ::hyperprotobench::M10_M11_M12* Arena::CreateMaybeMessage<::hyperprotobench::M10_M11_M12>(Arena*);
template<> ::hyperprotobench::M10_M13* Arena::CreateMaybeMessage<::hyperprotobench::M10_M13>(Arena*);
template<> ::hyperprotobench::M10_M14* Arena::CreateMaybeMessage<::hyperprotobench::M10_M14>(Arena*);
template<> ::hyperprotobench::M15* Arena::CreateMaybeMessage<::hyperprotobench::M15>(Arena*);
template<> ::hyperprotobench::M15_M16* Arena::CreateMaybeMessage<::hyperprotobench::M15_M16>(Arena*);
template<> ::hyperprotobench::M15_M17* Arena::CreateMaybeMessage<::hyperprotobench::M15_M17>(Arena*);
template<> ::hyperprotobench::M15_M17_M18* Arena::CreateMaybeMessage<::hyperprotobench::M15_M17_M18>(Arena*);
template<> ::hyperprotobench::M15_M17_M19* Arena::CreateMaybeMessage<::hyperprotobench::M15_M17_M19>(Arena*);
template<> ::hyperprotobench::M15_M20* Arena::CreateMaybeMessage<::hyperprotobench::M15_M20>(Arena*);
template<> ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2>(Arena*);
template<> ::hyperprotobench::M1_M3* Arena::CreateMaybeMessage<::hyperprotobench::M1_M3>(Arena*);
template<> ::hyperprotobench::M1_M4* Arena::CreateMaybeMessage<::hyperprotobench::M1_M4>(Arena*);
template<> ::hyperprotobench::M1_M4_M5* Arena::CreateMaybeMessage<::hyperprotobench::M1_M4_M5>(Arena*);
template<> ::hyperprotobench::M1_M4_M6* Arena::CreateMaybeMessage<::hyperprotobench::M1_M4_M6>(Arena*);
template<> ::hyperprotobench::M1_M7* Arena::CreateMaybeMessage<::hyperprotobench::M1_M7>(Arena*);
template<> ::hyperprotobench::M1_M8* Arena::CreateMaybeMessage<::hyperprotobench::M1_M8>(Arena*);
template<> ::hyperprotobench::M1_M8_M9* Arena::CreateMaybeMessage<::hyperprotobench::M1_M8_M9>(Arena*);
template<> ::hyperprotobench::M21* Arena::CreateMaybeMessage<::hyperprotobench::M21>(Arena*);
template<> ::hyperprotobench::M21_M22* Arena::CreateMaybeMessage<::hyperprotobench::M21_M22>(Arena*);
template<> ::hyperprotobench::M21_M23* Arena::CreateMaybeMessage<::hyperprotobench::M21_M23>(Arena*);
template<> ::hyperprotobench::M21_M23_M24* Arena::CreateMaybeMessage<::hyperprotobench::M21_M23_M24>(Arena*);
template<> ::hyperprotobench::M25* Arena::CreateMaybeMessage<::hyperprotobench::M25>(Arena*);
template<> ::hyperprotobench::M25_M26* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26>(Arena*);
template<> ::hyperprotobench::M25_M26_M27* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26_M27>(Arena*);
template<> ::hyperprotobench::M25_M28* Arena::CreateMaybeMessage<::hyperprotobench::M25_M28>(Arena*);
template<> ::hyperprotobench::M25_M28_M29* Arena::CreateMaybeMessage<::hyperprotobench::M25_M28_M29>(Arena*);
template<> ::hyperprotobench::M30* Arena::CreateMaybeMessage<::hyperprotobench::M30>(Arena*);
template<> ::hyperprotobench::M30_M31* Arena::CreateMaybeMessage<::hyperprotobench::M30_M31>(Arena*);
template<> ::hyperprotobench::M30_M32* Arena::CreateMaybeMessage<::hyperprotobench::M30_M32>(Arena*);
template<> ::hyperprotobench::M30_M32_M33* Arena::CreateMaybeMessage<::hyperprotobench::M30_M32_M33>(Arena*);
template<> ::hyperprotobench::M30_M34* Arena::CreateMaybeMessage<::hyperprotobench::M30_M34>(Arena*);
template<> ::hyperprotobench::M30_M35* Arena::CreateMaybeMessage<::hyperprotobench::M30_M35>(Arena*);
template<> ::hyperprotobench::M36* Arena::CreateMaybeMessage<::hyperprotobench::M36>(Arena*);
template<> ::hyperprotobench::M36_M37* Arena::CreateMaybeMessage<::hyperprotobench::M36_M37>(Arena*);
template<> ::hyperprotobench::M36_M37_M38* Arena::CreateMaybeMessage<::hyperprotobench::M36_M37_M38>(Arena*);
template<> ::hyperprotobench::M36_M37_M39* Arena::CreateMaybeMessage<::hyperprotobench::M36_M37_M39>(Arena*);
template<> ::hyperprotobench::M36_M40* Arena::CreateMaybeMessage<::hyperprotobench::M36_M40>(Arena*);
template<> ::hyperprotobench::M36_M41* Arena::CreateMaybeMessage<::hyperprotobench::M36_M41>(Arena*);
template<> ::hyperprotobench::M42* Arena::CreateMaybeMessage<::hyperprotobench::M42>(Arena*);
template<> ::hyperprotobench::M42_M43* Arena::CreateMaybeMessage<::hyperprotobench::M42_M43>(Arena*);
template<> ::hyperprotobench::M42_M44* Arena::CreateMaybeMessage<::hyperprotobench::M42_M44>(Arena*);
template<> ::hyperprotobench::M42_M45* Arena::CreateMaybeMessage<::hyperprotobench::M42_M45>(Arena*);
template<> ::hyperprotobench::M42_M45_M46* Arena::CreateMaybeMessage<::hyperprotobench::M42_M45_M46>(Arena*);
template<> ::hyperprotobench::M42_M47* Arena::CreateMaybeMessage<::hyperprotobench::M42_M47>(Arena*);
template<> ::hyperprotobench::M48* Arena::CreateMaybeMessage<::hyperprotobench::M48>(Arena*);
template<> ::hyperprotobench::M48_M49* Arena::CreateMaybeMessage<::hyperprotobench::M48_M49>(Arena*);
template<> ::hyperprotobench::M48_M50* Arena::CreateMaybeMessage<::hyperprotobench::M48_M50>(Arena*);
template<> ::hyperprotobench::M48_M50_M51* Arena::CreateMaybeMessage<::hyperprotobench::M48_M50_M51>(Arena*);
template<> ::hyperprotobench::M52* Arena::CreateMaybeMessage<::hyperprotobench::M52>(Arena*);
template<> ::hyperprotobench::M52_M53* Arena::CreateMaybeMessage<::hyperprotobench::M52_M53>(Arena*);
template<> ::hyperprotobench::M52_M54* Arena::CreateMaybeMessage<::hyperprotobench::M52_M54>(Arena*);
template<> ::hyperprotobench::M52_M55* Arena::CreateMaybeMessage<::hyperprotobench::M52_M55>(Arena*);
template<> ::hyperprotobench::M52_M56* Arena::CreateMaybeMessage<::hyperprotobench::M52_M56>(Arena*);
template<> ::hyperprotobench::M52_M56_M57* Arena::CreateMaybeMessage<::hyperprotobench::M52_M56_M57>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hyperprotobench {

enum M1_E1 : int {
  M1_E1_E1_CONST_1 = 10,
  M1_E1_E1_CONST_2 = 13,
  M1_E1_E1_CONST_3 = 26,
  M1_E1_E1_CONST_4 = 59,
  M1_E1_E1_CONST_5 = 28
};
bool M1_E1_IsValid(int value);
constexpr M1_E1 M1_E1_E1_MIN = M1_E1_E1_CONST_1;
constexpr M1_E1 M1_E1_E1_MAX = M1_E1_E1_CONST_4;
constexpr int M1_E1_E1_ARRAYSIZE = M1_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E1_descriptor();
template<typename T>
inline const std::string& M1_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_E1_descriptor(), enum_t_value);
}
inline bool M1_E1_Parse(
    const std::string& name, M1_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_E1>(
    M1_E1_descriptor(), name, value);
}
enum M1_E2 : int {
  M1_E2_E2_CONST_1 = 9,
  M1_E2_E2_CONST_2 = 44,
  M1_E2_E2_CONST_3 = 110,
  M1_E2_E2_CONST_4 = 29,
  M1_E2_E2_CONST_5 = 95
};
bool M1_E2_IsValid(int value);
constexpr M1_E2 M1_E2_E2_MIN = M1_E2_E2_CONST_1;
constexpr M1_E2 M1_E2_E2_MAX = M1_E2_E2_CONST_3;
constexpr int M1_E2_E2_ARRAYSIZE = M1_E2_E2_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E2_descriptor();
template<typename T>
inline const std::string& M1_E2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M1_E2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M1_E2_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M1_E2_descriptor(), enum_t_value);
}
inline bool M1_E2_Parse(
    const std::string& name, M1_E2* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M1_E2>(
    M1_E2_descriptor(), name, value);
}
enum M21_E1 : int {
  M21_E1_E1_CONST_1 = 68,
  M21_E1_E1_CONST_2 = 43,
  M21_E1_E1_CONST_3 = 78,
  M21_E1_E1_CONST_4 = 79,
  M21_E1_E1_CONST_5 = 56
};
bool M21_E1_IsValid(int value);
constexpr M21_E1 M21_E1_E1_MIN = M21_E1_E1_CONST_2;
constexpr M21_E1 M21_E1_E1_MAX = M21_E1_E1_CONST_4;
constexpr int M21_E1_E1_ARRAYSIZE = M21_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M21_E1_descriptor();
template<typename T>
inline const std::string& M21_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M21_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M21_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M21_E1_descriptor(), enum_t_value);
}
inline bool M21_E1_Parse(
    const std::string& name, M21_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M21_E1>(
    M21_E1_descriptor(), name, value);
}
enum M25_M26_E1 : int {
  M25_M26_E1_E1_CONST_1 = 65,
  M25_M26_E1_E1_CONST_2 = 8,
  M25_M26_E1_E1_CONST_3 = 78,
  M25_M26_E1_E1_CONST_4 = 110,
  M25_M26_E1_E1_CONST_5 = 87
};
bool M25_M26_E1_IsValid(int value);
constexpr M25_M26_E1 M25_M26_E1_E1_MIN = M25_M26_E1_E1_CONST_2;
constexpr M25_M26_E1 M25_M26_E1_E1_MAX = M25_M26_E1_E1_CONST_4;
constexpr int M25_M26_E1_E1_ARRAYSIZE = M25_M26_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M26_E1_descriptor();
template<typename T>
inline const std::string& M25_M26_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M25_M26_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M25_M26_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M25_M26_E1_descriptor(), enum_t_value);
}
inline bool M25_M26_E1_Parse(
    const std::string& name, M25_M26_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M25_M26_E1>(
    M25_M26_E1_descriptor(), name, value);
}
enum M25_M28_E1 : int {
  M25_M28_E1_E1_CONST_1 = 37,
  M25_M28_E1_E1_CONST_2 = 43,
  M25_M28_E1_E1_CONST_3 = 76,
  M25_M28_E1_E1_CONST_4 = 26,
  M25_M28_E1_E1_CONST_5 = 91
};
bool M25_M28_E1_IsValid(int value);
constexpr M25_M28_E1 M25_M28_E1_E1_MIN = M25_M28_E1_E1_CONST_4;
constexpr M25_M28_E1 M25_M28_E1_E1_MAX = M25_M28_E1_E1_CONST_5;
constexpr int M25_M28_E1_E1_ARRAYSIZE = M25_M28_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_M28_E1_descriptor();
template<typename T>
inline const std::string& M25_M28_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M25_M28_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M25_M28_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M25_M28_E1_descriptor(), enum_t_value);
}
inline bool M25_M28_E1_Parse(
    const std::string& name, M25_M28_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M25_M28_E1>(
    M25_M28_E1_descriptor(), name, value);
}
enum M25_E1 : int {
  M25_E1_E1_CONST_1 = 74,
  M25_E1_E1_CONST_2 = 79,
  M25_E1_E1_CONST_3 = 18,
  M25_E1_E1_CONST_4 = 116,
  M25_E1_E1_CONST_5 = 55
};
bool M25_E1_IsValid(int value);
constexpr M25_E1 M25_E1_E1_MIN = M25_E1_E1_CONST_3;
constexpr M25_E1 M25_E1_E1_MAX = M25_E1_E1_CONST_4;
constexpr int M25_E1_E1_ARRAYSIZE = M25_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M25_E1_descriptor();
template<typename T>
inline const std::string& M25_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M25_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M25_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M25_E1_descriptor(), enum_t_value);
}
inline bool M25_E1_Parse(
    const std::string& name, M25_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M25_E1>(
    M25_E1_descriptor(), name, value);
}
enum M36_M40_E1 : int {
  M36_M40_E1_E1_CONST_1 = 67,
  M36_M40_E1_E1_CONST_2 = 38,
  M36_M40_E1_E1_CONST_3 = 10155,
  M36_M40_E1_E1_CONST_4 = 78,
  M36_M40_E1_E1_CONST_5 = 15
};
bool M36_M40_E1_IsValid(int value);
constexpr M36_M40_E1 M36_M40_E1_E1_MIN = M36_M40_E1_E1_CONST_5;
constexpr M36_M40_E1 M36_M40_E1_E1_MAX = M36_M40_E1_E1_CONST_3;
constexpr int M36_M40_E1_E1_ARRAYSIZE = M36_M40_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M36_M40_E1_descriptor();
template<typename T>
inline const std::string& M36_M40_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M36_M40_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M36_M40_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M36_M40_E1_descriptor(), enum_t_value);
}
inline bool M36_M40_E1_Parse(
    const std::string& name, M36_M40_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M36_M40_E1>(
    M36_M40_E1_descriptor(), name, value);
}
enum M42_M44_E1 : int {
  M42_M44_E1_E1_CONST_1 = 37,
  M42_M44_E1_E1_CONST_2 = 49,
  M42_M44_E1_E1_CONST_3 = 88,
  M42_M44_E1_E1_CONST_4 = 120,
  M42_M44_E1_E1_CONST_5 = 125
};
bool M42_M44_E1_IsValid(int value);
constexpr M42_M44_E1 M42_M44_E1_E1_MIN = M42_M44_E1_E1_CONST_1;
constexpr M42_M44_E1 M42_M44_E1_E1_MAX = M42_M44_E1_E1_CONST_5;
constexpr int M42_M44_E1_E1_ARRAYSIZE = M42_M44_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M42_M44_E1_descriptor();
template<typename T>
inline const std::string& M42_M44_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M42_M44_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M42_M44_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M42_M44_E1_descriptor(), enum_t_value);
}
inline bool M42_M44_E1_Parse(
    const std::string& name, M42_M44_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M42_M44_E1>(
    M42_M44_E1_descriptor(), name, value);
}
// ===================================================================

class M1_M2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2) */ {
 public:
  M1_M2();
  virtual ~M1_M2();

  M1_M2(const M1_M2& from);
  M1_M2(M1_M2&& from) noexcept
    : M1_M2() {
    *this = ::std::move(from);
  }

  inline M1_M2& operator=(const M1_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2& operator=(M1_M2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2* internal_default_instance() {
    return reinterpret_cast<const M1_M2*>(
               &_M1_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(M1_M2& a, M1_M2& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2* New() const final {
    return CreateMaybeMessage<M1_M2>(nullptr);
  }

  M1_M2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2& from);
  void MergeFrom(const M1_M2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2";
  }
  protected:
  explicit M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF5FieldNumber = 7,
    kF6FieldNumber = 10,
    kF7FieldNumber = 11,
    kF9FieldNumber = 13,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF8FieldNumber = 12,
    kF10FieldNumber = 14,
  };
  // optional bytes f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const void* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional bytes f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const void* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional bytes f9 = 13;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional int64 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f8 = 12;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f10 = 14;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  ::PROTOBUF_NAMESPACE_ID::int64 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M3) */ {
 public:
  M1_M3();
  virtual ~M1_M3();

  M1_M3(const M1_M3& from);
  M1_M3(M1_M3&& from) noexcept
    : M1_M3() {
    *this = ::std::move(from);
  }

  inline M1_M3& operator=(const M1_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M3& operator=(M1_M3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M3* internal_default_instance() {
    return reinterpret_cast<const M1_M3*>(
               &_M1_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(M1_M3& a, M1_M3& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M3* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M3* New() const final {
    return CreateMaybeMessage<M1_M3>(nullptr);
  }

  M1_M3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M3& from);
  void MergeFrom(const M1_M3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M3";
  }
  protected:
  explicit M1_M3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M3_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M4_M5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M4.M5) */ {
 public:
  M1_M4_M5();
  virtual ~M1_M4_M5();

  M1_M4_M5(const M1_M4_M5& from);
  M1_M4_M5(M1_M4_M5&& from) noexcept
    : M1_M4_M5() {
    *this = ::std::move(from);
  }

  inline M1_M4_M5& operator=(const M1_M4_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M4_M5& operator=(M1_M4_M5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M4_M5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M4_M5* internal_default_instance() {
    return reinterpret_cast<const M1_M4_M5*>(
               &_M1_M4_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(M1_M4_M5& a, M1_M4_M5& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M4_M5* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M4_M5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M4_M5* New() const final {
    return CreateMaybeMessage<M1_M4_M5>(nullptr);
  }

  M1_M4_M5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M4_M5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M4_M5& from);
  void MergeFrom(const M1_M4_M5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M4_M5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M4.M5";
  }
  protected:
  explicit M1_M4_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional fixed64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M4.M5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M4_M5_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M4_M6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M4.M6) */ {
 public:
  M1_M4_M6();
  virtual ~M1_M4_M6();

  M1_M4_M6(const M1_M4_M6& from);
  M1_M4_M6(M1_M4_M6&& from) noexcept
    : M1_M4_M6() {
    *this = ::std::move(from);
  }

  inline M1_M4_M6& operator=(const M1_M4_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M4_M6& operator=(M1_M4_M6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M4_M6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M4_M6* internal_default_instance() {
    return reinterpret_cast<const M1_M4_M6*>(
               &_M1_M4_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(M1_M4_M6& a, M1_M4_M6& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M4_M6* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M4_M6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M4_M6* New() const final {
    return CreateMaybeMessage<M1_M4_M6>(nullptr);
  }

  M1_M4_M6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M4_M6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M4_M6& from);
  void MergeFrom(const M1_M4_M6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M4_M6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M4.M6";
  }
  protected:
  explicit M1_M4_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M4.M6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M4_M6_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M4) */ {
 public:
  M1_M4();
  virtual ~M1_M4();

  M1_M4(const M1_M4& from);
  M1_M4(M1_M4&& from) noexcept
    : M1_M4() {
    *this = ::std::move(from);
  }

  inline M1_M4& operator=(const M1_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M4& operator=(M1_M4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M4* internal_default_instance() {
    return reinterpret_cast<const M1_M4*>(
               &_M1_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(M1_M4& a, M1_M4& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M4* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M4* New() const final {
    return CreateMaybeMessage<M1_M4>(nullptr);
  }

  M1_M4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M4& from);
  void MergeFrom(const M1_M4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M4";
  }
  protected:
  explicit M1_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M4_M5 M5;
  typedef M1_M4_M6 M6;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 6,
  };
  // optional .hyperprotobench.M1.M4.M5 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M4_M5& f1() const;
  ::hyperprotobench::M1_M4_M5* release_f1();
  ::hyperprotobench::M1_M4_M5* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M4_M5* f1);
  private:
  const ::hyperprotobench::M1_M4_M5& _internal_f1() const;
  ::hyperprotobench::M1_M4_M5* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M4_M5* f1);
  ::hyperprotobench::M1_M4_M5* unsafe_arena_release_f1();

  // optional .hyperprotobench.M1.M4.M6 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M1_M4_M6& f2() const;
  ::hyperprotobench::M1_M4_M6* release_f2();
  ::hyperprotobench::M1_M4_M6* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M1_M4_M6* f2);
  private:
  const ::hyperprotobench::M1_M4_M6& _internal_f2() const;
  ::hyperprotobench::M1_M4_M6* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M1_M4_M6* f2);
  ::hyperprotobench::M1_M4_M6* unsafe_arena_release_f2();

  // optional int64 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M4_M5* f1_;
  ::hyperprotobench::M1_M4_M6* f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M4_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M7 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M7) */ {
 public:
  M1_M7();
  virtual ~M1_M7();

  M1_M7(const M1_M7& from);
  M1_M7(M1_M7&& from) noexcept
    : M1_M7() {
    *this = ::std::move(from);
  }

  inline M1_M7& operator=(const M1_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M7& operator=(M1_M7&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M7& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M7* internal_default_instance() {
    return reinterpret_cast<const M1_M7*>(
               &_M1_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(M1_M7& a, M1_M7& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M7* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M7* New() const final {
    return CreateMaybeMessage<M1_M7>(nullptr);
  }

  M1_M7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M7& from);
  void MergeFrom(const M1_M7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M7";
  }
  protected:
  explicit M1_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 6,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bool f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional bool f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M7)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  bool f3_;
  bool f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M7_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M8_M9 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M8.M9) */ {
 public:
  M1_M8_M9();
  virtual ~M1_M8_M9();

  M1_M8_M9(const M1_M8_M9& from);
  M1_M8_M9(M1_M8_M9&& from) noexcept
    : M1_M8_M9() {
    *this = ::std::move(from);
  }

  inline M1_M8_M9& operator=(const M1_M8_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M8_M9& operator=(M1_M8_M9&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M8_M9& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M8_M9* internal_default_instance() {
    return reinterpret_cast<const M1_M8_M9*>(
               &_M1_M8_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(M1_M8_M9& a, M1_M8_M9& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M8_M9* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M8_M9* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M8_M9* New() const final {
    return CreateMaybeMessage<M1_M8_M9>(nullptr);
  }

  M1_M8_M9* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M8_M9>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M8_M9& from);
  void MergeFrom(const M1_M8_M9& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M8_M9* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M8.M9";
  }
  protected:
  explicit M1_M8_M9(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF4FieldNumber = 5,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // repeated bytes f3 = 3;
  int f3_size() const;
  private:
  int _internal_f3_size() const;
  public:
  void clear_f3();
  const std::string& f3(int index) const;
  std::string* mutable_f3(int index);
  void set_f3(int index, const std::string& value);
  void set_f3(int index, std::string&& value);
  void set_f3(int index, const char* value);
  void set_f3(int index, const void* value, size_t size);
  std::string* add_f3();
  void add_f3(const std::string& value);
  void add_f3(std::string&& value);
  void add_f3(const char* value);
  void add_f3(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f3();
  private:
  const std::string& _internal_f3(int index) const;
  std::string* _internal_add_f3();
  public:

  // optional bytes f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  bool f2() const;
  void set_f2(bool value);
  private:
  bool _internal_f2() const;
  void _internal_set_f2(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M8.M9)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  bool f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M8_M9_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1_M8 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M8) */ {
 public:
  M1_M8();
  virtual ~M1_M8();

  M1_M8(const M1_M8& from);
  M1_M8(M1_M8&& from) noexcept
    : M1_M8() {
    *this = ::std::move(from);
  }

  inline M1_M8& operator=(const M1_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M8& operator=(M1_M8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M8* internal_default_instance() {
    return reinterpret_cast<const M1_M8*>(
               &_M1_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(M1_M8& a, M1_M8& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M8* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M8* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M8* New() const final {
    return CreateMaybeMessage<M1_M8>(nullptr);
  }

  M1_M8* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M8>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M8& from);
  void MergeFrom(const M1_M8& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M8* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M8";
  }
  protected:
  explicit M1_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M8_M9 M9;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
    kF3FieldNumber = 7,
    kF4FieldNumber = 11,
  };
  // optional bytes f1 = 4;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M1.M8.M9 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M1_M8_M9& f2() const;
  ::hyperprotobench::M1_M8_M9* release_f2();
  ::hyperprotobench::M1_M8_M9* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M1_M8_M9* f2);
  private:
  const ::hyperprotobench::M1_M8_M9& _internal_f2() const;
  ::hyperprotobench::M1_M8_M9* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M1_M8_M9* f2);
  ::hyperprotobench::M1_M8_M9* unsafe_arena_release_f2();

  // optional bool f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional uint64 f4 = 11;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M8)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M1_M8_M9* f2_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M8_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1) */ {
 public:
  M1();
  virtual ~M1();

  M1(const M1& from);
  M1(M1&& from) noexcept
    : M1() {
    *this = ::std::move(from);
  }

  inline M1& operator=(const M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1& operator=(M1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1* internal_default_instance() {
    return reinterpret_cast<const M1*>(
               &_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(M1& a, M1& b) {
    a.Swap(&b);
  }
  inline void Swap(M1* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1* New() const final {
    return CreateMaybeMessage<M1>(nullptr);
  }

  M1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1& from);
  void MergeFrom(const M1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1";
  }
  protected:
  explicit M1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2 M2;
  typedef M1_M3 M3;
  typedef M1_M4 M4;
  typedef M1_M7 M7;
  typedef M1_M8 M8;

  typedef M1_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M1_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M1_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M1_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M1_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M1_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M1_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M1_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M1_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M1_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M1_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M1_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M1_E1_Parse(name, value);
  }

  typedef M1_E2 E2;
  static constexpr E2 E2_CONST_1 =
    M1_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 =
    M1_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 =
    M1_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 =
    M1_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 =
    M1_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return M1_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN =
    M1_E2_E2_MIN;
  static constexpr E2 E2_MAX =
    M1_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE =
    M1_E2_E2_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E2_descriptor() {
    return M1_E2_descriptor();
  }
  template<typename T>
  static inline const std::string& E2_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E2>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E2_Name.");
    return M1_E2_Name(enum_t_value);
  }
  static inline bool E2_Parse(const std::string& name,
      E2* value) {
    return M1_E2_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF6FieldNumber = 9,
    kF13FieldNumber = 21,
    kF16FieldNumber = 24,
    kF17FieldNumber = 25,
    kF3FieldNumber = 4,
    kF5FieldNumber = 6,
    kF4FieldNumber = 5,
    kF9FieldNumber = 17,
    kF7FieldNumber = 15,
    kF8FieldNumber = 16,
    kF10FieldNumber = 18,
    kF11FieldNumber = 19,
    kF14FieldNumber = 22,
    kF15FieldNumber = 23,
    kF2FieldNumber = 3,
    kF12FieldNumber = 20,
  };
  // optional .hyperprotobench.M1.M2 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M1_M2& f1() const;
  ::hyperprotobench::M1_M2* release_f1();
  ::hyperprotobench::M1_M2* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M1_M2* f1);
  private:
  const ::hyperprotobench::M1_M2& _internal_f1() const;
  ::hyperprotobench::M1_M2* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M1_M2* f1);
  ::hyperprotobench::M1_M2* unsafe_arena_release_f1();

  // optional .hyperprotobench.M1.M3 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M1_M3& f6() const;
  ::hyperprotobench::M1_M3* release_f6();
  ::hyperprotobench::M1_M3* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M1_M3* f6);
  private:
  const ::hyperprotobench::M1_M3& _internal_f6() const;
  ::hyperprotobench::M1_M3* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M1_M3* f6);
  ::hyperprotobench::M1_M3* unsafe_arena_release_f6();

  // optional .hyperprotobench.M1.M4 f13 = 21;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const ::hyperprotobench::M1_M4& f13() const;
  ::hyperprotobench::M1_M4* release_f13();
  ::hyperprotobench::M1_M4* mutable_f13();
  void set_allocated_f13(::hyperprotobench::M1_M4* f13);
  private:
  const ::hyperprotobench::M1_M4& _internal_f13() const;
  ::hyperprotobench::M1_M4* _internal_mutable_f13();
  public:
  void unsafe_arena_set_allocated_f13(
      ::hyperprotobench::M1_M4* f13);
  ::hyperprotobench::M1_M4* unsafe_arena_release_f13();

  // optional .hyperprotobench.M1.M7 f16 = 24;
  bool has_f16() const;
  private:
  bool _internal_has_f16() const;
  public:
  void clear_f16();
  const ::hyperprotobench::M1_M7& f16() const;
  ::hyperprotobench::M1_M7* release_f16();
  ::hyperprotobench::M1_M7* mutable_f16();
  void set_allocated_f16(::hyperprotobench::M1_M7* f16);
  private:
  const ::hyperprotobench::M1_M7& _internal_f16() const;
  ::hyperprotobench::M1_M7* _internal_mutable_f16();
  public:
  void unsafe_arena_set_allocated_f16(
      ::hyperprotobench::M1_M7* f16);
  ::hyperprotobench::M1_M7* unsafe_arena_release_f16();

  // optional .hyperprotobench.M1.M8 f17 = 25;
  bool has_f17() const;
  private:
  bool _internal_has_f17() const;
  public:
  void clear_f17();
  const ::hyperprotobench::M1_M8& f17() const;
  ::hyperprotobench::M1_M8* release_f17();
  ::hyperprotobench::M1_M8* mutable_f17();
  void set_allocated_f17(::hyperprotobench::M1_M8* f17);
  private:
  const ::hyperprotobench::M1_M8& _internal_f17() const;
  ::hyperprotobench::M1_M8* _internal_mutable_f17();
  public:
  void unsafe_arena_set_allocated_f17(
      ::hyperprotobench::M1_M8* f17);
  ::hyperprotobench::M1_M8* unsafe_arena_release_f17();

  // optional int64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::uint32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f10 = 18;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional fixed64 f11 = 19;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::uint64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 f14 = 22;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  ::PROTOBUF_NAMESPACE_ID::uint64 f14() const;
  void set_f14(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f14() const;
  void _internal_set_f14(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double f15 = 23;
  bool has_f15() const;
  private:
  bool _internal_has_f15() const;
  public:
  void clear_f15();
  double f15() const;
  void set_f15(double value);
  private:
  double _internal_f15() const;
  void _internal_set_f15(double value);
  public:

  // optional .hyperprotobench.M1.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M1_E1 f2() const;
  void set_f2(::hyperprotobench::M1_E1 value);
  private:
  ::hyperprotobench::M1_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M1_E1 value);
  public:

  // optional .hyperprotobench.M1.E2 f12 = 20;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::hyperprotobench::M1_E2 f12() const;
  void set_f12(::hyperprotobench::M1_E2 value);
  private:
  ::hyperprotobench::M1_E2 _internal_f12() const;
  void _internal_set_f12(::hyperprotobench::M1_E2 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M1_M2* f1_;
  ::hyperprotobench::M1_M3* f6_;
  ::hyperprotobench::M1_M4* f13_;
  ::hyperprotobench::M1_M7* f16_;
  ::hyperprotobench::M1_M8* f17_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  bool f10_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f11_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f14_;
  double f15_;
  int f2_;
  int f12_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M10_M11_M12 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M10.M11.M12) */ {
 public:
  M10_M11_M12();
  virtual ~M10_M11_M12();

  M10_M11_M12(const M10_M11_M12& from);
  M10_M11_M12(M10_M11_M12&& from) noexcept
    : M10_M11_M12() {
    *this = ::std::move(from);
  }

  inline M10_M11_M12& operator=(const M10_M11_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline M10_M11_M12& operator=(M10_M11_M12&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M10_M11_M12& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M10_M11_M12* internal_default_instance() {
    return reinterpret_cast<const M10_M11_M12*>(
               &_M10_M11_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(M10_M11_M12& a, M10_M11_M12& b) {
    a.Swap(&b);
  }
  inline void Swap(M10_M11_M12* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M10_M11_M12* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M10_M11_M12* New() const final {
    return CreateMaybeMessage<M10_M11_M12>(nullptr);
  }

  M10_M11_M12* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M10_M11_M12>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M10_M11_M12& from);
  void MergeFrom(const M10_M11_M12& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M10_M11_M12* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M10.M11.M12";
  }
  protected:
  explicit M10_M11_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M10.M11.M12)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M10_M11_M12_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M10_M11 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M10.M11) */ {
 public:
  M10_M11();
  virtual ~M10_M11();

  M10_M11(const M10_M11& from);
  M10_M11(M10_M11&& from) noexcept
    : M10_M11() {
    *this = ::std::move(from);
  }

  inline M10_M11& operator=(const M10_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline M10_M11& operator=(M10_M11&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M10_M11& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M10_M11* internal_default_instance() {
    return reinterpret_cast<const M10_M11*>(
               &_M10_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(M10_M11& a, M10_M11& b) {
    a.Swap(&b);
  }
  inline void Swap(M10_M11* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M10_M11* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M10_M11* New() const final {
    return CreateMaybeMessage<M10_M11>(nullptr);
  }

  M10_M11* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M10_M11>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M10_M11& from);
  void MergeFrom(const M10_M11& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M10_M11* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M10.M11";
  }
  protected:
  explicit M10_M11(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M10_M11_M12 M12;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 8,
    kF1FieldNumber = 1,
  };
  // optional bytes f2 = 8;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M10.M11.M12 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M10_M11_M12& f1() const;
  ::hyperprotobench::M10_M11_M12* release_f1();
  ::hyperprotobench::M10_M11_M12* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M10_M11_M12* f1);
  private:
  const ::hyperprotobench::M10_M11_M12& _internal_f1() const;
  ::hyperprotobench::M10_M11_M12* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M10_M11_M12* f1);
  ::hyperprotobench::M10_M11_M12* unsafe_arena_release_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M10.M11)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M10_M11_M12* f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M10_M11_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M10_M13 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M10.M13) */ {
 public:
  M10_M13();
  virtual ~M10_M13();

  M10_M13(const M10_M13& from);
  M10_M13(M10_M13&& from) noexcept
    : M10_M13() {
    *this = ::std::move(from);
  }

  inline M10_M13& operator=(const M10_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline M10_M13& operator=(M10_M13&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M10_M13& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M10_M13* internal_default_instance() {
    return reinterpret_cast<const M10_M13*>(
               &_M10_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(M10_M13& a, M10_M13& b) {
    a.Swap(&b);
  }
  inline void Swap(M10_M13* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M10_M13* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M10_M13* New() const final {
    return CreateMaybeMessage<M10_M13>(nullptr);
  }

  M10_M13* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M10_M13>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M10_M13& from);
  void MergeFrom(const M10_M13& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M10_M13* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M10.M13";
  }
  protected:
  explicit M10_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 8,
  };
  // optional bytes f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional fixed64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M10.M13)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f4_;
  bool f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M10_M13_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M10_M14 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M10.M14) */ {
 public:
  M10_M14();
  virtual ~M10_M14();

  M10_M14(const M10_M14& from);
  M10_M14(M10_M14&& from) noexcept
    : M10_M14() {
    *this = ::std::move(from);
  }

  inline M10_M14& operator=(const M10_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline M10_M14& operator=(M10_M14&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M10_M14& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M10_M14* internal_default_instance() {
    return reinterpret_cast<const M10_M14*>(
               &_M10_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(M10_M14& a, M10_M14& b) {
    a.Swap(&b);
  }
  inline void Swap(M10_M14* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M10_M14* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M10_M14* New() const final {
    return CreateMaybeMessage<M10_M14>(nullptr);
  }

  M10_M14* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M10_M14>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M10_M14& from);
  void MergeFrom(const M10_M14& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M10_M14* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M10.M14";
  }
  protected:
  explicit M10_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
  };
  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // optional bool f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional int64 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M10.M14)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  double f2_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M10_M14_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M10) */ {
 public:
  M10();
  virtual ~M10();

  M10(const M10& from);
  M10(M10&& from) noexcept
    : M10() {
    *this = ::std::move(from);
  }

  inline M10& operator=(const M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline M10& operator=(M10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M10* internal_default_instance() {
    return reinterpret_cast<const M10*>(
               &_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(M10& a, M10& b) {
    a.Swap(&b);
  }
  inline void Swap(M10* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M10* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M10* New() const final {
    return CreateMaybeMessage<M10>(nullptr);
  }

  M10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M10& from);
  void MergeFrom(const M10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M10";
  }
  protected:
  explicit M10(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M10_M11 M11;
  typedef M10_M13 M13;
  typedef M10_M14 M14;

  // accessors -------------------------------------------------------

  enum : int {
    kF6FieldNumber = 8,
    kF2FieldNumber = 2,
    kF3FieldNumber = 4,
    kF5FieldNumber = 7,
    kF4FieldNumber = 5,
    kF1FieldNumber = 1,
    kF9FieldNumber = 11,
    kF7FieldNumber = 9,
    kF8FieldNumber = 10,
    kF10FieldNumber = 12,
  };
  // optional bytes f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const void* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M10.M11 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M10_M11& f2() const;
  ::hyperprotobench::M10_M11* release_f2();
  ::hyperprotobench::M10_M11* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M10_M11* f2);
  private:
  const ::hyperprotobench::M10_M11& _internal_f2() const;
  ::hyperprotobench::M10_M11* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M10_M11* f2);
  ::hyperprotobench::M10_M11* unsafe_arena_release_f2();

  // optional .hyperprotobench.M10.M13 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M10_M13& f3() const;
  ::hyperprotobench::M10_M13* release_f3();
  ::hyperprotobench::M10_M13* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M10_M13* f3);
  private:
  const ::hyperprotobench::M10_M13& _internal_f3() const;
  ::hyperprotobench::M10_M13* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M10_M13* f3);
  ::hyperprotobench::M10_M13* unsafe_arena_release_f3();

  // optional .hyperprotobench.M10.M14 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M10_M14& f5() const;
  ::hyperprotobench::M10_M14* release_f5();
  ::hyperprotobench::M10_M14* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M10_M14* f5);
  private:
  const ::hyperprotobench::M10_M14& _internal_f5() const;
  ::hyperprotobench::M10_M14* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M10_M14* f5);
  ::hyperprotobench::M10_M14* unsafe_arena_release_f5();

  // optional int64 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f9 = 11;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f7 = 9;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f8 = 10;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f10 = 12;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M10_M11* f2_;
  ::hyperprotobench::M10_M13* f3_;
  ::hyperprotobench::M10_M14* f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M10_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M16 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M16) */ {
 public:
  M15_M16();
  virtual ~M15_M16();

  M15_M16(const M15_M16& from);
  M15_M16(M15_M16&& from) noexcept
    : M15_M16() {
    *this = ::std::move(from);
  }

  inline M15_M16& operator=(const M15_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M16& operator=(M15_M16&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M16& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M16* internal_default_instance() {
    return reinterpret_cast<const M15_M16*>(
               &_M15_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(M15_M16& a, M15_M16& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M16* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M16* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M16* New() const final {
    return CreateMaybeMessage<M15_M16>(nullptr);
  }

  M15_M16* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M16>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M16& from);
  void MergeFrom(const M15_M16& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M16* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M16";
  }
  protected:
  explicit M15_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 5,
    kF2FieldNumber = 4,
    kF4FieldNumber = 8,
    kF6FieldNumber = 14,
    kF1FieldNumber = 1,
    kF5FieldNumber = 10,
    kF7FieldNumber = 15,
  };
  // repeated bytes f3 = 5;
  int f3_size() const;
  private:
  int _internal_f3_size() const;
  public:
  void clear_f3();
  const std::string& f3(int index) const;
  std::string* mutable_f3(int index);
  void set_f3(int index, const std::string& value);
  void set_f3(int index, std::string&& value);
  void set_f3(int index, const char* value);
  void set_f3(int index, const void* value, size_t size);
  std::string* add_f3();
  void add_f3(const std::string& value);
  void add_f3(std::string&& value);
  void add_f3(const char* value);
  void add_f3(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f3() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f3();
  private:
  const std::string& _internal_f3(int index) const;
  std::string* _internal_add_f3();
  public:

  // optional bytes f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional string f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional fixed32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 f5 = 10;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M16)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M17_M18 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M17.M18) */ {
 public:
  M15_M17_M18();
  virtual ~M15_M17_M18();

  M15_M17_M18(const M15_M17_M18& from);
  M15_M17_M18(M15_M17_M18&& from) noexcept
    : M15_M17_M18() {
    *this = ::std::move(from);
  }

  inline M15_M17_M18& operator=(const M15_M17_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M17_M18& operator=(M15_M17_M18&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M17_M18& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M17_M18* internal_default_instance() {
    return reinterpret_cast<const M15_M17_M18*>(
               &_M15_M17_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(M15_M17_M18& a, M15_M17_M18& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M17_M18* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M17_M18* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M17_M18* New() const final {
    return CreateMaybeMessage<M15_M17_M18>(nullptr);
  }

  M15_M17_M18* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M17_M18>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M17_M18& from);
  void MergeFrom(const M15_M17_M18& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M17_M18* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M17.M18";
  }
  protected:
  explicit M15_M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M17.M18)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M17_M18_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M17_M19 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M17.M19) */ {
 public:
  M15_M17_M19();
  virtual ~M15_M17_M19();

  M15_M17_M19(const M15_M17_M19& from);
  M15_M17_M19(M15_M17_M19&& from) noexcept
    : M15_M17_M19() {
    *this = ::std::move(from);
  }

  inline M15_M17_M19& operator=(const M15_M17_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M17_M19& operator=(M15_M17_M19&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M17_M19& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M17_M19* internal_default_instance() {
    return reinterpret_cast<const M15_M17_M19*>(
               &_M15_M17_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(M15_M17_M19& a, M15_M17_M19& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M17_M19* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M17_M19* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M17_M19* New() const final {
    return CreateMaybeMessage<M15_M17_M19>(nullptr);
  }

  M15_M17_M19* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M17_M19>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M17_M19& from);
  void MergeFrom(const M15_M17_M19& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M17_M19* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M17.M19";
  }
  protected:
  explicit M15_M17_M19(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M17.M19)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M17_M19_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M17 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M17) */ {
 public:
  M15_M17();
  virtual ~M15_M17();

  M15_M17(const M15_M17& from);
  M15_M17(M15_M17&& from) noexcept
    : M15_M17() {
    *this = ::std::move(from);
  }

  inline M15_M17& operator=(const M15_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M17& operator=(M15_M17&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M17& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M17* internal_default_instance() {
    return reinterpret_cast<const M15_M17*>(
               &_M15_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(M15_M17& a, M15_M17& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M17* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M17* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M17* New() const final {
    return CreateMaybeMessage<M15_M17>(nullptr);
  }

  M15_M17* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M17>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M17& from);
  void MergeFrom(const M15_M17& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M17* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M17";
  }
  protected:
  explicit M15_M17(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M15_M17_M18 M18;
  typedef M15_M17_M19 M19;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 7,
  };
  // optional .hyperprotobench.M15.M17.M18 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M15_M17_M18& f1() const;
  ::hyperprotobench::M15_M17_M18* release_f1();
  ::hyperprotobench::M15_M17_M18* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M15_M17_M18* f1);
  private:
  const ::hyperprotobench::M15_M17_M18& _internal_f1() const;
  ::hyperprotobench::M15_M17_M18* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M15_M17_M18* f1);
  ::hyperprotobench::M15_M17_M18* unsafe_arena_release_f1();

  // optional .hyperprotobench.M15.M17.M19 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M15_M17_M19& f2() const;
  ::hyperprotobench::M15_M17_M19* release_f2();
  ::hyperprotobench::M15_M17_M19* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M15_M17_M19* f2);
  private:
  const ::hyperprotobench::M15_M17_M19& _internal_f2() const;
  ::hyperprotobench::M15_M17_M19* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M15_M17_M19* f2);
  ::hyperprotobench::M15_M17_M19* unsafe_arena_release_f2();

  // optional int64 f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M17)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M15_M17_M18* f1_;
  ::hyperprotobench::M15_M17_M19* f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M17_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M20) */ {
 public:
  M15_M20();
  virtual ~M15_M20();

  M15_M20(const M15_M20& from);
  M15_M20(M15_M20&& from) noexcept
    : M15_M20() {
    *this = ::std::move(from);
  }

  inline M15_M20& operator=(const M15_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M20& operator=(M15_M20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M20* internal_default_instance() {
    return reinterpret_cast<const M15_M20*>(
               &_M15_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(M15_M20& a, M15_M20& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M20* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M20* New() const final {
    return CreateMaybeMessage<M15_M20>(nullptr);
  }

  M15_M20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M20& from);
  void MergeFrom(const M15_M20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M20";
  }
  protected:
  explicit M15_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M20_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15) */ {
 public:
  M15();
  virtual ~M15();

  M15(const M15& from);
  M15(M15&& from) noexcept
    : M15() {
    *this = ::std::move(from);
  }

  inline M15& operator=(const M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15& operator=(M15&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15* internal_default_instance() {
    return reinterpret_cast<const M15*>(
               &_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(M15& a, M15& b) {
    a.Swap(&b);
  }
  inline void Swap(M15* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15* New() const final {
    return CreateMaybeMessage<M15>(nullptr);
  }

  M15* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15& from);
  void MergeFrom(const M15& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15";
  }
  protected:
  explicit M15(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M15_M16 M16;
  typedef M15_M17 M17;
  typedef M15_M20 M20;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF5FieldNumber = 6,
    kF8FieldNumber = 12,
    kF11FieldNumber = 22,
    kF9FieldNumber = 16,
    kF10FieldNumber = 20,
    kF12FieldNumber = 23,
    kF6FieldNumber = 8,
    kF2FieldNumber = 3,
    kF4FieldNumber = 5,
    kF7FieldNumber = 10,
    kF13FieldNumber = 24,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f8 = 12;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional bytes f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const std::string& f11() const;
  void set_f11(const std::string& value);
  void set_f11(std::string&& value);
  void set_f11(const char* value);
  void set_f11(const void* value, size_t size);
  std::string* mutable_f11();
  std::string* release_f11();
  void set_allocated_f11(std::string* f11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f11(
      std::string* f11);
  private:
  const std::string& _internal_f11() const;
  void _internal_set_f11(const std::string& value);
  std::string* _internal_mutable_f11();
  public:

  // optional .hyperprotobench.M15.M16 f9 = 16;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M15_M16& f9() const;
  ::hyperprotobench::M15_M16* release_f9();
  ::hyperprotobench::M15_M16* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M15_M16* f9);
  private:
  const ::hyperprotobench::M15_M16& _internal_f9() const;
  ::hyperprotobench::M15_M16* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M15_M16* f9);
  ::hyperprotobench::M15_M16* unsafe_arena_release_f9();

  // optional .hyperprotobench.M15.M17 f10 = 20;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M15_M17& f10() const;
  ::hyperprotobench::M15_M17* release_f10();
  ::hyperprotobench::M15_M17* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M15_M17* f10);
  private:
  const ::hyperprotobench::M15_M17& _internal_f10() const;
  ::hyperprotobench::M15_M17* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M15_M17* f10);
  ::hyperprotobench::M15_M17* unsafe_arena_release_f10();

  // optional .hyperprotobench.M15.M20 f12 = 23;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M15_M20& f12() const;
  ::hyperprotobench::M15_M20* release_f12();
  ::hyperprotobench::M15_M20* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M15_M20* f12);
  private:
  const ::hyperprotobench::M15_M20& _internal_f12() const;
  ::hyperprotobench::M15_M20* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M15_M20* f12);
  ::hyperprotobench::M15_M20* unsafe_arena_release_f12();

  // optional int64 f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional bool f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // optional bool f13 = 24;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  bool f13() const;
  void set_f13(bool value);
  private:
  bool _internal_f13() const;
  void _internal_set_f13(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f11_;
  ::hyperprotobench::M15_M16* f9_;
  ::hyperprotobench::M15_M17* f10_;
  ::hyperprotobench::M15_M20* f12_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f2_;
  bool f4_;
  bool f7_;
  bool f13_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M22 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M22) */ {
 public:
  M21_M22();
  virtual ~M21_M22();

  M21_M22(const M21_M22& from);
  M21_M22(M21_M22&& from) noexcept
    : M21_M22() {
    *this = ::std::move(from);
  }

  inline M21_M22& operator=(const M21_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M22& operator=(M21_M22&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M22& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M22* internal_default_instance() {
    return reinterpret_cast<const M21_M22*>(
               &_M21_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(M21_M22& a, M21_M22& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M22* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M22* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M22* New() const final {
    return CreateMaybeMessage<M21_M22>(nullptr);
  }

  M21_M22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M22>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M22& from);
  void MergeFrom(const M21_M22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M22* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M22";
  }
  protected:
  explicit M21_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF8FieldNumber = 17,
    kF9FieldNumber = 20,
    kF10FieldNumber = 21,
    kF12FieldNumber = 24,
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 10,
    kF6FieldNumber = 15,
    kF4FieldNumber = 13,
    kF5FieldNumber = 14,
    kF7FieldNumber = 16,
    kF11FieldNumber = 22,
  };
  // repeated string f8 = 17;
  int f8_size() const;
  private:
  int _internal_f8_size() const;
  public:
  void clear_f8();
  const std::string& f8(int index) const;
  std::string* mutable_f8(int index);
  void set_f8(int index, const std::string& value);
  void set_f8(int index, std::string&& value);
  void set_f8(int index, const char* value);
  void set_f8(int index, const char* value, size_t size);
  std::string* add_f8();
  void add_f8(const std::string& value);
  void add_f8(std::string&& value);
  void add_f8(const char* value);
  void add_f8(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f8() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f8();
  private:
  const std::string& _internal_f8(int index) const;
  std::string* _internal_add_f8();
  public:

  // optional bytes f9 = 20;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional bytes f10 = 21;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const void* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional bytes f12 = 24;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const std::string& f12() const;
  void set_f12(const std::string& value);
  void set_f12(std::string&& value);
  void set_f12(const char* value);
  void set_f12(const void* value, size_t size);
  std::string* mutable_f12();
  std::string* release_f12();
  void set_allocated_f12(std::string* f12);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f12();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f12(
      std::string* f12);
  private:
  const std::string& _internal_f12() const;
  void _internal_set_f12(const std::string& value);
  std::string* _internal_mutable_f12();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f3 = 10;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 15;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f4 = 13;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f5 = 14;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f7 = 16;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M22)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f12_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M22_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M23_M24 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M23.M24) */ {
 public:
  M21_M23_M24();
  virtual ~M21_M23_M24();

  M21_M23_M24(const M21_M23_M24& from);
  M21_M23_M24(M21_M23_M24&& from) noexcept
    : M21_M23_M24() {
    *this = ::std::move(from);
  }

  inline M21_M23_M24& operator=(const M21_M23_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M23_M24& operator=(M21_M23_M24&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M23_M24& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M23_M24* internal_default_instance() {
    return reinterpret_cast<const M21_M23_M24*>(
               &_M21_M23_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(M21_M23_M24& a, M21_M23_M24& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M23_M24* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M23_M24* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M23_M24* New() const final {
    return CreateMaybeMessage<M21_M23_M24>(nullptr);
  }

  M21_M23_M24* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M23_M24>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M23_M24& from);
  void MergeFrom(const M21_M23_M24& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M23_M24* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M23.M24";
  }
  protected:
  explicit M21_M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF4FieldNumber = 5,
    kF5FieldNumber = 6,
    kF9FieldNumber = 11,
    kF6FieldNumber = 7,
    kF7FieldNumber = 8,
    kF8FieldNumber = 10,
    kF10FieldNumber = 13,
    kF3FieldNumber = 4,
    kF11FieldNumber = 14,
    kF12FieldNumber = 15,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f9 = 11;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional uint64 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f8 = 10;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f10 = 13;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  bool f3() const;
  void set_f3(bool value);
  private:
  bool _internal_f3() const;
  void _internal_set_f3(bool value);
  public:

  // optional int64 f11 = 14;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f12 = 15;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::uint64 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M23.M24)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  bool f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f12_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M23_M24_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21_M23 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21.M23) */ {
 public:
  M21_M23();
  virtual ~M21_M23();

  M21_M23(const M21_M23& from);
  M21_M23(M21_M23&& from) noexcept
    : M21_M23() {
    *this = ::std::move(from);
  }

  inline M21_M23& operator=(const M21_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21_M23& operator=(M21_M23&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21_M23& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21_M23* internal_default_instance() {
    return reinterpret_cast<const M21_M23*>(
               &_M21_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(M21_M23& a, M21_M23& b) {
    a.Swap(&b);
  }
  inline void Swap(M21_M23* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21_M23* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21_M23* New() const final {
    return CreateMaybeMessage<M21_M23>(nullptr);
  }

  M21_M23* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21_M23>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21_M23& from);
  void MergeFrom(const M21_M23& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21_M23* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21.M23";
  }
  protected:
  explicit M21_M23(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M21_M23_M24 M24;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M21.M23.M24 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M21_M23_M24& f2() const;
  ::hyperprotobench::M21_M23_M24* release_f2();
  ::hyperprotobench::M21_M23_M24* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M21_M23_M24* f2);
  private:
  const ::hyperprotobench::M21_M23_M24& _internal_f2() const;
  ::hyperprotobench::M21_M23_M24* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M21_M23_M24* f2);
  ::hyperprotobench::M21_M23_M24* unsafe_arena_release_f2();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21.M23)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M21_M23_M24* f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_M23_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M21 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M21) */ {
 public:
  M21();
  virtual ~M21();

  M21(const M21& from);
  M21(M21&& from) noexcept
    : M21() {
    *this = ::std::move(from);
  }

  inline M21& operator=(const M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline M21& operator=(M21&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M21& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M21* internal_default_instance() {
    return reinterpret_cast<const M21*>(
               &_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(M21& a, M21& b) {
    a.Swap(&b);
  }
  inline void Swap(M21* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M21* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M21* New() const final {
    return CreateMaybeMessage<M21>(nullptr);
  }

  M21* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M21>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M21& from);
  void MergeFrom(const M21& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M21* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M21";
  }
  protected:
  explicit M21(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M21_M22 M22;
  typedef M21_M23 M23;

  typedef M21_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M21_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M21_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M21_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M21_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M21_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M21_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M21_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M21_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M21_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M21_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M21_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M21_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF13FieldNumber = 26,
    kF4FieldNumber = 6,
    kF8FieldNumber = 17,
    kF14FieldNumber = 29,
    kF5FieldNumber = 8,
    kF7FieldNumber = 15,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF6FieldNumber = 9,
    kF12FieldNumber = 25,
    kF10FieldNumber = 22,
    kF11FieldNumber = 24,
    kF9FieldNumber = 20,
  };
  // repeated bytes f13 = 26;
  int f13_size() const;
  private:
  int _internal_f13_size() const;
  public:
  void clear_f13();
  const std::string& f13(int index) const;
  std::string* mutable_f13(int index);
  void set_f13(int index, const std::string& value);
  void set_f13(int index, std::string&& value);
  void set_f13(int index, const char* value);
  void set_f13(int index, const void* value, size_t size);
  std::string* add_f13();
  void add_f13(const std::string& value);
  void add_f13(std::string&& value);
  void add_f13(const char* value);
  void add_f13(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f13() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f13();
  private:
  const std::string& _internal_f13(int index) const;
  std::string* _internal_add_f13();
  public:

  // optional bytes f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f8 = 17;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional bytes f14 = 29;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  const std::string& f14() const;
  void set_f14(const std::string& value);
  void set_f14(std::string&& value);
  void set_f14(const char* value);
  void set_f14(const void* value, size_t size);
  std::string* mutable_f14();
  std::string* release_f14();
  void set_allocated_f14(std::string* f14);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f14();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f14(
      std::string* f14);
  private:
  const std::string& _internal_f14() const;
  void _internal_set_f14(const std::string& value);
  std::string* _internal_mutable_f14();
  public:

  // optional .hyperprotobench.M21.M22 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M21_M22& f5() const;
  ::hyperprotobench::M21_M22* release_f5();
  ::hyperprotobench::M21_M22* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M21_M22* f5);
  private:
  const ::hyperprotobench::M21_M22& _internal_f5() const;
  ::hyperprotobench::M21_M22* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M21_M22* f5);
  ::hyperprotobench::M21_M22* unsafe_arena_release_f5();

  // optional .hyperprotobench.M21.M23 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M21_M23& f7() const;
  ::hyperprotobench::M21_M23* release_f7();
  ::hyperprotobench::M21_M23* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M21_M23* f7);
  private:
  const ::hyperprotobench::M21_M23& _internal_f7() const;
  ::hyperprotobench::M21_M23* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M21_M23* f7);
  ::hyperprotobench::M21_M23* unsafe_arena_release_f7();

  // optional fixed64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f12 = 25;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int32 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f10 = 22;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f11 = 24;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .hyperprotobench.M21.E1 f9 = 20;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::hyperprotobench::M21_E1 f9() const;
  void set_f9(::hyperprotobench::M21_E1 value);
  private:
  ::hyperprotobench::M21_E1 _internal_f9() const;
  void _internal_set_f9(::hyperprotobench::M21_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M21)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f13_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f14_;
  ::hyperprotobench::M21_M22* f5_;
  ::hyperprotobench::M21_M23* f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f12_;
  ::PROTOBUF_NAMESPACE_ID::int64 f10_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  int f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M21_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26_M27 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26.M27) */ {
 public:
  M25_M26_M27();
  virtual ~M25_M26_M27();

  M25_M26_M27(const M25_M26_M27& from);
  M25_M26_M27(M25_M26_M27&& from) noexcept
    : M25_M26_M27() {
    *this = ::std::move(from);
  }

  inline M25_M26_M27& operator=(const M25_M26_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26_M27& operator=(M25_M26_M27&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26_M27& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26_M27* internal_default_instance() {
    return reinterpret_cast<const M25_M26_M27*>(
               &_M25_M26_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(M25_M26_M27& a, M25_M26_M27& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26_M27* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26_M27* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26_M27* New() const final {
    return CreateMaybeMessage<M25_M26_M27>(nullptr);
  }

  M25_M26_M27* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26_M27>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26_M27& from);
  void MergeFrom(const M25_M26_M27& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26_M27* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26.M27";
  }
  protected:
  explicit M25_M26_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26.M27)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_M27_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26) */ {
 public:
  M25_M26();
  virtual ~M25_M26();

  M25_M26(const M25_M26& from);
  M25_M26(M25_M26&& from) noexcept
    : M25_M26() {
    *this = ::std::move(from);
  }

  inline M25_M26& operator=(const M25_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26& operator=(M25_M26&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26* internal_default_instance() {
    return reinterpret_cast<const M25_M26*>(
               &_M25_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(M25_M26& a, M25_M26& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26* New() const final {
    return CreateMaybeMessage<M25_M26>(nullptr);
  }

  M25_M26* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26& from);
  void MergeFrom(const M25_M26& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26";
  }
  protected:
  explicit M25_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26_M27 M27;

  typedef M25_M26_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M25_M26_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M25_M26_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M25_M26_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M25_M26_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M25_M26_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M25_M26_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M25_M26_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M25_M26_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M25_M26_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M25_M26_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M25_M26_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M25_M26_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional .hyperprotobench.M25.M26.M27 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M25_M26_M27& f3() const;
  ::hyperprotobench::M25_M26_M27* release_f3();
  ::hyperprotobench::M25_M26_M27* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M25_M26_M27* f3);
  private:
  const ::hyperprotobench::M25_M26_M27& _internal_f3() const;
  ::hyperprotobench::M25_M26_M27* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M25_M26_M27* f3);
  ::hyperprotobench::M25_M26_M27* unsafe_arena_release_f3();

  // optional fixed64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .hyperprotobench.M25.M26.E1 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M25_M26_E1 f2() const;
  void set_f2(::hyperprotobench::M25_M26_E1 value);
  private:
  ::hyperprotobench::M25_M26_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M25_M26_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M25_M26_M27* f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M28_M29 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M28.M29) */ {
 public:
  M25_M28_M29();
  virtual ~M25_M28_M29();

  M25_M28_M29(const M25_M28_M29& from);
  M25_M28_M29(M25_M28_M29&& from) noexcept
    : M25_M28_M29() {
    *this = ::std::move(from);
  }

  inline M25_M28_M29& operator=(const M25_M28_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M28_M29& operator=(M25_M28_M29&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M28_M29& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M28_M29* internal_default_instance() {
    return reinterpret_cast<const M25_M28_M29*>(
               &_M25_M28_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(M25_M28_M29& a, M25_M28_M29& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M28_M29* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M28_M29* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M28_M29* New() const final {
    return CreateMaybeMessage<M25_M28_M29>(nullptr);
  }

  M25_M28_M29* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M28_M29>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M28_M29& from);
  void MergeFrom(const M25_M28_M29& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M28_M29* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M28.M29";
  }
  protected:
  explicit M25_M28_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF6FieldNumber = 9,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF8FieldNumber = 11,
    kF7FieldNumber = 10,
  };
  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional bool f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional bool f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  bool f8() const;
  void set_f8(bool value);
  private:
  bool _internal_f8() const;
  void _internal_set_f8(bool value);
  public:

  // optional int64 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M28.M29)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  bool f4_;
  bool f5_;
  bool f8_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M28_M29_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M28 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M28) */ {
 public:
  M25_M28();
  virtual ~M25_M28();

  M25_M28(const M25_M28& from);
  M25_M28(M25_M28&& from) noexcept
    : M25_M28() {
    *this = ::std::move(from);
  }

  inline M25_M28& operator=(const M25_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M28& operator=(M25_M28&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M28& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M28* internal_default_instance() {
    return reinterpret_cast<const M25_M28*>(
               &_M25_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(M25_M28& a, M25_M28& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M28* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M28* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M28* New() const final {
    return CreateMaybeMessage<M25_M28>(nullptr);
  }

  M25_M28* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M28>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M28& from);
  void MergeFrom(const M25_M28& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M28* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M28";
  }
  protected:
  explicit M25_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M28_M29 M29;

  typedef M25_M28_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M25_M28_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M25_M28_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M25_M28_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M25_M28_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M25_M28_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M25_M28_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M25_M28_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M25_M28_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M25_M28_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M25_M28_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M25_M28_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M25_M28_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF6FieldNumber = 11,
    kF9FieldNumber = 18,
    kF2FieldNumber = 3,
    kF3FieldNumber = 7,
    kF4FieldNumber = 9,
    kF5FieldNumber = 10,
    kF8FieldNumber = 14,
    kF10FieldNumber = 19,
    kF7FieldNumber = 13,
  };
  // optional bytes f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const void* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional bytes f9 = 18;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional .hyperprotobench.M25.M28.M29 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M25_M28_M29& f2() const;
  ::hyperprotobench::M25_M28_M29* release_f2();
  ::hyperprotobench::M25_M28_M29* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M25_M28_M29* f2);
  private:
  const ::hyperprotobench::M25_M28_M29& _internal_f2() const;
  ::hyperprotobench::M25_M28_M29* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M25_M28_M29* f2);
  ::hyperprotobench::M25_M28_M29* unsafe_arena_release_f2();

  // optional int64 f3 = 7;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f4 = 9;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 10;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed32 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f10 = 19;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional .hyperprotobench.M25.M28.E1 f7 = 13;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::hyperprotobench::M25_M28_E1 f7() const;
  void set_f7(::hyperprotobench::M25_M28_E1 value);
  private:
  ::hyperprotobench::M25_M28_E1 _internal_f7() const;
  void _internal_set_f7(::hyperprotobench::M25_M28_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M28)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::hyperprotobench::M25_M28_M29* f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f8_;
  bool f10_;
  int f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M28_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25) */ {
 public:
  M25();
  virtual ~M25();

  M25(const M25& from);
  M25(M25&& from) noexcept
    : M25() {
    *this = ::std::move(from);
  }

  inline M25& operator=(const M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25& operator=(M25&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25* internal_default_instance() {
    return reinterpret_cast<const M25*>(
               &_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(M25& a, M25& b) {
    a.Swap(&b);
  }
  inline void Swap(M25* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25* New() const final {
    return CreateMaybeMessage<M25>(nullptr);
  }

  M25* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25& from);
  void MergeFrom(const M25& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25";
  }
  protected:
  explicit M25(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26 M26;
  typedef M25_M28 M28;

  typedef M25_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M25_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M25_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M25_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M25_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M25_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M25_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M25_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M25_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M25_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M25_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M25_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M25_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 9,
    kF8FieldNumber = 13,
    kF9FieldNumber = 19,
    kF10FieldNumber = 20,
    kF6FieldNumber = 11,
    kF12FieldNumber = 24,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF1FieldNumber = 2,
    kF7FieldNumber = 12,
    kF11FieldNumber = 21,
    kF13FieldNumber = 25,
  };
  // optional string f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional bytes f9 = 19;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional bytes f10 = 20;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const void* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional .hyperprotobench.M25.M26 f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M25_M26& f6() const;
  ::hyperprotobench::M25_M26* release_f6();
  ::hyperprotobench::M25_M26* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M25_M26* f6);
  private:
  const ::hyperprotobench::M25_M26& _internal_f6() const;
  ::hyperprotobench::M25_M26* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M25_M26* f6);
  ::hyperprotobench::M25_M26* unsafe_arena_release_f6();

  // optional .hyperprotobench.M25.M28 f12 = 24;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M25_M28& f12() const;
  ::hyperprotobench::M25_M28* release_f12();
  ::hyperprotobench::M25_M28* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M25_M28* f12);
  private:
  const ::hyperprotobench::M25_M28& _internal_f12() const;
  ::hyperprotobench::M25_M28* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M25_M28* f12);
  ::hyperprotobench::M25_M28* unsafe_arena_release_f12();

  // optional fixed64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional double f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  double f4() const;
  void set_f4(double value);
  private:
  double _internal_f4() const;
  void _internal_set_f4(double value);
  public:

  // optional fixed32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f7 = 12;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // optional bool f11 = 21;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  bool f11() const;
  void set_f11(bool value);
  private:
  bool _internal_f11() const;
  void _internal_set_f11(bool value);
  public:

  // optional .hyperprotobench.M25.E1 f13 = 25;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  ::hyperprotobench::M25_E1 f13() const;
  void set_f13(::hyperprotobench::M25_E1 value);
  private:
  ::hyperprotobench::M25_E1 _internal_f13() const;
  void _internal_set_f13(::hyperprotobench::M25_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::hyperprotobench::M25_M26* f6_;
  ::hyperprotobench::M25_M28* f12_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  double f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  bool f7_;
  bool f11_;
  int f13_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M31 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M31) */ {
 public:
  M30_M31();
  virtual ~M30_M31();

  M30_M31(const M30_M31& from);
  M30_M31(M30_M31&& from) noexcept
    : M30_M31() {
    *this = ::std::move(from);
  }

  inline M30_M31& operator=(const M30_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M31& operator=(M30_M31&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M31& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M31* internal_default_instance() {
    return reinterpret_cast<const M30_M31*>(
               &_M30_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(M30_M31& a, M30_M31& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M31* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M31* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M31* New() const final {
    return CreateMaybeMessage<M30_M31>(nullptr);
  }

  M30_M31* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M31>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M31& from);
  void MergeFrom(const M30_M31& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M31* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M31";
  }
  protected:
  explicit M30_M31(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional fixed64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M31)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M31_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M32_M33 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M32.M33) */ {
 public:
  M30_M32_M33();
  virtual ~M30_M32_M33();

  M30_M32_M33(const M30_M32_M33& from);
  M30_M32_M33(M30_M32_M33&& from) noexcept
    : M30_M32_M33() {
    *this = ::std::move(from);
  }

  inline M30_M32_M33& operator=(const M30_M32_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M32_M33& operator=(M30_M32_M33&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M32_M33& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M32_M33* internal_default_instance() {
    return reinterpret_cast<const M30_M32_M33*>(
               &_M30_M32_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(M30_M32_M33& a, M30_M32_M33& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M32_M33* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M32_M33* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M32_M33* New() const final {
    return CreateMaybeMessage<M30_M32_M33>(nullptr);
  }

  M30_M32_M33* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M32_M33>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M32_M33& from);
  void MergeFrom(const M30_M32_M33& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M32_M33* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M32.M33";
  }
  protected:
  explicit M30_M32_M33(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 7,
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
  };
  // optional bytes f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M32.M33)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M32_M33_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M32 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M32) */ {
 public:
  M30_M32();
  virtual ~M30_M32();

  M30_M32(const M30_M32& from);
  M30_M32(M30_M32&& from) noexcept
    : M30_M32() {
    *this = ::std::move(from);
  }

  inline M30_M32& operator=(const M30_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M32& operator=(M30_M32&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M32& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M32* internal_default_instance() {
    return reinterpret_cast<const M30_M32*>(
               &_M30_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(M30_M32& a, M30_M32& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M32* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M32* New() const final {
    return CreateMaybeMessage<M30_M32>(nullptr);
  }

  M30_M32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M32>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M32& from);
  void MergeFrom(const M30_M32& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M32* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M32";
  }
  protected:
  explicit M30_M32(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M30_M32_M33 M33;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 3,
  };
  // optional .hyperprotobench.M30.M32.M33 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M30_M32_M33& f1() const;
  ::hyperprotobench::M30_M32_M33* release_f1();
  ::hyperprotobench::M30_M32_M33* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M30_M32_M33* f1);
  private:
  const ::hyperprotobench::M30_M32_M33& _internal_f1() const;
  ::hyperprotobench::M30_M32_M33* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M30_M32_M33* f1);
  ::hyperprotobench::M30_M32_M33* unsafe_arena_release_f1();

  // optional uint64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M32)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M30_M32_M33* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M32_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M34 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M34) */ {
 public:
  M30_M34();
  virtual ~M30_M34();

  M30_M34(const M30_M34& from);
  M30_M34(M30_M34&& from) noexcept
    : M30_M34() {
    *this = ::std::move(from);
  }

  inline M30_M34& operator=(const M30_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M34& operator=(M30_M34&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M34& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M34* internal_default_instance() {
    return reinterpret_cast<const M30_M34*>(
               &_M30_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(M30_M34& a, M30_M34& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M34* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M34* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M34* New() const final {
    return CreateMaybeMessage<M30_M34>(nullptr);
  }

  M30_M34* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M34>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M34& from);
  void MergeFrom(const M30_M34& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M34* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M34";
  }
  protected:
  explicit M30_M34(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
  };
  // optional fixed64 f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M34)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M34_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30_M35 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30.M35) */ {
 public:
  M30_M35();
  virtual ~M30_M35();

  M30_M35(const M30_M35& from);
  M30_M35(M30_M35&& from) noexcept
    : M30_M35() {
    *this = ::std::move(from);
  }

  inline M30_M35& operator=(const M30_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30_M35& operator=(M30_M35&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30_M35& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30_M35* internal_default_instance() {
    return reinterpret_cast<const M30_M35*>(
               &_M30_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(M30_M35& a, M30_M35& b) {
    a.Swap(&b);
  }
  inline void Swap(M30_M35* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30_M35* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30_M35* New() const final {
    return CreateMaybeMessage<M30_M35>(nullptr);
  }

  M30_M35* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30_M35>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30_M35& from);
  void MergeFrom(const M30_M35& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30_M35* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30.M35";
  }
  protected:
  explicit M30_M35(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 4,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF5FieldNumber = 5,
    kF6FieldNumber = 6,
    kF7FieldNumber = 7,
    kF8FieldNumber = 8,
    kF9FieldNumber = 10,
    kF3FieldNumber = 3,
  };
  // repeated bytes f4 = 4;
  int f4_size() const;
  private:
  int _internal_f4_size() const;
  public:
  void clear_f4();
  const std::string& f4(int index) const;
  std::string* mutable_f4(int index);
  void set_f4(int index, const std::string& value);
  void set_f4(int index, std::string&& value);
  void set_f4(int index, const char* value);
  void set_f4(int index, const void* value, size_t size);
  std::string* add_f4();
  void add_f4(const std::string& value);
  void add_f4(std::string&& value);
  void add_f4(const char* value);
  void add_f4(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f4();
  private:
  const std::string& _internal_f4(int index) const;
  std::string* _internal_add_f4();
  public:

  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional string f6 = 6;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional string f7 = 7;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional bytes f8 = 8;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional bytes f9 = 10;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30.M35)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_M35_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M30 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M30) */ {
 public:
  M30();
  virtual ~M30();

  M30(const M30& from);
  M30(M30&& from) noexcept
    : M30() {
    *this = ::std::move(from);
  }

  inline M30& operator=(const M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline M30& operator=(M30&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M30& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M30* internal_default_instance() {
    return reinterpret_cast<const M30*>(
               &_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(M30& a, M30& b) {
    a.Swap(&b);
  }
  inline void Swap(M30* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M30* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M30* New() const final {
    return CreateMaybeMessage<M30>(nullptr);
  }

  M30* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M30>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M30& from);
  void MergeFrom(const M30& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M30* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M30";
  }
  protected:
  explicit M30(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M30_M31 M31;
  typedef M30_M32 M32;
  typedef M30_M34 M34;
  typedef M30_M35 M35;

  // accessors -------------------------------------------------------

  enum : int {
    kF7FieldNumber = 12,
    kF9FieldNumber = 14,
    kF12FieldNumber = 17,
    kF13FieldNumber = 23,
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF14FieldNumber = 25,
    kF5FieldNumber = 8,
    kF8FieldNumber = 13,
    kF10FieldNumber = 15,
    kF4FieldNumber = 7,
    kF6FieldNumber = 11,
    kF11FieldNumber = 16,
  };
  // repeated bytes f7 = 12;
  int f7_size() const;
  private:
  int _internal_f7_size() const;
  public:
  void clear_f7();
  const std::string& f7(int index) const;
  std::string* mutable_f7(int index);
  void set_f7(int index, const std::string& value);
  void set_f7(int index, std::string&& value);
  void set_f7(int index, const char* value);
  void set_f7(int index, const void* value, size_t size);
  std::string* add_f7();
  void add_f7(const std::string& value);
  void add_f7(std::string&& value);
  void add_f7(const char* value);
  void add_f7(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f7() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f7();
  private:
  const std::string& _internal_f7(int index) const;
  std::string* _internal_add_f7();
  public:

  // optional bytes f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional bytes f12 = 17;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const std::string& f12() const;
  void set_f12(const std::string& value);
  void set_f12(std::string&& value);
  void set_f12(const char* value);
  void set_f12(const void* value, size_t size);
  std::string* mutable_f12();
  std::string* release_f12();
  void set_allocated_f12(std::string* f12);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f12();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f12(
      std::string* f12);
  private:
  const std::string& _internal_f12() const;
  void _internal_set_f12(const std::string& value);
  std::string* _internal_mutable_f12();
  public:

  // optional bytes f13 = 23;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const std::string& f13() const;
  void set_f13(const std::string& value);
  void set_f13(std::string&& value);
  void set_f13(const char* value);
  void set_f13(const void* value, size_t size);
  std::string* mutable_f13();
  std::string* release_f13();
  void set_allocated_f13(std::string* f13);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f13();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f13(
      std::string* f13);
  private:
  const std::string& _internal_f13() const;
  void _internal_set_f13(const std::string& value);
  std::string* _internal_mutable_f13();
  public:

  // optional .hyperprotobench.M30.M31 f1 = 4;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M30_M31& f1() const;
  ::hyperprotobench::M30_M31* release_f1();
  ::hyperprotobench::M30_M31* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M30_M31* f1);
  private:
  const ::hyperprotobench::M30_M31& _internal_f1() const;
  ::hyperprotobench::M30_M31* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M30_M31* f1);
  ::hyperprotobench::M30_M31* unsafe_arena_release_f1();

  // optional .hyperprotobench.M30.M32 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M30_M32& f2() const;
  ::hyperprotobench::M30_M32* release_f2();
  ::hyperprotobench::M30_M32* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M30_M32* f2);
  private:
  const ::hyperprotobench::M30_M32& _internal_f2() const;
  ::hyperprotobench::M30_M32* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M30_M32* f2);
  ::hyperprotobench::M30_M32* unsafe_arena_release_f2();

  // optional .hyperprotobench.M30.M34 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M30_M34& f3() const;
  ::hyperprotobench::M30_M34* release_f3();
  ::hyperprotobench::M30_M34* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M30_M34* f3);
  private:
  const ::hyperprotobench::M30_M34& _internal_f3() const;
  ::hyperprotobench::M30_M34* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M30_M34* f3);
  ::hyperprotobench::M30_M34* unsafe_arena_release_f3();

  // optional .hyperprotobench.M30.M35 f14 = 25;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  const ::hyperprotobench::M30_M35& f14() const;
  ::hyperprotobench::M30_M35* release_f14();
  ::hyperprotobench::M30_M35* mutable_f14();
  void set_allocated_f14(::hyperprotobench::M30_M35* f14);
  private:
  const ::hyperprotobench::M30_M35& _internal_f14() const;
  ::hyperprotobench::M30_M35* _internal_mutable_f14();
  public:
  void unsafe_arena_set_allocated_f14(
      ::hyperprotobench::M30_M35* f14);
  ::hyperprotobench::M30_M35* unsafe_arena_release_f14();

  // optional int64 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f10 = 15;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::uint64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional bool f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional int64 f11 = 16;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M30)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f12_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f13_;
  ::hyperprotobench::M30_M31* f1_;
  ::hyperprotobench::M30_M32* f2_;
  ::hyperprotobench::M30_M34* f3_;
  ::hyperprotobench::M30_M35* f14_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f10_;
  bool f4_;
  bool f6_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M30_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36_M37_M38 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36.M37.M38) */ {
 public:
  M36_M37_M38();
  virtual ~M36_M37_M38();

  M36_M37_M38(const M36_M37_M38& from);
  M36_M37_M38(M36_M37_M38&& from) noexcept
    : M36_M37_M38() {
    *this = ::std::move(from);
  }

  inline M36_M37_M38& operator=(const M36_M37_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36_M37_M38& operator=(M36_M37_M38&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36_M37_M38& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36_M37_M38* internal_default_instance() {
    return reinterpret_cast<const M36_M37_M38*>(
               &_M36_M37_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(M36_M37_M38& a, M36_M37_M38& b) {
    a.Swap(&b);
  }
  inline void Swap(M36_M37_M38* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36_M37_M38* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36_M37_M38* New() const final {
    return CreateMaybeMessage<M36_M37_M38>(nullptr);
  }

  M36_M37_M38* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36_M37_M38>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36_M37_M38& from);
  void MergeFrom(const M36_M37_M38& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36_M37_M38* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36.M37.M38";
  }
  protected:
  explicit M36_M37_M38(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
  };
  // optional int64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36.M37.M38)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_M37_M38_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36_M37_M39 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36.M37.M39) */ {
 public:
  M36_M37_M39();
  virtual ~M36_M37_M39();

  M36_M37_M39(const M36_M37_M39& from);
  M36_M37_M39(M36_M37_M39&& from) noexcept
    : M36_M37_M39() {
    *this = ::std::move(from);
  }

  inline M36_M37_M39& operator=(const M36_M37_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36_M37_M39& operator=(M36_M37_M39&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36_M37_M39& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36_M37_M39* internal_default_instance() {
    return reinterpret_cast<const M36_M37_M39*>(
               &_M36_M37_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(M36_M37_M39& a, M36_M37_M39& b) {
    a.Swap(&b);
  }
  inline void Swap(M36_M37_M39* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36_M37_M39* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36_M37_M39* New() const final {
    return CreateMaybeMessage<M36_M37_M39>(nullptr);
  }

  M36_M37_M39* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36_M37_M39>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36_M37_M39& from);
  void MergeFrom(const M36_M37_M39& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36_M37_M39* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36.M37.M39";
  }
  protected:
  explicit M36_M37_M39(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 5,
  };
  // optional bytes f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional double f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  double f1() const;
  void set_f1(double value);
  private:
  double _internal_f1() const;
  void _internal_set_f1(double value);
  public:

  // optional int64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36.M37.M39)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  double f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_M37_M39_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36_M37 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36.M37) */ {
 public:
  M36_M37();
  virtual ~M36_M37();

  M36_M37(const M36_M37& from);
  M36_M37(M36_M37&& from) noexcept
    : M36_M37() {
    *this = ::std::move(from);
  }

  inline M36_M37& operator=(const M36_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36_M37& operator=(M36_M37&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36_M37& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36_M37* internal_default_instance() {
    return reinterpret_cast<const M36_M37*>(
               &_M36_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(M36_M37& a, M36_M37& b) {
    a.Swap(&b);
  }
  inline void Swap(M36_M37* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36_M37* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36_M37* New() const final {
    return CreateMaybeMessage<M36_M37>(nullptr);
  }

  M36_M37* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36_M37>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36_M37& from);
  void MergeFrom(const M36_M37& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36_M37* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36.M37";
  }
  protected:
  explicit M36_M37(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M36_M37_M38 M38;
  typedef M36_M37_M39 M39;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF1FieldNumber = 1,
  };
  // optional .hyperprotobench.M36.M37.M38 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M36_M37_M38& f2() const;
  ::hyperprotobench::M36_M37_M38* release_f2();
  ::hyperprotobench::M36_M37_M38* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M36_M37_M38* f2);
  private:
  const ::hyperprotobench::M36_M37_M38& _internal_f2() const;
  ::hyperprotobench::M36_M37_M38* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M36_M37_M38* f2);
  ::hyperprotobench::M36_M37_M38* unsafe_arena_release_f2();

  // optional .hyperprotobench.M36.M37.M39 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M36_M37_M39& f3() const;
  ::hyperprotobench::M36_M37_M39* release_f3();
  ::hyperprotobench::M36_M37_M39* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M36_M37_M39* f3);
  private:
  const ::hyperprotobench::M36_M37_M39& _internal_f3() const;
  ::hyperprotobench::M36_M37_M39* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M36_M37_M39* f3);
  ::hyperprotobench::M36_M37_M39* unsafe_arena_release_f3();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36.M37)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M36_M37_M38* f2_;
  ::hyperprotobench::M36_M37_M39* f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_M37_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36_M40 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36.M40) */ {
 public:
  M36_M40();
  virtual ~M36_M40();

  M36_M40(const M36_M40& from);
  M36_M40(M36_M40&& from) noexcept
    : M36_M40() {
    *this = ::std::move(from);
  }

  inline M36_M40& operator=(const M36_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36_M40& operator=(M36_M40&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36_M40& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36_M40* internal_default_instance() {
    return reinterpret_cast<const M36_M40*>(
               &_M36_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(M36_M40& a, M36_M40& b) {
    a.Swap(&b);
  }
  inline void Swap(M36_M40* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36_M40* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36_M40* New() const final {
    return CreateMaybeMessage<M36_M40>(nullptr);
  }

  M36_M40* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36_M40>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36_M40& from);
  void MergeFrom(const M36_M40& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36_M40* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36.M40";
  }
  protected:
  explicit M36_M40(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M36_M40_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M36_M40_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M36_M40_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M36_M40_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M36_M40_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M36_M40_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M36_M40_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M36_M40_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M36_M40_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M36_M40_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M36_M40_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M36_M40_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M36_M40_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF1FieldNumber = 2,
    kF4FieldNumber = 6,
    kF5FieldNumber = 8,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF6FieldNumber = 9,
  };
  // optional bytes f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed32 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 f7 = 10;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .hyperprotobench.M36.M40.E1 f6 = 9;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::hyperprotobench::M36_M40_E1 f6() const;
  void set_f6(::hyperprotobench::M36_M40_E1 value);
  private:
  ::hyperprotobench::M36_M40_E1 _internal_f6() const;
  void _internal_set_f6(::hyperprotobench::M36_M40_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36.M40)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  int f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_M40_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36_M41 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36.M41) */ {
 public:
  M36_M41();
  virtual ~M36_M41();

  M36_M41(const M36_M41& from);
  M36_M41(M36_M41&& from) noexcept
    : M36_M41() {
    *this = ::std::move(from);
  }

  inline M36_M41& operator=(const M36_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36_M41& operator=(M36_M41&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36_M41& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36_M41* internal_default_instance() {
    return reinterpret_cast<const M36_M41*>(
               &_M36_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(M36_M41& a, M36_M41& b) {
    a.Swap(&b);
  }
  inline void Swap(M36_M41* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36_M41* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36_M41* New() const final {
    return CreateMaybeMessage<M36_M41>(nullptr);
  }

  M36_M41* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36_M41>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36_M41& from);
  void MergeFrom(const M36_M41& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36_M41* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36.M41";
  }
  protected:
  explicit M36_M41(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 3,
    kF4FieldNumber = 8,
    kF7FieldNumber = 16,
    kF1FieldNumber = 1,
    kF3FieldNumber = 6,
    kF5FieldNumber = 9,
    kF6FieldNumber = 12,
  };
  // optional bytes f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const char* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f7 = 16;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const void* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional int32 f6 = 12;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36.M41)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  bool f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_M41_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M36 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M36) */ {
 public:
  M36();
  virtual ~M36();

  M36(const M36& from);
  M36(M36&& from) noexcept
    : M36() {
    *this = ::std::move(from);
  }

  inline M36& operator=(const M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline M36& operator=(M36&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M36& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M36* internal_default_instance() {
    return reinterpret_cast<const M36*>(
               &_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(M36& a, M36& b) {
    a.Swap(&b);
  }
  inline void Swap(M36* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M36* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M36* New() const final {
    return CreateMaybeMessage<M36>(nullptr);
  }

  M36* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M36>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M36& from);
  void MergeFrom(const M36& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M36* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M36";
  }
  protected:
  explicit M36(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M36_M37 M37;
  typedef M36_M40 M40;
  typedef M36_M41 M41;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 5,
    kF2FieldNumber = 3,
    kF8FieldNumber = 14,
    kF13FieldNumber = 23,
    kF1FieldNumber = 2,
    kF5FieldNumber = 11,
    kF4FieldNumber = 6,
    kF6FieldNumber = 12,
    kF10FieldNumber = 16,
    kF7FieldNumber = 13,
    kF9FieldNumber = 15,
    kF11FieldNumber = 19,
    kF12FieldNumber = 20,
    kF14FieldNumber = 24,
    kF15FieldNumber = 25,
  };
  // optional bytes f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M36.M37 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M36_M37& f2() const;
  ::hyperprotobench::M36_M37* release_f2();
  ::hyperprotobench::M36_M37* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M36_M37* f2);
  private:
  const ::hyperprotobench::M36_M37& _internal_f2() const;
  ::hyperprotobench::M36_M37* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M36_M37* f2);
  ::hyperprotobench::M36_M37* unsafe_arena_release_f2();

  // optional .hyperprotobench.M36.M40 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M36_M40& f8() const;
  ::hyperprotobench::M36_M40* release_f8();
  ::hyperprotobench::M36_M40* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M36_M40* f8);
  private:
  const ::hyperprotobench::M36_M40& _internal_f8() const;
  ::hyperprotobench::M36_M40* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M36_M40* f8);
  ::hyperprotobench::M36_M40* unsafe_arena_release_f8();

  // optional .hyperprotobench.M36.M41 f13 = 23;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const ::hyperprotobench::M36_M41& f13() const;
  ::hyperprotobench::M36_M41* release_f13();
  ::hyperprotobench::M36_M41* mutable_f13();
  void set_allocated_f13(::hyperprotobench::M36_M41* f13);
  private:
  const ::hyperprotobench::M36_M41& _internal_f13() const;
  ::hyperprotobench::M36_M41* _internal_mutable_f13();
  public:
  void unsafe_arena_set_allocated_f13(
      ::hyperprotobench::M36_M41* f13);
  ::hyperprotobench::M36_M41* unsafe_arena_release_f13();

  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 11;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f6 = 12;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional bool f10 = 16;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional int64 f7 = 13;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional double f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  double f9() const;
  void set_f9(double value);
  private:
  double _internal_f9() const;
  void _internal_set_f9(double value);
  public:

  // optional double f11 = 19;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  double f11() const;
  void set_f11(double value);
  private:
  double _internal_f11() const;
  void _internal_set_f11(double value);
  public:

  // optional int64 f12 = 20;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int64 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f14 = 24;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  ::PROTOBUF_NAMESPACE_ID::int64 f14() const;
  void set_f14(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f14() const;
  void _internal_set_f14(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f15 = 25;
  bool has_f15() const;
  private:
  bool _internal_has_f15() const;
  public:
  void clear_f15();
  ::PROTOBUF_NAMESPACE_ID::uint64 f15() const;
  void set_f15(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f15() const;
  void _internal_set_f15(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M36)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M36_M37* f2_;
  ::hyperprotobench::M36_M40* f8_;
  ::hyperprotobench::M36_M41* f13_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  bool f6_;
  bool f10_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  double f9_;
  double f11_;
  ::PROTOBUF_NAMESPACE_ID::int64 f12_;
  ::PROTOBUF_NAMESPACE_ID::int64 f14_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f15_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M36_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42_M43 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42.M43) */ {
 public:
  M42_M43();
  virtual ~M42_M43();

  M42_M43(const M42_M43& from);
  M42_M43(M42_M43&& from) noexcept
    : M42_M43() {
    *this = ::std::move(from);
  }

  inline M42_M43& operator=(const M42_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42_M43& operator=(M42_M43&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42_M43& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42_M43* internal_default_instance() {
    return reinterpret_cast<const M42_M43*>(
               &_M42_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(M42_M43& a, M42_M43& b) {
    a.Swap(&b);
  }
  inline void Swap(M42_M43* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42_M43* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42_M43* New() const final {
    return CreateMaybeMessage<M42_M43>(nullptr);
  }

  M42_M43* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42_M43>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42_M43& from);
  void MergeFrom(const M42_M43& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42_M43* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42.M43";
  }
  protected:
  explicit M42_M43(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 11,
    kF1FieldNumber = 6,
    kF2FieldNumber = 8,
    kF8FieldNumber = 16,
    kF11FieldNumber = 22,
    kF3FieldNumber = 9,
    kF5FieldNumber = 13,
    kF6FieldNumber = 14,
    kF7FieldNumber = 15,
    kF9FieldNumber = 19,
    kF10FieldNumber = 20,
  };
  // repeated bytes f4 = 11;
  int f4_size() const;
  private:
  int _internal_f4_size() const;
  public:
  void clear_f4();
  const std::string& f4(int index) const;
  std::string* mutable_f4(int index);
  void set_f4(int index, const std::string& value);
  void set_f4(int index, std::string&& value);
  void set_f4(int index, const char* value);
  void set_f4(int index, const void* value, size_t size);
  std::string* add_f4();
  void add_f4(const std::string& value);
  void add_f4(std::string&& value);
  void add_f4(const char* value);
  void add_f4(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f4();
  private:
  const std::string& _internal_f4(int index) const;
  std::string* _internal_add_f4();
  public:

  // optional bytes f1 = 6;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f2 = 8;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const std::string& f8() const;
  void set_f8(const std::string& value);
  void set_f8(std::string&& value);
  void set_f8(const char* value);
  void set_f8(const void* value, size_t size);
  std::string* mutable_f8();
  std::string* release_f8();
  void set_allocated_f8(std::string* f8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f8(
      std::string* f8);
  private:
  const std::string& _internal_f8() const;
  void _internal_set_f8(const std::string& value);
  std::string* _internal_mutable_f8();
  public:

  // optional string f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const std::string& f11() const;
  void set_f11(const std::string& value);
  void set_f11(std::string&& value);
  void set_f11(const char* value);
  void set_f11(const char* value, size_t size);
  std::string* mutable_f11();
  std::string* release_f11();
  void set_allocated_f11(std::string* f11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f11(
      std::string* f11);
  private:
  const std::string& _internal_f11() const;
  void _internal_set_f11(const std::string& value);
  std::string* _internal_mutable_f11();
  public:

  // optional int64 f3 = 9;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f9 = 19;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int64 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f10 = 20;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int64 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42.M43)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f11_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f10_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_M43_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42_M44 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42.M44) */ {
 public:
  M42_M44();
  virtual ~M42_M44();

  M42_M44(const M42_M44& from);
  M42_M44(M42_M44&& from) noexcept
    : M42_M44() {
    *this = ::std::move(from);
  }

  inline M42_M44& operator=(const M42_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42_M44& operator=(M42_M44&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42_M44& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42_M44* internal_default_instance() {
    return reinterpret_cast<const M42_M44*>(
               &_M42_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(M42_M44& a, M42_M44& b) {
    a.Swap(&b);
  }
  inline void Swap(M42_M44* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42_M44* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42_M44* New() const final {
    return CreateMaybeMessage<M42_M44>(nullptr);
  }

  M42_M44* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42_M44>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42_M44& from);
  void MergeFrom(const M42_M44& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42_M44* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42.M44";
  }
  protected:
  explicit M42_M44(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M42_M44_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M42_M44_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M42_M44_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M42_M44_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M42_M44_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M42_M44_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M42_M44_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M42_M44_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M42_M44_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M42_M44_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M42_M44_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M42_M44_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M42_M44_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 9,
    kF9FieldNumber = 15,
    kF1FieldNumber = 1,
    kF3FieldNumber = 4,
    kF4FieldNumber = 8,
    kF6FieldNumber = 11,
    kF7FieldNumber = 12,
    kF8FieldNumber = 14,
    kF2FieldNumber = 3,
  };
  // optional bytes f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const std::string& f9() const;
  void set_f9(const std::string& value);
  void set_f9(std::string&& value);
  void set_f9(const char* value);
  void set_f9(const void* value, size_t size);
  std::string* mutable_f9();
  std::string* release_f9();
  void set_allocated_f9(std::string* f9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f9(
      std::string* f9);
  private:
  const std::string& _internal_f9() const;
  void _internal_set_f9(const std::string& value);
  std::string* _internal_mutable_f9();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f7 = 12;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .hyperprotobench.M42.M44.E1 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::hyperprotobench::M42_M44_E1 f2() const;
  void set_f2(::hyperprotobench::M42_M44_E1 value);
  private:
  ::hyperprotobench::M42_M44_E1 _internal_f2() const;
  void _internal_set_f2(::hyperprotobench::M42_M44_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42.M44)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  int f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_M44_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42_M45_M46 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42.M45.M46) */ {
 public:
  M42_M45_M46();
  virtual ~M42_M45_M46();

  M42_M45_M46(const M42_M45_M46& from);
  M42_M45_M46(M42_M45_M46&& from) noexcept
    : M42_M45_M46() {
    *this = ::std::move(from);
  }

  inline M42_M45_M46& operator=(const M42_M45_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42_M45_M46& operator=(M42_M45_M46&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42_M45_M46& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42_M45_M46* internal_default_instance() {
    return reinterpret_cast<const M42_M45_M46*>(
               &_M42_M45_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(M42_M45_M46& a, M42_M45_M46& b) {
    a.Swap(&b);
  }
  inline void Swap(M42_M45_M46* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42_M45_M46* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42_M45_M46* New() const final {
    return CreateMaybeMessage<M42_M45_M46>(nullptr);
  }

  M42_M45_M46* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42_M45_M46>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42_M45_M46& from);
  void MergeFrom(const M42_M45_M46& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42_M45_M46* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42.M45.M46";
  }
  protected:
  explicit M42_M45_M46(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF1FieldNumber = 1,
  };
  // optional int64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42.M45.M46)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_M45_M46_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42_M45 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42.M45) */ {
 public:
  M42_M45();
  virtual ~M42_M45();

  M42_M45(const M42_M45& from);
  M42_M45(M42_M45&& from) noexcept
    : M42_M45() {
    *this = ::std::move(from);
  }

  inline M42_M45& operator=(const M42_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42_M45& operator=(M42_M45&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42_M45& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42_M45* internal_default_instance() {
    return reinterpret_cast<const M42_M45*>(
               &_M42_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(M42_M45& a, M42_M45& b) {
    a.Swap(&b);
  }
  inline void Swap(M42_M45* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42_M45* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42_M45* New() const final {
    return CreateMaybeMessage<M42_M45>(nullptr);
  }

  M42_M45* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42_M45>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42_M45& from);
  void MergeFrom(const M42_M45& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42_M45* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42.M45";
  }
  protected:
  explicit M42_M45(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M42_M45_M46 M46;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
  };
  // optional .hyperprotobench.M42.M45.M46 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M42_M45_M46& f2() const;
  ::hyperprotobench::M42_M45_M46* release_f2();
  ::hyperprotobench::M42_M45_M46* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M42_M45_M46* f2);
  private:
  const ::hyperprotobench::M42_M45_M46& _internal_f2() const;
  ::hyperprotobench::M42_M45_M46* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M42_M45_M46* f2);
  ::hyperprotobench::M42_M45_M46* unsafe_arena_release_f2();

  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42.M45)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M42_M45_M46* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_M45_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42_M47 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42.M47) */ {
 public:
  M42_M47();
  virtual ~M42_M47();

  M42_M47(const M42_M47& from);
  M42_M47(M42_M47&& from) noexcept
    : M42_M47() {
    *this = ::std::move(from);
  }

  inline M42_M47& operator=(const M42_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42_M47& operator=(M42_M47&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42_M47& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42_M47* internal_default_instance() {
    return reinterpret_cast<const M42_M47*>(
               &_M42_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(M42_M47& a, M42_M47& b) {
    a.Swap(&b);
  }
  inline void Swap(M42_M47* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42_M47* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42_M47* New() const final {
    return CreateMaybeMessage<M42_M47>(nullptr);
  }

  M42_M47* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42_M47>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42_M47& from);
  void MergeFrom(const M42_M47& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42_M47* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42.M47";
  }
  protected:
  explicit M42_M47(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
  };
  // optional int64 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42.M47)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_M47_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M42 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M42) */ {
 public:
  M42();
  virtual ~M42();

  M42(const M42& from);
  M42(M42&& from) noexcept
    : M42() {
    *this = ::std::move(from);
  }

  inline M42& operator=(const M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline M42& operator=(M42&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M42& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M42* internal_default_instance() {
    return reinterpret_cast<const M42*>(
               &_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(M42& a, M42& b) {
    a.Swap(&b);
  }
  inline void Swap(M42* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M42* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M42* New() const final {
    return CreateMaybeMessage<M42>(nullptr);
  }

  M42* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M42>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M42& from);
  void MergeFrom(const M42& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M42* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M42";
  }
  protected:
  explicit M42(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M42_M43 M43;
  typedef M42_M44 M44;
  typedef M42_M45 M45;
  typedef M42_M47 M47;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 4,
    kF13FieldNumber = 29,
    kF16FieldNumber = 32,
    kF7FieldNumber = 11,
    kF9FieldNumber = 18,
    kF10FieldNumber = 19,
    kF14FieldNumber = 30,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF8FieldNumber = 13,
    kF12FieldNumber = 28,
    kF11FieldNumber = 22,
    kF15FieldNumber = 31,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f13 = 29;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const std::string& f13() const;
  void set_f13(const std::string& value);
  void set_f13(std::string&& value);
  void set_f13(const char* value);
  void set_f13(const void* value, size_t size);
  std::string* mutable_f13();
  std::string* release_f13();
  void set_allocated_f13(std::string* f13);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f13();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f13(
      std::string* f13);
  private:
  const std::string& _internal_f13() const;
  void _internal_set_f13(const std::string& value);
  std::string* _internal_mutable_f13();
  public:

  // optional string f16 = 32;
  bool has_f16() const;
  private:
  bool _internal_has_f16() const;
  public:
  void clear_f16();
  const std::string& f16() const;
  void set_f16(const std::string& value);
  void set_f16(std::string&& value);
  void set_f16(const char* value);
  void set_f16(const char* value, size_t size);
  std::string* mutable_f16();
  std::string* release_f16();
  void set_allocated_f16(std::string* f16);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f16();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f16(
      std::string* f16);
  private:
  const std::string& _internal_f16() const;
  void _internal_set_f16(const std::string& value);
  std::string* _internal_mutable_f16();
  public:

  // optional .hyperprotobench.M42.M43 f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const ::hyperprotobench::M42_M43& f7() const;
  ::hyperprotobench::M42_M43* release_f7();
  ::hyperprotobench::M42_M43* mutable_f7();
  void set_allocated_f7(::hyperprotobench::M42_M43* f7);
  private:
  const ::hyperprotobench::M42_M43& _internal_f7() const;
  ::hyperprotobench::M42_M43* _internal_mutable_f7();
  public:
  void unsafe_arena_set_allocated_f7(
      ::hyperprotobench::M42_M43* f7);
  ::hyperprotobench::M42_M43* unsafe_arena_release_f7();

  // optional .hyperprotobench.M42.M44 f9 = 18;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M42_M44& f9() const;
  ::hyperprotobench::M42_M44* release_f9();
  ::hyperprotobench::M42_M44* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M42_M44* f9);
  private:
  const ::hyperprotobench::M42_M44& _internal_f9() const;
  ::hyperprotobench::M42_M44* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M42_M44* f9);
  ::hyperprotobench::M42_M44* unsafe_arena_release_f9();

  // optional .hyperprotobench.M42.M45 f10 = 19;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M42_M45& f10() const;
  ::hyperprotobench::M42_M45* release_f10();
  ::hyperprotobench::M42_M45* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M42_M45* f10);
  private:
  const ::hyperprotobench::M42_M45& _internal_f10() const;
  ::hyperprotobench::M42_M45* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M42_M45* f10);
  ::hyperprotobench::M42_M45* unsafe_arena_release_f10();

  // optional .hyperprotobench.M42.M47 f14 = 30;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  const ::hyperprotobench::M42_M47& f14() const;
  ::hyperprotobench::M42_M47* release_f14();
  ::hyperprotobench::M42_M47* mutable_f14();
  void set_allocated_f14(::hyperprotobench::M42_M47* f14);
  private:
  const ::hyperprotobench::M42_M47& _internal_f14() const;
  ::hyperprotobench::M42_M47* _internal_mutable_f14();
  public:
  void unsafe_arena_set_allocated_f14(
      ::hyperprotobench::M42_M47* f14);
  ::hyperprotobench::M42_M47* unsafe_arena_release_f14();

  // optional uint64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f8 = 13;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f12 = 28;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  bool f12() const;
  void set_f12(bool value);
  private:
  bool _internal_f12() const;
  void _internal_set_f12(bool value);
  public:

  // optional double f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  double f11() const;
  void set_f11(double value);
  private:
  double _internal_f11() const;
  void _internal_set_f11(double value);
  public:

  // optional int64 f15 = 31;
  bool has_f15() const;
  private:
  bool _internal_has_f15() const;
  public:
  void clear_f15();
  ::PROTOBUF_NAMESPACE_ID::int64 f15() const;
  void set_f15(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f15() const;
  void _internal_set_f15(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M42)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f13_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f16_;
  ::hyperprotobench::M42_M43* f7_;
  ::hyperprotobench::M42_M44* f9_;
  ::hyperprotobench::M42_M45* f10_;
  ::hyperprotobench::M42_M47* f14_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  bool f12_;
  double f11_;
  ::PROTOBUF_NAMESPACE_ID::int64 f15_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M42_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M48_M49 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M48.M49) */ {
 public:
  M48_M49();
  virtual ~M48_M49();

  M48_M49(const M48_M49& from);
  M48_M49(M48_M49&& from) noexcept
    : M48_M49() {
    *this = ::std::move(from);
  }

  inline M48_M49& operator=(const M48_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline M48_M49& operator=(M48_M49&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M48_M49& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M48_M49* internal_default_instance() {
    return reinterpret_cast<const M48_M49*>(
               &_M48_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(M48_M49& a, M48_M49& b) {
    a.Swap(&b);
  }
  inline void Swap(M48_M49* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M48_M49* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M48_M49* New() const final {
    return CreateMaybeMessage<M48_M49>(nullptr);
  }

  M48_M49* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M48_M49>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M48_M49& from);
  void MergeFrom(const M48_M49& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M48_M49* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M48.M49";
  }
  protected:
  explicit M48_M49(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 10,
  };
  // optional fixed64 f1 = 10;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M48.M49)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M48_M49_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M48_M50_M51 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M48.M50.M51) */ {
 public:
  M48_M50_M51();
  virtual ~M48_M50_M51();

  M48_M50_M51(const M48_M50_M51& from);
  M48_M50_M51(M48_M50_M51&& from) noexcept
    : M48_M50_M51() {
    *this = ::std::move(from);
  }

  inline M48_M50_M51& operator=(const M48_M50_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline M48_M50_M51& operator=(M48_M50_M51&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M48_M50_M51& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M48_M50_M51* internal_default_instance() {
    return reinterpret_cast<const M48_M50_M51*>(
               &_M48_M50_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(M48_M50_M51& a, M48_M50_M51& b) {
    a.Swap(&b);
  }
  inline void Swap(M48_M50_M51* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M48_M50_M51* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M48_M50_M51* New() const final {
    return CreateMaybeMessage<M48_M50_M51>(nullptr);
  }

  M48_M50_M51* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M48_M50_M51>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M48_M50_M51& from);
  void MergeFrom(const M48_M50_M51& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M48_M50_M51* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M48.M50.M51";
  }
  protected:
  explicit M48_M50_M51(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M48.M50.M51)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M48_M50_M51_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M48_M50 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M48.M50) */ {
 public:
  M48_M50();
  virtual ~M48_M50();

  M48_M50(const M48_M50& from);
  M48_M50(M48_M50&& from) noexcept
    : M48_M50() {
    *this = ::std::move(from);
  }

  inline M48_M50& operator=(const M48_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline M48_M50& operator=(M48_M50&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M48_M50& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M48_M50* internal_default_instance() {
    return reinterpret_cast<const M48_M50*>(
               &_M48_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(M48_M50& a, M48_M50& b) {
    a.Swap(&b);
  }
  inline void Swap(M48_M50* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M48_M50* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M48_M50* New() const final {
    return CreateMaybeMessage<M48_M50>(nullptr);
  }

  M48_M50* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M48_M50>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M48_M50& from);
  void MergeFrom(const M48_M50& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M48_M50* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M48.M50";
  }
  protected:
  explicit M48_M50(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M48_M50_M51 M51;

  // accessors -------------------------------------------------------

  enum : int {
    kF5FieldNumber = 7,
    kF1FieldNumber = 2,
    kF3FieldNumber = 4,
    kF2FieldNumber = 3,
    kF4FieldNumber = 6,
    kF6FieldNumber = 8,
  };
  // repeated bytes f5 = 7;
  int f5_size() const;
  private:
  int _internal_f5_size() const;
  public:
  void clear_f5();
  const std::string& f5(int index) const;
  std::string* mutable_f5(int index);
  void set_f5(int index, const std::string& value);
  void set_f5(int index, std::string&& value);
  void set_f5(int index, const char* value);
  void set_f5(int index, const void* value, size_t size);
  std::string* add_f5();
  void add_f5(const std::string& value);
  void add_f5(std::string&& value);
  void add_f5(const char* value);
  void add_f5(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f5();
  private:
  const std::string& _internal_f5(int index) const;
  std::string* _internal_add_f5();
  public:

  // optional bytes f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional .hyperprotobench.M48.M50.M51 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const ::hyperprotobench::M48_M50_M51& f3() const;
  ::hyperprotobench::M48_M50_M51* release_f3();
  ::hyperprotobench::M48_M50_M51* mutable_f3();
  void set_allocated_f3(::hyperprotobench::M48_M50_M51* f3);
  private:
  const ::hyperprotobench::M48_M50_M51& _internal_f3() const;
  ::hyperprotobench::M48_M50_M51* _internal_mutable_f3();
  public:
  void unsafe_arena_set_allocated_f3(
      ::hyperprotobench::M48_M50_M51* f3);
  ::hyperprotobench::M48_M50_M51* unsafe_arena_release_f3();

  // optional fixed64 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M48.M50)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::hyperprotobench::M48_M50_M51* f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M48_M50_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M48 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M48) */ {
 public:
  M48();
  virtual ~M48();

  M48(const M48& from);
  M48(M48&& from) noexcept
    : M48() {
    *this = ::std::move(from);
  }

  inline M48& operator=(const M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline M48& operator=(M48&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M48& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M48* internal_default_instance() {
    return reinterpret_cast<const M48*>(
               &_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(M48& a, M48& b) {
    a.Swap(&b);
  }
  inline void Swap(M48* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M48* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M48* New() const final {
    return CreateMaybeMessage<M48>(nullptr);
  }

  M48* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M48>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M48& from);
  void MergeFrom(const M48& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M48* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M48";
  }
  protected:
  explicit M48(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M48_M49 M49;
  typedef M48_M50 M50;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF4FieldNumber = 7,
    kF7FieldNumber = 15,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF8FieldNumber = 16,
  };
  // optional bytes f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f7 = 15;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const void* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional .hyperprotobench.M48.M49 f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M48_M49& f5() const;
  ::hyperprotobench::M48_M49* release_f5();
  ::hyperprotobench::M48_M49* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M48_M49* f5);
  private:
  const ::hyperprotobench::M48_M49& _internal_f5() const;
  ::hyperprotobench::M48_M49* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M48_M49* f5);
  ::hyperprotobench::M48_M49* unsafe_arena_release_f5();

  // optional .hyperprotobench.M48.M50 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M48_M50& f6() const;
  ::hyperprotobench::M48_M50* release_f6();
  ::hyperprotobench::M48_M50* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M48_M50* f6);
  private:
  const ::hyperprotobench::M48_M50& _internal_f6() const;
  ::hyperprotobench::M48_M50* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M48_M50* f6);
  ::hyperprotobench::M48_M50* unsafe_arena_release_f6();

  // optional double f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // optional int64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed64 f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M48)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::hyperprotobench::M48_M49* f5_;
  ::hyperprotobench::M48_M50* f6_;
  double f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M48_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52_M53 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52.M53) */ {
 public:
  M52_M53();
  virtual ~M52_M53();

  M52_M53(const M52_M53& from);
  M52_M53(M52_M53&& from) noexcept
    : M52_M53() {
    *this = ::std::move(from);
  }

  inline M52_M53& operator=(const M52_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52_M53& operator=(M52_M53&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52_M53& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52_M53* internal_default_instance() {
    return reinterpret_cast<const M52_M53*>(
               &_M52_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(M52_M53& a, M52_M53& b) {
    a.Swap(&b);
  }
  inline void Swap(M52_M53* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52_M53* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52_M53* New() const final {
    return CreateMaybeMessage<M52_M53>(nullptr);
  }

  M52_M53* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52_M53>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52_M53& from);
  void MergeFrom(const M52_M53& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52_M53* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52.M53";
  }
  protected:
  explicit M52_M53(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52.M53)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_M53_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52_M54 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52.M54) */ {
 public:
  M52_M54();
  virtual ~M52_M54();

  M52_M54(const M52_M54& from);
  M52_M54(M52_M54&& from) noexcept
    : M52_M54() {
    *this = ::std::move(from);
  }

  inline M52_M54& operator=(const M52_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52_M54& operator=(M52_M54&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52_M54& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52_M54* internal_default_instance() {
    return reinterpret_cast<const M52_M54*>(
               &_M52_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(M52_M54& a, M52_M54& b) {
    a.Swap(&b);
  }
  inline void Swap(M52_M54* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52_M54* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52_M54* New() const final {
    return CreateMaybeMessage<M52_M54>(nullptr);
  }

  M52_M54* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52_M54>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52_M54& from);
  void MergeFrom(const M52_M54& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52_M54* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52.M54";
  }
  protected:
  explicit M52_M54(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF6FieldNumber = 7,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF5FieldNumber = 5,
  };
  // optional bytes f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const void* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52.M54)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_M54_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52_M55 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52.M55) */ {
 public:
  M52_M55();
  virtual ~M52_M55();

  M52_M55(const M52_M55& from);
  M52_M55(M52_M55&& from) noexcept
    : M52_M55() {
    *this = ::std::move(from);
  }

  inline M52_M55& operator=(const M52_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52_M55& operator=(M52_M55&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52_M55& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52_M55* internal_default_instance() {
    return reinterpret_cast<const M52_M55*>(
               &_M52_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(M52_M55& a, M52_M55& b) {
    a.Swap(&b);
  }
  inline void Swap(M52_M55* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52_M55* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52_M55* New() const final {
    return CreateMaybeMessage<M52_M55>(nullptr);
  }

  M52_M55* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52_M55>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52_M55& from);
  void MergeFrom(const M52_M55& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52_M55* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52.M55";
  }
  protected:
  explicit M52_M55(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional fixed64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52.M55)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_M55_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52_M56_M57 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52.M56.M57) */ {
 public:
  M52_M56_M57();
  virtual ~M52_M56_M57();

  M52_M56_M57(const M52_M56_M57& from);
  M52_M56_M57(M52_M56_M57&& from) noexcept
    : M52_M56_M57() {
    *this = ::std::move(from);
  }

  inline M52_M56_M57& operator=(const M52_M56_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52_M56_M57& operator=(M52_M56_M57&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52_M56_M57& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52_M56_M57* internal_default_instance() {
    return reinterpret_cast<const M52_M56_M57*>(
               &_M52_M56_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(M52_M56_M57& a, M52_M56_M57& b) {
    a.Swap(&b);
  }
  inline void Swap(M52_M56_M57* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52_M56_M57* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52_M56_M57* New() const final {
    return CreateMaybeMessage<M52_M56_M57>(nullptr);
  }

  M52_M56_M57* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52_M56_M57>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52_M56_M57& from);
  void MergeFrom(const M52_M56_M57& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52_M56_M57* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52.M56.M57";
  }
  protected:
  explicit M52_M56_M57(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 8,
    kF1FieldNumber = 1,
    kF2FieldNumber = 7,
    kF4FieldNumber = 10,
    kF5FieldNumber = 12,
  };
  // optional string f3 = 8;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional fixed32 f2 = 7;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 f4 = 10;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int64 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 12;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52.M56.M57)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int64 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_M56_M57_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52_M56 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52.M56) */ {
 public:
  M52_M56();
  virtual ~M52_M56();

  M52_M56(const M52_M56& from);
  M52_M56(M52_M56&& from) noexcept
    : M52_M56() {
    *this = ::std::move(from);
  }

  inline M52_M56& operator=(const M52_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52_M56& operator=(M52_M56&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52_M56& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52_M56* internal_default_instance() {
    return reinterpret_cast<const M52_M56*>(
               &_M52_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(M52_M56& a, M52_M56& b) {
    a.Swap(&b);
  }
  inline void Swap(M52_M56* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52_M56* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52_M56* New() const final {
    return CreateMaybeMessage<M52_M56>(nullptr);
  }

  M52_M56* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52_M56>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52_M56& from);
  void MergeFrom(const M52_M56& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52_M56* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52.M56";
  }
  protected:
  explicit M52_M56(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M52_M56_M57 M57;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
  };
  // optional .hyperprotobench.M52.M56.M57 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M52_M56_M57& f1() const;
  ::hyperprotobench::M52_M56_M57* release_f1();
  ::hyperprotobench::M52_M56_M57* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M52_M56_M57* f1);
  private:
  const ::hyperprotobench::M52_M56_M57& _internal_f1() const;
  ::hyperprotobench::M52_M56_M57* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M52_M56_M57* f1);
  ::hyperprotobench::M52_M56_M57* unsafe_arena_release_f1();

  // optional fixed32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52.M56)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M52_M56_M57* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_M56_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M52 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M52) */ {
 public:
  M52();
  virtual ~M52();

  M52(const M52& from);
  M52(M52&& from) noexcept
    : M52() {
    *this = ::std::move(from);
  }

  inline M52& operator=(const M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline M52& operator=(M52&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M52& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M52* internal_default_instance() {
    return reinterpret_cast<const M52*>(
               &_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(M52& a, M52& b) {
    a.Swap(&b);
  }
  inline void Swap(M52* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M52* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M52* New() const final {
    return CreateMaybeMessage<M52>(nullptr);
  }

  M52* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M52>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M52& from);
  void MergeFrom(const M52& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M52* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M52";
  }
  protected:
  explicit M52(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M52_M53 M53;
  typedef M52_M54 M54;
  typedef M52_M55 M55;
  typedef M52_M56 M56;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF10FieldNumber = 19,
    kF8FieldNumber = 16,
    kF9FieldNumber = 17,
    kF12FieldNumber = 26,
    kF13FieldNumber = 27,
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF5FieldNumber = 6,
    kF6FieldNumber = 7,
    kF7FieldNumber = 8,
    kF4FieldNumber = 5,
    kF11FieldNumber = 25,
  };
  // optional bytes f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional bytes f10 = 19;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const std::string& f10() const;
  void set_f10(const std::string& value);
  void set_f10(std::string&& value);
  void set_f10(const char* value);
  void set_f10(const void* value, size_t size);
  std::string* mutable_f10();
  std::string* release_f10();
  void set_allocated_f10(std::string* f10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f10(
      std::string* f10);
  private:
  const std::string& _internal_f10() const;
  void _internal_set_f10(const std::string& value);
  std::string* _internal_mutable_f10();
  public:

  // optional .hyperprotobench.M52.M53 f8 = 16;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M52_M53& f8() const;
  ::hyperprotobench::M52_M53* release_f8();
  ::hyperprotobench::M52_M53* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M52_M53* f8);
  private:
  const ::hyperprotobench::M52_M53& _internal_f8() const;
  ::hyperprotobench::M52_M53* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M52_M53* f8);
  ::hyperprotobench::M52_M53* unsafe_arena_release_f8();

  // optional .hyperprotobench.M52.M54 f9 = 17;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M52_M54& f9() const;
  ::hyperprotobench::M52_M54* release_f9();
  ::hyperprotobench::M52_M54* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M52_M54* f9);
  private:
  const ::hyperprotobench::M52_M54& _internal_f9() const;
  ::hyperprotobench::M52_M54* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M52_M54* f9);
  ::hyperprotobench::M52_M54* unsafe_arena_release_f9();

  // optional .hyperprotobench.M52.M55 f12 = 26;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M52_M55& f12() const;
  ::hyperprotobench::M52_M55* release_f12();
  ::hyperprotobench::M52_M55* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M52_M55* f12);
  private:
  const ::hyperprotobench::M52_M55& _internal_f12() const;
  ::hyperprotobench::M52_M55* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M52_M55* f12);
  ::hyperprotobench::M52_M55* unsafe_arena_release_f12();

  // optional .hyperprotobench.M52.M56 f13 = 27;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const ::hyperprotobench::M52_M56& f13() const;
  ::hyperprotobench::M52_M56* release_f13();
  ::hyperprotobench::M52_M56* mutable_f13();
  void set_allocated_f13(::hyperprotobench::M52_M56* f13);
  private:
  const ::hyperprotobench::M52_M56& _internal_f13() const;
  ::hyperprotobench::M52_M56* _internal_mutable_f13();
  public:
  void unsafe_arena_set_allocated_f13(
      ::hyperprotobench::M52_M56* f13);
  ::hyperprotobench::M52_M56* unsafe_arena_release_f13();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional uint64 f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::uint64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::uint32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int64 f11 = 25;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M52)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f10_;
  ::hyperprotobench::M52_M53* f8_;
  ::hyperprotobench::M52_M54* f9_;
  ::hyperprotobench::M52_M55* f12_;
  ::hyperprotobench::M52_M56* f13_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int64 f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M52_ACCEL_DESCRIPTORS;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// M1_M2

// optional int64 f1 = 3;
inline bool M1_M2::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f1)
  return _internal_f1();
}
inline void M1_M2::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M2::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f1)
}

// optional bytes f2 = 4;
inline bool M1_M2::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1_M2::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f2)
  return _internal_f2();
}
inline void M1_M2::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1_M2::_internal_f2() const {
  return f2_.Get();
}
inline void M1_M2::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f2)
}
inline void M1_M2::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f2)
}
inline void M1_M2::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f2)
}

// optional int64 f3 = 5;
inline bool M1_M2::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1_M2::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f3)
  return _internal_f3();
}
inline void M1_M2::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1_M2::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f3)
}

// optional int64 f4 = 6;
inline bool M1_M2::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1_M2::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M2::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f4)
  return _internal_f4();
}
inline void M1_M2::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M1_M2::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f4)
}

// optional bytes f5 = 7;
inline bool M1_M2::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M2::has_f5() const {
  return _internal_has_f5();
}
inline void M1_M2::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M1_M2::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f5)
  return _internal_f5();
}
inline void M1_M2::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f5)
  return _internal_mutable_f5();
}
inline const std::string& M1_M2::_internal_f5() const {
  return f5_.Get();
}
inline void M1_M2::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f5)
}
inline void M1_M2::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f5)
}
inline void M1_M2::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000020u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f5)
}
inline std::string* M1_M2::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f5)
}

// optional bytes f6 = 10;
inline bool M1_M2::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M1_M2::has_f6() const {
  return _internal_has_f6();
}
inline void M1_M2::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M1_M2::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f6)
  return _internal_f6();
}
inline void M1_M2::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f6)
}
inline std::string* M1_M2::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f6)
  return _internal_mutable_f6();
}
inline const std::string& M1_M2::_internal_f6() const {
  return f6_.Get();
}
inline void M1_M2::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f6)
}
inline void M1_M2::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f6)
}
inline void M1_M2::set_f6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f6)
}
inline std::string* M1_M2::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f6)
}
inline std::string* M1_M2::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f6)
}

// optional bytes f7 = 11;
inline bool M1_M2::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M1_M2::has_f7() const {
  return _internal_has_f7();
}
inline void M1_M2::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M1_M2::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f7)
  return _internal_f7();
}
inline void M1_M2::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f7)
}
inline std::string* M1_M2::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f7)
  return _internal_mutable_f7();
}
inline const std::string& M1_M2::_internal_f7() const {
  return f7_.Get();
}
inline void M1_M2::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f7)
}
inline void M1_M2::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f7)
}
inline void M1_M2::set_f7(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f7)
}
inline std::string* M1_M2::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000200u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f7)
}
inline std::string* M1_M2::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f7)
}

// optional int64 f8 = 12;
inline bool M1_M2::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M1_M2::has_f8() const {
  return _internal_has_f8();
}
inline void M1_M2::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f8)
  return _internal_f8();
}
inline void M1_M2::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M1_M2::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f8)
}

// optional bytes f9 = 13;
inline bool M1_M2::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M1_M2::has_f9() const {
  return _internal_has_f9();
}
inline void M1_M2::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M1_M2::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f9)
  return _internal_f9();
}
inline void M1_M2::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f9)
}
inline std::string* M1_M2::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f9)
  return _internal_mutable_f9();
}
inline const std::string& M1_M2::_internal_f9() const {
  return f9_.Get();
}
inline void M1_M2::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f9)
}
inline void M1_M2::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f9)
}
inline void M1_M2::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f9)
}
inline std::string* M1_M2::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00000800u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f9)
}
inline std::string* M1_M2::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f9)
}

// optional int64 f10 = 14;
inline bool M1_M2::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M1_M2::has_f10() const {
  return _internal_has_f10();
}
inline void M1_M2::clear_f10() {
  f10_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M2::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f10)
  return _internal_f10();
}
inline void M1_M2::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  f10_ = value;
}
inline void M1_M2::set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f10)
}

// -------------------------------------------------------------------

// M1_M3

// optional int64 f1 = 1;
inline bool M1_M3::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M3::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M3::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M3::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M3::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M3.f1)
  return _internal_f1();
}
inline void M1_M3::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M3::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M3.f1)
}

// -------------------------------------------------------------------

// M1_M4_M5

// optional fixed64 f1 = 1;
inline bool M1_M4_M5::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M4_M5::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M4_M5::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M4_M5::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M4_M5::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M4.M5.f1)
  return _internal_f1();
}
inline void M1_M4_M5::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M4_M5::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M4.M5.f1)
}

// -------------------------------------------------------------------

// M1_M4_M6

// optional int64 f1 = 1;
inline bool M1_M4_M6::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M4_M6::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M4_M6::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M4_M6::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M4_M6::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M4.M6.f1)
  return _internal_f1();
}
inline void M1_M4_M6::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M4_M6::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M4.M6.f1)
}

// -------------------------------------------------------------------

// M1_M4

// optional .hyperprotobench.M1.M4.M5 f1 = 1;
inline bool M1_M4::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1_M4::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M4::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M4_M5& M1_M4::_internal_f1() const {
  const ::hyperprotobench::M1_M4_M5* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M4_M5*>(
      &::hyperprotobench::_M1_M4_M5_default_instance_);
}
inline const ::hyperprotobench::M1_M4_M5& M1_M4::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M4.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M4_M5* M1_M4::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M4_M5* M1_M4::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M4.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M4_M5* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M4_M5* M1_M4::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M4_M5>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M4_M5* M1_M4::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M4.f1)
  return _internal_mutable_f1();
}
inline void M1_M4::set_allocated_f1(::hyperprotobench::M1_M4_M5* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M4.f1)
}

// optional .hyperprotobench.M1.M4.M6 f2 = 2;
inline bool M1_M4::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M1_M4::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M4::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M1_M4_M6& M1_M4::_internal_f2() const {
  const ::hyperprotobench::M1_M4_M6* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M4_M6*>(
      &::hyperprotobench::_M1_M4_M6_default_instance_);
}
inline const ::hyperprotobench::M1_M4_M6& M1_M4::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M4.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M1_M4_M6* M1_M4::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M4_M6* M1_M4::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M4.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M1_M4_M6* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M4_M6* M1_M4::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M4_M6>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M1_M4_M6* M1_M4::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M4.f2)
  return _internal_mutable_f2();
}
inline void M1_M4::set_allocated_f2(::hyperprotobench::M1_M4_M6* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M4.f2)
}

// optional int64 f3 = 6;
inline bool M1_M4::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1_M4::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M4::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M4::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M4::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M4.f3)
  return _internal_f3();
}
inline void M1_M4::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M1_M4::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M4.f3)
}

// -------------------------------------------------------------------

// M1_M7

// optional string f1 = 2;
inline bool M1_M7::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M7::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M7::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M7::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M7.f1)
  return _internal_f1();
}
inline void M1_M7::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M7.f1)
}
inline std::string* M1_M7::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M7.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M7::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M7::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M7::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M7.f1)
}
inline void M1_M7::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M7.f1)
}
inline void M1_M7::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M7.f1)
}
inline std::string* M1_M7::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M7::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M7.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M7::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M7.f1)
}
inline std::string* M1_M7::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M7.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M7::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M7.f1)
}

// optional string f2 = 3;
inline bool M1_M7::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M7::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M7::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1_M7::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M7.f2)
  return _internal_f2();
}
inline void M1_M7::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M7.f2)
}
inline std::string* M1_M7::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M7.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1_M7::_internal_f2() const {
  return f2_.Get();
}
inline void M1_M7::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M7::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M7.f2)
}
inline void M1_M7::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M7.f2)
}
inline void M1_M7::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M7.f2)
}
inline std::string* M1_M7::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M7::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M7.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M7::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M7.f2)
}
inline std::string* M1_M7::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M7.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M7::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M7.f2)
}

// optional bool f3 = 4;
inline bool M1_M7::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1_M7::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M7::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool M1_M7::_internal_f3() const {
  return f3_;
}
inline bool M1_M7::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M7.f3)
  return _internal_f3();
}
inline void M1_M7::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1_M7::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M7.f3)
}

// optional bool f4 = 6;
inline bool M1_M7::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M7::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M7::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool M1_M7::_internal_f4() const {
  return f4_;
}
inline bool M1_M7::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M7.f4)
  return _internal_f4();
}
inline void M1_M7::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M1_M7::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M7.f4)
}

// -------------------------------------------------------------------

// M1_M8_M9

// optional int64 f1 = 1;
inline bool M1_M8_M9::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M8_M9::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M8_M9::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M8_M9::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1_M8_M9::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.M9.f1)
  return _internal_f1();
}
inline void M1_M8_M9::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M1_M8_M9::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.M9.f1)
}

// optional bool f2 = 2;
inline bool M1_M8_M9::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M8_M9::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M8_M9::clear_f2() {
  f2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool M1_M8_M9::_internal_f2() const {
  return f2_;
}
inline bool M1_M8_M9::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.M9.f2)
  return _internal_f2();
}
inline void M1_M8_M9::_internal_set_f2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1_M8_M9::set_f2(bool value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.M9.f2)
}

// repeated bytes f3 = 3;
inline int M1_M8_M9::_internal_f3_size() const {
  return f3_.size();
}
inline int M1_M8_M9::f3_size() const {
  return _internal_f3_size();
}
inline void M1_M8_M9::clear_f3() {
  f3_.Clear();
}
inline std::string* M1_M8_M9::add_f3() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M1.M8.M9.f3)
  return _internal_add_f3();
}
inline const std::string& M1_M8_M9::_internal_f3(int index) const {
  return f3_.Get(index);
}
inline const std::string& M1_M8_M9::f3(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.M9.f3)
  return _internal_f3(index);
}
inline std::string* M1_M8_M9::mutable_f3(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M8.M9.f3)
  return f3_.Mutable(index);
}
inline void M1_M8_M9::set_f3(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.M9.f3)
  f3_.Mutable(index)->assign(value);
}
inline void M1_M8_M9::set_f3(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.M9.f3)
  f3_.Mutable(index)->assign(std::move(value));
}
inline void M1_M8_M9::set_f3(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M8.M9.f3)
}
inline void M1_M8_M9::set_f3(int index, const void* value, size_t size) {
  f3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M8.M9.f3)
}
inline std::string* M1_M8_M9::_internal_add_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Add();
}
inline void M1_M8_M9::add_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M1.M8.M9.f3)
}
inline void M1_M8_M9::add_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M1.M8.M9.f3)
}
inline void M1_M8_M9::add_f3(const char* value) {
  _has_bits_[0] |= 0x00000008u;
  GOOGLE_DCHECK(value != nullptr);
  f3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M1.M8.M9.f3)
}
inline void M1_M8_M9::add_f3(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M1.M8.M9.f3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M1_M8_M9::f3() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M1.M8.M9.f3)
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M1_M8_M9::mutable_f3() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M1.M8.M9.f3)
  return &f3_;
}

// optional bytes f4 = 5;
inline bool M1_M8_M9::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M8_M9::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M8_M9::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M1_M8_M9::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.M9.f4)
  return _internal_f4();
}
inline void M1_M8_M9::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.M9.f4)
}
inline std::string* M1_M8_M9::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M8.M9.f4)
  return _internal_mutable_f4();
}
inline const std::string& M1_M8_M9::_internal_f4() const {
  return f4_.Get();
}
inline void M1_M8_M9::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M8_M9::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M8.M9.f4)
}
inline void M1_M8_M9::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M8.M9.f4)
}
inline void M1_M8_M9::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M8.M9.f4)
}
inline std::string* M1_M8_M9::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M8_M9::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M8.M9.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M8_M9::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M8.M9.f4)
}
inline std::string* M1_M8_M9::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M8.M9.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M8_M9::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M8.M9.f4)
}

// -------------------------------------------------------------------

// M1_M8

// optional bytes f1 = 4;
inline bool M1_M8::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M8::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M8::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M8::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.f1)
  return _internal_f1();
}
inline void M1_M8::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.f1)
}
inline std::string* M1_M8::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M8.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M8::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M8::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M8::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M8.f1)
}
inline void M1_M8::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M8.f1)
}
inline void M1_M8::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M8.f1)
}
inline std::string* M1_M8::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M8::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M8.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M8::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M8.f1)
}
inline std::string* M1_M8::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M8.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M8::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M8.f1)
}

// optional .hyperprotobench.M1.M8.M9 f2 = 5;
inline bool M1_M8::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M1_M8::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M8::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M1_M8_M9& M1_M8::_internal_f2() const {
  const ::hyperprotobench::M1_M8_M9* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M8_M9*>(
      &::hyperprotobench::_M1_M8_M9_default_instance_);
}
inline const ::hyperprotobench::M1_M8_M9& M1_M8::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M1_M8_M9* M1_M8::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M8_M9* M1_M8::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M8.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M1_M8_M9* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M8_M9* M1_M8::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M8_M9>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M1_M8_M9* M1_M8::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M8.f2)
  return _internal_mutable_f2();
}
inline void M1_M8::set_allocated_f2(::hyperprotobench::M1_M8_M9* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M8.f2)
}

// optional bool f3 = 7;
inline bool M1_M8::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1_M8::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M8::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M1_M8::_internal_f3() const {
  return f3_;
}
inline bool M1_M8::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.f3)
  return _internal_f3();
}
inline void M1_M8::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M1_M8::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.f3)
}

// optional uint64 f4 = 11;
inline bool M1_M8::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M1_M8::has_f4() const {
  return _internal_has_f4();
}
inline void M1_M8::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M8::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1_M8::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M8.f4)
  return _internal_f4();
}
inline void M1_M8::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  f4_ = value;
}
inline void M1_M8::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M8.f4)
}

// -------------------------------------------------------------------

// M1

// optional .hyperprotobench.M1.M2 f1 = 2;
inline bool M1::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M1::has_f1() const {
  return _internal_has_f1();
}
inline void M1::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M1_M2& M1::_internal_f1() const {
  const ::hyperprotobench::M1_M2* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2*>(
      &::hyperprotobench::_M1_M2_default_instance_);
}
inline const ::hyperprotobench::M1_M2& M1::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M1_M2* M1::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M1_M2* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M1_M2* M1::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f1)
  return _internal_mutable_f1();
}
inline void M1::set_allocated_f1(::hyperprotobench::M1_M2* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f1)
}

// optional .hyperprotobench.M1.E1 f2 = 3;
inline bool M1::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1::has_f2() const {
  return _internal_has_f2();
}
inline void M1::clear_f2() {
  f2_ = 10;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M1_E1 M1::_internal_f2() const {
  return static_cast< ::hyperprotobench::M1_E1 >(f2_);
}
inline ::hyperprotobench::M1_E1 M1::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f2)
  return _internal_f2();
}
inline void M1::_internal_set_f2(::hyperprotobench::M1_E1 value) {
  assert(::hyperprotobench::M1_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M1::set_f2(::hyperprotobench::M1_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f2)
}

// optional int64 f3 = 4;
inline bool M1::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1::has_f3() const {
  return _internal_has_f3();
}
inline void M1::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f3)
  return _internal_f3();
}
inline void M1::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M1::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f3)
}

// optional int32 f4 = 5;
inline bool M1::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M1::has_f4() const {
  return _internal_has_f4();
}
inline void M1::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f4)
  return _internal_f4();
}
inline void M1::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M1::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f4)
}

// optional fixed64 f5 = 6;
inline bool M1::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1::has_f5() const {
  return _internal_has_f5();
}
inline void M1::clear_f5() {
  f5_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f5)
  return _internal_f5();
}
inline void M1::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M1::set_f5(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f5)
}

// optional .hyperprotobench.M1.M3 f6 = 9;
inline bool M1::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M1::has_f6() const {
  return _internal_has_f6();
}
inline void M1::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M1_M3& M1::_internal_f6() const {
  const ::hyperprotobench::M1_M3* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M3*>(
      &::hyperprotobench::_M1_M3_default_instance_);
}
inline const ::hyperprotobench::M1_M3& M1::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M1_M3* M1::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M3* M1::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f6)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M1_M3* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M3* M1::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M3>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M1_M3* M1::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f6)
  return _internal_mutable_f6();
}
inline void M1::set_allocated_f6(::hyperprotobench::M1_M3* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f6)
}

// optional int64 f7 = 15;
inline bool M1::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M1::has_f7() const {
  return _internal_has_f7();
}
inline void M1::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f7)
  return _internal_f7();
}
inline void M1::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f7_ = value;
}
inline void M1::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f7)
}

// optional fixed64 f8 = 16;
inline bool M1::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M1::has_f8() const {
  return _internal_has_f8();
}
inline void M1::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f8)
  return _internal_f8();
}
inline void M1::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  f8_ = value;
}
inline void M1::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f8)
}

// optional fixed32 f9 = 17;
inline bool M1::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M1::has_f9() const {
  return _internal_has_f9();
}
inline void M1::clear_f9() {
  f9_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f9)
  return _internal_f9();
}
inline void M1::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  f9_ = value;
}
inline void M1::set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f9)
}

// optional bool f10 = 18;
inline bool M1::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M1::has_f10() const {
  return _internal_has_f10();
}
inline void M1::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool M1::_internal_f10() const {
  return f10_;
}
inline bool M1::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f10)
  return _internal_f10();
}
inline void M1::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00020000u;
  f10_ = value;
}
inline void M1::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f10)
}

// optional fixed64 f11 = 19;
inline bool M1::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M1::has_f11() const {
  return _internal_has_f11();
}
inline void M1::clear_f11() {
  f11_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f11)
  return _internal_f11();
}
inline void M1::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  f11_ = value;
}
inline void M1::set_f11(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f11)
}

// optional .hyperprotobench.M1.E2 f12 = 20;
inline bool M1::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M1::has_f12() const {
  return _internal_has_f12();
}
inline void M1::clear_f12() {
  f12_ = 9;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::hyperprotobench::M1_E2 M1::_internal_f12() const {
  return static_cast< ::hyperprotobench::M1_E2 >(f12_);
}
inline ::hyperprotobench::M1_E2 M1::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f12)
  return _internal_f12();
}
inline void M1::_internal_set_f12(::hyperprotobench::M1_E2 value) {
  assert(::hyperprotobench::M1_E2_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  f12_ = value;
}
inline void M1::set_f12(::hyperprotobench::M1_E2 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f12)
}

// optional .hyperprotobench.M1.M4 f13 = 21;
inline bool M1::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || f13_ != nullptr);
  return value;
}
inline bool M1::has_f13() const {
  return _internal_has_f13();
}
inline void M1::clear_f13() {
  if (f13_ != nullptr) f13_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::hyperprotobench::M1_M4& M1::_internal_f13() const {
  const ::hyperprotobench::M1_M4* p = f13_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M4*>(
      &::hyperprotobench::_M1_M4_default_instance_);
}
inline const ::hyperprotobench::M1_M4& M1::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f13)
  return _internal_f13();
}
inline ::hyperprotobench::M1_M4* M1::release_f13() {
  auto temp = unsafe_arena_release_f13();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M4* M1::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f13)
  _has_bits_[0] &= ~0x00100000u;
  ::hyperprotobench::M1_M4* temp = f13_;
  f13_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M4* M1::_internal_mutable_f13() {
  _has_bits_[0] |= 0x00100000u;
  if (f13_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M4>(GetArenaNoVirtual());
    f13_ = p;
  }
  return f13_;
}
inline ::hyperprotobench::M1_M4* M1::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f13)
  return _internal_mutable_f13();
}
inline void M1::set_allocated_f13(::hyperprotobench::M1_M4* f13) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f13_;
  }
  if (f13) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f13);
    if (message_arena != submessage_arena) {
      f13 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f13, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f13_ = f13;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f13)
}

// optional uint64 f14 = 22;
inline bool M1::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool M1::has_f14() const {
  return _internal_has_f14();
}
inline void M1::clear_f14() {
  f14_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::_internal_f14() const {
  return f14_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M1::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f14)
  return _internal_f14();
}
inline void M1::_internal_set_f14(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  f14_ = value;
}
inline void M1::set_f14(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f14(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f14)
}

// optional double f15 = 23;
inline bool M1::_internal_has_f15() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M1::has_f15() const {
  return _internal_has_f15();
}
inline void M1::clear_f15() {
  f15_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double M1::_internal_f15() const {
  return f15_;
}
inline double M1::f15() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f15)
  return _internal_f15();
}
inline void M1::_internal_set_f15(double value) {
  _has_bits_[0] |= 0x00400000u;
  f15_ = value;
}
inline void M1::set_f15(double value) {
  _internal_set_f15(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f15)
}

// optional .hyperprotobench.M1.M7 f16 = 24;
inline bool M1::_internal_has_f16() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || f16_ != nullptr);
  return value;
}
inline bool M1::has_f16() const {
  return _internal_has_f16();
}
inline void M1::clear_f16() {
  if (f16_ != nullptr) f16_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::hyperprotobench::M1_M7& M1::_internal_f16() const {
  const ::hyperprotobench::M1_M7* p = f16_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M7*>(
      &::hyperprotobench::_M1_M7_default_instance_);
}
inline const ::hyperprotobench::M1_M7& M1::f16() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f16)
  return _internal_f16();
}
inline ::hyperprotobench::M1_M7* M1::release_f16() {
  auto temp = unsafe_arena_release_f16();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M7* M1::unsafe_arena_release_f16() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f16)
  _has_bits_[0] &= ~0x00800000u;
  ::hyperprotobench::M1_M7* temp = f16_;
  f16_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M7* M1::_internal_mutable_f16() {
  _has_bits_[0] |= 0x00800000u;
  if (f16_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M7>(GetArenaNoVirtual());
    f16_ = p;
  }
  return f16_;
}
inline ::hyperprotobench::M1_M7* M1::mutable_f16() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f16)
  return _internal_mutable_f16();
}
inline void M1::set_allocated_f16(::hyperprotobench::M1_M7* f16) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f16_;
  }
  if (f16) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f16);
    if (message_arena != submessage_arena) {
      f16 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f16, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  f16_ = f16;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f16)
}

// optional .hyperprotobench.M1.M8 f17 = 25;
inline bool M1::_internal_has_f17() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || f17_ != nullptr);
  return value;
}
inline bool M1::has_f17() const {
  return _internal_has_f17();
}
inline void M1::clear_f17() {
  if (f17_ != nullptr) f17_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
inline const ::hyperprotobench::M1_M8& M1::_internal_f17() const {
  const ::hyperprotobench::M1_M8* p = f17_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M8*>(
      &::hyperprotobench::_M1_M8_default_instance_);
}
inline const ::hyperprotobench::M1_M8& M1::f17() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f17)
  return _internal_f17();
}
inline ::hyperprotobench::M1_M8* M1::release_f17() {
  auto temp = unsafe_arena_release_f17();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M8* M1::unsafe_arena_release_f17() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f17)
  _has_bits_[0] &= ~0x01000000u;
  ::hyperprotobench::M1_M8* temp = f17_;
  f17_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M8* M1::_internal_mutable_f17() {
  _has_bits_[0] |= 0x01000000u;
  if (f17_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M8>(GetArenaNoVirtual());
    f17_ = p;
  }
  return f17_;
}
inline ::hyperprotobench::M1_M8* M1::mutable_f17() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f17)
  return _internal_mutable_f17();
}
inline void M1::set_allocated_f17(::hyperprotobench::M1_M8* f17) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f17_;
  }
  if (f17) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f17);
    if (message_arena != submessage_arena) {
      f17 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f17, submessage_arena);
    }
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  f17_ = f17;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f17)
}

// -------------------------------------------------------------------

// M10_M11_M12

// optional int32 f1 = 1;
inline bool M10_M11_M12::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M10_M11_M12::has_f1() const {
  return _internal_has_f1();
}
inline void M10_M11_M12::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10_M11_M12::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10_M11_M12::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M11.M12.f1)
  return _internal_f1();
}
inline void M10_M11_M12::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M10_M11_M12::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M11.M12.f1)
}

// optional int32 f2 = 2;
inline bool M10_M11_M12::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M10_M11_M12::has_f2() const {
  return _internal_has_f2();
}
inline void M10_M11_M12::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10_M11_M12::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10_M11_M12::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M11.M12.f2)
  return _internal_f2();
}
inline void M10_M11_M12::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M10_M11_M12::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M11.M12.f2)
}

// -------------------------------------------------------------------

// M10_M11

// optional .hyperprotobench.M10.M11.M12 f1 = 1;
inline bool M10_M11::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M10_M11::has_f1() const {
  return _internal_has_f1();
}
inline void M10_M11::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M10_M11_M12& M10_M11::_internal_f1() const {
  const ::hyperprotobench::M10_M11_M12* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M10_M11_M12*>(
      &::hyperprotobench::_M10_M11_M12_default_instance_);
}
inline const ::hyperprotobench::M10_M11_M12& M10_M11::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M11.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M10_M11_M12* M10_M11::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M10_M11_M12* M10_M11::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.M11.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M10_M11_M12* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M10_M11_M12* M10_M11::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M10_M11_M12>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M10_M11_M12* M10_M11::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.M11.f1)
  return _internal_mutable_f1();
}
inline void M10_M11::set_allocated_f1(::hyperprotobench::M10_M11_M12* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.M11.f1)
}

// optional bytes f2 = 8;
inline bool M10_M11::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M10_M11::has_f2() const {
  return _internal_has_f2();
}
inline void M10_M11::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M10_M11::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M11.f2)
  return _internal_f2();
}
inline void M10_M11::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M11.f2)
}
inline std::string* M10_M11::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.M11.f2)
  return _internal_mutable_f2();
}
inline const std::string& M10_M11::_internal_f2() const {
  return f2_.Get();
}
inline void M10_M11::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M10_M11::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M10.M11.f2)
}
inline void M10_M11::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M10.M11.f2)
}
inline void M10_M11::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M10.M11.f2)
}
inline std::string* M10_M11::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000100u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M10_M11::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.M11.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M10_M11::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.M11.f2)
}
inline std::string* M10_M11::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M10.M11.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M10_M11::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.M11.f2)
}

// -------------------------------------------------------------------

// M10_M13

// optional bytes f1 = 2;
inline bool M10_M13::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M10_M13::has_f1() const {
  return _internal_has_f1();
}
inline void M10_M13::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M10_M13::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M13.f1)
  return _internal_f1();
}
inline void M10_M13::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M13.f1)
}
inline std::string* M10_M13::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.M13.f1)
  return _internal_mutable_f1();
}
inline const std::string& M10_M13::_internal_f1() const {
  return f1_.Get();
}
inline void M10_M13::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M10_M13::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M10.M13.f1)
}
inline void M10_M13::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M10.M13.f1)
}
inline void M10_M13::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M10.M13.f1)
}
inline std::string* M10_M13::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M10_M13::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.M13.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M10_M13::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.M13.f1)
}
inline std::string* M10_M13::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M10.M13.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M10_M13::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.M13.f1)
}

// optional fixed64 f2 = 3;
inline bool M10_M13::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M10_M13::has_f2() const {
  return _internal_has_f2();
}
inline void M10_M13::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10_M13::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10_M13::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M13.f2)
  return _internal_f2();
}
inline void M10_M13::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M10_M13::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M13.f2)
}

// optional fixed32 f3 = 4;
inline bool M10_M13::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M10_M13::has_f3() const {
  return _internal_has_f3();
}
inline void M10_M13::clear_f3() {
  f3_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M10_M13::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M10_M13::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M13.f3)
  return _internal_f3();
}
inline void M10_M13::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M10_M13::set_f3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M13.f3)
}

// optional fixed32 f4 = 5;
inline bool M10_M13::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M10_M13::has_f4() const {
  return _internal_has_f4();
}
inline void M10_M13::clear_f4() {
  f4_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M10_M13::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M10_M13::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M13.f4)
  return _internal_f4();
}
inline void M10_M13::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M10_M13::set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M13.f4)
}

// optional bool f5 = 8;
inline bool M10_M13::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M10_M13::has_f5() const {
  return _internal_has_f5();
}
inline void M10_M13::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool M10_M13::_internal_f5() const {
  return f5_;
}
inline bool M10_M13::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M13.f5)
  return _internal_f5();
}
inline void M10_M13::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M10_M13::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M13.f5)
}

// -------------------------------------------------------------------

// M10_M14

// optional int64 f1 = 1;
inline bool M10_M14::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M10_M14::has_f1() const {
  return _internal_has_f1();
}
inline void M10_M14::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10_M14::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10_M14::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M14.f1)
  return _internal_f1();
}
inline void M10_M14::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M10_M14::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M14.f1)
}

// optional double f2 = 2;
inline bool M10_M14::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M10_M14::has_f2() const {
  return _internal_has_f2();
}
inline void M10_M14::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double M10_M14::_internal_f2() const {
  return f2_;
}
inline double M10_M14::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M14.f2)
  return _internal_f2();
}
inline void M10_M14::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M10_M14::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M14.f2)
}

// optional bool f3 = 5;
inline bool M10_M14::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M10_M14::has_f3() const {
  return _internal_has_f3();
}
inline void M10_M14::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool M10_M14::_internal_f3() const {
  return f3_;
}
inline bool M10_M14::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M14.f3)
  return _internal_f3();
}
inline void M10_M14::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M10_M14::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M14.f3)
}

// optional int64 f4 = 7;
inline bool M10_M14::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M10_M14::has_f4() const {
  return _internal_has_f4();
}
inline void M10_M14::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10_M14::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10_M14::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.M14.f4)
  return _internal_f4();
}
inline void M10_M14::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M10_M14::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.M14.f4)
}

// -------------------------------------------------------------------

// M10

// optional int32 f1 = 1;
inline bool M10::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M10::has_f1() const {
  return _internal_has_f1();
}
inline void M10::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f1)
  return _internal_f1();
}
inline void M10::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M10::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f1)
}

// optional .hyperprotobench.M10.M11 f2 = 2;
inline bool M10::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M10::has_f2() const {
  return _internal_has_f2();
}
inline void M10::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M10_M11& M10::_internal_f2() const {
  const ::hyperprotobench::M10_M11* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M10_M11*>(
      &::hyperprotobench::_M10_M11_default_instance_);
}
inline const ::hyperprotobench::M10_M11& M10::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M10_M11* M10::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M10_M11* M10::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M10_M11* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M10_M11* M10::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M10_M11>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M10_M11* M10::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.f2)
  return _internal_mutable_f2();
}
inline void M10::set_allocated_f2(::hyperprotobench::M10_M11* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.f2)
}

// optional .hyperprotobench.M10.M13 f3 = 4;
inline bool M10::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M10::has_f3() const {
  return _internal_has_f3();
}
inline void M10::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hyperprotobench::M10_M13& M10::_internal_f3() const {
  const ::hyperprotobench::M10_M13* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M10_M13*>(
      &::hyperprotobench::_M10_M13_default_instance_);
}
inline const ::hyperprotobench::M10_M13& M10::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M10_M13* M10::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M10_M13* M10::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.f3)
  _has_bits_[0] &= ~0x00000010u;
  ::hyperprotobench::M10_M13* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M10_M13* M10::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M10_M13>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M10_M13* M10::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.f3)
  return _internal_mutable_f3();
}
inline void M10::set_allocated_f3(::hyperprotobench::M10_M13* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.f3)
}

// optional int64 f4 = 5;
inline bool M10::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M10::has_f4() const {
  return _internal_has_f4();
}
inline void M10::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M10::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f4)
  return _internal_f4();
}
inline void M10::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M10::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f4)
}

// optional .hyperprotobench.M10.M14 f5 = 7;
inline bool M10::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M10::has_f5() const {
  return _internal_has_f5();
}
inline void M10::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::hyperprotobench::M10_M14& M10::_internal_f5() const {
  const ::hyperprotobench::M10_M14* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M10_M14*>(
      &::hyperprotobench::_M10_M14_default_instance_);
}
inline const ::hyperprotobench::M10_M14& M10::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M10_M14* M10::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M10_M14* M10::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.f5)
  _has_bits_[0] &= ~0x00000080u;
  ::hyperprotobench::M10_M14* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M10_M14* M10::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M10_M14>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M10_M14* M10::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.f5)
  return _internal_mutable_f5();
}
inline void M10::set_allocated_f5(::hyperprotobench::M10_M14* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.f5)
}

// optional bytes f6 = 8;
inline bool M10::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M10::has_f6() const {
  return _internal_has_f6();
}
inline void M10::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M10::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f6)
  return _internal_f6();
}
inline void M10::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f6)
}
inline std::string* M10::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M10.f6)
  return _internal_mutable_f6();
}
inline const std::string& M10::_internal_f6() const {
  return f6_.Get();
}
inline void M10::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M10::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M10.f6)
}
inline void M10::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M10.f6)
}
inline void M10::set_f6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M10.f6)
}
inline std::string* M10::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000100u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M10::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M10.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M10::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M10.f6)
}
inline std::string* M10::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M10.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M10::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M10.f6)
}

// optional uint64 f7 = 9;
inline bool M10::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M10::has_f7() const {
  return _internal_has_f7();
}
inline void M10::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f7)
  return _internal_f7();
}
inline void M10::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M10::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f7)
}

// optional fixed64 f8 = 10;
inline bool M10::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M10::has_f8() const {
  return _internal_has_f8();
}
inline void M10::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f8)
  return _internal_f8();
}
inline void M10::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M10::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f8)
}

// optional int32 f9 = 11;
inline bool M10::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M10::has_f9() const {
  return _internal_has_f9();
}
inline void M10::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M10::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f9)
  return _internal_f9();
}
inline void M10::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  f9_ = value;
}
inline void M10::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f9)
}

// optional fixed64 f10 = 12;
inline bool M10::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M10::has_f10() const {
  return _internal_has_f10();
}
inline void M10::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M10::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M10.f10)
  return _internal_f10();
}
inline void M10::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  f10_ = value;
}
inline void M10::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M10.f10)
}

// -------------------------------------------------------------------

// M15_M16

// optional fixed32 f1 = 1;
inline bool M15_M16::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15_M16::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M16::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15_M16::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15_M16::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f1)
  return _internal_f1();
}
inline void M15_M16::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M15_M16::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f1)
}

// optional bytes f2 = 4;
inline bool M15_M16::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M15_M16::has_f2() const {
  return _internal_has_f2();
}
inline void M15_M16::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M15_M16::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f2)
  return _internal_f2();
}
inline void M15_M16::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f2)
}
inline std::string* M15_M16::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M16.f2)
  return _internal_mutable_f2();
}
inline const std::string& M15_M16::_internal_f2() const {
  return f2_.Get();
}
inline void M15_M16::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15_M16::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.M16.f2)
}
inline void M15_M16::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.M16.f2)
}
inline void M15_M16::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.M16.f2)
}
inline std::string* M15_M16::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15_M16::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M16.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15_M16::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M16.f2)
}
inline std::string* M15_M16::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.M16.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15_M16::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M16.f2)
}

// repeated bytes f3 = 5;
inline int M15_M16::_internal_f3_size() const {
  return f3_.size();
}
inline int M15_M16::f3_size() const {
  return _internal_f3_size();
}
inline void M15_M16::clear_f3() {
  f3_.Clear();
}
inline std::string* M15_M16::add_f3() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M15.M16.f3)
  return _internal_add_f3();
}
inline const std::string& M15_M16::_internal_f3(int index) const {
  return f3_.Get(index);
}
inline const std::string& M15_M16::f3(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f3)
  return _internal_f3(index);
}
inline std::string* M15_M16::mutable_f3(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M16.f3)
  return f3_.Mutable(index);
}
inline void M15_M16::set_f3(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f3)
  f3_.Mutable(index)->assign(value);
}
inline void M15_M16::set_f3(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f3)
  f3_.Mutable(index)->assign(std::move(value));
}
inline void M15_M16::set_f3(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f3_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.M16.f3)
}
inline void M15_M16::set_f3(int index, const void* value, size_t size) {
  f3_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.M16.f3)
}
inline std::string* M15_M16::_internal_add_f3() {
  _has_bits_[0] |= 0x00000020u;
  return f3_.Add();
}
inline void M15_M16::add_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M15.M16.f3)
}
inline void M15_M16::add_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M15.M16.f3)
}
inline void M15_M16::add_f3(const char* value) {
  _has_bits_[0] |= 0x00000020u;
  GOOGLE_DCHECK(value != nullptr);
  f3_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M15.M16.f3)
}
inline void M15_M16::add_f3(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M15.M16.f3)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M15_M16::f3() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M15.M16.f3)
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M15_M16::mutable_f3() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M15.M16.f3)
  return &f3_;
}

// optional string f4 = 8;
inline bool M15_M16::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M15_M16::has_f4() const {
  return _internal_has_f4();
}
inline void M15_M16::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M15_M16::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f4)
  return _internal_f4();
}
inline void M15_M16::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f4)
}
inline std::string* M15_M16::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M16.f4)
  return _internal_mutable_f4();
}
inline const std::string& M15_M16::_internal_f4() const {
  return f4_.Get();
}
inline void M15_M16::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15_M16::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.M16.f4)
}
inline void M15_M16::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.M16.f4)
}
inline void M15_M16::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.M16.f4)
}
inline std::string* M15_M16::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000100u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15_M16::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M16.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15_M16::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M16.f4)
}
inline std::string* M15_M16::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.M16.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15_M16::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M16.f4)
}

// optional int64 f5 = 10;
inline bool M15_M16::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M15_M16::has_f5() const {
  return _internal_has_f5();
}
inline void M15_M16::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M16::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M16::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f5)
  return _internal_f5();
}
inline void M15_M16::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f5_ = value;
}
inline void M15_M16::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f5)
}

// optional string f6 = 14;
inline bool M15_M16::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M15_M16::has_f6() const {
  return _internal_has_f6();
}
inline void M15_M16::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M15_M16::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f6)
  return _internal_f6();
}
inline void M15_M16::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f6)
}
inline std::string* M15_M16::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M16.f6)
  return _internal_mutable_f6();
}
inline const std::string& M15_M16::_internal_f6() const {
  return f6_.Get();
}
inline void M15_M16::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15_M16::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.M16.f6)
}
inline void M15_M16::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.M16.f6)
}
inline void M15_M16::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.M16.f6)
}
inline std::string* M15_M16::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00004000u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15_M16::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M16.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15_M16::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M16.f6)
}
inline std::string* M15_M16::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.M16.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15_M16::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M16.f6)
}

// optional int64 f7 = 15;
inline bool M15_M16::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M15_M16::has_f7() const {
  return _internal_has_f7();
}
inline void M15_M16::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M16::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M16::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f7)
  return _internal_f7();
}
inline void M15_M16::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  f7_ = value;
}
inline void M15_M16::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f7)
}

// -------------------------------------------------------------------

// M15_M17_M18

// optional bytes f1 = 1;
inline bool M15_M17_M18::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15_M17_M18::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M17_M18::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M15_M17_M18::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M17.M18.f1)
  return _internal_f1();
}
inline void M15_M17_M18::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M17.M18.f1)
}
inline std::string* M15_M17_M18::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M17.M18.f1)
  return _internal_mutable_f1();
}
inline const std::string& M15_M17_M18::_internal_f1() const {
  return f1_.Get();
}
inline void M15_M17_M18::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15_M17_M18::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.M17.M18.f1)
}
inline void M15_M17_M18::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.M17.M18.f1)
}
inline void M15_M17_M18::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.M17.M18.f1)
}
inline std::string* M15_M17_M18::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15_M17_M18::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M17.M18.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15_M17_M18::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M17.M18.f1)
}
inline std::string* M15_M17_M18::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.M17.M18.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15_M17_M18::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.M17.M18.f1)
}

// -------------------------------------------------------------------

// M15_M17_M19

// optional int64 f1 = 2;
inline bool M15_M17_M19::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15_M17_M19::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M17_M19::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M17_M19::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M17_M19::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M17.M19.f1)
  return _internal_f1();
}
inline void M15_M17_M19::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M15_M17_M19::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M17.M19.f1)
}

// -------------------------------------------------------------------

// M15_M17

// optional .hyperprotobench.M15.M17.M18 f1 = 1;
inline bool M15_M17::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M15_M17::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M17::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M15_M17_M18& M15_M17::_internal_f1() const {
  const ::hyperprotobench::M15_M17_M18* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M17_M18*>(
      &::hyperprotobench::_M15_M17_M18_default_instance_);
}
inline const ::hyperprotobench::M15_M17_M18& M15_M17::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M17.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M15_M17_M18* M15_M17::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M17_M18* M15_M17::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M17.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M15_M17_M18* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M17_M18* M15_M17::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M17_M18>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M15_M17_M18* M15_M17::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M17.f1)
  return _internal_mutable_f1();
}
inline void M15_M17::set_allocated_f1(::hyperprotobench::M15_M17_M18* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M17.f1)
}

// optional .hyperprotobench.M15.M17.M19 f2 = 2;
inline bool M15_M17::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M15_M17::has_f2() const {
  return _internal_has_f2();
}
inline void M15_M17::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M15_M17_M19& M15_M17::_internal_f2() const {
  const ::hyperprotobench::M15_M17_M19* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M17_M19*>(
      &::hyperprotobench::_M15_M17_M19_default_instance_);
}
inline const ::hyperprotobench::M15_M17_M19& M15_M17::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M17.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M15_M17_M19* M15_M17::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M17_M19* M15_M17::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.M17.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M15_M17_M19* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M17_M19* M15_M17::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M17_M19>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M15_M17_M19* M15_M17::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.M17.f2)
  return _internal_mutable_f2();
}
inline void M15_M17::set_allocated_f2(::hyperprotobench::M15_M17_M19* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.M17.f2)
}

// optional int64 f3 = 7;
inline bool M15_M17::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M15_M17::has_f3() const {
  return _internal_has_f3();
}
inline void M15_M17::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M17::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M17::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M17.f3)
  return _internal_f3();
}
inline void M15_M17::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f3_ = value;
}
inline void M15_M17::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M17.f3)
}

// -------------------------------------------------------------------

// M15_M20

// optional int64 f1 = 2;
inline bool M15_M20::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15_M20::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M20::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M20::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M20::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M20.f1)
  return _internal_f1();
}
inline void M15_M20::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M15_M20::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M20.f1)
}

// optional int64 f2 = 3;
inline bool M15_M20::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M15_M20::has_f2() const {
  return _internal_has_f2();
}
inline void M15_M20::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M20::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15_M20::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M20.f2)
  return _internal_f2();
}
inline void M15_M20::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M15_M20::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M20.f2)
}

// -------------------------------------------------------------------

// M15

// optional string f1 = 2;
inline bool M15::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15::has_f1() const {
  return _internal_has_f1();
}
inline void M15::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M15::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f1)
  return _internal_f1();
}
inline void M15::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f1)
}
inline std::string* M15::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f1)
  return _internal_mutable_f1();
}
inline const std::string& M15::_internal_f1() const {
  return f1_.Get();
}
inline void M15::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.f1)
}
inline void M15::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.f1)
}
inline void M15::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.f1)
}
inline std::string* M15::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f1)
}
inline std::string* M15::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f1)
}

// optional fixed32 f2 = 3;
inline bool M15::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M15::has_f2() const {
  return _internal_has_f2();
}
inline void M15::clear_f2() {
  f2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f2)
  return _internal_f2();
}
inline void M15::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M15::set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f2)
}

// optional bytes f3 = 4;
inline bool M15::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M15::has_f3() const {
  return _internal_has_f3();
}
inline void M15::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M15::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f3)
  return _internal_f3();
}
inline void M15::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f3)
}
inline std::string* M15::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f3)
  return _internal_mutable_f3();
}
inline const std::string& M15::_internal_f3() const {
  return f3_.Get();
}
inline void M15::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.f3)
}
inline void M15::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.f3)
}
inline void M15::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.f3)
}
inline std::string* M15::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f3)
}
inline std::string* M15::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f3)
}

// optional bool f4 = 5;
inline bool M15::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M15::has_f4() const {
  return _internal_has_f4();
}
inline void M15::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M15::_internal_f4() const {
  return f4_;
}
inline bool M15::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f4)
  return _internal_f4();
}
inline void M15::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M15::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f4)
}

// optional string f5 = 6;
inline bool M15::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M15::has_f5() const {
  return _internal_has_f5();
}
inline void M15::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M15::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f5)
  return _internal_f5();
}
inline void M15::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f5)
}
inline std::string* M15::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f5)
  return _internal_mutable_f5();
}
inline const std::string& M15::_internal_f5() const {
  return f5_.Get();
}
inline void M15::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.f5)
}
inline void M15::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.f5)
}
inline void M15::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.f5)
}
inline std::string* M15::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000020u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f5)
}
inline std::string* M15::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f5)
}

// optional int64 f6 = 8;
inline bool M15::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M15::has_f6() const {
  return _internal_has_f6();
}
inline void M15::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M15::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f6)
  return _internal_f6();
}
inline void M15::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M15::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f6)
}

// optional bool f7 = 10;
inline bool M15::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M15::has_f7() const {
  return _internal_has_f7();
}
inline void M15::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M15::_internal_f7() const {
  return f7_;
}
inline bool M15::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f7)
  return _internal_f7();
}
inline void M15::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M15::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f7)
}

// optional bytes f8 = 12;
inline bool M15::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M15::has_f8() const {
  return _internal_has_f8();
}
inline void M15::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M15::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f8)
  return _internal_f8();
}
inline void M15::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f8)
}
inline std::string* M15::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f8)
  return _internal_mutable_f8();
}
inline const std::string& M15::_internal_f8() const {
  return f8_.Get();
}
inline void M15::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.f8)
}
inline void M15::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.f8)
}
inline void M15::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.f8)
}
inline std::string* M15::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000800u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f8)
}
inline std::string* M15::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f8)
}

// optional .hyperprotobench.M15.M16 f9 = 16;
inline bool M15::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M15::has_f9() const {
  return _internal_has_f9();
}
inline void M15::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M15_M16& M15::_internal_f9() const {
  const ::hyperprotobench::M15_M16* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M16*>(
      &::hyperprotobench::_M15_M16_default_instance_);
}
inline const ::hyperprotobench::M15_M16& M15::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M15_M16* M15::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M16* M15::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f9)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M15_M16* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M16* M15::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00008000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M16>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M15_M16* M15::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f9)
  return _internal_mutable_f9();
}
inline void M15::set_allocated_f9(::hyperprotobench::M15_M16* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f9)
}

// optional .hyperprotobench.M15.M17 f10 = 20;
inline bool M15::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M15::has_f10() const {
  return _internal_has_f10();
}
inline void M15::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::hyperprotobench::M15_M17& M15::_internal_f10() const {
  const ::hyperprotobench::M15_M17* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M17*>(
      &::hyperprotobench::_M15_M17_default_instance_);
}
inline const ::hyperprotobench::M15_M17& M15::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M15_M17* M15::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M17* M15::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f10)
  _has_bits_[0] &= ~0x00080000u;
  ::hyperprotobench::M15_M17* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M17* M15::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00080000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M17>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M15_M17* M15::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f10)
  return _internal_mutable_f10();
}
inline void M15::set_allocated_f10(::hyperprotobench::M15_M17* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f10)
}

// optional bytes f11 = 22;
inline bool M15::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool M15::has_f11() const {
  return _internal_has_f11();
}
inline void M15::clear_f11() {
  f11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& M15::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f11)
  return _internal_f11();
}
inline void M15::set_f11(const std::string& value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f11)
}
inline std::string* M15::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f11)
  return _internal_mutable_f11();
}
inline const std::string& M15::_internal_f11() const {
  return f11_.Get();
}
inline void M15::_internal_set_f11(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M15::set_f11(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  f11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M15.f11)
}
inline void M15::set_f11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M15.f11)
}
inline void M15::set_f11(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00200000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M15.f11)
}
inline std::string* M15::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00200000u;
  return f11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M15::release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f11)
  if (!_internal_has_f11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return f11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M15::set_allocated_f11(std::string* f11) {
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f11,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f11)
}
inline std::string* M15::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M15.f11)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00200000u;
  return f11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M15::unsafe_arena_set_allocated_f11(
    std::string* f11) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f11, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M15.f11)
}

// optional .hyperprotobench.M15.M20 f12 = 23;
inline bool M15::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M15::has_f12() const {
  return _internal_has_f12();
}
inline void M15::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::hyperprotobench::M15_M20& M15::_internal_f12() const {
  const ::hyperprotobench::M15_M20* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M20*>(
      &::hyperprotobench::_M15_M20_default_instance_);
}
inline const ::hyperprotobench::M15_M20& M15::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M15_M20* M15::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M20* M15::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f12)
  _has_bits_[0] &= ~0x00400000u;
  ::hyperprotobench::M15_M20* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M20* M15::_internal_mutable_f12() {
  _has_bits_[0] |= 0x00400000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M20>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M15_M20* M15::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f12)
  return _internal_mutable_f12();
}
inline void M15::set_allocated_f12(::hyperprotobench::M15_M20* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f12)
}

// optional bool f13 = 24;
inline bool M15::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool M15::has_f13() const {
  return _internal_has_f13();
}
inline void M15::clear_f13() {
  f13_ = false;
  _has_bits_[0] &= ~0x00800000u;
}
inline bool M15::_internal_f13() const {
  return f13_;
}
inline bool M15::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f13)
  return _internal_f13();
}
inline void M15::_internal_set_f13(bool value) {
  _has_bits_[0] |= 0x00800000u;
  f13_ = value;
}
inline void M15::set_f13(bool value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f13)
}

// -------------------------------------------------------------------

// M21_M22

// optional int64 f1 = 1;
inline bool M21_M22::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M22::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M22::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f1)
  return _internal_f1();
}
inline void M21_M22::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21_M22::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f1)
}

// optional int64 f2 = 3;
inline bool M21_M22::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M21_M22::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M22::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f2)
  return _internal_f2();
}
inline void M21_M22::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M21_M22::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f2)
}

// optional int32 f3 = 10;
inline bool M21_M22::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M21_M22::has_f3() const {
  return _internal_has_f3();
}
inline void M21_M22::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f3)
  return _internal_f3();
}
inline void M21_M22::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f3_ = value;
}
inline void M21_M22::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f3)
}

// optional fixed64 f4 = 13;
inline bool M21_M22::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M21_M22::has_f4() const {
  return _internal_has_f4();
}
inline void M21_M22::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M22::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f4)
  return _internal_f4();
}
inline void M21_M22::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  f4_ = value;
}
inline void M21_M22::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f4)
}

// optional int64 f5 = 14;
inline bool M21_M22::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M21_M22::has_f5() const {
  return _internal_has_f5();
}
inline void M21_M22::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f5)
  return _internal_f5();
}
inline void M21_M22::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f5_ = value;
}
inline void M21_M22::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f5)
}

// optional int32 f6 = 15;
inline bool M21_M22::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M21_M22::has_f6() const {
  return _internal_has_f6();
}
inline void M21_M22::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21_M22::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f6)
  return _internal_f6();
}
inline void M21_M22::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  f6_ = value;
}
inline void M21_M22::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f6)
}

// optional int64 f7 = 16;
inline bool M21_M22::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M21_M22::has_f7() const {
  return _internal_has_f7();
}
inline void M21_M22::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f7)
  return _internal_f7();
}
inline void M21_M22::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  f7_ = value;
}
inline void M21_M22::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f7)
}

// repeated string f8 = 17;
inline int M21_M22::_internal_f8_size() const {
  return f8_.size();
}
inline int M21_M22::f8_size() const {
  return _internal_f8_size();
}
inline void M21_M22::clear_f8() {
  f8_.Clear();
}
inline std::string* M21_M22::add_f8() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M21.M22.f8)
  return _internal_add_f8();
}
inline const std::string& M21_M22::_internal_f8(int index) const {
  return f8_.Get(index);
}
inline const std::string& M21_M22::f8(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f8)
  return _internal_f8(index);
}
inline std::string* M21_M22::mutable_f8(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.f8)
  return f8_.Mutable(index);
}
inline void M21_M22::set_f8(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f8)
  f8_.Mutable(index)->assign(value);
}
inline void M21_M22::set_f8(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f8)
  f8_.Mutable(index)->assign(std::move(value));
}
inline void M21_M22::set_f8(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f8_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M22.f8)
}
inline void M21_M22::set_f8(int index, const char* value, size_t size) {
  f8_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M22.f8)
}
inline std::string* M21_M22::_internal_add_f8() {
  _has_bits_[0] |= 0x00020000u;
  return f8_.Add();
}
inline void M21_M22::add_f8(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M21.M22.f8)
}
inline void M21_M22::add_f8(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M21.M22.f8)
}
inline void M21_M22::add_f8(const char* value) {
  _has_bits_[0] |= 0x00020000u;
  GOOGLE_DCHECK(value != nullptr);
  f8_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M21.M22.f8)
}
inline void M21_M22::add_f8(const char* value, size_t size) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M21.M22.f8)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M21_M22::f8() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M21.M22.f8)
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M21_M22::mutable_f8() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M21.M22.f8)
  return &f8_;
}

// optional bytes f9 = 20;
inline bool M21_M22::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M21_M22::has_f9() const {
  return _internal_has_f9();
}
inline void M21_M22::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& M21_M22::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f9)
  return _internal_f9();
}
inline void M21_M22::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f9)
}
inline std::string* M21_M22::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.f9)
  return _internal_mutable_f9();
}
inline const std::string& M21_M22::_internal_f9() const {
  return f9_.Get();
}
inline void M21_M22::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M22::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M22.f9)
}
inline void M21_M22::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M22.f9)
}
inline void M21_M22::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M22.f9)
}
inline std::string* M21_M22::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00100000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M22::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M22::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.f9)
}
inline std::string* M21_M22::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M22.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M22::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.f9)
}

// optional bytes f10 = 21;
inline bool M21_M22::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool M21_M22::has_f10() const {
  return _internal_has_f10();
}
inline void M21_M22::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& M21_M22::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f10)
  return _internal_f10();
}
inline void M21_M22::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f10)
}
inline std::string* M21_M22::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.f10)
  return _internal_mutable_f10();
}
inline const std::string& M21_M22::_internal_f10() const {
  return f10_.Get();
}
inline void M21_M22::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M22::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M22.f10)
}
inline void M21_M22::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M22.f10)
}
inline void M21_M22::set_f10(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00200000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M22.f10)
}
inline std::string* M21_M22::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00200000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M22::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M22::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.f10)
}
inline std::string* M21_M22::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M22.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00200000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M22::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.f10)
}

// optional int64 f11 = 22;
inline bool M21_M22::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M21_M22::has_f11() const {
  return _internal_has_f11();
}
inline void M21_M22::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M22::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f11)
  return _internal_f11();
}
inline void M21_M22::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  f11_ = value;
}
inline void M21_M22::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f11)
}

// optional bytes f12 = 24;
inline bool M21_M22::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool M21_M22::has_f12() const {
  return _internal_has_f12();
}
inline void M21_M22::clear_f12() {
  f12_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& M21_M22::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M22.f12)
  return _internal_f12();
}
inline void M21_M22::set_f12(const std::string& value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M22.f12)
}
inline std::string* M21_M22::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M22.f12)
  return _internal_mutable_f12();
}
inline const std::string& M21_M22::_internal_f12() const {
  return f12_.Get();
}
inline void M21_M22::_internal_set_f12(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M22::set_f12(std::string&& value) {
  _has_bits_[0] |= 0x01000000u;
  f12_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M22.f12)
}
inline void M21_M22::set_f12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x01000000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M22.f12)
}
inline void M21_M22::set_f12(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x01000000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M22.f12)
}
inline std::string* M21_M22::_internal_mutable_f12() {
  _has_bits_[0] |= 0x01000000u;
  return f12_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M22::release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M22.f12)
  if (!_internal_has_f12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return f12_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M22::set_allocated_f12(std::string* f12) {
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  f12_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f12,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M22.f12)
}
inline std::string* M21_M22::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M22.f12)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x01000000u;
  return f12_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M22::unsafe_arena_set_allocated_f12(
    std::string* f12) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  f12_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f12, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M22.f12)
}

// -------------------------------------------------------------------

// M21_M23_M24

// optional bytes f1 = 1;
inline bool M21_M23_M24::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M23_M24::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M21_M23_M24::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f1)
  return _internal_f1();
}
inline void M21_M23_M24::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f1)
}
inline std::string* M21_M23_M24::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.M24.f1)
  return _internal_mutable_f1();
}
inline const std::string& M21_M23_M24::_internal_f1() const {
  return f1_.Get();
}
inline void M21_M23_M24::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M23_M24::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M23.M24.f1)
}
inline void M21_M23_M24::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M23.M24.f1)
}
inline void M21_M23_M24::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M23.M24.f1)
}
inline std::string* M21_M23_M24::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M23_M24::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.M24.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M23_M24::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.M24.f1)
}
inline std::string* M21_M23_M24::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M23.M24.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M23_M24::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.M24.f1)
}

// optional bytes f2 = 3;
inline bool M21_M23_M24::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M23_M24::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M21_M23_M24::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f2)
  return _internal_f2();
}
inline void M21_M23_M24::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f2)
}
inline std::string* M21_M23_M24::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.M24.f2)
  return _internal_mutable_f2();
}
inline const std::string& M21_M23_M24::_internal_f2() const {
  return f2_.Get();
}
inline void M21_M23_M24::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M23_M24::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M23.M24.f2)
}
inline void M21_M23_M24::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M23.M24.f2)
}
inline void M21_M23_M24::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M23.M24.f2)
}
inline std::string* M21_M23_M24::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M23_M24::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.M24.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M23_M24::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.M24.f2)
}
inline std::string* M21_M23_M24::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M23.M24.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M23_M24::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.M24.f2)
}

// optional bool f3 = 4;
inline bool M21_M23_M24::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f3() const {
  return _internal_has_f3();
}
inline void M21_M23_M24::clear_f3() {
  f3_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M21_M23_M24::_internal_f3() const {
  return f3_;
}
inline bool M21_M23_M24::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f3)
  return _internal_f3();
}
inline void M21_M23_M24::_internal_set_f3(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M21_M23_M24::set_f3(bool value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f3)
}

// optional bytes f4 = 5;
inline bool M21_M23_M24::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f4() const {
  return _internal_has_f4();
}
inline void M21_M23_M24::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M21_M23_M24::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f4)
  return _internal_f4();
}
inline void M21_M23_M24::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f4)
}
inline std::string* M21_M23_M24::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.M24.f4)
  return _internal_mutable_f4();
}
inline const std::string& M21_M23_M24::_internal_f4() const {
  return f4_.Get();
}
inline void M21_M23_M24::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M23_M24::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M23.M24.f4)
}
inline void M21_M23_M24::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M23.M24.f4)
}
inline void M21_M23_M24::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M23.M24.f4)
}
inline std::string* M21_M23_M24::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000020u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M23_M24::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.M24.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M23_M24::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.M24.f4)
}
inline std::string* M21_M23_M24::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M23.M24.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M23_M24::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.M24.f4)
}

// optional bytes f5 = 6;
inline bool M21_M23_M24::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f5() const {
  return _internal_has_f5();
}
inline void M21_M23_M24::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M21_M23_M24::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f5)
  return _internal_f5();
}
inline void M21_M23_M24::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f5)
}
inline std::string* M21_M23_M24::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.M24.f5)
  return _internal_mutable_f5();
}
inline const std::string& M21_M23_M24::_internal_f5() const {
  return f5_.Get();
}
inline void M21_M23_M24::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M23_M24::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M23.M24.f5)
}
inline void M21_M23_M24::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M23.M24.f5)
}
inline void M21_M23_M24::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M23.M24.f5)
}
inline std::string* M21_M23_M24::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000040u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M23_M24::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.M24.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M23_M24::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.M24.f5)
}
inline std::string* M21_M23_M24::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M23.M24.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M23_M24::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.M24.f5)
}

// optional uint64 f6 = 7;
inline bool M21_M23_M24::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f6() const {
  return _internal_has_f6();
}
inline void M21_M23_M24::clear_f6() {
  f6_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f6)
  return _internal_f6();
}
inline void M21_M23_M24::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M21_M23_M24::set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f6)
}

// optional fixed64 f7 = 8;
inline bool M21_M23_M24::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f7() const {
  return _internal_has_f7();
}
inline void M21_M23_M24::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f7)
  return _internal_f7();
}
inline void M21_M23_M24::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  f7_ = value;
}
inline void M21_M23_M24::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f7)
}

// optional int64 f8 = 10;
inline bool M21_M23_M24::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f8() const {
  return _internal_has_f8();
}
inline void M21_M23_M24::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23_M24::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23_M24::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f8)
  return _internal_f8();
}
inline void M21_M23_M24::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M21_M23_M24::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f8)
}

// optional bytes f9 = 11;
inline bool M21_M23_M24::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f9() const {
  return _internal_has_f9();
}
inline void M21_M23_M24::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M21_M23_M24::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f9)
  return _internal_f9();
}
inline void M21_M23_M24::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f9)
}
inline std::string* M21_M23_M24::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.M24.f9)
  return _internal_mutable_f9();
}
inline const std::string& M21_M23_M24::_internal_f9() const {
  return f9_.Get();
}
inline void M21_M23_M24::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21_M23_M24::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.M23.M24.f9)
}
inline void M21_M23_M24::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.M23.M24.f9)
}
inline void M21_M23_M24::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.M23.M24.f9)
}
inline std::string* M21_M23_M24::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00000800u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21_M23_M24::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.M24.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21_M23_M24::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.M24.f9)
}
inline std::string* M21_M23_M24::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.M23.M24.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21_M23_M24::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.M23.M24.f9)
}

// optional fixed64 f10 = 13;
inline bool M21_M23_M24::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f10() const {
  return _internal_has_f10();
}
inline void M21_M23_M24::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f10)
  return _internal_f10();
}
inline void M21_M23_M24::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  f10_ = value;
}
inline void M21_M23_M24::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f10)
}

// optional int64 f11 = 14;
inline bool M21_M23_M24::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f11() const {
  return _internal_has_f11();
}
inline void M21_M23_M24::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23_M24::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23_M24::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f11)
  return _internal_f11();
}
inline void M21_M23_M24::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f11_ = value;
}
inline void M21_M23_M24::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f11)
}

// optional uint64 f12 = 15;
inline bool M21_M23_M24::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M21_M23_M24::has_f12() const {
  return _internal_has_f12();
}
inline void M21_M23_M24::clear_f12() {
  f12_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21_M23_M24::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.M24.f12)
  return _internal_f12();
}
inline void M21_M23_M24::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00008000u;
  f12_ = value;
}
inline void M21_M23_M24::set_f12(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.M24.f12)
}

// -------------------------------------------------------------------

// M21_M23

// optional int64 f1 = 1;
inline bool M21_M23::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21_M23::has_f1() const {
  return _internal_has_f1();
}
inline void M21_M23::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21_M23::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.f1)
  return _internal_f1();
}
inline void M21_M23::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21_M23::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.M23.f1)
}

// optional .hyperprotobench.M21.M23.M24 f2 = 2;
inline bool M21_M23::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M21_M23::has_f2() const {
  return _internal_has_f2();
}
inline void M21_M23::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M21_M23_M24& M21_M23::_internal_f2() const {
  const ::hyperprotobench::M21_M23_M24* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M23_M24*>(
      &::hyperprotobench::_M21_M23_M24_default_instance_);
}
inline const ::hyperprotobench::M21_M23_M24& M21_M23::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.M23.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M21_M23_M24* M21_M23::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M23_M24* M21_M23::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.M23.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M21_M23_M24* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M23_M24* M21_M23::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M23_M24>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M21_M23_M24* M21_M23::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.M23.f2)
  return _internal_mutable_f2();
}
inline void M21_M23::set_allocated_f2(::hyperprotobench::M21_M23_M24* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.M23.f2)
}

// -------------------------------------------------------------------

// M21

// optional fixed64 f1 = 1;
inline bool M21::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M21::has_f1() const {
  return _internal_has_f1();
}
inline void M21::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f1)
  return _internal_f1();
}
inline void M21::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M21::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f1)
}

// optional int64 f2 = 2;
inline bool M21::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M21::has_f2() const {
  return _internal_has_f2();
}
inline void M21::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f2)
  return _internal_f2();
}
inline void M21::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M21::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f2)
}

// optional fixed64 f3 = 3;
inline bool M21::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M21::has_f3() const {
  return _internal_has_f3();
}
inline void M21::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f3)
  return _internal_f3();
}
inline void M21::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M21::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f3)
}

// optional bytes f4 = 6;
inline bool M21::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M21::has_f4() const {
  return _internal_has_f4();
}
inline void M21::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M21::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f4)
  return _internal_f4();
}
inline void M21::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f4)
}
inline std::string* M21::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f4)
  return _internal_mutable_f4();
}
inline const std::string& M21::_internal_f4() const {
  return f4_.Get();
}
inline void M21::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.f4)
}
inline void M21::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f4)
}
inline void M21::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f4)
}
inline std::string* M21::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f4)
}
inline std::string* M21::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f4)
}

// optional .hyperprotobench.M21.M22 f5 = 8;
inline bool M21::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M21::has_f5() const {
  return _internal_has_f5();
}
inline void M21::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::hyperprotobench::M21_M22& M21::_internal_f5() const {
  const ::hyperprotobench::M21_M22* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M22*>(
      &::hyperprotobench::_M21_M22_default_instance_);
}
inline const ::hyperprotobench::M21_M22& M21::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M21_M22* M21::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M22* M21::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f5)
  _has_bits_[0] &= ~0x00000100u;
  ::hyperprotobench::M21_M22* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M22* M21::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M22>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M21_M22* M21::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f5)
  return _internal_mutable_f5();
}
inline void M21::set_allocated_f5(::hyperprotobench::M21_M22* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f5)
}

// optional fixed64 f6 = 9;
inline bool M21::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M21::has_f6() const {
  return _internal_has_f6();
}
inline void M21::clear_f6() {
  f6_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M21::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f6)
  return _internal_f6();
}
inline void M21::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  f6_ = value;
}
inline void M21::set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f6)
}

// optional .hyperprotobench.M21.M23 f7 = 15;
inline bool M21::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M21::has_f7() const {
  return _internal_has_f7();
}
inline void M21::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
inline const ::hyperprotobench::M21_M23& M21::_internal_f7() const {
  const ::hyperprotobench::M21_M23* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M21_M23*>(
      &::hyperprotobench::_M21_M23_default_instance_);
}
inline const ::hyperprotobench::M21_M23& M21::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M21_M23* M21::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M21_M23* M21::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f7)
  _has_bits_[0] &= ~0x00008000u;
  ::hyperprotobench::M21_M23* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M21_M23* M21::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00008000u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M21_M23>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M21_M23* M21::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f7)
  return _internal_mutable_f7();
}
inline void M21::set_allocated_f7(::hyperprotobench::M21_M23* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f7)
}

// optional bytes f8 = 17;
inline bool M21::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M21::has_f8() const {
  return _internal_has_f8();
}
inline void M21::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& M21::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f8)
  return _internal_f8();
}
inline void M21::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f8)
}
inline std::string* M21::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f8)
  return _internal_mutable_f8();
}
inline const std::string& M21::_internal_f8() const {
  return f8_.Get();
}
inline void M21::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.f8)
}
inline void M21::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f8)
}
inline void M21::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f8)
}
inline std::string* M21::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00020000u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f8)
}
inline std::string* M21::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f8)
}

// optional .hyperprotobench.M21.E1 f9 = 20;
inline bool M21::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M21::has_f9() const {
  return _internal_has_f9();
}
inline void M21::clear_f9() {
  f9_ = 68;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::hyperprotobench::M21_E1 M21::_internal_f9() const {
  return static_cast< ::hyperprotobench::M21_E1 >(f9_);
}
inline ::hyperprotobench::M21_E1 M21::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f9)
  return _internal_f9();
}
inline void M21::_internal_set_f9(::hyperprotobench::M21_E1 value) {
  assert(::hyperprotobench::M21_E1_IsValid(value));
  _has_bits_[0] |= 0x00100000u;
  f9_ = value;
}
inline void M21::set_f9(::hyperprotobench::M21_E1 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f9)
}

// optional int64 f10 = 22;
inline bool M21::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M21::has_f10() const {
  return _internal_has_f10();
}
inline void M21::clear_f10() {
  f10_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f10)
  return _internal_f10();
}
inline void M21::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00400000u;
  f10_ = value;
}
inline void M21::set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f10)
}

// optional int64 f11 = 24;
inline bool M21::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool M21::has_f11() const {
  return _internal_has_f11();
}
inline void M21::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M21::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f11)
  return _internal_f11();
}
inline void M21::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x01000000u;
  f11_ = value;
}
inline void M21::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f11)
}

// optional int32 f12 = 25;
inline bool M21::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool M21::has_f12() const {
  return _internal_has_f12();
}
inline void M21::clear_f12() {
  f12_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M21::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f12)
  return _internal_f12();
}
inline void M21::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x02000000u;
  f12_ = value;
}
inline void M21::set_f12(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f12)
}

// repeated bytes f13 = 26;
inline int M21::_internal_f13_size() const {
  return f13_.size();
}
inline int M21::f13_size() const {
  return _internal_f13_size();
}
inline void M21::clear_f13() {
  f13_.Clear();
}
inline std::string* M21::add_f13() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M21.f13)
  return _internal_add_f13();
}
inline const std::string& M21::_internal_f13(int index) const {
  return f13_.Get(index);
}
inline const std::string& M21::f13(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f13)
  return _internal_f13(index);
}
inline std::string* M21::mutable_f13(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f13)
  return f13_.Mutable(index);
}
inline void M21::set_f13(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f13)
  f13_.Mutable(index)->assign(value);
}
inline void M21::set_f13(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f13)
  f13_.Mutable(index)->assign(std::move(value));
}
inline void M21::set_f13(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f13_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f13)
}
inline void M21::set_f13(int index, const void* value, size_t size) {
  f13_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f13)
}
inline std::string* M21::_internal_add_f13() {
  _has_bits_[0] |= 0x04000000u;
  return f13_.Add();
}
inline void M21::add_f13(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  f13_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M21.f13)
}
inline void M21::add_f13(std::string&& value) {
  _has_bits_[0] |= 0x04000000u;
  f13_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M21.f13)
}
inline void M21::add_f13(const char* value) {
  _has_bits_[0] |= 0x04000000u;
  GOOGLE_DCHECK(value != nullptr);
  f13_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M21.f13)
}
inline void M21::add_f13(const void* value, size_t size) {
  _has_bits_[0] |= 0x04000000u;
  f13_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M21.f13)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M21::f13() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M21.f13)
  return f13_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M21::mutable_f13() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M21.f13)
  return &f13_;
}

// optional bytes f14 = 29;
inline bool M21::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool M21::has_f14() const {
  return _internal_has_f14();
}
inline void M21::clear_f14() {
  f14_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x20000000u;
}
inline const std::string& M21::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M21.f14)
  return _internal_f14();
}
inline void M21::set_f14(const std::string& value) {
  _internal_set_f14(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M21.f14)
}
inline std::string* M21::mutable_f14() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M21.f14)
  return _internal_mutable_f14();
}
inline const std::string& M21::_internal_f14() const {
  return f14_.Get();
}
inline void M21::_internal_set_f14(const std::string& value) {
  _has_bits_[0] |= 0x20000000u;
  f14_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M21::set_f14(std::string&& value) {
  _has_bits_[0] |= 0x20000000u;
  f14_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M21.f14)
}
inline void M21::set_f14(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x20000000u;
  f14_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M21.f14)
}
inline void M21::set_f14(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x20000000u;
  f14_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M21.f14)
}
inline std::string* M21::_internal_mutable_f14() {
  _has_bits_[0] |= 0x20000000u;
  return f14_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M21::release_f14() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M21.f14)
  if (!_internal_has_f14()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x20000000u;
  return f14_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M21::set_allocated_f14(std::string* f14) {
  if (f14 != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  f14_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f14,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M21.f14)
}
inline std::string* M21::unsafe_arena_release_f14() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M21.f14)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x20000000u;
  return f14_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M21::unsafe_arena_set_allocated_f14(
    std::string* f14) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f14 != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  f14_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f14, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M21.f14)
}

// -------------------------------------------------------------------

// M25_M26_M27

// optional bytes f1 = 1;
inline bool M25_M26_M27::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26_M27::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26_M27::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25_M26_M27::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.M27.f1)
  return _internal_f1();
}
inline void M25_M26_M27::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.M27.f1)
}
inline std::string* M25_M26_M27::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.M27.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25_M26_M27::_internal_f1() const {
  return f1_.Get();
}
inline void M25_M26_M27::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M26_M27::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M26.M27.f1)
}
inline void M25_M26_M27::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M26.M27.f1)
}
inline void M25_M26_M27::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M26.M27.f1)
}
inline std::string* M25_M26_M27::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M26_M27::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.M27.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M26_M27::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.M27.f1)
}
inline std::string* M25_M26_M27::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M26.M27.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M26_M27::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M26.M27.f1)
}

// -------------------------------------------------------------------

// M25_M26

// optional fixed64 f1 = 1;
inline bool M25_M26::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f1)
  return _internal_f1();
}
inline void M25_M26::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25_M26::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.f1)
}

// optional .hyperprotobench.M25.M26.E1 f2 = 2;
inline bool M25_M26::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25_M26::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M26::clear_f2() {
  f2_ = 65;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::hyperprotobench::M25_M26_E1 M25_M26::_internal_f2() const {
  return static_cast< ::hyperprotobench::M25_M26_E1 >(f2_);
}
inline ::hyperprotobench::M25_M26_E1 M25_M26::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f2)
  return _internal_f2();
}
inline void M25_M26::_internal_set_f2(::hyperprotobench::M25_M26_E1 value) {
  assert(::hyperprotobench::M25_M26_E1_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M25_M26::set_f2(::hyperprotobench::M25_M26_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.f2)
}

// optional .hyperprotobench.M25.M26.M27 f3 = 3;
inline bool M25_M26::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M25_M26::has_f3() const {
  return _internal_has_f3();
}
inline void M25_M26::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M25_M26_M27& M25_M26::_internal_f3() const {
  const ::hyperprotobench::M25_M26_M27* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26_M27*>(
      &::hyperprotobench::_M25_M26_M27_default_instance_);
}
inline const ::hyperprotobench::M25_M26_M27& M25_M26::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M26.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M25_M26_M27* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26_M27>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M25_M26_M27* M25_M26::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M26.f3)
  return _internal_mutable_f3();
}
inline void M25_M26::set_allocated_f3(::hyperprotobench::M25_M26_M27* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M26.f3)
}

// -------------------------------------------------------------------

// M25_M28_M29

// optional int64 f1 = 2;
inline bool M25_M28_M29::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M28_M29::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f1)
  return _internal_f1();
}
inline void M25_M28_M29::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25_M28_M29::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f1)
}

// optional fixed64 f2 = 3;
inline bool M25_M28_M29::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M28_M29::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_M29::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_M29::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f2)
  return _internal_f2();
}
inline void M25_M28_M29::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M25_M28_M29::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f2)
}

// optional fixed64 f3 = 5;
inline bool M25_M28_M29::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f3() const {
  return _internal_has_f3();
}
inline void M25_M28_M29::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_M29::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25_M28_M29::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f3)
  return _internal_f3();
}
inline void M25_M28_M29::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M25_M28_M29::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f3)
}

// optional bool f4 = 7;
inline bool M25_M28_M29::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f4() const {
  return _internal_has_f4();
}
inline void M25_M28_M29::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool M25_M28_M29::_internal_f4() const {
  return f4_;
}
inline bool M25_M28_M29::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f4)
  return _internal_f4();
}
inline void M25_M28_M29::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M25_M28_M29::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f4)
}

// optional bool f5 = 8;
inline bool M25_M28_M29::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f5() const {
  return _internal_has_f5();
}
inline void M25_M28_M29::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool M25_M28_M29::_internal_f5() const {
  return f5_;
}
inline bool M25_M28_M29::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f5)
  return _internal_f5();
}
inline void M25_M28_M29::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M25_M28_M29::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f5)
}

// optional int64 f6 = 9;
inline bool M25_M28_M29::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f6() const {
  return _internal_has_f6();
}
inline void M25_M28_M29::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f6)
  return _internal_f6();
}
inline void M25_M28_M29::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M25_M28_M29::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f6)
}

// optional int64 f7 = 10;
inline bool M25_M28_M29::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f7() const {
  return _internal_has_f7();
}
inline void M25_M28_M29::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28_M29::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f7)
  return _internal_f7();
}
inline void M25_M28_M29::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M25_M28_M29::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f7)
}

// optional bool f8 = 11;
inline bool M25_M28_M29::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M25_M28_M29::has_f8() const {
  return _internal_has_f8();
}
inline void M25_M28_M29::clear_f8() {
  f8_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool M25_M28_M29::_internal_f8() const {
  return f8_;
}
inline bool M25_M28_M29::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.M29.f8)
  return _internal_f8();
}
inline void M25_M28_M29::_internal_set_f8(bool value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M25_M28_M29::set_f8(bool value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.M29.f8)
}

// -------------------------------------------------------------------

// M25_M28

// optional bytes f1 = 2;
inline bool M25_M28::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M28::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M28::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M25_M28::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f1)
  return _internal_f1();
}
inline void M25_M28::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f1)
}
inline std::string* M25_M28::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M28.f1)
  return _internal_mutable_f1();
}
inline const std::string& M25_M28::_internal_f1() const {
  return f1_.Get();
}
inline void M25_M28::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M28::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M28.f1)
}
inline void M25_M28::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M28.f1)
}
inline void M25_M28::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M28.f1)
}
inline std::string* M25_M28::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M28::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M28.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M28::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M28.f1)
}
inline std::string* M25_M28::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M28.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M28::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M28.f1)
}

// optional .hyperprotobench.M25.M28.M29 f2 = 3;
inline bool M25_M28::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M25_M28::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M28::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M25_M28_M29& M25_M28::_internal_f2() const {
  const ::hyperprotobench::M25_M28_M29* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M28_M29*>(
      &::hyperprotobench::_M25_M28_M29_default_instance_);
}
inline const ::hyperprotobench::M25_M28_M29& M25_M28::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M25_M28_M29* M25_M28::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M28_M29* M25_M28::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M28.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M25_M28_M29* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M28_M29* M25_M28::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M28_M29>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M25_M28_M29* M25_M28::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M28.f2)
  return _internal_mutable_f2();
}
inline void M25_M28::set_allocated_f2(::hyperprotobench::M25_M28_M29* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M28.f2)
}

// optional int64 f3 = 7;
inline bool M25_M28::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M25_M28::has_f3() const {
  return _internal_has_f3();
}
inline void M25_M28::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f3)
  return _internal_f3();
}
inline void M25_M28::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M25_M28::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f3)
}

// optional int64 f4 = 9;
inline bool M25_M28::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M25_M28::has_f4() const {
  return _internal_has_f4();
}
inline void M25_M28::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f4)
  return _internal_f4();
}
inline void M25_M28::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  f4_ = value;
}
inline void M25_M28::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f4)
}

// optional int64 f5 = 10;
inline bool M25_M28::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M25_M28::has_f5() const {
  return _internal_has_f5();
}
inline void M25_M28::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M25_M28::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f5)
  return _internal_f5();
}
inline void M25_M28::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M25_M28::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f5)
}

// optional bytes f6 = 11;
inline bool M25_M28::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M25_M28::has_f6() const {
  return _internal_has_f6();
}
inline void M25_M28::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& M25_M28::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f6)
  return _internal_f6();
}
inline void M25_M28::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f6)
}
inline std::string* M25_M28::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M28.f6)
  return _internal_mutable_f6();
}
inline const std::string& M25_M28::_internal_f6() const {
  return f6_.Get();
}
inline void M25_M28::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M28::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M28.f6)
}
inline void M25_M28::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M28.f6)
}
inline void M25_M28::set_f6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M28.f6)
}
inline std::string* M25_M28::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000400u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M28::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M28.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M28::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M28.f6)
}
inline std::string* M25_M28::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M28.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M28::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M28.f6)
}

// optional .hyperprotobench.M25.M28.E1 f7 = 13;
inline bool M25_M28::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M25_M28::has_f7() const {
  return _internal_has_f7();
}
inline void M25_M28::clear_f7() {
  f7_ = 37;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::hyperprotobench::M25_M28_E1 M25_M28::_internal_f7() const {
  return static_cast< ::hyperprotobench::M25_M28_E1 >(f7_);
}
inline ::hyperprotobench::M25_M28_E1 M25_M28::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f7)
  return _internal_f7();
}
inline void M25_M28::_internal_set_f7(::hyperprotobench::M25_M28_E1 value) {
  assert(::hyperprotobench::M25_M28_E1_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  f7_ = value;
}
inline void M25_M28::set_f7(::hyperprotobench::M25_M28_E1 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f7)
}

// optional fixed32 f8 = 14;
inline bool M25_M28::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M25_M28::has_f8() const {
  return _internal_has_f8();
}
inline void M25_M28::clear_f8() {
  f8_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25_M28::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25_M28::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f8)
  return _internal_f8();
}
inline void M25_M28::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  f8_ = value;
}
inline void M25_M28::set_f8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f8)
}

// optional bytes f9 = 18;
inline bool M25_M28::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M25_M28::has_f9() const {
  return _internal_has_f9();
}
inline void M25_M28::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& M25_M28::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f9)
  return _internal_f9();
}
inline void M25_M28::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f9)
}
inline std::string* M25_M28::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.M28.f9)
  return _internal_mutable_f9();
}
inline const std::string& M25_M28::_internal_f9() const {
  return f9_.Get();
}
inline void M25_M28::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25_M28::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.M28.f9)
}
inline void M25_M28::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.M28.f9)
}
inline void M25_M28::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.M28.f9)
}
inline std::string* M25_M28::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00020000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25_M28::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.M28.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25_M28::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.M28.f9)
}
inline std::string* M25_M28::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.M28.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25_M28::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.M28.f9)
}

// optional bool f10 = 19;
inline bool M25_M28::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M25_M28::has_f10() const {
  return _internal_has_f10();
}
inline void M25_M28::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool M25_M28::_internal_f10() const {
  return f10_;
}
inline bool M25_M28::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M28.f10)
  return _internal_f10();
}
inline void M25_M28::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00040000u;
  f10_ = value;
}
inline void M25_M28::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M28.f10)
}

// -------------------------------------------------------------------

// M25

// optional fixed32 f1 = 2;
inline bool M25::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25::has_f1() const {
  return _internal_has_f1();
}
inline void M25::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f1)
  return _internal_f1();
}
inline void M25::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f1)
}

// optional fixed64 f2 = 3;
inline bool M25::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25::has_f2() const {
  return _internal_has_f2();
}
inline void M25::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f2)
  return _internal_f2();
}
inline void M25::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M25::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f2)
}

// optional fixed64 f3 = 4;
inline bool M25::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M25::has_f3() const {
  return _internal_has_f3();
}
inline void M25::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M25::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f3)
  return _internal_f3();
}
inline void M25::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M25::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f3)
}

// optional double f4 = 5;
inline bool M25::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M25::has_f4() const {
  return _internal_has_f4();
}
inline void M25::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double M25::_internal_f4() const {
  return f4_;
}
inline double M25::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f4)
  return _internal_f4();
}
inline void M25::_internal_set_f4(double value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M25::set_f4(double value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f4)
}

// optional string f5 = 9;
inline bool M25::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M25::has_f5() const {
  return _internal_has_f5();
}
inline void M25::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M25::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f5)
  return _internal_f5();
}
inline void M25::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f5)
}
inline std::string* M25::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f5)
  return _internal_mutable_f5();
}
inline const std::string& M25::_internal_f5() const {
  return f5_.Get();
}
inline void M25::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f5)
}
inline void M25::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f5)
}
inline void M25::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f5)
}
inline std::string* M25::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f5)
}
inline std::string* M25::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f5)
}

// optional .hyperprotobench.M25.M26 f6 = 11;
inline bool M25::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M25::has_f6() const {
  return _internal_has_f6();
}
inline void M25::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M25_M26& M25::_internal_f6() const {
  const ::hyperprotobench::M25_M26* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26*>(
      &::hyperprotobench::_M25_M26_default_instance_);
}
inline const ::hyperprotobench::M25_M26& M25::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M25_M26* M25::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f6)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M25_M26* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000400u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M25_M26* M25::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f6)
  return _internal_mutable_f6();
}
inline void M25::set_allocated_f6(::hyperprotobench::M25_M26* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f6)
}

// optional bool f7 = 12;
inline bool M25::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M25::has_f7() const {
  return _internal_has_f7();
}
inline void M25::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool M25::_internal_f7() const {
  return f7_;
}
inline bool M25::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f7)
  return _internal_f7();
}
inline void M25::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000800u;
  f7_ = value;
}
inline void M25::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f7)
}

// optional bytes f8 = 13;
inline bool M25::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M25::has_f8() const {
  return _internal_has_f8();
}
inline void M25::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& M25::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f8)
  return _internal_f8();
}
inline void M25::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f8)
}
inline std::string* M25::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f8)
  return _internal_mutable_f8();
}
inline const std::string& M25::_internal_f8() const {
  return f8_.Get();
}
inline void M25::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f8)
}
inline void M25::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f8)
}
inline void M25::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f8)
}
inline std::string* M25::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00001000u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f8)
}
inline std::string* M25::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f8)
}

// optional bytes f9 = 19;
inline bool M25::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M25::has_f9() const {
  return _internal_has_f9();
}
inline void M25::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& M25::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f9)
  return _internal_f9();
}
inline void M25::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f9)
}
inline std::string* M25::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f9)
  return _internal_mutable_f9();
}
inline const std::string& M25::_internal_f9() const {
  return f9_.Get();
}
inline void M25::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f9)
}
inline void M25::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f9)
}
inline void M25::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f9)
}
inline std::string* M25::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00040000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f9)
}
inline std::string* M25::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00040000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f9)
}

// optional bytes f10 = 20;
inline bool M25::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M25::has_f10() const {
  return _internal_has_f10();
}
inline void M25::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& M25::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f10)
  return _internal_f10();
}
inline void M25::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f10)
}
inline std::string* M25::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f10)
  return _internal_mutable_f10();
}
inline const std::string& M25::_internal_f10() const {
  return f10_.Get();
}
inline void M25::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f10)
}
inline void M25::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f10)
}
inline void M25::set_f10(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f10)
}
inline std::string* M25::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00080000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f10)
}
inline std::string* M25::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f10)
}

// optional bool f11 = 21;
inline bool M25::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M25::has_f11() const {
  return _internal_has_f11();
}
inline void M25::clear_f11() {
  f11_ = false;
  _has_bits_[0] &= ~0x00100000u;
}
inline bool M25::_internal_f11() const {
  return f11_;
}
inline bool M25::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f11)
  return _internal_f11();
}
inline void M25::_internal_set_f11(bool value) {
  _has_bits_[0] |= 0x00100000u;
  f11_ = value;
}
inline void M25::set_f11(bool value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f11)
}

// optional .hyperprotobench.M25.M28 f12 = 24;
inline bool M25::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M25::has_f12() const {
  return _internal_has_f12();
}
inline void M25::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
inline const ::hyperprotobench::M25_M28& M25::_internal_f12() const {
  const ::hyperprotobench::M25_M28* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M28*>(
      &::hyperprotobench::_M25_M28_default_instance_);
}
inline const ::hyperprotobench::M25_M28& M25::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M25_M28* M25::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M28* M25::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f12)
  _has_bits_[0] &= ~0x00800000u;
  ::hyperprotobench::M25_M28* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M28* M25::_internal_mutable_f12() {
  _has_bits_[0] |= 0x00800000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M28>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M25_M28* M25::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f12)
  return _internal_mutable_f12();
}
inline void M25::set_allocated_f12(::hyperprotobench::M25_M28* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f12)
}

// optional .hyperprotobench.M25.E1 f13 = 25;
inline bool M25::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool M25::has_f13() const {
  return _internal_has_f13();
}
inline void M25::clear_f13() {
  f13_ = 74;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::hyperprotobench::M25_E1 M25::_internal_f13() const {
  return static_cast< ::hyperprotobench::M25_E1 >(f13_);
}
inline ::hyperprotobench::M25_E1 M25::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f13)
  return _internal_f13();
}
inline void M25::_internal_set_f13(::hyperprotobench::M25_E1 value) {
  assert(::hyperprotobench::M25_E1_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  f13_ = value;
}
inline void M25::set_f13(::hyperprotobench::M25_E1 value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f13)
}

// -------------------------------------------------------------------

// M30_M31

// optional fixed64 f1 = 1;
inline bool M30_M31::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M31::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M31::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M31::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M31.f1)
  return _internal_f1();
}
inline void M30_M31::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M31::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M31.f1)
}

// -------------------------------------------------------------------

// M30_M32_M33

// optional int64 f1 = 1;
inline bool M30_M32_M33::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M32_M33::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M32_M33::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M32_M33::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30_M32_M33::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.M33.f1)
  return _internal_f1();
}
inline void M30_M32_M33::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M32_M33::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.M33.f1)
}

// optional fixed64 f2 = 3;
inline bool M30_M32_M33::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M30_M32_M33::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M32_M33::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_M33::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_M33::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.M33.f2)
  return _internal_f2();
}
inline void M30_M32_M33::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M30_M32_M33::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.M33.f2)
}

// optional fixed64 f3 = 4;
inline bool M30_M32_M33::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M30_M32_M33::has_f3() const {
  return _internal_has_f3();
}
inline void M30_M32_M33::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_M33::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32_M33::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.M33.f3)
  return _internal_f3();
}
inline void M30_M32_M33::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M30_M32_M33::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.M33.f3)
}

// optional int32 f4 = 5;
inline bool M30_M32_M33::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M30_M32_M33::has_f4() const {
  return _internal_has_f4();
}
inline void M30_M32_M33::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M32_M33::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M32_M33::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.M33.f4)
  return _internal_f4();
}
inline void M30_M32_M33::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M30_M32_M33::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.M33.f4)
}

// optional bytes f5 = 7;
inline bool M30_M32_M33::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M30_M32_M33::has_f5() const {
  return _internal_has_f5();
}
inline void M30_M32_M33::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M30_M32_M33::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.M33.f5)
  return _internal_f5();
}
inline void M30_M32_M33::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.M33.f5)
}
inline std::string* M30_M32_M33::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M32.M33.f5)
  return _internal_mutable_f5();
}
inline const std::string& M30_M32_M33::_internal_f5() const {
  return f5_.Get();
}
inline void M30_M32_M33::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M32_M33::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M32.M33.f5)
}
inline void M30_M32_M33::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M32.M33.f5)
}
inline void M30_M32_M33::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M32.M33.f5)
}
inline std::string* M30_M32_M33::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M32_M33::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M32.M33.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M32_M33::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M32.M33.f5)
}
inline std::string* M30_M32_M33::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M32.M33.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M32_M33::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M32.M33.f5)
}

// -------------------------------------------------------------------

// M30_M32

// optional .hyperprotobench.M30.M32.M33 f1 = 1;
inline bool M30_M32::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M30_M32::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M32::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M30_M32_M33& M30_M32::_internal_f1() const {
  const ::hyperprotobench::M30_M32_M33* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M32_M33*>(
      &::hyperprotobench::_M30_M32_M33_default_instance_);
}
inline const ::hyperprotobench::M30_M32_M33& M30_M32::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M30_M32_M33* M30_M32::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M32_M33* M30_M32::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M32.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M30_M32_M33* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M32_M33* M30_M32::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M32_M33>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M30_M32_M33* M30_M32::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M32.f1)
  return _internal_mutable_f1();
}
inline void M30_M32::set_allocated_f1(::hyperprotobench::M30_M32_M33* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M32.f1)
}

// optional uint64 f2 = 3;
inline bool M30_M32::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M30_M32::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M32::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M32::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M32.f2)
  return _internal_f2();
}
inline void M30_M32::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M30_M32::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M32.f2)
}

// -------------------------------------------------------------------

// M30_M34

// optional fixed64 f1 = 3;
inline bool M30_M34::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M34::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M34::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M34::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30_M34::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M34.f1)
  return _internal_f1();
}
inline void M30_M34::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M30_M34::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M34.f1)
}

// -------------------------------------------------------------------

// M30_M35

// optional string f1 = 1;
inline bool M30_M35::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M30_M35::has_f1() const {
  return _internal_has_f1();
}
inline void M30_M35::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M30_M35::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f1)
  return _internal_f1();
}
inline void M30_M35::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f1)
}
inline std::string* M30_M35::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f1)
  return _internal_mutable_f1();
}
inline const std::string& M30_M35::_internal_f1() const {
  return f1_.Get();
}
inline void M30_M35::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f1)
}
inline void M30_M35::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f1)
}
inline void M30_M35::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f1)
}
inline std::string* M30_M35::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f1)
}
inline std::string* M30_M35::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f1)
}

// optional bytes f2 = 2;
inline bool M30_M35::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M30_M35::has_f2() const {
  return _internal_has_f2();
}
inline void M30_M35::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M30_M35::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f2)
  return _internal_f2();
}
inline void M30_M35::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f2)
}
inline std::string* M30_M35::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f2)
  return _internal_mutable_f2();
}
inline const std::string& M30_M35::_internal_f2() const {
  return f2_.Get();
}
inline void M30_M35::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f2)
}
inline void M30_M35::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f2)
}
inline void M30_M35::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f2)
}
inline std::string* M30_M35::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f2)
}
inline std::string* M30_M35::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f2)
}

// optional int32 f3 = 3;
inline bool M30_M35::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M30_M35::has_f3() const {
  return _internal_has_f3();
}
inline void M30_M35::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M35::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M30_M35::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f3)
  return _internal_f3();
}
inline void M30_M35::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M30_M35::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f3)
}

// repeated bytes f4 = 4;
inline int M30_M35::_internal_f4_size() const {
  return f4_.size();
}
inline int M30_M35::f4_size() const {
  return _internal_f4_size();
}
inline void M30_M35::clear_f4() {
  f4_.Clear();
}
inline std::string* M30_M35::add_f4() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M30.M35.f4)
  return _internal_add_f4();
}
inline const std::string& M30_M35::_internal_f4(int index) const {
  return f4_.Get(index);
}
inline const std::string& M30_M35::f4(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f4)
  return _internal_f4(index);
}
inline std::string* M30_M35::mutable_f4(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f4)
  return f4_.Mutable(index);
}
inline void M30_M35::set_f4(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f4)
  f4_.Mutable(index)->assign(value);
}
inline void M30_M35::set_f4(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f4)
  f4_.Mutable(index)->assign(std::move(value));
}
inline void M30_M35::set_f4(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f4)
}
inline void M30_M35::set_f4(int index, const void* value, size_t size) {
  f4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f4)
}
inline std::string* M30_M35::_internal_add_f4() {
  _has_bits_[0] |= 0x00000010u;
  return f4_.Add();
}
inline void M30_M35::add_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M30.M35.f4)
}
inline void M30_M35::add_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M30.M35.f4)
}
inline void M30_M35::add_f4(const char* value) {
  _has_bits_[0] |= 0x00000010u;
  GOOGLE_DCHECK(value != nullptr);
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M30.M35.f4)
}
inline void M30_M35::add_f4(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M30.M35.f4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M30_M35::f4() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M30.M35.f4)
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M30_M35::mutable_f4() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M30.M35.f4)
  return &f4_;
}

// optional bytes f5 = 5;
inline bool M30_M35::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M30_M35::has_f5() const {
  return _internal_has_f5();
}
inline void M30_M35::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M30_M35::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f5)
  return _internal_f5();
}
inline void M30_M35::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f5)
}
inline std::string* M30_M35::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f5)
  return _internal_mutable_f5();
}
inline const std::string& M30_M35::_internal_f5() const {
  return f5_.Get();
}
inline void M30_M35::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f5)
}
inline void M30_M35::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f5)
}
inline void M30_M35::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f5)
}
inline std::string* M30_M35::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000020u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f5)
}
inline std::string* M30_M35::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f5)
}

// optional string f6 = 6;
inline bool M30_M35::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M30_M35::has_f6() const {
  return _internal_has_f6();
}
inline void M30_M35::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M30_M35::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f6)
  return _internal_f6();
}
inline void M30_M35::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f6)
}
inline std::string* M30_M35::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f6)
  return _internal_mutable_f6();
}
inline const std::string& M30_M35::_internal_f6() const {
  return f6_.Get();
}
inline void M30_M35::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f6)
}
inline void M30_M35::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f6)
}
inline void M30_M35::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f6)
}
inline std::string* M30_M35::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000040u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f6)
}
inline std::string* M30_M35::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f6)
}

// optional string f7 = 7;
inline bool M30_M35::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M30_M35::has_f7() const {
  return _internal_has_f7();
}
inline void M30_M35::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M30_M35::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f7)
  return _internal_f7();
}
inline void M30_M35::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f7)
}
inline std::string* M30_M35::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f7)
  return _internal_mutable_f7();
}
inline const std::string& M30_M35::_internal_f7() const {
  return f7_.Get();
}
inline void M30_M35::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f7)
}
inline void M30_M35::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f7)
}
inline void M30_M35::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f7)
}
inline std::string* M30_M35::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000080u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f7)
}
inline std::string* M30_M35::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f7)
}

// optional bytes f8 = 8;
inline bool M30_M35::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M30_M35::has_f8() const {
  return _internal_has_f8();
}
inline void M30_M35::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M30_M35::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f8)
  return _internal_f8();
}
inline void M30_M35::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f8)
}
inline std::string* M30_M35::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f8)
  return _internal_mutable_f8();
}
inline const std::string& M30_M35::_internal_f8() const {
  return f8_.Get();
}
inline void M30_M35::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f8)
}
inline void M30_M35::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f8)
}
inline void M30_M35::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f8)
}
inline std::string* M30_M35::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000100u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f8)
}
inline std::string* M30_M35::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f8)
}

// optional bytes f9 = 10;
inline bool M30_M35::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M30_M35::has_f9() const {
  return _internal_has_f9();
}
inline void M30_M35::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& M30_M35::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.M35.f9)
  return _internal_f9();
}
inline void M30_M35::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.M35.f9)
}
inline std::string* M30_M35::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.M35.f9)
  return _internal_mutable_f9();
}
inline const std::string& M30_M35::_internal_f9() const {
  return f9_.Get();
}
inline void M30_M35::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30_M35::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.M35.f9)
}
inline void M30_M35::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.M35.f9)
}
inline void M30_M35::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.M35.f9)
}
inline std::string* M30_M35::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00000400u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30_M35::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.M35.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30_M35::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.M35.f9)
}
inline std::string* M30_M35::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.M35.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30_M35::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.M35.f9)
}

// -------------------------------------------------------------------

// M30

// optional .hyperprotobench.M30.M31 f1 = 4;
inline bool M30::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M30::has_f1() const {
  return _internal_has_f1();
}
inline void M30::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M30_M31& M30::_internal_f1() const {
  const ::hyperprotobench::M30_M31* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M31*>(
      &::hyperprotobench::_M30_M31_default_instance_);
}
inline const ::hyperprotobench::M30_M31& M30::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M30_M31* M30::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M31* M30::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M30_M31* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M31* M30::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M31>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M30_M31* M30::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f1)
  return _internal_mutable_f1();
}
inline void M30::set_allocated_f1(::hyperprotobench::M30_M31* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f1)
}

// optional .hyperprotobench.M30.M32 f2 = 5;
inline bool M30::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M30::has_f2() const {
  return _internal_has_f2();
}
inline void M30::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M30_M32& M30::_internal_f2() const {
  const ::hyperprotobench::M30_M32* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M32*>(
      &::hyperprotobench::_M30_M32_default_instance_);
}
inline const ::hyperprotobench::M30_M32& M30::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M30_M32* M30::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M32* M30::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M30_M32* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M32* M30::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M32>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M30_M32* M30::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f2)
  return _internal_mutable_f2();
}
inline void M30::set_allocated_f2(::hyperprotobench::M30_M32* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f2)
}

// optional .hyperprotobench.M30.M34 f3 = 6;
inline bool M30::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M30::has_f3() const {
  return _internal_has_f3();
}
inline void M30::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M30_M34& M30::_internal_f3() const {
  const ::hyperprotobench::M30_M34* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M34*>(
      &::hyperprotobench::_M30_M34_default_instance_);
}
inline const ::hyperprotobench::M30_M34& M30::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M30_M34* M30::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M34* M30::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M30_M34* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M34* M30::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M34>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M30_M34* M30::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f3)
  return _internal_mutable_f3();
}
inline void M30::set_allocated_f3(::hyperprotobench::M30_M34* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f3)
}

// optional bool f4 = 7;
inline bool M30::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M30::has_f4() const {
  return _internal_has_f4();
}
inline void M30::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool M30::_internal_f4() const {
  return f4_;
}
inline bool M30::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f4)
  return _internal_f4();
}
inline void M30::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M30::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f4)
}

// optional int64 f5 = 8;
inline bool M30::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M30::has_f5() const {
  return _internal_has_f5();
}
inline void M30::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f5)
  return _internal_f5();
}
inline void M30::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M30::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f5)
}

// optional bool f6 = 11;
inline bool M30::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M30::has_f6() const {
  return _internal_has_f6();
}
inline void M30::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool M30::_internal_f6() const {
  return f6_;
}
inline bool M30::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f6)
  return _internal_f6();
}
inline void M30::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M30::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f6)
}

// repeated bytes f7 = 12;
inline int M30::_internal_f7_size() const {
  return f7_.size();
}
inline int M30::f7_size() const {
  return _internal_f7_size();
}
inline void M30::clear_f7() {
  f7_.Clear();
}
inline std::string* M30::add_f7() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M30.f7)
  return _internal_add_f7();
}
inline const std::string& M30::_internal_f7(int index) const {
  return f7_.Get(index);
}
inline const std::string& M30::f7(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f7)
  return _internal_f7(index);
}
inline std::string* M30::mutable_f7(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f7)
  return f7_.Mutable(index);
}
inline void M30::set_f7(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f7)
  f7_.Mutable(index)->assign(value);
}
inline void M30::set_f7(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f7)
  f7_.Mutable(index)->assign(std::move(value));
}
inline void M30::set_f7(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f7_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f7)
}
inline void M30::set_f7(int index, const void* value, size_t size) {
  f7_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f7)
}
inline std::string* M30::_internal_add_f7() {
  _has_bits_[0] |= 0x00000200u;
  return f7_.Add();
}
inline void M30::add_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M30.f7)
}
inline void M30::add_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M30.f7)
}
inline void M30::add_f7(const char* value) {
  _has_bits_[0] |= 0x00000200u;
  GOOGLE_DCHECK(value != nullptr);
  f7_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M30.f7)
}
inline void M30::add_f7(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f7_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M30.f7)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M30::f7() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M30.f7)
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M30::mutable_f7() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M30.f7)
  return &f7_;
}

// optional int64 f8 = 13;
inline bool M30::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M30::has_f8() const {
  return _internal_has_f8();
}
inline void M30::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f8)
  return _internal_f8();
}
inline void M30::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M30::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f8)
}

// optional bytes f9 = 14;
inline bool M30::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M30::has_f9() const {
  return _internal_has_f9();
}
inline void M30::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M30::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f9)
  return _internal_f9();
}
inline void M30::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f9)
}
inline std::string* M30::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f9)
  return _internal_mutable_f9();
}
inline const std::string& M30::_internal_f9() const {
  return f9_.Get();
}
inline void M30::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f9)
}
inline void M30::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f9)
}
inline void M30::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f9)
}
inline std::string* M30::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00000800u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f9)
}
inline std::string* M30::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f9)
}

// optional fixed64 f10 = 15;
inline bool M30::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M30::has_f10() const {
  return _internal_has_f10();
}
inline void M30::clear_f10() {
  f10_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M30::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f10)
  return _internal_f10();
}
inline void M30::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  f10_ = value;
}
inline void M30::set_f10(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f10)
}

// optional int64 f11 = 16;
inline bool M30::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M30::has_f11() const {
  return _internal_has_f11();
}
inline void M30::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M30::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f11)
  return _internal_f11();
}
inline void M30::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  f11_ = value;
}
inline void M30::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f11)
}

// optional bytes f12 = 17;
inline bool M30::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M30::has_f12() const {
  return _internal_has_f12();
}
inline void M30::clear_f12() {
  f12_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M30::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f12)
  return _internal_f12();
}
inline void M30::set_f12(const std::string& value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f12)
}
inline std::string* M30::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f12)
  return _internal_mutable_f12();
}
inline const std::string& M30::_internal_f12() const {
  return f12_.Get();
}
inline void M30::_internal_set_f12(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f12(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f12_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f12)
}
inline void M30::set_f12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f12)
}
inline void M30::set_f12(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f12)
}
inline std::string* M30::_internal_mutable_f12() {
  _has_bits_[0] |= 0x00004000u;
  return f12_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f12)
  if (!_internal_has_f12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f12_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f12(std::string* f12) {
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f12_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f12,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f12)
}
inline std::string* M30::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f12)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f12_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f12(
    std::string* f12) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f12 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f12_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f12, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f12)
}

// optional bytes f13 = 23;
inline bool M30::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M30::has_f13() const {
  return _internal_has_f13();
}
inline void M30::clear_f13() {
  f13_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& M30::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f13)
  return _internal_f13();
}
inline void M30::set_f13(const std::string& value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M30.f13)
}
inline std::string* M30::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f13)
  return _internal_mutable_f13();
}
inline const std::string& M30::_internal_f13() const {
  return f13_.Get();
}
inline void M30::_internal_set_f13(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M30::set_f13(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M30.f13)
}
inline void M30::set_f13(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M30.f13)
}
inline void M30::set_f13(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M30.f13)
}
inline std::string* M30::_internal_mutable_f13() {
  _has_bits_[0] |= 0x00100000u;
  return f13_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M30::release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f13)
  if (!_internal_has_f13()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return f13_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M30::set_allocated_f13(std::string* f13) {
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f13_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f13,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f13)
}
inline std::string* M30::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M30.f13)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return f13_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M30::unsafe_arena_set_allocated_f13(
    std::string* f13) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f13_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f13, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M30.f13)
}

// optional .hyperprotobench.M30.M35 f14 = 25;
inline bool M30::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || f14_ != nullptr);
  return value;
}
inline bool M30::has_f14() const {
  return _internal_has_f14();
}
inline void M30::clear_f14() {
  if (f14_ != nullptr) f14_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::hyperprotobench::M30_M35& M30::_internal_f14() const {
  const ::hyperprotobench::M30_M35* p = f14_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M30_M35*>(
      &::hyperprotobench::_M30_M35_default_instance_);
}
inline const ::hyperprotobench::M30_M35& M30::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M30.f14)
  return _internal_f14();
}
inline ::hyperprotobench::M30_M35* M30::release_f14() {
  auto temp = unsafe_arena_release_f14();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M30_M35* M30::unsafe_arena_release_f14() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M30.f14)
  _has_bits_[0] &= ~0x00400000u;
  ::hyperprotobench::M30_M35* temp = f14_;
  f14_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M30_M35* M30::_internal_mutable_f14() {
  _has_bits_[0] |= 0x00400000u;
  if (f14_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M30_M35>(GetArenaNoVirtual());
    f14_ = p;
  }
  return f14_;
}
inline ::hyperprotobench::M30_M35* M30::mutable_f14() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M30.f14)
  return _internal_mutable_f14();
}
inline void M30::set_allocated_f14(::hyperprotobench::M30_M35* f14) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f14_;
  }
  if (f14) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f14);
    if (message_arena != submessage_arena) {
      f14 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f14, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f14_ = f14;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M30.f14)
}

// -------------------------------------------------------------------

// M36_M37_M38

// optional bool f1 = 2;
inline bool M36_M37_M38::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36_M37_M38::has_f1() const {
  return _internal_has_f1();
}
inline void M36_M37_M38::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M36_M37_M38::_internal_f1() const {
  return f1_;
}
inline bool M36_M37_M38::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M38.f1)
  return _internal_f1();
}
inline void M36_M37_M38::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36_M37_M38::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M38.f1)
}

// optional int64 f2 = 3;
inline bool M36_M37_M38::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M36_M37_M38::has_f2() const {
  return _internal_has_f2();
}
inline void M36_M37_M38::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M38::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M38::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M38.f2)
  return _internal_f2();
}
inline void M36_M37_M38::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M36_M37_M38::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M38.f2)
}

// -------------------------------------------------------------------

// M36_M37_M39

// optional double f1 = 1;
inline bool M36_M37_M39::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36_M37_M39::has_f1() const {
  return _internal_has_f1();
}
inline void M36_M37_M39::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double M36_M37_M39::_internal_f1() const {
  return f1_;
}
inline double M36_M37_M39::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M39.f1)
  return _internal_f1();
}
inline void M36_M37_M39::_internal_set_f1(double value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36_M37_M39::set_f1(double value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M39.f1)
}

// optional int64 f2 = 2;
inline bool M36_M37_M39::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M36_M37_M39::has_f2() const {
  return _internal_has_f2();
}
inline void M36_M37_M39::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M39::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M39::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M39.f2)
  return _internal_f2();
}
inline void M36_M37_M39::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M36_M37_M39::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M39.f2)
}

// optional bytes f3 = 3;
inline bool M36_M37_M39::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M36_M37_M39::has_f3() const {
  return _internal_has_f3();
}
inline void M36_M37_M39::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M36_M37_M39::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M39.f3)
  return _internal_f3();
}
inline void M36_M37_M39::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M39.f3)
}
inline std::string* M36_M37_M39::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M37.M39.f3)
  return _internal_mutable_f3();
}
inline const std::string& M36_M37_M39::_internal_f3() const {
  return f3_.Get();
}
inline void M36_M37_M39::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M37_M39::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M37.M39.f3)
}
inline void M36_M37_M39::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M37.M39.f3)
}
inline void M36_M37_M39::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M37.M39.f3)
}
inline std::string* M36_M37_M39::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M37_M39::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M37.M39.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M37_M39::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M37.M39.f3)
}
inline std::string* M36_M37_M39::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M37.M39.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M37_M39::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M37.M39.f3)
}

// optional int64 f4 = 5;
inline bool M36_M37_M39::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M36_M37_M39::has_f4() const {
  return _internal_has_f4();
}
inline void M36_M37_M39::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M39::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37_M39::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.M39.f4)
  return _internal_f4();
}
inline void M36_M37_M39::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M36_M37_M39::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.M39.f4)
}

// -------------------------------------------------------------------

// M36_M37

// optional int64 f1 = 1;
inline bool M36_M37::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36_M37::has_f1() const {
  return _internal_has_f1();
}
inline void M36_M37::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M37::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.f1)
  return _internal_f1();
}
inline void M36_M37::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36_M37::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M37.f1)
}

// optional .hyperprotobench.M36.M37.M38 f2 = 2;
inline bool M36_M37::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M36_M37::has_f2() const {
  return _internal_has_f2();
}
inline void M36_M37::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M36_M37_M38& M36_M37::_internal_f2() const {
  const ::hyperprotobench::M36_M37_M38* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M36_M37_M38*>(
      &::hyperprotobench::_M36_M37_M38_default_instance_);
}
inline const ::hyperprotobench::M36_M37_M38& M36_M37::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M36_M37_M38* M36_M37::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M36_M37_M38* M36_M37::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M37.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M36_M37_M38* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M36_M37_M38* M36_M37::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M36_M37_M38>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M36_M37_M38* M36_M37::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M37.f2)
  return _internal_mutable_f2();
}
inline void M36_M37::set_allocated_f2(::hyperprotobench::M36_M37_M38* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M37.f2)
}

// optional .hyperprotobench.M36.M37.M39 f3 = 3;
inline bool M36_M37::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M36_M37::has_f3() const {
  return _internal_has_f3();
}
inline void M36_M37::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M36_M37_M39& M36_M37::_internal_f3() const {
  const ::hyperprotobench::M36_M37_M39* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M36_M37_M39*>(
      &::hyperprotobench::_M36_M37_M39_default_instance_);
}
inline const ::hyperprotobench::M36_M37_M39& M36_M37::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M37.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M36_M37_M39* M36_M37::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M36_M37_M39* M36_M37::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M37.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M36_M37_M39* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M36_M37_M39* M36_M37::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M36_M37_M39>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M36_M37_M39* M36_M37::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M37.f3)
  return _internal_mutable_f3();
}
inline void M36_M37::set_allocated_f3(::hyperprotobench::M36_M37_M39* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M37.f3)
}

// -------------------------------------------------------------------

// M36_M40

// optional int64 f1 = 2;
inline bool M36_M40::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36_M40::has_f1() const {
  return _internal_has_f1();
}
inline void M36_M40::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f1)
  return _internal_f1();
}
inline void M36_M40::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36_M40::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f1)
}

// optional bytes f2 = 4;
inline bool M36_M40::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M36_M40::has_f2() const {
  return _internal_has_f2();
}
inline void M36_M40::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M36_M40::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f2)
  return _internal_f2();
}
inline void M36_M40::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f2)
}
inline std::string* M36_M40::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M40.f2)
  return _internal_mutable_f2();
}
inline const std::string& M36_M40::_internal_f2() const {
  return f2_.Get();
}
inline void M36_M40::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M40::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M40.f2)
}
inline void M36_M40::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M40.f2)
}
inline void M36_M40::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M40.f2)
}
inline std::string* M36_M40::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M40::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M40.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M40::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M40.f2)
}
inline std::string* M36_M40::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M40.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M40::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M40.f2)
}

// optional bytes f3 = 5;
inline bool M36_M40::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M36_M40::has_f3() const {
  return _internal_has_f3();
}
inline void M36_M40::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M36_M40::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f3)
  return _internal_f3();
}
inline void M36_M40::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f3)
}
inline std::string* M36_M40::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M40.f3)
  return _internal_mutable_f3();
}
inline const std::string& M36_M40::_internal_f3() const {
  return f3_.Get();
}
inline void M36_M40::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M40::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M40.f3)
}
inline void M36_M40::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M40.f3)
}
inline void M36_M40::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M40.f3)
}
inline std::string* M36_M40::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M40::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M40.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M40::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M40.f3)
}
inline std::string* M36_M40::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M40.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M40::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M40.f3)
}

// optional fixed32 f4 = 6;
inline bool M36_M40::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M36_M40::has_f4() const {
  return _internal_has_f4();
}
inline void M36_M40::clear_f4() {
  f4_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M36_M40::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M36_M40::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f4)
  return _internal_f4();
}
inline void M36_M40::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M36_M40::set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f4)
}

// optional uint32 f5 = 8;
inline bool M36_M40::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M36_M40::has_f5() const {
  return _internal_has_f5();
}
inline void M36_M40::clear_f5() {
  f5_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M36_M40::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M36_M40::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f5)
  return _internal_f5();
}
inline void M36_M40::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M36_M40::set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f5)
}

// optional .hyperprotobench.M36.M40.E1 f6 = 9;
inline bool M36_M40::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M36_M40::has_f6() const {
  return _internal_has_f6();
}
inline void M36_M40::clear_f6() {
  f6_ = 67;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::hyperprotobench::M36_M40_E1 M36_M40::_internal_f6() const {
  return static_cast< ::hyperprotobench::M36_M40_E1 >(f6_);
}
inline ::hyperprotobench::M36_M40_E1 M36_M40::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f6)
  return _internal_f6();
}
inline void M36_M40::_internal_set_f6(::hyperprotobench::M36_M40_E1 value) {
  assert(::hyperprotobench::M36_M40_E1_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M36_M40::set_f6(::hyperprotobench::M36_M40_E1 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f6)
}

// optional int64 f7 = 10;
inline bool M36_M40::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M36_M40::has_f7() const {
  return _internal_has_f7();
}
inline void M36_M40::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f7)
  return _internal_f7();
}
inline void M36_M40::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M36_M40::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f7)
}

// optional int64 f8 = 11;
inline bool M36_M40::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M36_M40::has_f8() const {
  return _internal_has_f8();
}
inline void M36_M40::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M40::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M40.f8)
  return _internal_f8();
}
inline void M36_M40::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f8_ = value;
}
inline void M36_M40::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M40.f8)
}

// -------------------------------------------------------------------

// M36_M41

// optional int64 f1 = 1;
inline bool M36_M41::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36_M41::has_f1() const {
  return _internal_has_f1();
}
inline void M36_M41::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M41::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M41::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f1)
  return _internal_f1();
}
inline void M36_M41::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36_M41::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f1)
}

// optional bytes f2 = 3;
inline bool M36_M41::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M36_M41::has_f2() const {
  return _internal_has_f2();
}
inline void M36_M41::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M36_M41::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f2)
  return _internal_f2();
}
inline void M36_M41::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f2)
}
inline std::string* M36_M41::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M41.f2)
  return _internal_mutable_f2();
}
inline const std::string& M36_M41::_internal_f2() const {
  return f2_.Get();
}
inline void M36_M41::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M41::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M41.f2)
}
inline void M36_M41::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M41.f2)
}
inline void M36_M41::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M41.f2)
}
inline std::string* M36_M41::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M41::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M41.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M41::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M41.f2)
}
inline std::string* M36_M41::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M41.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M41::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M41.f2)
}

// optional int64 f3 = 6;
inline bool M36_M41::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M36_M41::has_f3() const {
  return _internal_has_f3();
}
inline void M36_M41::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M41::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36_M41::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f3)
  return _internal_f3();
}
inline void M36_M41::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M36_M41::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f3)
}

// optional string f4 = 8;
inline bool M36_M41::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M36_M41::has_f4() const {
  return _internal_has_f4();
}
inline void M36_M41::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M36_M41::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f4)
  return _internal_f4();
}
inline void M36_M41::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f4)
}
inline std::string* M36_M41::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M41.f4)
  return _internal_mutable_f4();
}
inline const std::string& M36_M41::_internal_f4() const {
  return f4_.Get();
}
inline void M36_M41::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M41::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M41.f4)
}
inline void M36_M41::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M41.f4)
}
inline void M36_M41::set_f4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M41.f4)
}
inline std::string* M36_M41::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000100u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M41::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M41.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M41::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M41.f4)
}
inline std::string* M36_M41::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M41.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M41::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M41.f4)
}

// optional bool f5 = 9;
inline bool M36_M41::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M36_M41::has_f5() const {
  return _internal_has_f5();
}
inline void M36_M41::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M36_M41::_internal_f5() const {
  return f5_;
}
inline bool M36_M41::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f5)
  return _internal_f5();
}
inline void M36_M41::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M36_M41::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f5)
}

// optional int32 f6 = 12;
inline bool M36_M41::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M36_M41::has_f6() const {
  return _internal_has_f6();
}
inline void M36_M41::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M36_M41::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M36_M41::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f6)
  return _internal_f6();
}
inline void M36_M41::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f6_ = value;
}
inline void M36_M41::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f6)
}

// optional bytes f7 = 16;
inline bool M36_M41::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M36_M41::has_f7() const {
  return _internal_has_f7();
}
inline void M36_M41::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& M36_M41::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.M41.f7)
  return _internal_f7();
}
inline void M36_M41::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.M41.f7)
}
inline std::string* M36_M41::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.M41.f7)
  return _internal_mutable_f7();
}
inline const std::string& M36_M41::_internal_f7() const {
  return f7_.Get();
}
inline void M36_M41::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36_M41::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.M41.f7)
}
inline void M36_M41::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.M41.f7)
}
inline void M36_M41::set_f7(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.M41.f7)
}
inline std::string* M36_M41::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00010000u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36_M41::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.M41.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36_M41::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.M41.f7)
}
inline std::string* M36_M41::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.M41.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36_M41::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.M41.f7)
}

// -------------------------------------------------------------------

// M36

// optional int64 f1 = 2;
inline bool M36::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M36::has_f1() const {
  return _internal_has_f1();
}
inline void M36::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f1)
  return _internal_f1();
}
inline void M36::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M36::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f1)
}

// optional .hyperprotobench.M36.M37 f2 = 3;
inline bool M36::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M36::has_f2() const {
  return _internal_has_f2();
}
inline void M36::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M36_M37& M36::_internal_f2() const {
  const ::hyperprotobench::M36_M37* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M36_M37*>(
      &::hyperprotobench::_M36_M37_default_instance_);
}
inline const ::hyperprotobench::M36_M37& M36::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M36_M37* M36::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M36_M37* M36::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M36_M37* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M36_M37* M36::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M36_M37>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M36_M37* M36::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.f2)
  return _internal_mutable_f2();
}
inline void M36::set_allocated_f2(::hyperprotobench::M36_M37* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.f2)
}

// optional bytes f3 = 5;
inline bool M36::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M36::has_f3() const {
  return _internal_has_f3();
}
inline void M36::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M36::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f3)
  return _internal_f3();
}
inline void M36::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f3)
}
inline std::string* M36::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.f3)
  return _internal_mutable_f3();
}
inline const std::string& M36::_internal_f3() const {
  return f3_.Get();
}
inline void M36::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M36::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M36.f3)
}
inline void M36::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M36.f3)
}
inline void M36::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M36.f3)
}
inline std::string* M36::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M36::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M36::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.f3)
}
inline std::string* M36::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M36.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M36::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M36.f3)
}

// optional int32 f4 = 6;
inline bool M36::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M36::has_f4() const {
  return _internal_has_f4();
}
inline void M36::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M36::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M36::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f4)
  return _internal_f4();
}
inline void M36::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M36::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f4)
}

// optional int64 f5 = 11;
inline bool M36::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M36::has_f5() const {
  return _internal_has_f5();
}
inline void M36::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f5)
  return _internal_f5();
}
inline void M36::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f5_ = value;
}
inline void M36::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f5)
}

// optional bool f6 = 12;
inline bool M36::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M36::has_f6() const {
  return _internal_has_f6();
}
inline void M36::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool M36::_internal_f6() const {
  return f6_;
}
inline bool M36::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f6)
  return _internal_f6();
}
inline void M36::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000800u;
  f6_ = value;
}
inline void M36::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f6)
}

// optional int64 f7 = 13;
inline bool M36::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M36::has_f7() const {
  return _internal_has_f7();
}
inline void M36::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f7)
  return _internal_f7();
}
inline void M36::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  f7_ = value;
}
inline void M36::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f7)
}

// optional .hyperprotobench.M36.M40 f8 = 14;
inline bool M36::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M36::has_f8() const {
  return _internal_has_f8();
}
inline void M36::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
inline const ::hyperprotobench::M36_M40& M36::_internal_f8() const {
  const ::hyperprotobench::M36_M40* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M36_M40*>(
      &::hyperprotobench::_M36_M40_default_instance_);
}
inline const ::hyperprotobench::M36_M40& M36::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M36_M40* M36::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M36_M40* M36::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.f8)
  _has_bits_[0] &= ~0x00002000u;
  ::hyperprotobench::M36_M40* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M36_M40* M36::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00002000u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M36_M40>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M36_M40* M36::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.f8)
  return _internal_mutable_f8();
}
inline void M36::set_allocated_f8(::hyperprotobench::M36_M40* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.f8)
}

// optional double f9 = 15;
inline bool M36::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M36::has_f9() const {
  return _internal_has_f9();
}
inline void M36::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double M36::_internal_f9() const {
  return f9_;
}
inline double M36::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f9)
  return _internal_f9();
}
inline void M36::_internal_set_f9(double value) {
  _has_bits_[0] |= 0x00004000u;
  f9_ = value;
}
inline void M36::set_f9(double value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f9)
}

// optional bool f10 = 16;
inline bool M36::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M36::has_f10() const {
  return _internal_has_f10();
}
inline void M36::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool M36::_internal_f10() const {
  return f10_;
}
inline bool M36::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f10)
  return _internal_f10();
}
inline void M36::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00008000u;
  f10_ = value;
}
inline void M36::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f10)
}

// optional double f11 = 19;
inline bool M36::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M36::has_f11() const {
  return _internal_has_f11();
}
inline void M36::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline double M36::_internal_f11() const {
  return f11_;
}
inline double M36::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f11)
  return _internal_f11();
}
inline void M36::_internal_set_f11(double value) {
  _has_bits_[0] |= 0x00040000u;
  f11_ = value;
}
inline void M36::set_f11(double value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f11)
}

// optional int64 f12 = 20;
inline bool M36::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M36::has_f12() const {
  return _internal_has_f12();
}
inline void M36::clear_f12() {
  f12_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f12)
  return _internal_f12();
}
inline void M36::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00080000u;
  f12_ = value;
}
inline void M36::set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f12)
}

// optional .hyperprotobench.M36.M41 f13 = 23;
inline bool M36::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || f13_ != nullptr);
  return value;
}
inline bool M36::has_f13() const {
  return _internal_has_f13();
}
inline void M36::clear_f13() {
  if (f13_ != nullptr) f13_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
inline const ::hyperprotobench::M36_M41& M36::_internal_f13() const {
  const ::hyperprotobench::M36_M41* p = f13_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M36_M41*>(
      &::hyperprotobench::_M36_M41_default_instance_);
}
inline const ::hyperprotobench::M36_M41& M36::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f13)
  return _internal_f13();
}
inline ::hyperprotobench::M36_M41* M36::release_f13() {
  auto temp = unsafe_arena_release_f13();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M36_M41* M36::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M36.f13)
  _has_bits_[0] &= ~0x00400000u;
  ::hyperprotobench::M36_M41* temp = f13_;
  f13_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M36_M41* M36::_internal_mutable_f13() {
  _has_bits_[0] |= 0x00400000u;
  if (f13_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M36_M41>(GetArenaNoVirtual());
    f13_ = p;
  }
  return f13_;
}
inline ::hyperprotobench::M36_M41* M36::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M36.f13)
  return _internal_mutable_f13();
}
inline void M36::set_allocated_f13(::hyperprotobench::M36_M41* f13) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f13_;
  }
  if (f13) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f13);
    if (message_arena != submessage_arena) {
      f13 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f13, submessage_arena);
    }
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  f13_ = f13;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M36.f13)
}

// optional int64 f14 = 24;
inline bool M36::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool M36::has_f14() const {
  return _internal_has_f14();
}
inline void M36::clear_f14() {
  f14_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::_internal_f14() const {
  return f14_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M36::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f14)
  return _internal_f14();
}
inline void M36::_internal_set_f14(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00800000u;
  f14_ = value;
}
inline void M36::set_f14(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f14(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f14)
}

// optional uint64 f15 = 25;
inline bool M36::_internal_has_f15() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool M36::has_f15() const {
  return _internal_has_f15();
}
inline void M36::clear_f15() {
  f15_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M36::_internal_f15() const {
  return f15_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M36::f15() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M36.f15)
  return _internal_f15();
}
inline void M36::_internal_set_f15(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x01000000u;
  f15_ = value;
}
inline void M36::set_f15(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f15(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M36.f15)
}

// -------------------------------------------------------------------

// M42_M43

// optional bytes f1 = 6;
inline bool M42_M43::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42_M43::has_f1() const {
  return _internal_has_f1();
}
inline void M42_M43::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M42_M43::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f1)
  return _internal_f1();
}
inline void M42_M43::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f1)
}
inline std::string* M42_M43::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M43.f1)
  return _internal_mutable_f1();
}
inline const std::string& M42_M43::_internal_f1() const {
  return f1_.Get();
}
inline void M42_M43::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M43::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M43.f1)
}
inline void M42_M43::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M43.f1)
}
inline void M42_M43::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M43.f1)
}
inline std::string* M42_M43::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M43::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M43.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M43::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M43.f1)
}
inline std::string* M42_M43::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M43.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M43::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M43.f1)
}

// optional bytes f2 = 8;
inline bool M42_M43::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M42_M43::has_f2() const {
  return _internal_has_f2();
}
inline void M42_M43::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M42_M43::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f2)
  return _internal_f2();
}
inline void M42_M43::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f2)
}
inline std::string* M42_M43::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M43.f2)
  return _internal_mutable_f2();
}
inline const std::string& M42_M43::_internal_f2() const {
  return f2_.Get();
}
inline void M42_M43::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M43::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M43.f2)
}
inline void M42_M43::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M43.f2)
}
inline void M42_M43::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M43.f2)
}
inline std::string* M42_M43::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M43::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M43.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M43::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M43.f2)
}
inline std::string* M42_M43::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M43.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M43::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M43.f2)
}

// optional int64 f3 = 9;
inline bool M42_M43::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M42_M43::has_f3() const {
  return _internal_has_f3();
}
inline void M42_M43::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f3)
  return _internal_f3();
}
inline void M42_M43::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M42_M43::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f3)
}

// repeated bytes f4 = 11;
inline int M42_M43::_internal_f4_size() const {
  return f4_.size();
}
inline int M42_M43::f4_size() const {
  return _internal_f4_size();
}
inline void M42_M43::clear_f4() {
  f4_.Clear();
}
inline std::string* M42_M43::add_f4() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M42.M43.f4)
  return _internal_add_f4();
}
inline const std::string& M42_M43::_internal_f4(int index) const {
  return f4_.Get(index);
}
inline const std::string& M42_M43::f4(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f4)
  return _internal_f4(index);
}
inline std::string* M42_M43::mutable_f4(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M43.f4)
  return f4_.Mutable(index);
}
inline void M42_M43::set_f4(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f4)
  f4_.Mutable(index)->assign(value);
}
inline void M42_M43::set_f4(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f4)
  f4_.Mutable(index)->assign(std::move(value));
}
inline void M42_M43::set_f4(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M43.f4)
}
inline void M42_M43::set_f4(int index, const void* value, size_t size) {
  f4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M43.f4)
}
inline std::string* M42_M43::_internal_add_f4() {
  _has_bits_[0] |= 0x00000040u;
  return f4_.Add();
}
inline void M42_M43::add_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M42.M43.f4)
}
inline void M42_M43::add_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M42.M43.f4)
}
inline void M42_M43::add_f4(const char* value) {
  _has_bits_[0] |= 0x00000040u;
  GOOGLE_DCHECK(value != nullptr);
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M42.M43.f4)
}
inline void M42_M43::add_f4(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M42.M43.f4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M42_M43::f4() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M42.M43.f4)
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M42_M43::mutable_f4() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M42.M43.f4)
  return &f4_;
}

// optional int64 f5 = 13;
inline bool M42_M43::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M42_M43::has_f5() const {
  return _internal_has_f5();
}
inline void M42_M43::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f5)
  return _internal_f5();
}
inline void M42_M43::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  f5_ = value;
}
inline void M42_M43::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f5)
}

// optional fixed64 f6 = 14;
inline bool M42_M43::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M42_M43::has_f6() const {
  return _internal_has_f6();
}
inline void M42_M43::clear_f6() {
  f6_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M43::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M43::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f6)
  return _internal_f6();
}
inline void M42_M43::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  f6_ = value;
}
inline void M42_M43::set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f6)
}

// optional fixed64 f7 = 15;
inline bool M42_M43::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M42_M43::has_f7() const {
  return _internal_has_f7();
}
inline void M42_M43::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M43::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M43::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f7)
  return _internal_f7();
}
inline void M42_M43::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M42_M43::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f7)
}

// optional bytes f8 = 16;
inline bool M42_M43::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M42_M43::has_f8() const {
  return _internal_has_f8();
}
inline void M42_M43::clear_f8() {
  f8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M42_M43::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f8)
  return _internal_f8();
}
inline void M42_M43::set_f8(const std::string& value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f8)
}
inline std::string* M42_M43::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M43.f8)
  return _internal_mutable_f8();
}
inline const std::string& M42_M43::_internal_f8() const {
  return f8_.Get();
}
inline void M42_M43::_internal_set_f8(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M43::set_f8(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M43.f8)
}
inline void M42_M43::set_f8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M43.f8)
}
inline void M42_M43::set_f8(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M43.f8)
}
inline std::string* M42_M43::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00000800u;
  return f8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M43::release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M43.f8)
  if (!_internal_has_f8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M43::set_allocated_f8(std::string* f8) {
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f8,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M43.f8)
}
inline std::string* M42_M43::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M43.f8)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M43::unsafe_arena_set_allocated_f8(
    std::string* f8) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f8 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f8, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M43.f8)
}

// optional int64 f9 = 19;
inline bool M42_M43::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M42_M43::has_f9() const {
  return _internal_has_f9();
}
inline void M42_M43::clear_f9() {
  f9_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f9)
  return _internal_f9();
}
inline void M42_M43::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f9_ = value;
}
inline void M42_M43::set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f9)
}

// optional int64 f10 = 20;
inline bool M42_M43::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M42_M43::has_f10() const {
  return _internal_has_f10();
}
inline void M42_M43::clear_f10() {
  f10_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M43::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f10)
  return _internal_f10();
}
inline void M42_M43::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  f10_ = value;
}
inline void M42_M43::set_f10(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f10)
}

// optional string f11 = 22;
inline bool M42_M43::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M42_M43::has_f11() const {
  return _internal_has_f11();
}
inline void M42_M43::clear_f11() {
  f11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& M42_M43::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M43.f11)
  return _internal_f11();
}
inline void M42_M43::set_f11(const std::string& value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M43.f11)
}
inline std::string* M42_M43::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M43.f11)
  return _internal_mutable_f11();
}
inline const std::string& M42_M43::_internal_f11() const {
  return f11_.Get();
}
inline void M42_M43::_internal_set_f11(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M43::set_f11(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  f11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M43.f11)
}
inline void M42_M43::set_f11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M43.f11)
}
inline void M42_M43::set_f11(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M43.f11)
}
inline std::string* M42_M43::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00020000u;
  return f11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M43::release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M43.f11)
  if (!_internal_has_f11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return f11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M43::set_allocated_f11(std::string* f11) {
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f11,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M43.f11)
}
inline std::string* M42_M43::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M43.f11)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return f11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M43::unsafe_arena_set_allocated_f11(
    std::string* f11) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f11, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M43.f11)
}

// -------------------------------------------------------------------

// M42_M44

// optional int64 f1 = 1;
inline bool M42_M44::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42_M44::has_f1() const {
  return _internal_has_f1();
}
inline void M42_M44::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f1)
  return _internal_f1();
}
inline void M42_M44::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M42_M44::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f1)
}

// optional .hyperprotobench.M42.M44.E1 f2 = 3;
inline bool M42_M44::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M42_M44::has_f2() const {
  return _internal_has_f2();
}
inline void M42_M44::clear_f2() {
  f2_ = 37;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::hyperprotobench::M42_M44_E1 M42_M44::_internal_f2() const {
  return static_cast< ::hyperprotobench::M42_M44_E1 >(f2_);
}
inline ::hyperprotobench::M42_M44_E1 M42_M44::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f2)
  return _internal_f2();
}
inline void M42_M44::_internal_set_f2(::hyperprotobench::M42_M44_E1 value) {
  assert(::hyperprotobench::M42_M44_E1_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M42_M44::set_f2(::hyperprotobench::M42_M44_E1 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f2)
}

// optional int64 f3 = 4;
inline bool M42_M44::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M42_M44::has_f3() const {
  return _internal_has_f3();
}
inline void M42_M44::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f3)
  return _internal_f3();
}
inline void M42_M44::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f3_ = value;
}
inline void M42_M44::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f3)
}

// optional fixed64 f4 = 8;
inline bool M42_M44::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M42_M44::has_f4() const {
  return _internal_has_f4();
}
inline void M42_M44::clear_f4() {
  f4_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M44::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42_M44::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f4)
  return _internal_f4();
}
inline void M42_M44::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  f4_ = value;
}
inline void M42_M44::set_f4(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f4)
}

// optional bytes f5 = 9;
inline bool M42_M44::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M42_M44::has_f5() const {
  return _internal_has_f5();
}
inline void M42_M44::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M42_M44::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f5)
  return _internal_f5();
}
inline void M42_M44::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f5)
}
inline std::string* M42_M44::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M44.f5)
  return _internal_mutable_f5();
}
inline const std::string& M42_M44::_internal_f5() const {
  return f5_.Get();
}
inline void M42_M44::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M44::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M44.f5)
}
inline void M42_M44::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M44.f5)
}
inline void M42_M44::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M44.f5)
}
inline std::string* M42_M44::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000200u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M44::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M44.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M44::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M44.f5)
}
inline std::string* M42_M44::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M44.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M44::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M44.f5)
}

// optional fixed32 f6 = 11;
inline bool M42_M44::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M42_M44::has_f6() const {
  return _internal_has_f6();
}
inline void M42_M44::clear_f6() {
  f6_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M42_M44::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M42_M44::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f6)
  return _internal_f6();
}
inline void M42_M44::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  f6_ = value;
}
inline void M42_M44::set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f6)
}

// optional int32 f7 = 12;
inline bool M42_M44::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M42_M44::has_f7() const {
  return _internal_has_f7();
}
inline void M42_M44::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M44::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M44::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f7)
  return _internal_f7();
}
inline void M42_M44::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f7_ = value;
}
inline void M42_M44::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f7)
}

// optional int64 f8 = 14;
inline bool M42_M44::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M42_M44::has_f8() const {
  return _internal_has_f8();
}
inline void M42_M44::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M44::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f8)
  return _internal_f8();
}
inline void M42_M44::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f8_ = value;
}
inline void M42_M44::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f8)
}

// optional bytes f9 = 15;
inline bool M42_M44::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M42_M44::has_f9() const {
  return _internal_has_f9();
}
inline void M42_M44::clear_f9() {
  f9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& M42_M44::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M44.f9)
  return _internal_f9();
}
inline void M42_M44::set_f9(const std::string& value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M44.f9)
}
inline std::string* M42_M44::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M44.f9)
  return _internal_mutable_f9();
}
inline const std::string& M42_M44::_internal_f9() const {
  return f9_.Get();
}
inline void M42_M44::_internal_set_f9(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42_M44::set_f9(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  f9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.M44.f9)
}
inline void M42_M44::set_f9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.M44.f9)
}
inline void M42_M44::set_f9(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  f9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.M44.f9)
}
inline std::string* M42_M44::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00008000u;
  return f9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42_M44::release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M44.f9)
  if (!_internal_has_f9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return f9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42_M44::set_allocated_f9(std::string* f9) {
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f9,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M44.f9)
}
inline std::string* M42_M44::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.M44.f9)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return f9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42_M44::unsafe_arena_set_allocated_f9(
    std::string* f9) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f9 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f9, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.M44.f9)
}

// -------------------------------------------------------------------

// M42_M45_M46

// optional int32 f1 = 1;
inline bool M42_M45_M46::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42_M45_M46::has_f1() const {
  return _internal_has_f1();
}
inline void M42_M45_M46::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M45_M46::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M45_M46::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M45.M46.f1)
  return _internal_f1();
}
inline void M42_M45_M46::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M42_M45_M46::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M45.M46.f1)
}

// optional int64 f2 = 2;
inline bool M42_M45_M46::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M42_M45_M46::has_f2() const {
  return _internal_has_f2();
}
inline void M42_M45_M46::clear_f2() {
  f2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M45_M46::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M45_M46::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M45.M46.f2)
  return _internal_f2();
}
inline void M42_M45_M46::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M42_M45_M46::set_f2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M45.M46.f2)
}

// optional int64 f3 = 3;
inline bool M42_M45_M46::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M42_M45_M46::has_f3() const {
  return _internal_has_f3();
}
inline void M42_M45_M46::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M45_M46::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M45_M46::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M45.M46.f3)
  return _internal_f3();
}
inline void M42_M45_M46::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M42_M45_M46::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M45.M46.f3)
}

// -------------------------------------------------------------------

// M42_M45

// optional int32 f1 = 2;
inline bool M42_M45::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42_M45::has_f1() const {
  return _internal_has_f1();
}
inline void M42_M45::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M45::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M42_M45::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M45.f1)
  return _internal_f1();
}
inline void M42_M45::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M42_M45::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M45.f1)
}

// optional .hyperprotobench.M42.M45.M46 f2 = 4;
inline bool M42_M45::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M42_M45::has_f2() const {
  return _internal_has_f2();
}
inline void M42_M45::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M42_M45_M46& M42_M45::_internal_f2() const {
  const ::hyperprotobench::M42_M45_M46* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M42_M45_M46*>(
      &::hyperprotobench::_M42_M45_M46_default_instance_);
}
inline const ::hyperprotobench::M42_M45_M46& M42_M45::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M45.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M42_M45_M46* M42_M45::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M42_M45_M46* M42_M45::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.M45.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M42_M45_M46* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M42_M45_M46* M42_M45::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M42_M45_M46>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M42_M45_M46* M42_M45::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.M45.f2)
  return _internal_mutable_f2();
}
inline void M42_M45::set_allocated_f2(::hyperprotobench::M42_M45_M46* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.M45.f2)
}

// -------------------------------------------------------------------

// M42_M47

// optional int64 f1 = 2;
inline bool M42_M47::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42_M47::has_f1() const {
  return _internal_has_f1();
}
inline void M42_M47::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M47::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42_M47::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.M47.f1)
  return _internal_f1();
}
inline void M42_M47::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M42_M47::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.M47.f1)
}

// -------------------------------------------------------------------

// M42

// optional bytes f1 = 1;
inline bool M42::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M42::has_f1() const {
  return _internal_has_f1();
}
inline void M42::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M42::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f1)
  return _internal_f1();
}
inline void M42::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f1)
}
inline std::string* M42::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f1)
  return _internal_mutable_f1();
}
inline const std::string& M42::_internal_f1() const {
  return f1_.Get();
}
inline void M42::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.f1)
}
inline void M42::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.f1)
}
inline void M42::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.f1)
}
inline std::string* M42::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f1)
}
inline std::string* M42::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f1)
}

// optional string f2 = 4;
inline bool M42::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M42::has_f2() const {
  return _internal_has_f2();
}
inline void M42::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M42::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f2)
  return _internal_f2();
}
inline void M42::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f2)
}
inline std::string* M42::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f2)
  return _internal_mutable_f2();
}
inline const std::string& M42::_internal_f2() const {
  return f2_.Get();
}
inline void M42::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.f2)
}
inline void M42::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.f2)
}
inline void M42::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.f2)
}
inline std::string* M42::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000010u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f2)
}
inline std::string* M42::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f2)
}

// optional uint64 f3 = 5;
inline bool M42::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M42::has_f3() const {
  return _internal_has_f3();
}
inline void M42::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M42::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f3)
  return _internal_f3();
}
inline void M42::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M42::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f3)
}

// optional int64 f4 = 6;
inline bool M42::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M42::has_f4() const {
  return _internal_has_f4();
}
inline void M42::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f4)
  return _internal_f4();
}
inline void M42::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M42::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f4)
}

// optional int64 f5 = 9;
inline bool M42::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M42::has_f5() const {
  return _internal_has_f5();
}
inline void M42::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f5)
  return _internal_f5();
}
inline void M42::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M42::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f5)
}

// optional int64 f6 = 10;
inline bool M42::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M42::has_f6() const {
  return _internal_has_f6();
}
inline void M42::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f6)
  return _internal_f6();
}
inline void M42::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f6_ = value;
}
inline void M42::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f6)
}

// optional .hyperprotobench.M42.M43 f7 = 11;
inline bool M42::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || f7_ != nullptr);
  return value;
}
inline bool M42::has_f7() const {
  return _internal_has_f7();
}
inline void M42::clear_f7() {
  if (f7_ != nullptr) f7_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::hyperprotobench::M42_M43& M42::_internal_f7() const {
  const ::hyperprotobench::M42_M43* p = f7_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M42_M43*>(
      &::hyperprotobench::_M42_M43_default_instance_);
}
inline const ::hyperprotobench::M42_M43& M42::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f7)
  return _internal_f7();
}
inline ::hyperprotobench::M42_M43* M42::release_f7() {
  auto temp = unsafe_arena_release_f7();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M42_M43* M42::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f7)
  _has_bits_[0] &= ~0x00000800u;
  ::hyperprotobench::M42_M43* temp = f7_;
  f7_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M42_M43* M42::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000800u;
  if (f7_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M42_M43>(GetArenaNoVirtual());
    f7_ = p;
  }
  return f7_;
}
inline ::hyperprotobench::M42_M43* M42::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f7)
  return _internal_mutable_f7();
}
inline void M42::set_allocated_f7(::hyperprotobench::M42_M43* f7) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f7_;
  }
  if (f7) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f7);
    if (message_arena != submessage_arena) {
      f7 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f7, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f7_ = f7;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f7)
}

// optional int64 f8 = 13;
inline bool M42::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M42::has_f8() const {
  return _internal_has_f8();
}
inline void M42::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f8)
  return _internal_f8();
}
inline void M42::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  f8_ = value;
}
inline void M42::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f8)
}

// optional .hyperprotobench.M42.M44 f9 = 18;
inline bool M42::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M42::has_f9() const {
  return _internal_has_f9();
}
inline void M42::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
inline const ::hyperprotobench::M42_M44& M42::_internal_f9() const {
  const ::hyperprotobench::M42_M44* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M42_M44*>(
      &::hyperprotobench::_M42_M44_default_instance_);
}
inline const ::hyperprotobench::M42_M44& M42::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M42_M44* M42::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M42_M44* M42::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f9)
  _has_bits_[0] &= ~0x00040000u;
  ::hyperprotobench::M42_M44* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M42_M44* M42::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00040000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M42_M44>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M42_M44* M42::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f9)
  return _internal_mutable_f9();
}
inline void M42::set_allocated_f9(::hyperprotobench::M42_M44* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f9)
}

// optional .hyperprotobench.M42.M45 f10 = 19;
inline bool M42::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M42::has_f10() const {
  return _internal_has_f10();
}
inline void M42::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::hyperprotobench::M42_M45& M42::_internal_f10() const {
  const ::hyperprotobench::M42_M45* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M42_M45*>(
      &::hyperprotobench::_M42_M45_default_instance_);
}
inline const ::hyperprotobench::M42_M45& M42::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M42_M45* M42::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M42_M45* M42::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f10)
  _has_bits_[0] &= ~0x00080000u;
  ::hyperprotobench::M42_M45* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M42_M45* M42::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00080000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M42_M45>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M42_M45* M42::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f10)
  return _internal_mutable_f10();
}
inline void M42::set_allocated_f10(::hyperprotobench::M42_M45* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f10)
}

// optional double f11 = 22;
inline bool M42::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M42::has_f11() const {
  return _internal_has_f11();
}
inline void M42::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double M42::_internal_f11() const {
  return f11_;
}
inline double M42::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f11)
  return _internal_f11();
}
inline void M42::_internal_set_f11(double value) {
  _has_bits_[0] |= 0x00400000u;
  f11_ = value;
}
inline void M42::set_f11(double value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f11)
}

// optional bool f12 = 28;
inline bool M42::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool M42::has_f12() const {
  return _internal_has_f12();
}
inline void M42::clear_f12() {
  f12_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool M42::_internal_f12() const {
  return f12_;
}
inline bool M42::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f12)
  return _internal_f12();
}
inline void M42::_internal_set_f12(bool value) {
  _has_bits_[0] |= 0x10000000u;
  f12_ = value;
}
inline void M42::set_f12(bool value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f12)
}

// optional bytes f13 = 29;
inline bool M42::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool M42::has_f13() const {
  return _internal_has_f13();
}
inline void M42::clear_f13() {
  f13_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x20000000u;
}
inline const std::string& M42::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f13)
  return _internal_f13();
}
inline void M42::set_f13(const std::string& value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f13)
}
inline std::string* M42::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f13)
  return _internal_mutable_f13();
}
inline const std::string& M42::_internal_f13() const {
  return f13_.Get();
}
inline void M42::_internal_set_f13(const std::string& value) {
  _has_bits_[0] |= 0x20000000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42::set_f13(std::string&& value) {
  _has_bits_[0] |= 0x20000000u;
  f13_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.f13)
}
inline void M42::set_f13(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x20000000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.f13)
}
inline void M42::set_f13(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x20000000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.f13)
}
inline std::string* M42::_internal_mutable_f13() {
  _has_bits_[0] |= 0x20000000u;
  return f13_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42::release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f13)
  if (!_internal_has_f13()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x20000000u;
  return f13_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42::set_allocated_f13(std::string* f13) {
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  f13_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f13,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f13)
}
inline std::string* M42::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.f13)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x20000000u;
  return f13_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42::unsafe_arena_set_allocated_f13(
    std::string* f13) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  f13_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f13, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f13)
}

// optional .hyperprotobench.M42.M47 f14 = 30;
inline bool M42::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || f14_ != nullptr);
  return value;
}
inline bool M42::has_f14() const {
  return _internal_has_f14();
}
inline void M42::clear_f14() {
  if (f14_ != nullptr) f14_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
inline const ::hyperprotobench::M42_M47& M42::_internal_f14() const {
  const ::hyperprotobench::M42_M47* p = f14_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M42_M47*>(
      &::hyperprotobench::_M42_M47_default_instance_);
}
inline const ::hyperprotobench::M42_M47& M42::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f14)
  return _internal_f14();
}
inline ::hyperprotobench::M42_M47* M42::release_f14() {
  auto temp = unsafe_arena_release_f14();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M42_M47* M42::unsafe_arena_release_f14() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f14)
  _has_bits_[0] &= ~0x40000000u;
  ::hyperprotobench::M42_M47* temp = f14_;
  f14_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M42_M47* M42::_internal_mutable_f14() {
  _has_bits_[0] |= 0x40000000u;
  if (f14_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M42_M47>(GetArenaNoVirtual());
    f14_ = p;
  }
  return f14_;
}
inline ::hyperprotobench::M42_M47* M42::mutable_f14() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f14)
  return _internal_mutable_f14();
}
inline void M42::set_allocated_f14(::hyperprotobench::M42_M47* f14) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f14_;
  }
  if (f14) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f14);
    if (message_arena != submessage_arena) {
      f14 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f14, submessage_arena);
    }
    _has_bits_[0] |= 0x40000000u;
  } else {
    _has_bits_[0] &= ~0x40000000u;
  }
  f14_ = f14;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f14)
}

// optional int64 f15 = 31;
inline bool M42::_internal_has_f15() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool M42::has_f15() const {
  return _internal_has_f15();
}
inline void M42::clear_f15() {
  f15_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::_internal_f15() const {
  return f15_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M42::f15() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f15)
  return _internal_f15();
}
inline void M42::_internal_set_f15(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x80000000u;
  f15_ = value;
}
inline void M42::set_f15(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f15(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f15)
}

// optional string f16 = 32;
inline bool M42::_internal_has_f16() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool M42::has_f16() const {
  return _internal_has_f16();
}
inline void M42::clear_f16() {
  f16_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[1] &= ~0x00000001u;
}
inline const std::string& M42::f16() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M42.f16)
  return _internal_f16();
}
inline void M42::set_f16(const std::string& value) {
  _internal_set_f16(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M42.f16)
}
inline std::string* M42::mutable_f16() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M42.f16)
  return _internal_mutable_f16();
}
inline const std::string& M42::_internal_f16() const {
  return f16_.Get();
}
inline void M42::_internal_set_f16(const std::string& value) {
  _has_bits_[1] |= 0x00000001u;
  f16_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M42::set_f16(std::string&& value) {
  _has_bits_[1] |= 0x00000001u;
  f16_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M42.f16)
}
inline void M42::set_f16(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[1] |= 0x00000001u;
  f16_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M42.f16)
}
inline void M42::set_f16(const char* value,
    size_t size) {
  _has_bits_[1] |= 0x00000001u;
  f16_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M42.f16)
}
inline std::string* M42::_internal_mutable_f16() {
  _has_bits_[1] |= 0x00000001u;
  return f16_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M42::release_f16() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M42.f16)
  if (!_internal_has_f16()) {
    return nullptr;
  }
  _has_bits_[1] &= ~0x00000001u;
  return f16_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M42::set_allocated_f16(std::string* f16) {
  if (f16 != nullptr) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  f16_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f16,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M42.f16)
}
inline std::string* M42::unsafe_arena_release_f16() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M42.f16)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[1] &= ~0x00000001u;
  return f16_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M42::unsafe_arena_set_allocated_f16(
    std::string* f16) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f16 != nullptr) {
    _has_bits_[1] |= 0x00000001u;
  } else {
    _has_bits_[1] &= ~0x00000001u;
  }
  f16_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f16, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M42.f16)
}

// -------------------------------------------------------------------

// M48_M49

// optional fixed64 f1 = 10;
inline bool M48_M49::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M48_M49::has_f1() const {
  return _internal_has_f1();
}
inline void M48_M49::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48_M49::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48_M49::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M49.f1)
  return _internal_f1();
}
inline void M48_M49::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M48_M49::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M49.f1)
}

// -------------------------------------------------------------------

// M48_M50_M51

// optional bytes f1 = 1;
inline bool M48_M50_M51::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M48_M50_M51::has_f1() const {
  return _internal_has_f1();
}
inline void M48_M50_M51::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M48_M50_M51::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.M51.f1)
  return _internal_f1();
}
inline void M48_M50_M51::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.M51.f1)
}
inline std::string* M48_M50_M51::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.M50.M51.f1)
  return _internal_mutable_f1();
}
inline const std::string& M48_M50_M51::_internal_f1() const {
  return f1_.Get();
}
inline void M48_M50_M51::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M48_M50_M51::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M48.M50.M51.f1)
}
inline void M48_M50_M51::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.M50.M51.f1)
}
inline void M48_M50_M51::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.M50.M51.f1)
}
inline std::string* M48_M50_M51::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M48_M50_M51::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.M50.M51.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M48_M50_M51::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.M50.M51.f1)
}
inline std::string* M48_M50_M51::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M48.M50.M51.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M48_M50_M51::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.M50.M51.f1)
}

// -------------------------------------------------------------------

// M48_M50

// optional bytes f1 = 2;
inline bool M48_M50::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M48_M50::has_f1() const {
  return _internal_has_f1();
}
inline void M48_M50::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M48_M50::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f1)
  return _internal_f1();
}
inline void M48_M50::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f1)
}
inline std::string* M48_M50::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.M50.f1)
  return _internal_mutable_f1();
}
inline const std::string& M48_M50::_internal_f1() const {
  return f1_.Get();
}
inline void M48_M50::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M48_M50::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M48.M50.f1)
}
inline void M48_M50::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.M50.f1)
}
inline void M48_M50::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.M50.f1)
}
inline std::string* M48_M50::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M48_M50::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.M50.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M48_M50::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.M50.f1)
}
inline std::string* M48_M50::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M48.M50.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M48_M50::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.M50.f1)
}

// optional fixed64 f2 = 3;
inline bool M48_M50::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M48_M50::has_f2() const {
  return _internal_has_f2();
}
inline void M48_M50::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48_M50::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48_M50::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f2)
  return _internal_f2();
}
inline void M48_M50::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M48_M50::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f2)
}

// optional .hyperprotobench.M48.M50.M51 f3 = 4;
inline bool M48_M50::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f3_ != nullptr);
  return value;
}
inline bool M48_M50::has_f3() const {
  return _internal_has_f3();
}
inline void M48_M50::clear_f3() {
  if (f3_ != nullptr) f3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M48_M50_M51& M48_M50::_internal_f3() const {
  const ::hyperprotobench::M48_M50_M51* p = f3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M48_M50_M51*>(
      &::hyperprotobench::_M48_M50_M51_default_instance_);
}
inline const ::hyperprotobench::M48_M50_M51& M48_M50::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f3)
  return _internal_f3();
}
inline ::hyperprotobench::M48_M50_M51* M48_M50::release_f3() {
  auto temp = unsafe_arena_release_f3();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M48_M50_M51* M48_M50::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.M50.f3)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M48_M50_M51* temp = f3_;
  f3_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M48_M50_M51* M48_M50::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  if (f3_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M48_M50_M51>(GetArenaNoVirtual());
    f3_ = p;
  }
  return f3_;
}
inline ::hyperprotobench::M48_M50_M51* M48_M50::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.M50.f3)
  return _internal_mutable_f3();
}
inline void M48_M50::set_allocated_f3(::hyperprotobench::M48_M50_M51* f3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f3_;
  }
  if (f3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f3);
    if (message_arena != submessage_arena) {
      f3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_ = f3;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.M50.f3)
}

// optional int64 f4 = 6;
inline bool M48_M50::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M48_M50::has_f4() const {
  return _internal_has_f4();
}
inline void M48_M50::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48_M50::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48_M50::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f4)
  return _internal_f4();
}
inline void M48_M50::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M48_M50::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f4)
}

// repeated bytes f5 = 7;
inline int M48_M50::_internal_f5_size() const {
  return f5_.size();
}
inline int M48_M50::f5_size() const {
  return _internal_f5_size();
}
inline void M48_M50::clear_f5() {
  f5_.Clear();
}
inline std::string* M48_M50::add_f5() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M48.M50.f5)
  return _internal_add_f5();
}
inline const std::string& M48_M50::_internal_f5(int index) const {
  return f5_.Get(index);
}
inline const std::string& M48_M50::f5(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f5)
  return _internal_f5(index);
}
inline std::string* M48_M50::mutable_f5(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.M50.f5)
  return f5_.Mutable(index);
}
inline void M48_M50::set_f5(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f5)
  f5_.Mutable(index)->assign(value);
}
inline void M48_M50::set_f5(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f5)
  f5_.Mutable(index)->assign(std::move(value));
}
inline void M48_M50::set_f5(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f5_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.M50.f5)
}
inline void M48_M50::set_f5(int index, const void* value, size_t size) {
  f5_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.M50.f5)
}
inline std::string* M48_M50::_internal_add_f5() {
  _has_bits_[0] |= 0x00000040u;
  return f5_.Add();
}
inline void M48_M50::add_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M48.M50.f5)
}
inline void M48_M50::add_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M48.M50.f5)
}
inline void M48_M50::add_f5(const char* value) {
  _has_bits_[0] |= 0x00000040u;
  GOOGLE_DCHECK(value != nullptr);
  f5_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M48.M50.f5)
}
inline void M48_M50::add_f5(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f5_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M48.M50.f5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M48_M50::f5() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M48.M50.f5)
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M48_M50::mutable_f5() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M48.M50.f5)
  return &f5_;
}

// optional int64 f6 = 8;
inline bool M48_M50::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M48_M50::has_f6() const {
  return _internal_has_f6();
}
inline void M48_M50::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48_M50::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48_M50::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.M50.f6)
  return _internal_f6();
}
inline void M48_M50::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M48_M50::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.M50.f6)
}

// -------------------------------------------------------------------

// M48

// optional bytes f1 = 1;
inline bool M48::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M48::has_f1() const {
  return _internal_has_f1();
}
inline void M48::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M48::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f1)
  return _internal_f1();
}
inline void M48::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f1)
}
inline std::string* M48::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.f1)
  return _internal_mutable_f1();
}
inline const std::string& M48::_internal_f1() const {
  return f1_.Get();
}
inline void M48::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M48::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M48.f1)
}
inline void M48::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.f1)
}
inline void M48::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.f1)
}
inline std::string* M48::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M48::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M48::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.f1)
}
inline std::string* M48::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M48.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M48::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.f1)
}

// optional double f2 = 4;
inline bool M48::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M48::has_f2() const {
  return _internal_has_f2();
}
inline void M48::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double M48::_internal_f2() const {
  return f2_;
}
inline double M48::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f2)
  return _internal_f2();
}
inline void M48::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000010u;
  f2_ = value;
}
inline void M48::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f2)
}

// optional int64 f3 = 5;
inline bool M48::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M48::has_f3() const {
  return _internal_has_f3();
}
inline void M48::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M48::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f3)
  return _internal_f3();
}
inline void M48::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M48::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f3)
}

// optional bytes f4 = 7;
inline bool M48::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M48::has_f4() const {
  return _internal_has_f4();
}
inline void M48::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M48::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f4)
  return _internal_f4();
}
inline void M48::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f4)
}
inline std::string* M48::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.f4)
  return _internal_mutable_f4();
}
inline const std::string& M48::_internal_f4() const {
  return f4_.Get();
}
inline void M48::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M48::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M48.f4)
}
inline void M48::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.f4)
}
inline void M48::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.f4)
}
inline std::string* M48::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000080u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M48::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M48::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.f4)
}
inline std::string* M48::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M48.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M48::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.f4)
}

// optional .hyperprotobench.M48.M49 f5 = 9;
inline bool M48::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M48::has_f5() const {
  return _internal_has_f5();
}
inline void M48::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::hyperprotobench::M48_M49& M48::_internal_f5() const {
  const ::hyperprotobench::M48_M49* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M48_M49*>(
      &::hyperprotobench::_M48_M49_default_instance_);
}
inline const ::hyperprotobench::M48_M49& M48::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M48_M49* M48::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M48_M49* M48::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.f5)
  _has_bits_[0] &= ~0x00000200u;
  ::hyperprotobench::M48_M49* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M48_M49* M48::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000200u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M48_M49>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M48_M49* M48::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.f5)
  return _internal_mutable_f5();
}
inline void M48::set_allocated_f5(::hyperprotobench::M48_M49* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.f5)
}

// optional .hyperprotobench.M48.M50 f6 = 10;
inline bool M48::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M48::has_f6() const {
  return _internal_has_f6();
}
inline void M48::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::hyperprotobench::M48_M50& M48::_internal_f6() const {
  const ::hyperprotobench::M48_M50* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M48_M50*>(
      &::hyperprotobench::_M48_M50_default_instance_);
}
inline const ::hyperprotobench::M48_M50& M48::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M48_M50* M48::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M48_M50* M48::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.f6)
  _has_bits_[0] &= ~0x00000400u;
  ::hyperprotobench::M48_M50* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M48_M50* M48::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000400u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M48_M50>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M48_M50* M48::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.f6)
  return _internal_mutable_f6();
}
inline void M48::set_allocated_f6(::hyperprotobench::M48_M50* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.f6)
}

// optional bytes f7 = 15;
inline bool M48::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M48::has_f7() const {
  return _internal_has_f7();
}
inline void M48::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& M48::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f7)
  return _internal_f7();
}
inline void M48::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f7)
}
inline std::string* M48::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M48.f7)
  return _internal_mutable_f7();
}
inline const std::string& M48::_internal_f7() const {
  return f7_.Get();
}
inline void M48::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M48::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M48.f7)
}
inline void M48::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M48.f7)
}
inline void M48::set_f7(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M48.f7)
}
inline std::string* M48::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00008000u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M48::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M48.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M48::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M48.f7)
}
inline std::string* M48::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M48.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M48::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M48.f7)
}

// optional fixed64 f8 = 16;
inline bool M48::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M48::has_f8() const {
  return _internal_has_f8();
}
inline void M48::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M48::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M48.f8)
  return _internal_f8();
}
inline void M48::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  f8_ = value;
}
inline void M48::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M48.f8)
}

// -------------------------------------------------------------------

// M52_M53

// optional uint64 f1 = 1;
inline bool M52_M53::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M52_M53::has_f1() const {
  return _internal_has_f1();
}
inline void M52_M53::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M53::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M53::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M53.f1)
  return _internal_f1();
}
inline void M52_M53::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M52_M53::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M53.f1)
}

// -------------------------------------------------------------------

// M52_M54

// optional int64 f1 = 1;
inline bool M52_M54::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M52_M54::has_f1() const {
  return _internal_has_f1();
}
inline void M52_M54::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f1)
  return _internal_f1();
}
inline void M52_M54::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M52_M54::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f1)
}

// optional uint64 f2 = 2;
inline bool M52_M54::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M52_M54::has_f2() const {
  return _internal_has_f2();
}
inline void M52_M54::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M54::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M54::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f2)
  return _internal_f2();
}
inline void M52_M54::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M52_M54::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f2)
}

// optional fixed64 f3 = 3;
inline bool M52_M54::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M52_M54::has_f3() const {
  return _internal_has_f3();
}
inline void M52_M54::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M54::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M54::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f3)
  return _internal_f3();
}
inline void M52_M54::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M52_M54::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f3)
}

// optional int64 f4 = 4;
inline bool M52_M54::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M52_M54::has_f4() const {
  return _internal_has_f4();
}
inline void M52_M54::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f4)
  return _internal_f4();
}
inline void M52_M54::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M52_M54::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f4)
}

// optional int64 f5 = 5;
inline bool M52_M54::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M52_M54::has_f5() const {
  return _internal_has_f5();
}
inline void M52_M54::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M54::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f5)
  return _internal_f5();
}
inline void M52_M54::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M52_M54::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f5)
}

// optional bytes f6 = 7;
inline bool M52_M54::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M52_M54::has_f6() const {
  return _internal_has_f6();
}
inline void M52_M54::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M52_M54::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M54.f6)
  return _internal_f6();
}
inline void M52_M54::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M54.f6)
}
inline std::string* M52_M54::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.M54.f6)
  return _internal_mutable_f6();
}
inline const std::string& M52_M54::_internal_f6() const {
  return f6_.Get();
}
inline void M52_M54::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M52_M54::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M52.M54.f6)
}
inline void M52_M54::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M52.M54.f6)
}
inline void M52_M54::set_f6(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M52.M54.f6)
}
inline std::string* M52_M54::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000080u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M52_M54::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.M54.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M52_M54::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.M54.f6)
}
inline std::string* M52_M54::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M52.M54.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M52_M54::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.M54.f6)
}

// -------------------------------------------------------------------

// M52_M55

// optional fixed64 f1 = 1;
inline bool M52_M55::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M52_M55::has_f1() const {
  return _internal_has_f1();
}
inline void M52_M55::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M55::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52_M55::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M55.f1)
  return _internal_f1();
}
inline void M52_M55::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M52_M55::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M55.f1)
}

// -------------------------------------------------------------------

// M52_M56_M57

// optional int64 f1 = 1;
inline bool M52_M56_M57::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M52_M56_M57::has_f1() const {
  return _internal_has_f1();
}
inline void M52_M56_M57::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.M57.f1)
  return _internal_f1();
}
inline void M52_M56_M57::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M52_M56_M57::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.M57.f1)
}

// optional fixed32 f2 = 7;
inline bool M52_M56_M57::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M52_M56_M57::has_f2() const {
  return _internal_has_f2();
}
inline void M52_M56_M57::clear_f2() {
  f2_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52_M56_M57::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52_M56_M57::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.M57.f2)
  return _internal_f2();
}
inline void M52_M56_M57::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  f2_ = value;
}
inline void M52_M56_M57::set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.M57.f2)
}

// optional string f3 = 8;
inline bool M52_M56_M57::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M52_M56_M57::has_f3() const {
  return _internal_has_f3();
}
inline void M52_M56_M57::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M52_M56_M57::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.M57.f3)
  return _internal_f3();
}
inline void M52_M56_M57::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.M57.f3)
}
inline std::string* M52_M56_M57::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.M56.M57.f3)
  return _internal_mutable_f3();
}
inline const std::string& M52_M56_M57::_internal_f3() const {
  return f3_.Get();
}
inline void M52_M56_M57::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M52_M56_M57::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M52.M56.M57.f3)
}
inline void M52_M56_M57::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M52.M56.M57.f3)
}
inline void M52_M56_M57::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M52.M56.M57.f3)
}
inline std::string* M52_M56_M57::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000100u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M52_M56_M57::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.M56.M57.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M52_M56_M57::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.M56.M57.f3)
}
inline std::string* M52_M56_M57::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M52.M56.M57.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M52_M56_M57::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.M56.M57.f3)
}

// optional int64 f4 = 10;
inline bool M52_M56_M57::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M52_M56_M57::has_f4() const {
  return _internal_has_f4();
}
inline void M52_M56_M57::clear_f4() {
  f4_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.M57.f4)
  return _internal_f4();
}
inline void M52_M56_M57::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  f4_ = value;
}
inline void M52_M56_M57::set_f4(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.M57.f4)
}

// optional int64 f5 = 12;
inline bool M52_M56_M57::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M52_M56_M57::has_f5() const {
  return _internal_has_f5();
}
inline void M52_M56_M57::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52_M56_M57::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.M57.f5)
  return _internal_f5();
}
inline void M52_M56_M57::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  f5_ = value;
}
inline void M52_M56_M57::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.M57.f5)
}

// -------------------------------------------------------------------

// M52_M56

// optional .hyperprotobench.M52.M56.M57 f1 = 2;
inline bool M52_M56::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M52_M56::has_f1() const {
  return _internal_has_f1();
}
inline void M52_M56::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M52_M56_M57& M52_M56::_internal_f1() const {
  const ::hyperprotobench::M52_M56_M57* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M52_M56_M57*>(
      &::hyperprotobench::_M52_M56_M57_default_instance_);
}
inline const ::hyperprotobench::M52_M56_M57& M52_M56::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M52_M56_M57* M52_M56::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M52_M56_M57* M52_M56::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.M56.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M52_M56_M57* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M52_M56_M57* M52_M56::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M52_M56_M57>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M52_M56_M57* M52_M56::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.M56.f1)
  return _internal_mutable_f1();
}
inline void M52_M56::set_allocated_f1(::hyperprotobench::M52_M56_M57* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.M56.f1)
}

// optional fixed32 f2 = 4;
inline bool M52_M56::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M52_M56::has_f2() const {
  return _internal_has_f2();
}
inline void M52_M56::clear_f2() {
  f2_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52_M56::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52_M56::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.M56.f2)
  return _internal_f2();
}
inline void M52_M56::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  f2_ = value;
}
inline void M52_M56::set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.M56.f2)
}

// -------------------------------------------------------------------

// M52

// optional int64 f1 = 1;
inline bool M52::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M52::has_f1() const {
  return _internal_has_f1();
}
inline void M52::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f1)
  return _internal_f1();
}
inline void M52::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M52::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f1)
}

// optional bytes f2 = 2;
inline bool M52::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M52::has_f2() const {
  return _internal_has_f2();
}
inline void M52::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M52::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f2)
  return _internal_f2();
}
inline void M52::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f2)
}
inline std::string* M52::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f2)
  return _internal_mutable_f2();
}
inline const std::string& M52::_internal_f2() const {
  return f2_.Get();
}
inline void M52::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M52::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M52.f2)
}
inline void M52::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M52.f2)
}
inline void M52::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M52.f2)
}
inline std::string* M52::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M52::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M52::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f2)
}
inline std::string* M52::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M52.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M52::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f2)
}

// optional int64 f3 = 3;
inline bool M52::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M52::has_f3() const {
  return _internal_has_f3();
}
inline void M52::clear_f3() {
  f3_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f3)
  return _internal_f3();
}
inline void M52::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M52::set_f3(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f3)
}

// optional fixed32 f4 = 5;
inline bool M52::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M52::has_f4() const {
  return _internal_has_f4();
}
inline void M52::clear_f4() {
  f4_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M52::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f4)
  return _internal_f4();
}
inline void M52::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M52::set_f4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f4)
}

// optional int64 f5 = 6;
inline bool M52::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M52::has_f5() const {
  return _internal_has_f5();
}
inline void M52::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f5)
  return _internal_f5();
}
inline void M52::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M52::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f5)
}

// optional int64 f6 = 7;
inline bool M52::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M52::has_f6() const {
  return _internal_has_f6();
}
inline void M52::clear_f6() {
  f6_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f6)
  return _internal_f6();
}
inline void M52::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M52::set_f6(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f6)
}

// optional uint64 f7 = 8;
inline bool M52::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M52::has_f7() const {
  return _internal_has_f7();
}
inline void M52::clear_f7() {
  f7_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M52::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f7)
  return _internal_f7();
}
inline void M52::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  f7_ = value;
}
inline void M52::set_f7(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f7)
}

// optional .hyperprotobench.M52.M53 f8 = 16;
inline bool M52::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M52::has_f8() const {
  return _internal_has_f8();
}
inline void M52::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
inline const ::hyperprotobench::M52_M53& M52::_internal_f8() const {
  const ::hyperprotobench::M52_M53* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M52_M53*>(
      &::hyperprotobench::_M52_M53_default_instance_);
}
inline const ::hyperprotobench::M52_M53& M52::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M52_M53* M52::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M52_M53* M52::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f8)
  _has_bits_[0] &= ~0x00010000u;
  ::hyperprotobench::M52_M53* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M52_M53* M52::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00010000u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M52_M53>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M52_M53* M52::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f8)
  return _internal_mutable_f8();
}
inline void M52::set_allocated_f8(::hyperprotobench::M52_M53* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f8)
}

// optional .hyperprotobench.M52.M54 f9 = 17;
inline bool M52::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M52::has_f9() const {
  return _internal_has_f9();
}
inline void M52::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::hyperprotobench::M52_M54& M52::_internal_f9() const {
  const ::hyperprotobench::M52_M54* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M52_M54*>(
      &::hyperprotobench::_M52_M54_default_instance_);
}
inline const ::hyperprotobench::M52_M54& M52::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M52_M54* M52::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M52_M54* M52::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f9)
  _has_bits_[0] &= ~0x00020000u;
  ::hyperprotobench::M52_M54* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M52_M54* M52::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00020000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M52_M54>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M52_M54* M52::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f9)
  return _internal_mutable_f9();
}
inline void M52::set_allocated_f9(::hyperprotobench::M52_M54* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f9)
}

// optional bytes f10 = 19;
inline bool M52::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M52::has_f10() const {
  return _internal_has_f10();
}
inline void M52::clear_f10() {
  f10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& M52::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f10)
  return _internal_f10();
}
inline void M52::set_f10(const std::string& value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f10)
}
inline std::string* M52::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f10)
  return _internal_mutable_f10();
}
inline const std::string& M52::_internal_f10() const {
  return f10_.Get();
}
inline void M52::_internal_set_f10(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M52::set_f10(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M52.f10)
}
inline void M52::set_f10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M52.f10)
}
inline void M52::set_f10(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M52.f10)
}
inline std::string* M52::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00080000u;
  return f10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M52::release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f10)
  if (!_internal_has_f10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return f10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M52::set_allocated_f10(std::string* f10) {
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f10,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f10)
}
inline std::string* M52::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M52.f10)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return f10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M52::unsafe_arena_set_allocated_f10(
    std::string* f10) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f10, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M52.f10)
}

// optional int64 f11 = 25;
inline bool M52::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool M52::has_f11() const {
  return _internal_has_f11();
}
inline void M52::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M52::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f11)
  return _internal_f11();
}
inline void M52::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x02000000u;
  f11_ = value;
}
inline void M52::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M52.f11)
}

// optional .hyperprotobench.M52.M55 f12 = 26;
inline bool M52::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M52::has_f12() const {
  return _internal_has_f12();
}
inline void M52::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
inline const ::hyperprotobench::M52_M55& M52::_internal_f12() const {
  const ::hyperprotobench::M52_M55* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M52_M55*>(
      &::hyperprotobench::_M52_M55_default_instance_);
}
inline const ::hyperprotobench::M52_M55& M52::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M52_M55* M52::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M52_M55* M52::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f12)
  _has_bits_[0] &= ~0x04000000u;
  ::hyperprotobench::M52_M55* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M52_M55* M52::_internal_mutable_f12() {
  _has_bits_[0] |= 0x04000000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M52_M55>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M52_M55* M52::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f12)
  return _internal_mutable_f12();
}
inline void M52::set_allocated_f12(::hyperprotobench::M52_M55* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f12)
}

// optional .hyperprotobench.M52.M56 f13 = 27;
inline bool M52::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || f13_ != nullptr);
  return value;
}
inline bool M52::has_f13() const {
  return _internal_has_f13();
}
inline void M52::clear_f13() {
  if (f13_ != nullptr) f13_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
inline const ::hyperprotobench::M52_M56& M52::_internal_f13() const {
  const ::hyperprotobench::M52_M56* p = f13_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M52_M56*>(
      &::hyperprotobench::_M52_M56_default_instance_);
}
inline const ::hyperprotobench::M52_M56& M52::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M52.f13)
  return _internal_f13();
}
inline ::hyperprotobench::M52_M56* M52::release_f13() {
  auto temp = unsafe_arena_release_f13();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M52_M56* M52::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M52.f13)
  _has_bits_[0] &= ~0x08000000u;
  ::hyperprotobench::M52_M56* temp = f13_;
  f13_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M52_M56* M52::_internal_mutable_f13() {
  _has_bits_[0] |= 0x08000000u;
  if (f13_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M52_M56>(GetArenaNoVirtual());
    f13_ = p;
  }
  return f13_;
}
inline ::hyperprotobench::M52_M56* M52::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M52.f13)
  return _internal_mutable_f13();
}
inline void M52::set_allocated_f13(::hyperprotobench::M52_M56* f13) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f13_;
  }
  if (f13) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f13);
    if (message_arena != submessage_arena) {
      f13 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f13, submessage_arena);
    }
    _has_bits_[0] |= 0x08000000u;
  } else {
    _has_bits_[0] &= ~0x08000000u;
  }
  f13_ = f13;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M52.f13)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hyperprotobench

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hyperprotobench::M1_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_E1>() {
  return ::hyperprotobench::M1_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M1_E2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M1_E2>() {
  return ::hyperprotobench::M1_E2_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M21_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M21_E1>() {
  return ::hyperprotobench::M21_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M25_M26_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M25_M26_E1>() {
  return ::hyperprotobench::M25_M26_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M25_M28_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M25_M28_E1>() {
  return ::hyperprotobench::M25_M28_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M25_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M25_E1>() {
  return ::hyperprotobench::M25_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M36_M40_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M36_M40_E1>() {
  return ::hyperprotobench::M36_M40_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M42_M44_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M42_M44_E1>() {
  return ::hyperprotobench::M42_M44_E1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
