// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#include "benchmark.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M13_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M14_M15_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M14_M16_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M17_M18_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M19_M20_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M19_M21_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M23_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M24_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M25_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M27_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M28_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M29_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M30_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M4_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M5_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M6_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M7_M8_benchmark_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M9_M10_benchmark_2eproto;
namespace hyperprotobench {
class M1_M2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1_M2> _instance;
} _M1_M2_default_instance_;
class M1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M1> _instance;
} _M1_default_instance_;
class M3_M4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M3_M4> _instance;
} _M3_M4_default_instance_;
class M3_M5DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M3_M5> _instance;
} _M3_M5_default_instance_;
class M3_M6DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M3_M6> _instance;
} _M3_M6_default_instance_;
class M3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M3> _instance;
} _M3_default_instance_;
class M7_M8DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M7_M8> _instance;
} _M7_M8_default_instance_;
class M7DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M7> _instance;
} _M7_default_instance_;
class M9_M10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M9_M10> _instance;
} _M9_M10_default_instance_;
class M9DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M9> _instance;
} _M9_default_instance_;
class M11_M12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M12> _instance;
} _M11_M12_default_instance_;
class M11_M13DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11_M13> _instance;
} _M11_M13_default_instance_;
class M11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M11> _instance;
} _M11_default_instance_;
class M14_M15DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M14_M15> _instance;
} _M14_M15_default_instance_;
class M14_M16DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M14_M16> _instance;
} _M14_M16_default_instance_;
class M14DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M14> _instance;
} _M14_default_instance_;
class M17_M18DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17_M18> _instance;
} _M17_M18_default_instance_;
class M17DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M17> _instance;
} _M17_default_instance_;
class M19_M20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M19_M20> _instance;
} _M19_M20_default_instance_;
class M19_M21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M19_M21> _instance;
} _M19_M21_default_instance_;
class M19DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M19> _instance;
} _M19_default_instance_;
class M22_M23DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M22_M23> _instance;
} _M22_M23_default_instance_;
class M22_M24DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M22_M24> _instance;
} _M22_M24_default_instance_;
class M22_M25DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M22_M25> _instance;
} _M22_M25_default_instance_;
class M22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M22> _instance;
} _M22_default_instance_;
class M26_M27DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M26_M27> _instance;
} _M26_M27_default_instance_;
class M26_M28DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M26_M28> _instance;
} _M26_M28_default_instance_;
class M26_M29DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M26_M29> _instance;
} _M26_M29_default_instance_;
class M26_M30DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M26_M30> _instance;
} _M26_M30_default_instance_;
class M26DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<M26> _instance;
} _M26_default_instance_;
}  // namespace hyperprotobench
static void InitDefaultsscc_info_M1_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_default_instance_;
    new (ptr) ::hyperprotobench::M1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M1_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M1_benchmark_2eproto}, {
      &scc_info_M1_M2_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M1_M2_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M1_M2_default_instance_;
    new (ptr) ::hyperprotobench::M1_M2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M1_M2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M1_M2_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M1_M2_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M11_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_default_instance_;
    new (ptr) ::hyperprotobench::M11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M11_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M11_benchmark_2eproto}, {
      &scc_info_M11_M12_benchmark_2eproto.base,
      &scc_info_M11_M13_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M11_M12_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M12_default_instance_;
    new (ptr) ::hyperprotobench::M11_M12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M12_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M11_M12_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M11_M13_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M11_M13_default_instance_;
    new (ptr) ::hyperprotobench::M11_M13();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M11_M13::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M11_M13_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M11_M13_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M14_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M14_default_instance_;
    new (ptr) ::hyperprotobench::M14();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M14::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M14_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M14_benchmark_2eproto}, {
      &scc_info_M14_M15_benchmark_2eproto.base,
      &scc_info_M14_M16_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M14_M15_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M14_M15_default_instance_;
    new (ptr) ::hyperprotobench::M14_M15();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M14_M15::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M14_M15_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M14_M15_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M14_M16_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M14_M16_default_instance_;
    new (ptr) ::hyperprotobench::M14_M16();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M14_M16::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M14_M16_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M14_M16_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M17_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_default_instance_;
    new (ptr) ::hyperprotobench::M17();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M17_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M17_benchmark_2eproto}, {
      &scc_info_M17_M18_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M17_M18_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M17_M18_default_instance_;
    new (ptr) ::hyperprotobench::M17_M18();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M17_M18::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M17_M18_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M17_M18_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M19_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M19_default_instance_;
    new (ptr) ::hyperprotobench::M19();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M19::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_M19_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_M19_benchmark_2eproto}, {
      &scc_info_M19_M20_benchmark_2eproto.base,
      &scc_info_M19_M21_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M19_M20_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M19_M20_default_instance_;
    new (ptr) ::hyperprotobench::M19_M20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M19_M20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M19_M20_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M19_M20_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M19_M21_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M19_M21_default_instance_;
    new (ptr) ::hyperprotobench::M19_M21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M19_M21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M19_M21_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M19_M21_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M22_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M22_default_instance_;
    new (ptr) ::hyperprotobench::M22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M22_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M22_benchmark_2eproto}, {
      &scc_info_M22_M23_benchmark_2eproto.base,
      &scc_info_M22_M24_benchmark_2eproto.base,
      &scc_info_M22_M25_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M22_M23_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M22_M23_default_instance_;
    new (ptr) ::hyperprotobench::M22_M23();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M22_M23::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M23_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M22_M23_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M22_M24_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M22_M24_default_instance_;
    new (ptr) ::hyperprotobench::M22_M24();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M22_M24::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M24_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M22_M24_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M22_M25_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M22_M25_default_instance_;
    new (ptr) ::hyperprotobench::M22_M25();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M22_M25::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M22_M25_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M22_M25_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M26_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M26_default_instance_;
    new (ptr) ::hyperprotobench::M26();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M26::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_M26_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_M26_benchmark_2eproto}, {
      &scc_info_M26_M27_benchmark_2eproto.base,
      &scc_info_M26_M28_benchmark_2eproto.base,
      &scc_info_M26_M29_benchmark_2eproto.base,
      &scc_info_M26_M30_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M26_M27_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M26_M27_default_instance_;
    new (ptr) ::hyperprotobench::M26_M27();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M26_M27::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M27_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M26_M27_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M26_M28_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M26_M28_default_instance_;
    new (ptr) ::hyperprotobench::M26_M28();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M26_M28::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M28_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M26_M28_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M26_M29_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M26_M29_default_instance_;
    new (ptr) ::hyperprotobench::M26_M29();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M26_M29::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M29_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M26_M29_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M26_M30_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M26_M30_default_instance_;
    new (ptr) ::hyperprotobench::M26_M30();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M26_M30::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M26_M30_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M26_M30_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M3_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M3_default_instance_;
    new (ptr) ::hyperprotobench::M3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_M3_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_M3_benchmark_2eproto}, {
      &scc_info_M3_M4_benchmark_2eproto.base,
      &scc_info_M3_M5_benchmark_2eproto.base,
      &scc_info_M3_M6_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M3_M4_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M3_M4_default_instance_;
    new (ptr) ::hyperprotobench::M3_M4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M3_M4::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M4_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M3_M4_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M3_M5_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M3_M5_default_instance_;
    new (ptr) ::hyperprotobench::M3_M5();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M3_M5::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M5_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M3_M5_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M3_M6_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M3_M6_default_instance_;
    new (ptr) ::hyperprotobench::M3_M6();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M3_M6::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M3_M6_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M3_M6_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M7_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M7_default_instance_;
    new (ptr) ::hyperprotobench::M7();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M7::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M7_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M7_benchmark_2eproto}, {
      &scc_info_M7_M8_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M7_M8_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M7_M8_default_instance_;
    new (ptr) ::hyperprotobench::M7_M8();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M7_M8::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M7_M8_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M7_M8_benchmark_2eproto}, {}};

static void InitDefaultsscc_info_M9_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M9_default_instance_;
    new (ptr) ::hyperprotobench::M9();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M9::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_M9_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_M9_benchmark_2eproto}, {
      &scc_info_M9_M10_benchmark_2eproto.base,}};

static void InitDefaultsscc_info_M9_M10_benchmark_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hyperprotobench::_M9_M10_default_instance_;
    new (ptr) ::hyperprotobench::M9_M10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hyperprotobench::M9_M10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_M9_M10_benchmark_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_M9_M10_benchmark_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_benchmark_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_benchmark_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_benchmark_2eproto = nullptr;

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1_M2::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1_M2),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 11L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS::M1_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M1::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M1),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 23L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS::M1_M2_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  256L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M3_M4_ACCEL_DESCRIPTORS::M3_M4_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M3_M4::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M3_M4),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M3_M5_ACCEL_DESCRIPTORS::M3_M5_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M3_M5::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M3_M5),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 5L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, f1_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M3_M6_ACCEL_DESCRIPTORS::M3_M6_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M3_M6::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M3_M6),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 13L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M3_ACCEL_DESCRIPTORS::M3_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M3::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M3),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 30L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M3_M4_ACCEL_DESCRIPTORS::M3_M4_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M3_M5_ACCEL_DESCRIPTORS::M3_M5_ACCEL_DESCRIPTORS),

  /* field 21 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 22 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 25 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 26 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 27 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 28 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 29 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 30 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f14_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M3_M6_ACCEL_DESCRIPTORS::M3_M6_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  537396224L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M7_M8_ACCEL_DESCRIPTORS::M7_M8_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M7_M8::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M7_M8),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M7_ACCEL_DESCRIPTORS::M7_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M7::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M7),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M7_M8_ACCEL_DESCRIPTORS::M7_M8_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  16L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M9_M10_ACCEL_DESCRIPTORS::M9_M10_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M9_M10::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M9_M10),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M9_ACCEL_DESCRIPTORS::M9_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M9::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M9),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 10L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f3_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M9_M10_ACCEL_DESCRIPTORS::M9_M10_ACCEL_DESCRIPTORS),

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  64L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS::M11_M12_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M12::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M12),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 9L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_M13_ACCEL_DESCRIPTORS::M11_M13_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11_M13::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11_M13),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 8L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M11_ACCEL_DESCRIPTORS::M11_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M11::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M11),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 24L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)14) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M12_ACCEL_DESCRIPTORS::M11_M12_ACCEL_DESCRIPTORS),

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 22 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 23 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 24 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M11_M13_ACCEL_DESCRIPTORS::M11_M13_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8912896L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M14_M15_ACCEL_DESCRIPTORS::M14_M15_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M14_M15::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M14_M15),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M15, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M15, f1_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M14_M16_ACCEL_DESCRIPTORS::M14_M16_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M14_M16::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M14_M16),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 6L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M14_ACCEL_DESCRIPTORS::M14_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M14::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M14),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M14_M15_ACCEL_DESCRIPTORS::M14_M15_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f2_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M14_M16_ACCEL_DESCRIPTORS::M14_M16_ACCEL_DESCRIPTORS),

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  18L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS::M17_M18_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17_M18::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17_M18),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 7L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS::M17_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M17::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M17),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 20L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS::M17_M18_ACCEL_DESCRIPTORS),

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f2_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f8_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  2L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M19_M20_ACCEL_DESCRIPTORS::M19_M20_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M19_M20::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M19_M20),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M19_M21_ACCEL_DESCRIPTORS::M19_M21_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M19_M21::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M19_M21),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M19_ACCEL_DESCRIPTORS::M19_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M19::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M19),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 13L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)7) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M19_M20_ACCEL_DESCRIPTORS::M19_M20_ACCEL_DESCRIPTORS),

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 9 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M19_M21_ACCEL_DESCRIPTORS::M19_M21_ACCEL_DESCRIPTORS),

  /* is_submessage region (64 bits each): */
  8196L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M22_M23_ACCEL_DESCRIPTORS::M22_M23_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M22_M23::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M22_M23),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 5L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M22_M24_ACCEL_DESCRIPTORS::M22_M24_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M22_M24::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M22_M24),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M24, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M24, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M22_M25_ACCEL_DESCRIPTORS::M22_M25_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M22_M25::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M22_M25),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M25, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 1L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M25, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M22_ACCEL_DESCRIPTORS::M22_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M22::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M22),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 3L) << 32) |
  /* max field num */ (((uint64_t) 21L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)12) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 7 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 8 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M22_M23_ACCEL_DESCRIPTORS::M22_M23_ACCEL_DESCRIPTORS),

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)4) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M22_M24_ACCEL_DESCRIPTORS::M22_M24_ACCEL_DESCRIPTORS),

  /* field 13 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 14 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 15 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 16 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 17 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 18 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M22_M25_ACCEL_DESCRIPTORS::M22_M25_ACCEL_DESCRIPTORS),

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 21 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  132160L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M26_M27_ACCEL_DESCRIPTORS::M26_M27_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M26_M27::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M26_M27),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 5L) << 32) |
  /* max field num */ (((uint64_t) 6L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M26_M28_ACCEL_DESCRIPTORS::M26_M28_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M26_M28::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M26_M28),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M28, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 2L) << 32) |
  /* max field num */ (((uint64_t) 2L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 2 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)6) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M28, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M26_M29_ACCEL_DESCRIPTORS::M26_M29_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M26_M29::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M26_M29),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 3L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M26_M30_ACCEL_DESCRIPTORS::M26_M30_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M26_M30::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M26_M30),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M30, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 4L) << 32) |
  /* max field num */ (((uint64_t) 4L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 4 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M30, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  0L,
};

alignas(16) const ::PROTOBUF_NAMESPACE_ID::uint64  hyperprotobench_FriendStruct_M26_ACCEL_DESCRIPTORS::M26_ACCEL_DESCRIPTORS[] = {
  /* HEADER: */
  /* entry 0: this obj vptr */
   (uint64_t)(*((uint64_t*)(&(::hyperprotobench::M26::default_instance())))),
  /* entry 1: this obj size */
   (uint64_t)sizeof(::hyperprotobench::M26),
  /* entry 2: hasbits raw offset */
   (uint64_t) PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, _has_bits_),
  /* entry 3: */
  /* min field num */ (((uint64_t) 1L) << 32) |
  /* max field num */ (((uint64_t) 20L) & 0x00000000FFFFFFFFL),

  /* ENTRIES (128 bits each): */
  /* { is_repeated (1bit) | cpp_type (5bits) | offset (58bits) } */
  /* { submessage ADT pointer (64 bits) } */

  /* field 1 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f1_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 2 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 3 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 4 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 5 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f2_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 6 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f3_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 7 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f4_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 8 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 9 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 10 entry */
  /* no field here entry1 */ 0L,
  /* no field here entry2 */ 0L,

  /* field 11 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f5_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M26_M27_ACCEL_DESCRIPTORS::M26_M27_ACCEL_DESCRIPTORS),

  /* field 12 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)9) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f6_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 13 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f7_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M26_M28_ACCEL_DESCRIPTORS::M26_M28_ACCEL_DESCRIPTORS),

  /* field 14 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)8) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f8_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 15 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f9_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M26_M29_ACCEL_DESCRIPTORS::M26_M29_ACCEL_DESCRIPTORS),

  /* field 16 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f10_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 17 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)3) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f11_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 18 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)1) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f12_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* field 19 entry */
  /* is_repeated */
  (((uint64_t)0) << 63) |
  /*        type */
  ((((uint64_t)11) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f13_) ))) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  (uint64_t)(hyperprotobench_FriendStruct_M26_M30_ACCEL_DESCRIPTORS::M26_M30_ACCEL_DESCRIPTORS),

  /* field 20 entry */
  /* is_repeated */
  (((uint64_t)1) << 63) |
  /*        type */
  ((((uint64_t)5) & 0x1F) << 58) |
  /*      offset */
  (((((uint64_t)( PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f14_) ))+8) << 6) >> 6),
  /* if nested message, pointer to that type's descriptor table */
  0L,

  /* is_submessage region (64 bits each): */
  567296L,
};

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_benchmark_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1_M2, f7_),
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M1, f12_),
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  13,
  15,
  20,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M4, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M5, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3_M6, f5_),
  1,
  2,
  9,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M3, f14_),
  1,
  2,
  6,
  7,
  8,
  10,
  12,
  13,
  16,
  17,
  19,
  21,
  27,
  29,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7_M8, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M7, f3_),
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9_M10, f3_),
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M9, f6_),
  1,
  3,
  4,
  6,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M12, f3_),
  1,
  5,
  9,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11_M13, f3_),
  1,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M11, f12_),
  1,
  2,
  3,
  4,
  12,
  13,
  14,
  15,
  18,
  19,
  20,
  23,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M15, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M15, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M15, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14_M16, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M14, f5_),
  1,
  2,
  4,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17_M18, f7_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M17, f12_),
  1,
  4,
  6,
  7,
  10,
  11,
  12,
  14,
  16,
  17,
  18,
  20,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M20, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19_M21, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M19, f8_),
  1,
  2,
  6,
  7,
  8,
  9,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M23, f3_),
  1,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M24, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M24, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M24, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M25, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M25, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22_M25, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M22, f10_),
  1,
  2,
  3,
  6,
  8,
  9,
  10,
  17,
  18,
  19,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M27, f2_),
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M28, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M28, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M28, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M29, f2_),
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M30, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26_M30, f1_),
  1,
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f1_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f2_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f3_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f4_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f5_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f6_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f7_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f8_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f9_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f10_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f11_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f12_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f13_),
  PROTOBUF_FIELD_OFFSET(::hyperprotobench::M26, f14_),
  1,
  5,
  6,
  7,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::hyperprotobench::M1_M2)},
  { 19, 36, sizeof(::hyperprotobench::M1)},
  { 48, 55, sizeof(::hyperprotobench::M3_M4)},
  { 57, 64, sizeof(::hyperprotobench::M3_M5)},
  { 66, 76, sizeof(::hyperprotobench::M3_M6)},
  { 81, 100, sizeof(::hyperprotobench::M3)},
  { 114, 121, sizeof(::hyperprotobench::M7_M8)},
  { 123, 131, sizeof(::hyperprotobench::M7)},
  { 134, 142, sizeof(::hyperprotobench::M9_M10)},
  { 145, 156, sizeof(::hyperprotobench::M9)},
  { 162, 170, sizeof(::hyperprotobench::M11_M12)},
  { 173, 181, sizeof(::hyperprotobench::M11_M13)},
  { 184, 201, sizeof(::hyperprotobench::M11)},
  { 213, 219, sizeof(::hyperprotobench::M14_M15)},
  { 220, 227, sizeof(::hyperprotobench::M14_M16)},
  { 229, 239, sizeof(::hyperprotobench::M14)},
  { 244, 256, sizeof(::hyperprotobench::M17_M18)},
  { 263, 280, sizeof(::hyperprotobench::M17)},
  { 292, 299, sizeof(::hyperprotobench::M19_M20)},
  { 301, 308, sizeof(::hyperprotobench::M19_M21)},
  { 310, 323, sizeof(::hyperprotobench::M19)},
  { 331, 339, sizeof(::hyperprotobench::M22_M23)},
  { 342, 348, sizeof(::hyperprotobench::M22_M24)},
  { 349, 355, sizeof(::hyperprotobench::M22_M25)},
  { 356, 371, sizeof(::hyperprotobench::M22)},
  { 381, 388, sizeof(::hyperprotobench::M26_M27)},
  { 390, 396, sizeof(::hyperprotobench::M26_M28)},
  { 397, 404, sizeof(::hyperprotobench::M26_M29)},
  { 406, 412, sizeof(::hyperprotobench::M26_M30)},
  { 413, 432, sizeof(::hyperprotobench::M26)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_M2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M3_M4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M3_M5_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M3_M6_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M7_M8_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M7_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M9_M10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M9_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_M13_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M14_M15_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M14_M16_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M14_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_M18_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M17_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M19_M20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M19_M21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M19_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M22_M23_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M22_M24_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M22_M25_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M26_M27_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M26_M28_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M26_M29_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M26_M30_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::hyperprotobench::_M26_default_instance_),
};

const char descriptor_table_protodef_benchmark_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017benchmark.proto\022\017hyperprotobench\"\367\002\n\002M"
  "1\022\n\n\002f1\030\004 \001(\t\022\n\n\002f2\030\005 \001(\010\022\n\n\002f3\030\006 \001(\014\022\n\n"
  "\002f4\030\007 \001(\010\022\n\n\002f5\030\010 \001(\t\022\n\n\002f6\030\t \001(\005\022\"\n\002f7\030"
  "\013 \001(\0132\026.hyperprotobench.M1.M2\022\n\n\002f8\030\014 \001("
  "\005\022\"\n\002f9\030\r \001(\0162\026.hyperprotobench.M1.E1\022\013\n"
  "\003f10\030\020 \001(\014\022\013\n\003f11\030\022 \001(\003\022\013\n\003f12\030\027 \001(\014\032X\n\002"
  "M2\022\n\n\002f1\030\003 \001(\005\022\n\n\002f2\030\004 \001(\014\022\n\n\002f3\030\005 \001(\006\022\n"
  "\n\002f4\030\006 \001(\014\022\n\n\002f5\030\007 \001(\014\022\n\n\002f6\030\010 \001(\014\022\n\n\002f7"
  "\030\013 \001(\014\"T\n\002E1\022\016\n\nE1_CONST_1\020#\022\016\n\nE1_CONST"
  "_2\020\007\022\016\n\nE1_CONST_3\020M\022\016\n\nE1_CONST_4\020\017\022\016\n\n"
  "E1_CONST_5\0205\"\324\004\n\002M3\022\n\n\002f1\030\002 \001(\006\022\n\n\002f2\030\003 "
  "\001(\010\022\"\n\002f3\030\007 \001(\0162\026.hyperprotobench.M3.E1\022"
  "\n\n\002f4\030\010 \001(\t\022\n\n\002f5\030\t \001(\t\022\"\n\002f6\030\013 \001(\0132\026.hy"
  "perprotobench.M3.M4\022\n\n\002f7\030\r \001(\t\022\"\n\002f8\030\016 "
  "\001(\0162\026.hyperprotobench.M3.E2\022\n\n\002f9\030\021 \001(\005\022"
  "\013\n\003f10\030\022 \001(\005\022#\n\003f11\030\024 \001(\0132\026.hyperprotobe"
  "nch.M3.M5\022\013\n\003f12\030\026 \001(\003\022\013\n\003f13\030\034 \001(\006\022#\n\003f"
  "14\030\036 \001(\0132\026.hyperprotobench.M3.M6\032\034\n\002M4\022\n"
  "\n\002f1\030\001 \001(\005\022\n\n\002f2\030\002 \001(\004\032\034\n\002M5\022\n\n\002f1\030\005 \003(\005"
  "\022\n\n\002f2\030\006 \001(\005\032@\n\002M6\022\n\n\002f1\030\002 \001(\010\022\n\n\002f2\030\003 \001"
  "(\010\022\n\n\002f3\030\n \001(\003\022\n\n\002f4\030\014 \001(\005\022\n\n\002f5\030\r \001(\004\"U"
  "\n\002E1\022\016\n\nE1_CONST_1\020E\022\016\n\nE1_CONST_2\020z\022\016\n\n"
  "E1_CONST_3\020\n\022\017\n\nE1_CONST_4\020\232L\022\016\n\nE1_CONS"
  "T_5\020\033\"T\n\002E2\022\016\n\nE2_CONST_1\020\t\022\016\n\nE2_CONST_"
  "2\020*\022\016\n\nE2_CONST_3\020Q\022\016\n\nE2_CONST_4\0202\022\016\n\nE"
  "2_CONST_5\020\037\"^\n\002M7\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\003 \001("
  "\007\022\"\n\002f3\030\004 \001(\0132\026.hyperprotobench.M7.M8\032\034\n"
  "\002M8\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\002 \001(\010\"\220\001\n\002M9\022\n\n\002f1"
  "\030\001 \001(\005\022\n\n\002f2\030\003 \001(\014\022\n\n\002f3\030\004 \003(\005\022#\n\002f4\030\006 \001"
  "(\0132\027.hyperprotobench.M9.M10\022\n\n\002f5\030\t \001(\005\022"
  "\n\n\002f6\030\n \001(\003\032)\n\003M10\022\n\n\002f1\030\001 \001(\010\022\n\n\002f2\030\002 \001"
  "(\005\022\n\n\002f3\030\003 \001(\005\"\364\004\n\003M11\022\n\n\002f1\030\002 \001(\005\022\n\n\002f2"
  "\030\003 \001(\006\022\n\n\002f3\030\004 \001(\t\022\n\n\002f4\030\005 \001(\t\022#\n\002f5\030\r \001"
  "(\0162\027.hyperprotobench.M11.E1\022\n\n\002f6\030\016 \001(\014\022"
  "#\n\002f7\030\017 \001(\0162\027.hyperprotobench.M11.E2\022\n\n\002"
  "f8\030\020 \001(\005\022\n\n\002f9\030\023 \001(\005\022%\n\003f10\030\024 \001(\0132\030.hype"
  "rprotobench.M11.M12\022\013\n\003f11\030\025 \001(\004\022%\n\003f12\030"
  "\030 \001(\0132\030.hyperprotobench.M11.M13\032\234\001\n\003M12\022"
  "\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\005 \001(\010\022\'\n\002f3\030\t \001(\0162\033.hy"
  "perprotobench.M11.M12.E1\"T\n\002E1\022\016\n\nE1_CON"
  "ST_1\020\005\022\016\n\nE1_CONST_2\020N\022\016\n\nE1_CONST_3\020\025\022\016"
  "\n\nE1_CONST_4\020y\022\016\n\nE1_CONST_5\0209\032)\n\003M13\022\n\n"
  "\002f1\030\002 \001(\004\022\n\n\002f2\030\006 \001(\004\022\n\n\002f3\030\010 \001(\014\"T\n\002E1\022"
  "\016\n\nE1_CONST_1\020C\022\016\n\nE1_CONST_2\020d\022\016\n\nE1_CO"
  "NST_3\020l\022\016\n\nE1_CONST_4\020X\022\016\n\nE1_CONST_5\020[\""
  "T\n\002E2\022\016\n\nE2_CONST_1\020E\022\016\n\nE2_CONST_2\020\n\022\016\n"
  "\nE2_CONST_3\020V\022\016\n\nE2_CONST_4\020~\022\016\n\nE2_CONS"
  "T_5\020^\"\247\001\n\003M14\022$\n\002f1\030\001 \001(\0132\030.hyperprotobe"
  "nch.M14.M15\022\n\n\002f2\030\002 \003(\005\022$\n\002f3\030\004 \001(\0132\030.hy"
  "perprotobench.M14.M16\022\n\n\002f4\030\005 \001(\014\022\n\n\002f5\030"
  "\007 \001(\003\032\021\n\003M15\022\n\n\002f1\030\002 \003(\004\032\035\n\003M16\022\n\n\002f1\030\006 "
  "\001(\005\022\n\n\002f2\030\007 \001(\001\"\215\002\n\003M17\022$\n\002f1\030\001 \001(\0132\030.hy"
  "perprotobench.M17.M18\022\n\n\002f2\030\004 \003(\005\022\n\n\002f3\030"
  "\006 \001(\003\022\n\n\002f4\030\007 \001(\001\022\n\n\002f5\030\n \001(\014\022\n\n\002f6\030\013 \001("
  "\003\022\n\n\002f7\030\014 \001(\014\022\n\n\002f8\030\016 \003(\005\022\n\n\002f9\030\020 \001(\003\022\013\n"
  "\003f10\030\021 \001(\014\022\013\n\003f11\030\022 \001(\005\022\013\n\003f12\030\024 \001(\t\032Y\n\003"
  "M18\022\n\n\002f1\030\001 \001(\014\022\n\n\002f2\030\002 \001(\003\022\n\n\002f3\030\003 \001(\005\022"
  "\n\n\002f4\030\004 \001(\014\022\n\n\002f5\030\005 \001(\003\022\n\n\002f6\030\006 \001(\005\022\n\n\002f"
  "7\030\007 \001(\005\"\327\001\n\003M19\022\n\n\002f1\030\001 \001(\007\022$\n\002f2\030\002 \001(\0132"
  "\030.hyperprotobench.M19.M20\022\n\n\002f3\030\006 \001(\003\022\n\n"
  "\002f4\030\007 \001(\003\022\n\n\002f5\030\010 \001(\004\022\n\n\002f6\030\t \001(\003\022\n\n\002f7\030"
  "\014 \001(\t\022$\n\002f8\030\r \001(\0132\030.hyperprotobench.M19."
  "M21\032\035\n\003M20\022\n\n\002f1\030\003 \001(\003\022\n\n\002f2\030\005 \001(\006\032\035\n\003M2"
  "1\022\n\n\002f1\030\003 \001(\005\022\n\n\002f2\030\004 \001(\010\"\235\002\n\003M22\022\n\n\002f1\030"
  "\003 \001(\005\022\n\n\002f2\030\004 \001(\014\022\n\n\002f3\030\005 \001(\003\022$\n\002f4\030\010 \001("
  "\0132\030.hyperprotobench.M22.M23\022\n\n\002f5\030\n \001(\t\022"
  "\n\n\002f6\030\013 \001(\004\022$\n\002f7\030\014 \001(\0132\030.hyperprotobenc"
  "h.M22.M24\022$\n\002f8\030\023 \001(\0132\030.hyperprotobench."
  "M22.M25\022\n\n\002f9\030\024 \001(\005\022\013\n\003f10\030\025 \001(\005\032)\n\003M23\022"
  "\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\003 \001(\010\022\n\n\002f3\030\005 \001(\004\032\021\n\003M"
  "24\022\n\n\002f1\030\001 \001(\006\032\021\n\003M25\022\n\n\002f1\030\001 \001(\005\"\376\002\n\003M2"
  "6\022\n\n\002f1\030\001 \001(\005\022\n\n\002f2\030\005 \001(\001\022\n\n\002f3\030\006 \001(\005\022\n\n"
  "\002f4\030\007 \001(\003\022$\n\002f5\030\013 \001(\0132\030.hyperprotobench."
  "M26.M27\022\n\n\002f6\030\014 \001(\t\022$\n\002f7\030\r \001(\0132\030.hyperp"
  "rotobench.M26.M28\022\n\n\002f8\030\016 \001(\010\022$\n\002f9\030\017 \001("
  "\0132\030.hyperprotobench.M26.M29\022\013\n\003f10\030\020 \001(\005"
  "\022\013\n\003f11\030\021 \001(\003\022\013\n\003f12\030\022 \001(\001\022%\n\003f13\030\023 \001(\0132"
  "\030.hyperprotobench.M26.M30\022\013\n\003f14\030\024 \003(\005\032\035"
  "\n\003M27\022\n\n\002f1\030\005 \001(\003\022\n\n\002f2\030\006 \001(\005\032\021\n\003M28\022\n\n\002"
  "f1\030\002 \001(\006\032\035\n\003M29\022\n\n\002f1\030\001 \001(\003\022\n\n\002f2\030\003 \001(\005\032"
  "\021\n\003M30\022\n\n\002f1\030\004 \001(\003B\003\370\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_benchmark_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_benchmark_2eproto_sccs[30] = {
  &scc_info_M1_benchmark_2eproto.base,
  &scc_info_M1_M2_benchmark_2eproto.base,
  &scc_info_M11_benchmark_2eproto.base,
  &scc_info_M11_M12_benchmark_2eproto.base,
  &scc_info_M11_M13_benchmark_2eproto.base,
  &scc_info_M14_benchmark_2eproto.base,
  &scc_info_M14_M15_benchmark_2eproto.base,
  &scc_info_M14_M16_benchmark_2eproto.base,
  &scc_info_M17_benchmark_2eproto.base,
  &scc_info_M17_M18_benchmark_2eproto.base,
  &scc_info_M19_benchmark_2eproto.base,
  &scc_info_M19_M20_benchmark_2eproto.base,
  &scc_info_M19_M21_benchmark_2eproto.base,
  &scc_info_M22_benchmark_2eproto.base,
  &scc_info_M22_M23_benchmark_2eproto.base,
  &scc_info_M22_M24_benchmark_2eproto.base,
  &scc_info_M22_M25_benchmark_2eproto.base,
  &scc_info_M26_benchmark_2eproto.base,
  &scc_info_M26_M27_benchmark_2eproto.base,
  &scc_info_M26_M28_benchmark_2eproto.base,
  &scc_info_M26_M29_benchmark_2eproto.base,
  &scc_info_M26_M30_benchmark_2eproto.base,
  &scc_info_M3_benchmark_2eproto.base,
  &scc_info_M3_M4_benchmark_2eproto.base,
  &scc_info_M3_M5_benchmark_2eproto.base,
  &scc_info_M3_M6_benchmark_2eproto.base,
  &scc_info_M7_benchmark_2eproto.base,
  &scc_info_M7_M8_benchmark_2eproto.base,
  &scc_info_M9_benchmark_2eproto.base,
  &scc_info_M9_M10_benchmark_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_benchmark_2eproto_once;
static bool descriptor_table_benchmark_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto = {
  &descriptor_table_benchmark_2eproto_initialized, descriptor_table_protodef_benchmark_2eproto, "benchmark.proto", 3223,
  &descriptor_table_benchmark_2eproto_once, descriptor_table_benchmark_2eproto_sccs, descriptor_table_benchmark_2eproto_deps, 30, 0,
  schemas, file_default_instances, TableStruct_benchmark_2eproto::offsets,
  file_level_metadata_benchmark_2eproto, 30, file_level_enum_descriptors_benchmark_2eproto, file_level_service_descriptors_benchmark_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_benchmark_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_benchmark_2eproto), true);
namespace hyperprotobench {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M1_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[0];
}
bool M1_E1_IsValid(int value) {
  switch (value) {
    case 7:
    case 15:
    case 35:
    case 53:
    case 77:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M1_E1 M1::E1_CONST_1;
constexpr M1_E1 M1::E1_CONST_2;
constexpr M1_E1 M1::E1_CONST_3;
constexpr M1_E1 M1::E1_CONST_4;
constexpr M1_E1 M1::E1_CONST_5;
constexpr M1_E1 M1::E1_MIN;
constexpr M1_E1 M1::E1_MAX;
constexpr int M1::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M3_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[1];
}
bool M3_E1_IsValid(int value) {
  switch (value) {
    case 10:
    case 27:
    case 69:
    case 122:
    case 9754:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M3_E1 M3::E1_CONST_1;
constexpr M3_E1 M3::E1_CONST_2;
constexpr M3_E1 M3::E1_CONST_3;
constexpr M3_E1 M3::E1_CONST_4;
constexpr M3_E1 M3::E1_CONST_5;
constexpr M3_E1 M3::E1_MIN;
constexpr M3_E1 M3::E1_MAX;
constexpr int M3::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M3_E2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[2];
}
bool M3_E2_IsValid(int value) {
  switch (value) {
    case 9:
    case 31:
    case 42:
    case 50:
    case 81:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M3_E2 M3::E2_CONST_1;
constexpr M3_E2 M3::E2_CONST_2;
constexpr M3_E2 M3::E2_CONST_3;
constexpr M3_E2 M3::E2_CONST_4;
constexpr M3_E2 M3::E2_CONST_5;
constexpr M3_E2 M3::E2_MIN;
constexpr M3_E2 M3::E2_MAX;
constexpr int M3::E2_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M11_M12_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[3];
}
bool M11_M12_E1_IsValid(int value) {
  switch (value) {
    case 5:
    case 21:
    case 57:
    case 78:
    case 121:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M11_M12_E1 M11_M12::E1_CONST_1;
constexpr M11_M12_E1 M11_M12::E1_CONST_2;
constexpr M11_M12_E1 M11_M12::E1_CONST_3;
constexpr M11_M12_E1 M11_M12::E1_CONST_4;
constexpr M11_M12_E1 M11_M12::E1_CONST_5;
constexpr M11_M12_E1 M11_M12::E1_MIN;
constexpr M11_M12_E1 M11_M12::E1_MAX;
constexpr int M11_M12::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M11_E1_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[4];
}
bool M11_E1_IsValid(int value) {
  switch (value) {
    case 67:
    case 88:
    case 91:
    case 100:
    case 108:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M11_E1 M11::E1_CONST_1;
constexpr M11_E1 M11::E1_CONST_2;
constexpr M11_E1 M11::E1_CONST_3;
constexpr M11_E1 M11::E1_CONST_4;
constexpr M11_E1 M11::E1_CONST_5;
constexpr M11_E1 M11::E1_MIN;
constexpr M11_E1 M11::E1_MAX;
constexpr int M11::E1_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M11_E2_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_benchmark_2eproto);
  return file_level_enum_descriptors_benchmark_2eproto[5];
}
bool M11_E2_IsValid(int value) {
  switch (value) {
    case 10:
    case 69:
    case 86:
    case 94:
    case 126:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr M11_E2 M11::E2_CONST_1;
constexpr M11_E2 M11::E2_CONST_2;
constexpr M11_E2 M11::E2_CONST_3;
constexpr M11_E2 M11::E2_CONST_4;
constexpr M11_E2 M11::E2_CONST_5;
constexpr M11_E2 M11::E2_MIN;
constexpr M11_E2 M11::E2_MAX;
constexpr int M11::E2_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void M1_M2::InitAsDefaultInstance() {
}
class M1_M2::_Internal {
 public:
  using HasBits = decltype(std::declval<M1_M2>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

M1_M2::M1_M2()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1.M2)
}
M1_M2::M1_M2(const M1_M2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1.M2)
}

void M1_M2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_M2_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
}

M1_M2::~M1_M2() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1.M2)
  SharedDtor();
}

void M1_M2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M1_M2::ArenaDtor(void* object) {
  M1_M2* _this = reinterpret_cast< M1_M2* >(object);
  (void)_this;
}
void M1_M2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1_M2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1_M2& M1_M2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_M2_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1_M2::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000074u) {
    if (cached_has_bits & 0x00000004u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      f6_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000200u) {
    f7_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1_M2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1_M2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1.M2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional fixed64 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f3(), target);
  }

  // optional bytes f4 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f4(), target);
  }

  // optional bytes f5 = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_f5(), target);
  }

  // optional bytes f6 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f6(), target);
  }

  // optional bytes f7 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1.M2)
  return target;
}

size_t M1_M2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1.M2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000074u) {
    // optional bytes f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional bytes f4 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional bytes f5 = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional bytes f6 = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f6());
    }

  }
  // optional bytes f7 = 11;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f7());
  }

  if (cached_has_bits & 0x0000000au) {
    // optional fixed64 f3 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1_M2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  const M1_M2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1_M2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1.M2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1.M2)
    MergeFrom(*source);
  }
}

void M1_M2::MergeFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1.M2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000074u) {
    if (cached_has_bits & 0x00000004u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_f6(from._internal_f6());
    }
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f7(from._internal_f7());
  }
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1_M2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1_M2::CopyFrom(const M1_M2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1.M2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1_M2::IsInitialized() const {
  return true;
}

void M1_M2::InternalSwap(M1_M2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1_M2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M1::InitAsDefaultInstance() {
  ::hyperprotobench::_M1_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M1_M2*>(
      ::hyperprotobench::M1_M2::internal_default_instance());
}
class M1::_Internal {
 public:
  using HasBits = decltype(std::declval<M1>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hyperprotobench::M1_M2& f7(const M1* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::hyperprotobench::M1_M2&
M1::_Internal::f7(const M1* msg) {
  return *msg->f7_;
}
void M1::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M1_M2* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f7)
}
M1::M1()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M1)
}
M1::M1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M1)
}
M1::M1(const M1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f12()) {
    f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f12(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M1_M2(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M1)
}

void M1::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M1_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f7_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f7_)) + sizeof(f11_));
  f9_ = 35;
}

M1::~M1() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M1)
  SharedDtor();
}

void M1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f7_;
}

void M1::ArenaDtor(void* object) {
  M1* _this = reinterpret_cast< M1* >(object);
  (void)_this;
}
void M1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M1& M1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M1_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M1::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      f5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00002000u) {
    f10_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00100000u) {
    f12_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(f7_ != nullptr);
    f7_->Clear();
  }
  if (cached_has_bits & 0x00000054u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f6_));
  }
  if (cached_has_bits & 0x00008600u) {
    ::memset(&f8_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f11_) -
        reinterpret_cast<char*>(&f8_)) + sizeof(f11_));
    f9_ = 35;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M1.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.M2 f7 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M1.E1 f9 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M1_E1_IsValid(val))) {
            _internal_set_f9(static_cast<::hyperprotobench::M1_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f12 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_f12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f1().data(), static_cast<int>(this->_internal_f1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f1(), target);
  }

  // optional bool f2 = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f2(), target);
  }

  // optional bytes f3 = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_f3(), target);
  }

  // optional bool f4 = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_f4(), target);
  }

  // optional string f5 = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M1.f5");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f5(), target);
  }

  // optional int32 f6 = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M1.M2 f7 = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f7(this), target, stream);
  }

  // optional int32 f8 = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M1.E1 f9 = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_f9(), target);
  }

  // optional bytes f10 = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_f10(), target);
  }

  // optional int64 f11 = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_f11(), target);
  }

  // optional bytes f12 = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M1)
  return target;
}

size_t M1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    // optional string f1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f1());
    }

    // optional bytes f3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional string f5 = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

  }
  // optional bytes f10 = 16;
  if (cached_has_bits & 0x00002000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f10());
  }

  // optional bytes f12 = 23;
  if (cached_has_bits & 0x00100000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f12());
  }

  // optional .hyperprotobench.M1.M2 f7 = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f7_);
  }

  if (cached_has_bits & 0x00000054u) {
    // optional bool f2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool f4 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 f6 = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

  }
  if (cached_has_bits & 0x00008600u) {
    // optional int32 f8 = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f8());
    }

    // optional int64 f11 = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f11());
    }

    // optional .hyperprotobench.M1.E1 f9 = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f9());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  const M1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M1)
    MergeFrom(*source);
  }
}

void M1::MergeFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f5(from._internal_f5());
    }
  }
  if (cached_has_bits & 0x00002000u) {
    _internal_set_f10(from._internal_f10());
  }
  if (cached_has_bits & 0x00100000u) {
    _internal_set_f12(from._internal_f12());
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_mutable_f7()->::hyperprotobench::M1_M2::MergeFrom(from._internal_f7());
  }
  if (cached_has_bits & 0x00000054u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000010u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000040u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00008600u) {
    if (cached_has_bits & 0x00000200u) {
      f8_ = from.f8_;
    }
    if (cached_has_bits & 0x00008000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00000400u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M1::CopyFrom(const M1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M1::IsInitialized() const {
  return true;
}

void M1::InternalSwap(M1* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f12_.Swap(&other->f12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f7_, other->f7_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f8_, other->f8_);
  swap(f11_, other->f11_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M3_M4::InitAsDefaultInstance() {
}
class M3_M4::_Internal {
 public:
  using HasBits = decltype(std::declval<M3_M4>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M3_M4::M3_M4()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M3.M4)
}
M3_M4::M3_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M3.M4)
}
M3_M4::M3_M4(const M3_M4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M3.M4)
}

void M3_M4::SharedCtor() {
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M3_M4::~M3_M4() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M3.M4)
  SharedDtor();
}

void M3_M4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M3_M4::ArenaDtor(void* object) {
  M3_M4* _this = reinterpret_cast< M3_M4* >(object);
  (void)_this;
}
void M3_M4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M3_M4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M3_M4& M3_M4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M3_M4_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M3_M4::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M3.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M3_M4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M3_M4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M3.M4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M3.M4)
  return target;
}

size_t M3_M4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M3.M4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M3_M4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M3.M4)
  GOOGLE_DCHECK_NE(&from, this);
  const M3_M4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M3_M4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M3.M4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M3.M4)
    MergeFrom(*source);
  }
}

void M3_M4::MergeFrom(const M3_M4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M3.M4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M3_M4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M3.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3_M4::CopyFrom(const M3_M4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M3.M4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3_M4::IsInitialized() const {
  return true;
}

void M3_M4::InternalSwap(M3_M4* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M3_M4::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M3_M5::InitAsDefaultInstance() {
}
class M3_M5::_Internal {
 public:
  using HasBits = decltype(std::declval<M3_M5>()._has_bits_);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M3_M5::M3_M5()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M3.M5)
}
M3_M5::M3_M5(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f1_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M3.M5)
}
M3_M5::M3_M5(const M3_M5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f1_(from.f1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M3.M5)
}

void M3_M5::SharedCtor() {
  f2_ = 0;
}

M3_M5::~M3_M5() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M3.M5)
  SharedDtor();
}

void M3_M5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M3_M5::ArenaDtor(void* object) {
  M3_M5* _this = reinterpret_cast< M3_M5* >(object);
  (void)_this;
}
void M3_M5::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M3_M5::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M3_M5& M3_M5::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M3_M5_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M3_M5::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M3.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_.Clear();
  f2_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M3_M5::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 f1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M3_M5::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M3.M5)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 f1 = 5;
  for (int i = 0, n = this->_internal_f1_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_f1(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 f2 = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M3.M5)
  return target;
}

size_t M3_M5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M3.M5)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f1 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f1_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f1_size());
    total_size += data_size;
  }

  // optional int32 f2 = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M3_M5::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M3.M5)
  GOOGLE_DCHECK_NE(&from, this);
  const M3_M5* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M3_M5>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M3.M5)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M3.M5)
    MergeFrom(*source);
  }
}

void M3_M5::MergeFrom(const M3_M5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M3.M5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f1_.MergeFrom(from.f1_);
  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
}

void M3_M5::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M3.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3_M5::CopyFrom(const M3_M5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M3.M5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3_M5::IsInitialized() const {
  return true;
}

void M3_M5::InternalSwap(M3_M5* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.InternalSwap(&other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M3_M5::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M3_M6::InitAsDefaultInstance() {
}
class M3_M6::_Internal {
 public:
  using HasBits = decltype(std::declval<M3_M6>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

M3_M6::M3_M6()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M3.M6)
}
M3_M6::M3_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M3.M6)
}
M3_M6::M3_M6(const M3_M6& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f5_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M3.M6)
}

void M3_M6::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M3_M6::~M3_M6() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M3.M6)
  SharedDtor();
}

void M3_M6::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M3_M6::ArenaDtor(void* object) {
  M3_M6* _this = reinterpret_cast< M3_M6* >(object);
  (void)_this;
}
void M3_M6::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M3_M6::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M3_M6& M3_M6::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M3_M6_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M3_M6::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M3.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00001a00u) {
    ::memset(&f4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f5_) -
        reinterpret_cast<char*>(&f4_)) + sizeof(f5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M3_M6::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M3_M6::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M3.M6)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f1(), target);
  }

  // optional bool f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f2(), target);
  }

  // optional int64 f3 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f3(), target);
  }

  // optional int32 f4 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_f4(), target);
  }

  // optional uint64 f5 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M3.M6)
  return target;
}

size_t M3_M6::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M3.M6)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional bool f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00001a00u) {
    // optional int32 f4 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f4());
    }

    // optional int64 f3 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional uint64 f5 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M3_M6::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M3.M6)
  GOOGLE_DCHECK_NE(&from, this);
  const M3_M6* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M3_M6>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M3.M6)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M3.M6)
    MergeFrom(*source);
  }
}

void M3_M6::MergeFrom(const M3_M6& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M3.M6)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001a00u) {
    if (cached_has_bits & 0x00000800u) {
      f4_ = from.f4_;
    }
    if (cached_has_bits & 0x00000200u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00001000u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M3_M6::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M3.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3_M6::CopyFrom(const M3_M6& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M3.M6)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3_M6::IsInitialized() const {
  return true;
}

void M3_M6::InternalSwap(M3_M6* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M3_M6::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M3::InitAsDefaultInstance() {
  ::hyperprotobench::_M3_default_instance_._instance.get_mutable()->f6_ = const_cast< ::hyperprotobench::M3_M4*>(
      ::hyperprotobench::M3_M4::internal_default_instance());
  ::hyperprotobench::_M3_default_instance_._instance.get_mutable()->f11_ = const_cast< ::hyperprotobench::M3_M5*>(
      ::hyperprotobench::M3_M5::internal_default_instance());
  ::hyperprotobench::_M3_default_instance_._instance.get_mutable()->f14_ = const_cast< ::hyperprotobench::M3_M6*>(
      ::hyperprotobench::M3_M6::internal_default_instance());
}
class M3::_Internal {
 public:
  using HasBits = decltype(std::declval<M3>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::hyperprotobench::M3_M4& f6(const M3* msg);
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::hyperprotobench::M3_M5& f11(const M3* msg);
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::hyperprotobench::M3_M6& f14(const M3* msg);
  static void set_has_f14(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

const ::hyperprotobench::M3_M4&
M3::_Internal::f6(const M3* msg) {
  return *msg->f6_;
}
const ::hyperprotobench::M3_M5&
M3::_Internal::f11(const M3* msg) {
  return *msg->f11_;
}
const ::hyperprotobench::M3_M6&
M3::_Internal::f14(const M3* msg) {
  return *msg->f14_;
}
void M3::unsafe_arena_set_allocated_f6(
    ::hyperprotobench::M3_M4* f6) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f6_;
  }
  f6_ = f6;
  if (f6) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f6)
}
void M3::unsafe_arena_set_allocated_f11(
    ::hyperprotobench::M3_M5* f11) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f11_;
  }
  f11_ = f11;
  if (f11) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f11)
}
void M3::unsafe_arena_set_allocated_f14(
    ::hyperprotobench::M3_M6* f14) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f14_;
  }
  f14_ = f14;
  if (f14) {
    _has_bits_[0] |= 0x20000000u;
  } else {
    _has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f14)
}
M3::M3()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M3)
}
M3::M3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M3)
}
M3::M3(const M3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f6()) {
    f6_ = new ::hyperprotobench::M3_M4(*from.f6_);
  } else {
    f6_ = nullptr;
  }
  if (from._internal_has_f11()) {
    f11_ = new ::hyperprotobench::M3_M5(*from.f11_);
  } else {
    f11_ = nullptr;
  }
  if (from._internal_has_f14()) {
    f14_ = new ::hyperprotobench::M3_M6(*from.f14_);
  } else {
    f14_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f8_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f8_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M3)
}

void M3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M3_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f6_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f13_) -
      reinterpret_cast<char*>(&f6_)) + sizeof(f13_));
  f3_ = 69;
  f8_ = 9;
}

M3::~M3() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M3)
  SharedDtor();
}

void M3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f6_;
  if (this != internal_default_instance()) delete f11_;
  if (this != internal_default_instance()) delete f14_;
}

void M3::ArenaDtor(void* object) {
  M3* _this = reinterpret_cast< M3* >(object);
  (void)_this;
}
void M3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M3& M3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M3_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M3::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    f4_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00001500u) {
    if (cached_has_bits & 0x00000100u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      f7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(f6_ != nullptr);
      f6_->Clear();
    }
  }
  if (cached_has_bits & 0x00080000u) {
    GOOGLE_DCHECK(f11_ != nullptr);
    f11_->Clear();
  }
  if (cached_has_bits & 0x20000000u) {
    GOOGLE_DCHECK(f14_ != nullptr);
    f14_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  if (cached_has_bits & 0x00230000u) {
    ::memset(&f9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f12_) -
        reinterpret_cast<char*>(&f9_)) + sizeof(f12_));
  }
  f13_ = PROTOBUF_ULONGLONG(0);
  f3_ = 69;
  f8_ = 9;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M3.E1 f3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M3_E1_IsValid(val))) {
            _internal_set_f3(static_cast<::hyperprotobench::M3_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M3.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M3.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M3.M4 f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f6(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M3.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M3.E2 f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M3_E2_IsValid(val))) {
            _internal_set_f8(static_cast<::hyperprotobench::M3_E2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M3.M5 f11 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_f11(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f12 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f13 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          _Internal::set_has_f13(&has_bits);
          f13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M3.M6 f14 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_f14(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_f1(), target);
  }

  // optional bool f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M3.E1 f3 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_f3(), target);
  }

  // optional string f4 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M3.f4");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_f4(), target);
  }

  // optional string f5 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M3.f5");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_f5(), target);
  }

  // optional .hyperprotobench.M3.M4 f6 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f6(this), target, stream);
  }

  // optional string f7 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M3.f7");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M3.E2 f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_f8(), target);
  }

  // optional int32 f9 = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_f9(), target);
  }

  // optional int32 f10 = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_f10(), target);
  }

  // optional .hyperprotobench.M3.M5 f11 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::f11(this), target, stream);
  }

  // optional int64 f12 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->_internal_f12(), target);
  }

  // optional fixed64 f13 = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(28, this->_internal_f13(), target);
  }

  // optional .hyperprotobench.M3.M6 f14 = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::f14(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M3)
  return target;
}

size_t M3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f4 = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f4());
  }

  if (cached_has_bits & 0x00001500u) {
    // optional string f5 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f5());
    }

    // optional string f7 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f7());
    }

    // optional .hyperprotobench.M3.M4 f6 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f6_);
    }

  }
  // optional .hyperprotobench.M3.M5 f11 = 20;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f11_);
  }

  // optional .hyperprotobench.M3.M6 f14 = 30;
  if (cached_has_bits & 0x20000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f14_);
  }

  if (cached_has_bits & 0x00000006u) {
    // optional fixed64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00230000u) {
    // optional int32 f9 = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional int32 f10 = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f10());
    }

    // optional int64 f12 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f12());
    }

  }
  // optional fixed64 f13 = 28;
  if (cached_has_bits & 0x08000000u) {
    total_size += 2 + 8;
  }

  // optional .hyperprotobench.M3.E1 f3 = 7;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f3());
  }

  // optional .hyperprotobench.M3.E2 f8 = 14;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f8());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M3)
  GOOGLE_DCHECK_NE(&from, this);
  const M3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M3)
    MergeFrom(*source);
  }
}

void M3::MergeFrom(const M3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f4()) {
    _internal_set_f4(from._internal_f4());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00001500u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f7(from._internal_f7());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_f6()->::hyperprotobench::M3_M4::MergeFrom(from._internal_f6());
    }
  }
  if (cached_has_bits & 0x00080000u) {
    _internal_mutable_f11()->::hyperprotobench::M3_M5::MergeFrom(from._internal_f11());
  }
  if (cached_has_bits & 0x20000000u) {
    _internal_mutable_f14()->::hyperprotobench::M3_M6::MergeFrom(from._internal_f14());
  }
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00230000u) {
    if (cached_has_bits & 0x00010000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00020000u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00200000u) {
      f12_ = from.f12_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x08000000u) {
    _internal_set_f13(from._internal_f13());
  }
  if (cached_has_bits & 0x00000040u) {
    _internal_set_f3(from._internal_f3());
  }
  if (cached_has_bits & 0x00002000u) {
    _internal_set_f8(from._internal_f8());
  }
}

void M3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M3::CopyFrom(const M3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M3::IsInitialized() const {
  return true;
}

void M3::InternalSwap(M3* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f6_, other->f6_);
  swap(f11_, other->f11_);
  swap(f14_, other->f14_);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f9_, other->f9_);
  swap(f10_, other->f10_);
  swap(f12_, other->f12_);
  swap(f13_, other->f13_);
  swap(f3_, other->f3_);
  swap(f8_, other->f8_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M7_M8::InitAsDefaultInstance() {
}
class M7_M8::_Internal {
 public:
  using HasBits = decltype(std::declval<M7_M8>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M7_M8::M7_M8()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M7.M8)
}
M7_M8::M7_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M7.M8)
}
M7_M8::M7_M8(const M7_M8& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M7.M8)
}

void M7_M8::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M7_M8::~M7_M8() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M7.M8)
  SharedDtor();
}

void M7_M8::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M7_M8::ArenaDtor(void* object) {
  M7_M8* _this = reinterpret_cast< M7_M8* >(object);
  (void)_this;
}
void M7_M8::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M7_M8::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M7_M8& M7_M8::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M7_M8_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M7_M8::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M7.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M7_M8::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M7_M8::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M7.M8)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional bool f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M7.M8)
  return target;
}

size_t M7_M8::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M7.M8)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional bool f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M7_M8::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M7.M8)
  GOOGLE_DCHECK_NE(&from, this);
  const M7_M8* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M7_M8>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M7.M8)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M7.M8)
    MergeFrom(*source);
  }
}

void M7_M8::MergeFrom(const M7_M8& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M7.M8)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M7_M8::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M7.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M7_M8::CopyFrom(const M7_M8& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M7.M8)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M7_M8::IsInitialized() const {
  return true;
}

void M7_M8::InternalSwap(M7_M8* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M7_M8::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M7::InitAsDefaultInstance() {
  ::hyperprotobench::_M7_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M7_M8*>(
      ::hyperprotobench::M7_M8::internal_default_instance());
}
class M7::_Internal {
 public:
  using HasBits = decltype(std::declval<M7>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M7_M8& f3(const M7* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::hyperprotobench::M7_M8&
M7::_Internal::f3(const M7* msg) {
  return *msg->f3_;
}
void M7::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M7_M8* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M7.f3)
}
M7::M7()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M7)
}
M7::M7(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M7)
}
M7::M7(const M7& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M7_M8(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  f2_ = from.f2_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M7)
}

void M7::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M7_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f3_)) + sizeof(f2_));
}

M7::~M7() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M7)
  SharedDtor();
}

void M7::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f3_;
}

void M7::ArenaDtor(void* object) {
  M7* _this = reinterpret_cast< M7* >(object);
  (void)_this;
}
void M7::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M7::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M7& M7::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M7_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M7::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  f2_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M7::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M7.M8 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M7::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M7)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional fixed32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M7.M8 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M7)
  return target;
}

size_t M7::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M7)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional .hyperprotobench.M7.M8 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional fixed32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M7::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M7)
  GOOGLE_DCHECK_NE(&from, this);
  const M7* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M7>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M7)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M7)
    MergeFrom(*source);
  }
}

void M7::MergeFrom(const M7& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M7)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001au) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f3()->::hyperprotobench::M7_M8::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M7::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M7::CopyFrom(const M7& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M7)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M7::IsInitialized() const {
  return true;
}

void M7::InternalSwap(M7* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M7::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M9_M10::InitAsDefaultInstance() {
}
class M9_M10::_Internal {
 public:
  using HasBits = decltype(std::declval<M9_M10>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M9_M10::M9_M10()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M9.M10)
}
M9_M10::M9_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M9.M10)
}
M9_M10::M9_M10(const M9_M10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M9.M10)
}

void M9_M10::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M9_M10::~M9_M10() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M9.M10)
  SharedDtor();
}

void M9_M10::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M9_M10::ArenaDtor(void* object) {
  M9_M10* _this = reinterpret_cast< M9_M10* >(object);
  (void)_this;
}
void M9_M10::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M9_M10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M9_M10& M9_M10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M9_M10_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M9_M10::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M9.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M9_M10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M9_M10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M9.M10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M9.M10)
  return target;
}

size_t M9_M10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M9.M10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M9_M10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M9.M10)
  GOOGLE_DCHECK_NE(&from, this);
  const M9_M10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M9_M10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M9.M10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M9.M10)
    MergeFrom(*source);
  }
}

void M9_M10::MergeFrom(const M9_M10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M9.M10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M9_M10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M9.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M9_M10::CopyFrom(const M9_M10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M9.M10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M9_M10::IsInitialized() const {
  return true;
}

void M9_M10::InternalSwap(M9_M10* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M9_M10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M9::InitAsDefaultInstance() {
  ::hyperprotobench::_M9_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M9_M10*>(
      ::hyperprotobench::M9_M10::internal_default_instance());
}
class M9::_Internal {
 public:
  using HasBits = decltype(std::declval<M9>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M9_M10& f4(const M9* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::hyperprotobench::M9_M10&
M9::_Internal::f4(const M9* msg) {
  return *msg->f4_;
}
void M9::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M9_M10* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M9.f4)
}
M9::M9()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M9)
}
M9::M9(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f3_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M9)
}
M9::M9(const M9& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f3_(from.f3_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M9_M10(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f6_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f6_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M9)
}

void M9::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M9_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f6_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f6_));
}

M9::~M9() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M9)
  SharedDtor();
}

void M9::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
}

void M9::ArenaDtor(void* object) {
  M9* _this = reinterpret_cast< M9* >(object);
  (void)_this;
}
void M9::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M9::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M9& M9::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M9_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M9::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f3_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000048u) {
    if (cached_has_bits & 0x00000008u) {
      f2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(f4_ != nullptr);
      f4_->Clear();
    }
  }
  f1_ = 0;
  if (cached_has_bits & 0x00000600u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f6_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M9::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f3(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f3(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M9.M10 f4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M9::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M9)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional bytes f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_f2(), target);
  }

  // repeated int32 f3 = 4;
  for (int i = 0, n = this->_internal_f3_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f3(i), target);
  }

  // optional .hyperprotobench.M9.M10 f4 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::f4(this), target, stream);
  }

  // optional int32 f5 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_f5(), target);
  }

  // optional int64 f6 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_f6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M9)
  return target;
}

size_t M9::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M9)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f3 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f3_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f3_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000004au) {
    // optional bytes f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f2());
    }

    // optional .hyperprotobench.M9.M10 f4 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f4_);
    }

    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional int32 f5 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f5());
    }

    // optional int64 f6 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M9::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M9)
  GOOGLE_DCHECK_NE(&from, this);
  const M9* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M9>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M9)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M9)
    MergeFrom(*source);
  }
}

void M9::MergeFrom(const M9& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M9)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f3_.MergeFrom(from.f3_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000004au) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f2(from._internal_f2());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_f4()->::hyperprotobench::M9_M10::MergeFrom(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000600u) {
    if (cached_has_bits & 0x00000200u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000400u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M9::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M9::CopyFrom(const M9& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M9)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M9::IsInitialized() const {
  return true;
}

void M9::InternalSwap(M9* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.InternalSwap(&other->f3_);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f1_, other->f1_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M9::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M12::InitAsDefaultInstance() {
}
class M11_M12::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M12>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

M11_M12::M11_M12()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M12)
}
M11_M12::M11_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M12)
}
M11_M12::M11_M12(const M11_M12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M12)
}

void M11_M12::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  f3_ = 5;
}

M11_M12::~M11_M12() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M12)
  SharedDtor();
}

void M11_M12::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M11_M12::ArenaDtor(void* object) {
  M11_M12* _this = reinterpret_cast< M11_M12* >(object);
  (void)_this;
}
void M11_M12::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M12& M11_M12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M12_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M12::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  f3_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12.E1 f3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M11_M12_E1_IsValid(val))) {
            _internal_set_f3(static_cast<::hyperprotobench::M11_M12_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional bool f2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_f2(), target);
  }

  // optional .hyperprotobench.M11.M12.E1 f3 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M12)
  return target;
}

size_t M11_M12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional bool f2 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  // optional .hyperprotobench.M11.M12.E1 f3 = 9;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M12)
    MergeFrom(*source);
  }
}

void M11_M12::MergeFrom(const M11_M12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000022u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000200u) {
    _internal_set_f3(from._internal_f3());
  }
}

void M11_M12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M12::CopyFrom(const M11_M12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M12::IsInitialized() const {
  return true;
}

void M11_M12::InternalSwap(M11_M12* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11_M13::InitAsDefaultInstance() {
}
class M11_M13::_Internal {
 public:
  using HasBits = decltype(std::declval<M11_M13>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M11_M13::M11_M13()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11.M13)
}
M11_M13::M11_M13(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11.M13)
}
M11_M13::M11_M13(const M11_M13& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11.M13)
}

void M11_M13::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_M13_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M11_M13::~M11_M13() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11.M13)
  SharedDtor();
}

void M11_M13::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M11_M13::ArenaDtor(void* object) {
  M11_M13* _this = reinterpret_cast< M11_M13* >(object);
  (void)_this;
}
void M11_M13::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11_M13::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11_M13& M11_M13::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_M13_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11_M13::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    f3_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000022u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11_M13::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f3 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11_M13::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11.M13)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f1(), target);
  }

  // optional uint64 f2 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_f2(), target);
  }

  // optional bytes f3 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11.M13)
  return target;
}

size_t M11_M13::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11.M13)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000a2u) {
    // optional bytes f3 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f3());
    }

    // optional uint64 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f1());
    }

    // optional uint64 f2 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11_M13::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11.M13)
  GOOGLE_DCHECK_NE(&from, this);
  const M11_M13* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11_M13>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11.M13)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11.M13)
    MergeFrom(*source);
  }
}

void M11_M13::MergeFrom(const M11_M13& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11.M13)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000a2u) {
    if (cached_has_bits & 0x00000080u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000020u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11_M13::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11_M13::CopyFrom(const M11_M13& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11.M13)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11_M13::IsInitialized() const {
  return true;
}

void M11_M13::InternalSwap(M11_M13* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11_M13::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M11::InitAsDefaultInstance() {
  ::hyperprotobench::_M11_default_instance_._instance.get_mutable()->f10_ = const_cast< ::hyperprotobench::M11_M12*>(
      ::hyperprotobench::M11_M12::internal_default_instance());
  ::hyperprotobench::_M11_default_instance_._instance.get_mutable()->f12_ = const_cast< ::hyperprotobench::M11_M13*>(
      ::hyperprotobench::M11_M13::internal_default_instance());
}
class M11::_Internal {
 public:
  using HasBits = decltype(std::declval<M11>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::hyperprotobench::M11_M12& f10(const M11* msg);
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::hyperprotobench::M11_M13& f12(const M11* msg);
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::hyperprotobench::M11_M12&
M11::_Internal::f10(const M11* msg) {
  return *msg->f10_;
}
const ::hyperprotobench::M11_M13&
M11::_Internal::f12(const M11* msg) {
  return *msg->f12_;
}
void M11::unsafe_arena_set_allocated_f10(
    ::hyperprotobench::M11_M12* f10) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f10_;
  }
  f10_ = f10;
  if (f10) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f10)
}
void M11::unsafe_arena_set_allocated_f12(
    ::hyperprotobench::M11_M13* f12) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f12_;
  }
  f12_ = f12;
  if (f12) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M11.f12)
}
M11::M11()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M11)
}
M11::M11(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M11)
}
M11::M11(const M11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f3()) {
    f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f3(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f10()) {
    f10_ = new ::hyperprotobench::M11_M12(*from.f10_);
  } else {
    f10_ = nullptr;
  }
  if (from._internal_has_f12()) {
    f12_ = new ::hyperprotobench::M11_M13(*from.f12_);
  } else {
    f12_ = nullptr;
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M11)
}

void M11::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M11_benchmark_2eproto.base);
  f3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f11_) -
      reinterpret_cast<char*>(&f10_)) + sizeof(f11_));
  f5_ = 67;
  f7_ = 69;
}

M11::~M11() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M11)
  SharedDtor();
}

void M11::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f10_;
  if (this != internal_default_instance()) delete f12_;
}

void M11::ArenaDtor(void* object) {
  M11* _this = reinterpret_cast< M11* >(object);
  (void)_this;
}
void M11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M11& M11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M11_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M11::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      f3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00002000u) {
    f6_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00880000u) {
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(f10_ != nullptr);
      f10_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(f12_ != nullptr);
      f12_->Clear();
    }
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  f8_ = 0;
  if (cached_has_bits & 0x00140000u) {
    ::memset(&f9_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f11_) -
        reinterpret_cast<char*>(&f9_)) + sizeof(f11_));
  }
  if (cached_has_bits & 0x00005000u) {
    f5_ = 67;
    f7_ = 69;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.f3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M11.f4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.E1 f5 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M11_E1_IsValid(val))) {
            _internal_set_f5(static_cast<::hyperprotobench::M11_E1>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes f6 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.E2 f7 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::hyperprotobench::M11_E2_IsValid(val))) {
            _internal_set_f7(static_cast<::hyperprotobench::M11_E2>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(15, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 f8 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M12 f10 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_f10(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f11 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M11.M13 f12 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_f12(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_f2(), target);
  }

  // optional string f3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f3().data(), static_cast<int>(this->_internal_f3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.f3");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_f3(), target);
  }

  // optional string f4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f4().data(), static_cast<int>(this->_internal_f4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M11.f4");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M11.E1 f5 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_f5(), target);
  }

  // optional bytes f6 = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M11.E2 f7 = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_f7(), target);
  }

  // optional int32 f8 = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_f8(), target);
  }

  // optional int32 f9 = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_f9(), target);
  }

  // optional .hyperprotobench.M11.M12 f10 = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::f10(this), target, stream);
  }

  // optional uint64 f11 = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_f11(), target);
  }

  // optional .hyperprotobench.M11.M13 f12 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::f12(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M11)
  return target;
}

size_t M11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional string f3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f3());
    }

    // optional string f4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f4());
    }

  }
  // optional bytes f6 = 14;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x00880000u) {
    // optional .hyperprotobench.M11.M12 f10 = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f10_);
    }

    // optional .hyperprotobench.M11.M13 f12 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f12_);
    }

  }
  if (cached_has_bits & 0x00000006u) {
    // optional fixed64 f2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 f1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

  }
  // optional int32 f8 = 16;
  if (cached_has_bits & 0x00008000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f8());
  }

  if (cached_has_bits & 0x00140000u) {
    // optional int32 f9 = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f9());
    }

    // optional uint64 f11 = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f11());
    }

  }
  if (cached_has_bits & 0x00005000u) {
    // optional .hyperprotobench.M11.E1 f5 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f5());
    }

    // optional .hyperprotobench.M11.E2 f7 = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_f7());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M11)
  GOOGLE_DCHECK_NE(&from, this);
  const M11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M11)
    MergeFrom(*source);
  }
}

void M11::MergeFrom(const M11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    if (cached_has_bits & 0x00000008u) {
      _internal_set_f3(from._internal_f3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f4(from._internal_f4());
    }
  }
  if (cached_has_bits & 0x00002000u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x00880000u) {
    if (cached_has_bits & 0x00080000u) {
      _internal_mutable_f10()->::hyperprotobench::M11_M12::MergeFrom(from._internal_f10());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_f12()->::hyperprotobench::M11_M13::MergeFrom(from._internal_f12());
    }
  }
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00008000u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00140000u) {
    if (cached_has_bits & 0x00040000u) {
      f9_ = from.f9_;
    }
    if (cached_has_bits & 0x00100000u) {
      f11_ = from.f11_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00005000u) {
    if (cached_has_bits & 0x00001000u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00004000u) {
      f7_ = from.f7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M11::CopyFrom(const M11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M11::IsInitialized() const {
  return true;
}

void M11::InternalSwap(M11* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f3_.Swap(&other->f3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f10_, other->f10_);
  swap(f12_, other->f12_);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
  swap(f8_, other->f8_);
  swap(f9_, other->f9_);
  swap(f11_, other->f11_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M14_M15::InitAsDefaultInstance() {
}
class M14_M15::_Internal {
 public:
  using HasBits = decltype(std::declval<M14_M15>()._has_bits_);
};

M14_M15::M14_M15()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M14.M15)
}
M14_M15::M14_M15(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f1_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M14.M15)
}
M14_M15::M14_M15(const M14_M15& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f1_(from.f1_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M14.M15)
}

void M14_M15::SharedCtor() {
}

M14_M15::~M14_M15() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M14.M15)
  SharedDtor();
}

void M14_M15::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M14_M15::ArenaDtor(void* object) {
  M14_M15* _this = reinterpret_cast< M14_M15* >(object);
  (void)_this;
}
void M14_M15::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M14_M15::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M14_M15& M14_M15::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M14_M15_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M14_M15::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M14.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M14_M15::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f1(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_f1(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M14_M15::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M14.M15)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 f1 = 2;
  for (int i = 0, n = this->_internal_f1_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_f1(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M14.M15)
  return target;
}

size_t M14_M15::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M14.M15)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 f1 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->f1_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f1_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M14_M15::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M14.M15)
  GOOGLE_DCHECK_NE(&from, this);
  const M14_M15* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M14_M15>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M14.M15)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M14.M15)
    MergeFrom(*source);
  }
}

void M14_M15::MergeFrom(const M14_M15& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M14.M15)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f1_.MergeFrom(from.f1_);
}

void M14_M15::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M14.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M14_M15::CopyFrom(const M14_M15& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M14.M15)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M14_M15::IsInitialized() const {
  return true;
}

void M14_M15::InternalSwap(M14_M15* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.InternalSwap(&other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M14_M15::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M14_M16::InitAsDefaultInstance() {
}
class M14_M16::_Internal {
 public:
  using HasBits = decltype(std::declval<M14_M16>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M14_M16::M14_M16()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M14.M16)
}
M14_M16::M14_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M14.M16)
}
M14_M16::M14_M16(const M14_M16& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M14.M16)
}

void M14_M16::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M14_M16::~M14_M16() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M14.M16)
  SharedDtor();
}

void M14_M16::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M14_M16::ArenaDtor(void* object) {
  M14_M16* _this = reinterpret_cast< M14_M16* >(object);
  (void)_this;
}
void M14_M16::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M14_M16::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M14_M16& M14_M16::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M14_M16_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M14_M16::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M14.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M14_M16::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M14_M16::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M14.M16)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f1(), target);
  }

  // optional double f2 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M14.M16)
  return target;
}

size_t M14_M16::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M14.M16)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 f1 = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional double f2 = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M14_M16::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M14.M16)
  GOOGLE_DCHECK_NE(&from, this);
  const M14_M16* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M14_M16>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M14.M16)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M14.M16)
    MergeFrom(*source);
  }
}

void M14_M16::MergeFrom(const M14_M16& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M14.M16)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M14_M16::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M14.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M14_M16::CopyFrom(const M14_M16& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M14.M16)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M14_M16::IsInitialized() const {
  return true;
}

void M14_M16::InternalSwap(M14_M16* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M14_M16::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M14::InitAsDefaultInstance() {
  ::hyperprotobench::_M14_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M14_M15*>(
      ::hyperprotobench::M14_M15::internal_default_instance());
  ::hyperprotobench::_M14_default_instance_._instance.get_mutable()->f3_ = const_cast< ::hyperprotobench::M14_M16*>(
      ::hyperprotobench::M14_M16::internal_default_instance());
}
class M14::_Internal {
 public:
  using HasBits = decltype(std::declval<M14>()._has_bits_);
  static const ::hyperprotobench::M14_M15& f1(const M14* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M14_M16& f3(const M14* msg);
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::hyperprotobench::M14_M15&
M14::_Internal::f1(const M14* msg) {
  return *msg->f1_;
}
const ::hyperprotobench::M14_M16&
M14::_Internal::f3(const M14* msg) {
  return *msg->f3_;
}
void M14::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M14_M15* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M14.f1)
}
void M14::unsafe_arena_set_allocated_f3(
    ::hyperprotobench::M14_M16* f3) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f3_;
  }
  f3_ = f3;
  if (f3) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M14.f3)
}
M14::M14()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M14)
}
M14::M14(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f2_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M14)
}
M14::M14(const M14& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f2_(from.f2_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M14_M15(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  if (from._internal_has_f3()) {
    f3_ = new ::hyperprotobench::M14_M16(*from.f3_);
  } else {
    f3_ = nullptr;
  }
  f5_ = from.f5_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M14)
}

void M14::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M14_benchmark_2eproto.base);
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f5_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f5_));
}

M14::~M14() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M14)
  SharedDtor();
}

void M14::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
  if (this != internal_default_instance()) delete f3_;
}

void M14::ArenaDtor(void* object) {
  M14* _this = reinterpret_cast< M14* >(object);
  (void)_this;
}
void M14::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M14::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M14& M14::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M14_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M14::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f2_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000032u) {
    if (cached_has_bits & 0x00000020u) {
      f4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(f1_ != nullptr);
      f1_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(f3_ != nullptr);
      f3_->Clear();
    }
  }
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M14::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M14.M15 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M14.M16 f3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_f3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M14::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M14)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M14.M15 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // repeated int32 f2 = 2;
  for (int i = 0, n = this->_internal_f2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_f2(i), target);
  }

  // optional .hyperprotobench.M14.M16 f3 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::f3(this), target, stream);
  }

  // optional bytes f4 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_f4(), target);
  }

  // optional int64 f5 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M14)
  return target;
}

size_t M14::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M14)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f2 = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f2_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000b2u) {
    // optional bytes f4 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional .hyperprotobench.M14.M15 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional .hyperprotobench.M14.M16 f3 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f3_);
    }

    // optional int64 f5 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M14::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M14)
  GOOGLE_DCHECK_NE(&from, this);
  const M14* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M14>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M14)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M14)
    MergeFrom(*source);
  }
}

void M14::MergeFrom(const M14& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M14)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f2_.MergeFrom(from.f2_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000b2u) {
    if (cached_has_bits & 0x00000020u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M14_M15::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_f3()->::hyperprotobench::M14_M16::MergeFrom(from._internal_f3());
    }
    if (cached_has_bits & 0x00000080u) {
      f5_ = from.f5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M14::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M14::CopyFrom(const M14& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M14)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M14::IsInitialized() const {
  return true;
}

void M14::InternalSwap(M14* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.InternalSwap(&other->f2_);
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f5_, other->f5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M14::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17_M18::InitAsDefaultInstance() {
}
class M17_M18::_Internal {
 public:
  using HasBits = decltype(std::declval<M17_M18>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

M17_M18::M17_M18()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17.M18)
}
M17_M18::M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17.M18)
}
M17_M18::M17_M18(const M17_M18& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f1()) {
    f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f1(),
      GetArenaNoVirtual());
  }
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f4()) {
    f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f4(),
      GetArenaNoVirtual());
  }
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f7_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f7_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17.M18)
}

void M17_M18::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M17_M18_benchmark_2eproto.base);
  f1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f7_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f7_));
}

M17_M18::~M17_M18() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17.M18)
  SharedDtor();
}

void M17_M18::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void M17_M18::ArenaDtor(void* object) {
  M17_M18* _this = reinterpret_cast< M17_M18* >(object);
  (void)_this;
}
void M17_M18::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17_M18::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17_M18& M17_M18::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_M18_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17_M18::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000012u) {
    if (cached_has_bits & 0x00000002u) {
      f1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      f4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000ecu) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f7_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f7_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17_M18::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_f1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f7 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f7(&has_bits);
          f7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17_M18::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17.M18)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_f1(), target);
  }

  // optional int64 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_f2(), target);
  }

  // optional int32 f3 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f3(), target);
  }

  // optional bytes f4 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f4(), target);
  }

  // optional int64 f5 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f5(), target);
  }

  // optional int32 f6 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f6(), target);
  }

  // optional int32 f7 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_f7(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17.M18)
  return target;
}

size_t M17_M18::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17.M18)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional bytes f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f1());
    }

    // optional bytes f4 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f4());
    }

    // optional int64 f2 = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f2());
    }

    // optional int32 f3 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional int32 f6 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f6());
    }

    // optional int64 f5 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f5());
    }

    // optional int32 f7 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f7());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17_M18::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  const M17_M18* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17_M18>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17.M18)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17.M18)
    MergeFrom(*source);
  }
}

void M17_M18::MergeFrom(const M17_M18& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17.M18)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    if (cached_has_bits & 0x00000002u) {
      _internal_set_f1(from._internal_f1());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_f4(from._internal_f4());
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000008u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000040u) {
      f6_ = from.f6_;
    }
    if (cached_has_bits & 0x00000020u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000080u) {
      f7_ = from.f7_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M17_M18::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17_M18::CopyFrom(const M17_M18& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17.M18)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17_M18::IsInitialized() const {
  return true;
}

void M17_M18::InternalSwap(M17_M18* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f1_.Swap(&other->f1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f4_.Swap(&other->f4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17_M18::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M17::InitAsDefaultInstance() {
  ::hyperprotobench::_M17_default_instance_._instance.get_mutable()->f1_ = const_cast< ::hyperprotobench::M17_M18*>(
      ::hyperprotobench::M17_M18::internal_default_instance());
}
class M17::_Internal {
 public:
  using HasBits = decltype(std::declval<M17>()._has_bits_);
  static const ::hyperprotobench::M17_M18& f1(const M17* msg);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

const ::hyperprotobench::M17_M18&
M17::_Internal::f1(const M17* msg) {
  return *msg->f1_;
}
void M17::unsafe_arena_set_allocated_f1(
    ::hyperprotobench::M17_M18* f1) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f1_;
  }
  f1_ = f1;
  if (f1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f1)
}
M17::M17()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M17)
}
M17::M17(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f2_(arena),
  f8_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M17)
}
M17::M17(const M17& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f2_(from.f2_),
      f8_(from.f8_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f10()) {
    f10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f10(),
      GetArenaNoVirtual());
  }
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f12()) {
    f12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f12(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f1()) {
    f1_ = new ::hyperprotobench::M17_M18(*from.f1_);
  } else {
    f1_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M17)
}

void M17::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M17_benchmark_2eproto.base);
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f9_));
}

M17::~M17() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M17)
  SharedDtor();
}

void M17::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f1_;
}

void M17::ArenaDtor(void* object) {
  M17* _this = reinterpret_cast< M17* >(object);
  (void)_this;
}
void M17::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M17::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M17& M17::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M17_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M17::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f2_.Clear();
  f8_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00000400u) {
      f5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      f7_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00120000u) {
    if (cached_has_bits & 0x00020000u) {
      f10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      f12_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000002u) {
    GOOGLE_DCHECK(f1_ != nullptr);
    f1_->Clear();
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  f6_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x00050000u) {
    ::memset(&f11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f9_) -
        reinterpret_cast<char*>(&f11_)) + sizeof(f9_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M17::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .hyperprotobench.M17.M18 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_f1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f2(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f2(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bytes f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f8(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f8(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f9 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f10 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_f10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f11 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f12 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_f12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M17.f12");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M17::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M17)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hyperprotobench.M17.M18 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::f1(this), target, stream);
  }

  // repeated int32 f2 = 4;
  for (int i = 0, n = this->_internal_f2_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_f2(i), target);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  // optional double f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_f4(), target);
  }

  // optional bytes f5 = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_f5(), target);
  }

  // optional int64 f6 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_f6(), target);
  }

  // optional bytes f7 = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_f7(), target);
  }

  // repeated int32 f8 = 14;
  for (int i = 0, n = this->_internal_f8_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_f8(i), target);
  }

  // optional int64 f9 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->_internal_f9(), target);
  }

  // optional bytes f10 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_f10(), target);
  }

  // optional int32 f11 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_f11(), target);
  }

  // optional string f12 = 20;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f12().data(), static_cast<int>(this->_internal_f12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M17.f12");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_f12(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M17)
  return target;
}

size_t M17::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M17)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f2 = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f2_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f2_size());
    total_size += data_size;
  }

  // repeated int32 f8 = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f8_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f8_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    // optional bytes f5 = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f5());
    }

    // optional bytes f7 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f7());
    }

  }
  if (cached_has_bits & 0x00120000u) {
    // optional bytes f10 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_f10());
    }

    // optional string f12 = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f12());
    }

  }
  if (cached_has_bits & 0x000000c2u) {
    // optional .hyperprotobench.M17.M18 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f1_);
    }

    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional double f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional int64 f6 = 11;
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f6());
  }

  if (cached_has_bits & 0x00050000u) {
    // optional int32 f11 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f11());
    }

    // optional int64 f9 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f9());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M17::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M17)
  GOOGLE_DCHECK_NE(&from, this);
  const M17* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M17>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M17)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M17)
    MergeFrom(*source);
  }
}

void M17::MergeFrom(const M17& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M17)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f2_.MergeFrom(from.f2_);
  f8_.MergeFrom(from.f8_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00001400u) {
    if (cached_has_bits & 0x00000400u) {
      _internal_set_f5(from._internal_f5());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f7(from._internal_f7());
    }
  }
  if (cached_has_bits & 0x00120000u) {
    if (cached_has_bits & 0x00020000u) {
      _internal_set_f10(from._internal_f10());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_f12(from._internal_f12());
    }
  }
  if (cached_has_bits & 0x000000c2u) {
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_f1()->::hyperprotobench::M17_M18::MergeFrom(from._internal_f1());
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000800u) {
    _internal_set_f6(from._internal_f6());
  }
  if (cached_has_bits & 0x00050000u) {
    if (cached_has_bits & 0x00040000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00010000u) {
      f9_ = from.f9_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M17::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M17::CopyFrom(const M17& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M17)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M17::IsInitialized() const {
  return true;
}

void M17::InternalSwap(M17* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.InternalSwap(&other->f2_);
  f8_.InternalSwap(&other->f8_);
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f10_.Swap(&other->f10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f12_.Swap(&other->f12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f6_, other->f6_);
  swap(f11_, other->f11_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M17::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M19_M20::InitAsDefaultInstance() {
}
class M19_M20::_Internal {
 public:
  using HasBits = decltype(std::declval<M19_M20>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M19_M20::M19_M20()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M19.M20)
}
M19_M20::M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M19.M20)
}
M19_M20::M19_M20(const M19_M20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M19.M20)
}

void M19_M20::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M19_M20::~M19_M20() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M19.M20)
  SharedDtor();
}

void M19_M20::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M19_M20::ArenaDtor(void* object) {
  M19_M20* _this = reinterpret_cast< M19_M20* >(object);
  (void)_this;
}
void M19_M20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M19_M20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M19_M20& M19_M20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M19_M20_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M19_M20::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M19_M20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M19_M20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M19.M20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_f1(), target);
  }

  // optional fixed64 f2 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M19.M20)
  return target;
}

size_t M19_M20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M19.M20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional int64 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional fixed64 f2 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M19_M20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  const M19_M20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M19_M20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M19.M20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M19.M20)
    MergeFrom(*source);
  }
}

void M19_M20::MergeFrom(const M19_M20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M19.M20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M19_M20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M19_M20::CopyFrom(const M19_M20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M19.M20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M19_M20::IsInitialized() const {
  return true;
}

void M19_M20::InternalSwap(M19_M20* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M19_M20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M19_M21::InitAsDefaultInstance() {
}
class M19_M21::_Internal {
 public:
  using HasBits = decltype(std::declval<M19_M21>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M19_M21::M19_M21()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M19.M21)
}
M19_M21::M19_M21(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M19.M21)
}
M19_M21::M19_M21(const M19_M21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M19.M21)
}

void M19_M21::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M19_M21::~M19_M21() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M19.M21)
  SharedDtor();
}

void M19_M21::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M19_M21::ArenaDtor(void* object) {
  M19_M21* _this = reinterpret_cast< M19_M21* >(object);
  (void)_this;
}
void M19_M21::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M19_M21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M19_M21& M19_M21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M19_M21_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M19_M21::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M19.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M19_M21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M19_M21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M19.M21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f1(), target);
  }

  // optional bool f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M19.M21)
  return target;
}

size_t M19_M21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M19.M21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 f1 = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional bool f2 = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M19_M21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M19.M21)
  GOOGLE_DCHECK_NE(&from, this);
  const M19_M21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M19_M21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M19.M21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M19.M21)
    MergeFrom(*source);
  }
}

void M19_M21::MergeFrom(const M19_M21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M19.M21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M19_M21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M19.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M19_M21::CopyFrom(const M19_M21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M19.M21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M19_M21::IsInitialized() const {
  return true;
}

void M19_M21::InternalSwap(M19_M21* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M19_M21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M19::InitAsDefaultInstance() {
  ::hyperprotobench::_M19_default_instance_._instance.get_mutable()->f2_ = const_cast< ::hyperprotobench::M19_M20*>(
      ::hyperprotobench::M19_M20::internal_default_instance());
  ::hyperprotobench::_M19_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M19_M21*>(
      ::hyperprotobench::M19_M21::internal_default_instance());
}
class M19::_Internal {
 public:
  using HasBits = decltype(std::declval<M19>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hyperprotobench::M19_M20& f2(const M19* msg);
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M19_M21& f8(const M19* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::hyperprotobench::M19_M20&
M19::_Internal::f2(const M19* msg) {
  return *msg->f2_;
}
const ::hyperprotobench::M19_M21&
M19::_Internal::f8(const M19* msg) {
  return *msg->f8_;
}
void M19::unsafe_arena_set_allocated_f2(
    ::hyperprotobench::M19_M20* f2) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f2_;
  }
  f2_ = f2;
  if (f2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.f2)
}
void M19::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M19_M21* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.f8)
}
M19::M19()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M19)
}
M19::M19(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M19)
}
M19::M19(const M19& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f7()) {
    f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f7(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f2()) {
    f2_ = new ::hyperprotobench::M19_M20(*from.f2_);
  } else {
    f2_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M19_M21(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M19)
}

void M19::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M19_benchmark_2eproto.base);
  f7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M19::~M19() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M19)
  SharedDtor();
}

void M19::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f2_;
  if (this != internal_default_instance()) delete f8_;
}

void M19::ArenaDtor(void* object) {
  M19* _this = reinterpret_cast< M19* >(object);
  (void)_this;
}
void M19::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M19::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M19& M19::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M19_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M19::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001000u) {
    f7_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000004u) {
    GOOGLE_DCHECK(f2_ != nullptr);
    f2_->Clear();
  }
  if (cached_has_bits & 0x00002000u) {
    GOOGLE_DCHECK(f8_ != nullptr);
    f8_->Clear();
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&f3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f3_)) + sizeof(f4_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&f5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f6_) -
        reinterpret_cast<char*>(&f5_)) + sizeof(f6_));
  }
  f1_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M19::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M19.M20 f2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_f2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_f5(&has_bits);
          f5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f6 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M19.f7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M19.M21 f8 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M19::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M19)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_f1(), target);
  }

  // optional .hyperprotobench.M19.M20 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::f2(this), target, stream);
  }

  // optional int64 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_f3(), target);
  }

  // optional int64 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f4(), target);
  }

  // optional uint64 f5 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_f5(), target);
  }

  // optional int64 f6 = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_f6(), target);
  }

  // optional string f7 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f7().data(), static_cast<int>(this->_internal_f7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M19.f7");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_f7(), target);
  }

  // optional .hyperprotobench.M19.M21 f8 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::f8(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M19)
  return target;
}

size_t M19::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M19)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string f7 = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f7());
  }

  // optional .hyperprotobench.M19.M20 f2 = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f2_);
  }

  // optional .hyperprotobench.M19.M21 f8 = 13;
  if (cached_has_bits & 0x00002000u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f8_);
  }

  if (cached_has_bits & 0x000000c0u) {
    // optional int64 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f3());
    }

    // optional int64 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 f5 = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f5());
    }

    // optional int64 f6 = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f6());
    }

  }
  // optional fixed32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M19::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M19)
  GOOGLE_DCHECK_NE(&from, this);
  const M19* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M19>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M19)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M19)
    MergeFrom(*source);
  }
}

void M19::MergeFrom(const M19& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M19)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f7()) {
    _internal_set_f7(from._internal_f7());
  }
  if (from._internal_has_f2()) {
    _internal_mutable_f2()->::hyperprotobench::M19_M20::MergeFrom(from._internal_f2());
  }
  if (from._internal_has_f8()) {
    _internal_mutable_f8()->::hyperprotobench::M19_M21::MergeFrom(from._internal_f8());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000c0u) {
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      f5_ = from.f5_;
    }
    if (cached_has_bits & 0x00000200u) {
      f6_ = from.f6_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000002u) {
    _internal_set_f1(from._internal_f1());
  }
}

void M19::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M19::CopyFrom(const M19& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M19)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M19::IsInitialized() const {
  return true;
}

void M19::InternalSwap(M19* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f7_.Swap(&other->f7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f2_, other->f2_);
  swap(f8_, other->f8_);
  swap(f3_, other->f3_);
  swap(f4_, other->f4_);
  swap(f5_, other->f5_);
  swap(f6_, other->f6_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M19::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M22_M23::InitAsDefaultInstance() {
}
class M22_M23::_Internal {
 public:
  using HasBits = decltype(std::declval<M22_M23>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

M22_M23::M22_M23()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M22.M23)
}
M22_M23::M22_M23(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M22.M23)
}
M22_M23::M22_M23(const M22_M23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f3_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M22.M23)
}

void M22_M23::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f3_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
}

M22_M23::~M22_M23() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M22.M23)
  SharedDtor();
}

void M22_M23::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M22_M23::ArenaDtor(void* object) {
  M22_M23* _this = reinterpret_cast< M22_M23* >(object);
  (void)_this;
}
void M22_M23::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M22_M23::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M22_M23& M22_M23::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M22_M23_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M22_M23::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M22.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f3_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f3_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M22_M23::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M22_M23::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M22.M23)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional bool f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_f2(), target);
  }

  // optional uint64 f3 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_f3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M22.M23)
  return target;
}

size_t M22_M23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M22.M23)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional bool f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 f3 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_f3());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M22_M23::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M22.M23)
  GOOGLE_DCHECK_NE(&from, this);
  const M22_M23* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M22_M23>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M22.M23)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M22.M23)
    MergeFrom(*source);
  }
}

void M22_M23::MergeFrom(const M22_M23& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M22.M23)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000002au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000020u) {
      f3_ = from.f3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M22_M23::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M22.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M22_M23::CopyFrom(const M22_M23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M22.M23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M22_M23::IsInitialized() const {
  return true;
}

void M22_M23::InternalSwap(M22_M23* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
  swap(f3_, other->f3_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M22_M23::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M22_M24::InitAsDefaultInstance() {
}
class M22_M24::_Internal {
 public:
  using HasBits = decltype(std::declval<M22_M24>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M22_M24::M22_M24()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M22.M24)
}
M22_M24::M22_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M22.M24)
}
M22_M24::M22_M24(const M22_M24& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M22.M24)
}

void M22_M24::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M22_M24::~M22_M24() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M22.M24)
  SharedDtor();
}

void M22_M24::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M22_M24::ArenaDtor(void* object) {
  M22_M24* _this = reinterpret_cast< M22_M24* >(object);
  (void)_this;
}
void M22_M24::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M22_M24::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M22_M24& M22_M24::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M22_M24_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M22_M24::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M22.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M22_M24::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M22_M24::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M22.M24)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M22.M24)
  return target;
}

size_t M22_M24::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M22.M24)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M22_M24::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M22.M24)
  GOOGLE_DCHECK_NE(&from, this);
  const M22_M24* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M22_M24>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M22.M24)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M22.M24)
    MergeFrom(*source);
  }
}

void M22_M24::MergeFrom(const M22_M24& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M22.M24)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M22_M24::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M22.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M22_M24::CopyFrom(const M22_M24& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M22.M24)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M22_M24::IsInitialized() const {
  return true;
}

void M22_M24::InternalSwap(M22_M24* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M22_M24::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M22_M25::InitAsDefaultInstance() {
}
class M22_M25::_Internal {
 public:
  using HasBits = decltype(std::declval<M22_M25>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M22_M25::M22_M25()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M22.M25)
}
M22_M25::M22_M25(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M22.M25)
}
M22_M25::M22_M25(const M22_M25& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M22.M25)
}

void M22_M25::SharedCtor() {
  f1_ = 0;
}

M22_M25::~M22_M25() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M22.M25)
  SharedDtor();
}

void M22_M25::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M22_M25::ArenaDtor(void* object) {
  M22_M25* _this = reinterpret_cast< M22_M25* >(object);
  (void)_this;
}
void M22_M25::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M22_M25::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M22_M25& M22_M25::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M22_M25_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M22_M25::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M22.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M22_M25::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M22_M25::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M22.M25)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M22.M25)
  return target;
}

size_t M22_M25::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M22.M25)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 f1 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M22_M25::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M22.M25)
  GOOGLE_DCHECK_NE(&from, this);
  const M22_M25* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M22_M25>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M22.M25)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M22.M25)
    MergeFrom(*source);
  }
}

void M22_M25::MergeFrom(const M22_M25& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M22.M25)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M22_M25::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M22.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M22_M25::CopyFrom(const M22_M25& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M22.M25)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M22_M25::IsInitialized() const {
  return true;
}

void M22_M25::InternalSwap(M22_M25* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M22_M25::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M22::InitAsDefaultInstance() {
  ::hyperprotobench::_M22_default_instance_._instance.get_mutable()->f4_ = const_cast< ::hyperprotobench::M22_M23*>(
      ::hyperprotobench::M22_M23::internal_default_instance());
  ::hyperprotobench::_M22_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M22_M24*>(
      ::hyperprotobench::M22_M24::internal_default_instance());
  ::hyperprotobench::_M22_default_instance_._instance.get_mutable()->f8_ = const_cast< ::hyperprotobench::M22_M25*>(
      ::hyperprotobench::M22_M25::internal_default_instance());
}
class M22::_Internal {
 public:
  using HasBits = decltype(std::declval<M22>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hyperprotobench::M22_M23& f4(const M22* msg);
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::hyperprotobench::M22_M24& f7(const M22* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::hyperprotobench::M22_M25& f8(const M22* msg);
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::hyperprotobench::M22_M23&
M22::_Internal::f4(const M22* msg) {
  return *msg->f4_;
}
const ::hyperprotobench::M22_M24&
M22::_Internal::f7(const M22* msg) {
  return *msg->f7_;
}
const ::hyperprotobench::M22_M25&
M22::_Internal::f8(const M22* msg) {
  return *msg->f8_;
}
void M22::unsafe_arena_set_allocated_f4(
    ::hyperprotobench::M22_M23* f4) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f4_;
  }
  f4_ = f4;
  if (f4) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M22.f4)
}
void M22::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M22_M24* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M22.f7)
}
void M22::unsafe_arena_set_allocated_f8(
    ::hyperprotobench::M22_M25* f8) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f8_;
  }
  f8_ = f8;
  if (f8) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M22.f8)
}
M22::M22()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M22)
}
M22::M22(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M22)
}
M22::M22(const M22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f2()) {
    f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f2(),
      GetArenaNoVirtual());
  }
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f5()) {
    f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f5(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f4()) {
    f4_ = new ::hyperprotobench::M22_M23(*from.f4_);
  } else {
    f4_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M22_M24(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  if (from._internal_has_f8()) {
    f8_ = new ::hyperprotobench::M22_M25(*from.f8_);
  } else {
    f8_ = nullptr;
  }
  ::memcpy(&f3_, &from.f3_,
    static_cast<size_t>(reinterpret_cast<char*>(&f9_) -
    reinterpret_cast<char*>(&f3_)) + sizeof(f9_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M22)
}

void M22::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M22_benchmark_2eproto.base);
  f2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f4_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f9_) -
      reinterpret_cast<char*>(&f4_)) + sizeof(f9_));
}

M22::~M22() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M22)
  SharedDtor();
}

void M22::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  f5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f4_;
  if (this != internal_default_instance()) delete f7_;
  if (this != internal_default_instance()) delete f8_;
}

void M22::ArenaDtor(void* object) {
  M22* _this = reinterpret_cast< M22* >(object);
  (void)_this;
}
void M22::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M22& M22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M22_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M22::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    f2_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000100u) {
    f5_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000040u) {
    GOOGLE_DCHECK(f4_ != nullptr);
    f4_->Clear();
  }
  if (cached_has_bits & 0x00000400u) {
    GOOGLE_DCHECK(f7_ != nullptr);
    f7_->Clear();
  }
  if (cached_has_bits & 0x00020000u) {
    GOOGLE_DCHECK(f8_ != nullptr);
    f8_->Clear();
  }
  f3_ = PROTOBUF_LONGLONG(0);
  f6_ = PROTOBUF_ULONGLONG(0);
  f10_ = 0;
  f1_ = 0;
  f9_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes f2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_f2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M22.M23 f4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_f4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f5 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_f5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M22.f5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 f6 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_f6(&has_bits);
          f6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M22.M24 f7 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M22.M25 f8 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_f8(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f9 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_f9(&has_bits);
          f9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f1(), target);
  }

  // optional bytes f2 = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_f2(), target);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f3(), target);
  }

  // optional .hyperprotobench.M22.M23 f4 = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::f4(this), target, stream);
  }

  // optional string f5 = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f5().data(), static_cast<int>(this->_internal_f5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M22.f5");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_f5(), target);
  }

  // optional uint64 f6 = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M22.M24 f7 = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::f7(this), target, stream);
  }

  // optional .hyperprotobench.M22.M25 f8 = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::f8(this), target, stream);
  }

  // optional int32 f9 = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_f9(), target);
  }

  // optional int32 f10 = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_f10(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M22)
  return target;
}

size_t M22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes f2 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_f2());
  }

  // optional string f5 = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_f5());
  }

  // optional .hyperprotobench.M22.M23 f4 = 8;
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f4_);
  }

  // optional .hyperprotobench.M22.M24 f7 = 12;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f7_);
  }

  // optional .hyperprotobench.M22.M25 f8 = 19;
  if (cached_has_bits & 0x00020000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f8_);
  }

  // optional int64 f3 = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f3());
  }

  // optional uint64 f6 = 11;
  if (cached_has_bits & 0x00000200u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_f6());
  }

  // optional int32 f10 = 21;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f10());
  }

  // optional int32 f1 = 3;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f1());
  }

  // optional int32 f9 = 20;
  if (cached_has_bits & 0x00040000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_f9());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M22)
  GOOGLE_DCHECK_NE(&from, this);
  const M22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M22)
    MergeFrom(*source);
  }
}

void M22::MergeFrom(const M22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f2()) {
    _internal_set_f2(from._internal_f2());
  }
  if (from._internal_has_f5()) {
    _internal_set_f5(from._internal_f5());
  }
  if (from._internal_has_f4()) {
    _internal_mutable_f4()->::hyperprotobench::M22_M23::MergeFrom(from._internal_f4());
  }
  if (from._internal_has_f7()) {
    _internal_mutable_f7()->::hyperprotobench::M22_M24::MergeFrom(from._internal_f7());
  }
  if (from._internal_has_f8()) {
    _internal_mutable_f8()->::hyperprotobench::M22_M25::MergeFrom(from._internal_f8());
  }
  if (from._internal_has_f3()) {
    _internal_set_f3(from._internal_f3());
  }
  if (from._internal_has_f6()) {
    _internal_set_f6(from._internal_f6());
  }
  if (from._internal_has_f10()) {
    _internal_set_f10(from._internal_f10());
  }
  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
  if (from._internal_has_f9()) {
    _internal_set_f9(from._internal_f9());
  }
}

void M22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M22::CopyFrom(const M22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M22::IsInitialized() const {
  return true;
}

void M22::InternalSwap(M22* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f2_.Swap(&other->f2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  f5_.Swap(&other->f5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f4_, other->f4_);
  swap(f7_, other->f7_);
  swap(f8_, other->f8_);
  swap(f3_, other->f3_);
  swap(f6_, other->f6_);
  swap(f10_, other->f10_);
  swap(f1_, other->f1_);
  swap(f9_, other->f9_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M26_M27::InitAsDefaultInstance() {
}
class M26_M27::_Internal {
 public:
  using HasBits = decltype(std::declval<M26_M27>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

M26_M27::M26_M27()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M26.M27)
}
M26_M27::M26_M27(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M26.M27)
}
M26_M27::M26_M27(const M26_M27& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f2_, &from.f2_,
    static_cast<size_t>(reinterpret_cast<char*>(&f1_) -
    reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M26.M27)
}

void M26_M27::SharedCtor() {
  ::memset(&f2_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f1_) -
      reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
}

M26_M27::~M26_M27() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M26.M27)
  SharedDtor();
}

void M26_M27::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M26_M27::ArenaDtor(void* object) {
  M26_M27* _this = reinterpret_cast< M26_M27* >(object);
  (void)_this;
}
void M26_M27::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M26_M27::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M26_M27& M26_M27::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M26_M27_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M26_M27::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    ::memset(&f2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f1_) -
        reinterpret_cast<char*>(&f2_)) + sizeof(f1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M26_M27::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M26_M27::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M26.M27)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_f1(), target);
  }

  // optional int32 f2 = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M26.M27)
  return target;
}

size_t M26_M27::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M26.M27)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 f2 = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

    // optional int64 f1 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M26_M27::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  const M26_M27* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M26_M27>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M26.M27)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M26.M27)
    MergeFrom(*source);
  }
}

void M26_M27::MergeFrom(const M26_M27& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M26.M27)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000004u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M26_M27::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M26_M27::CopyFrom(const M26_M27& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M26.M27)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M26_M27::IsInitialized() const {
  return true;
}

void M26_M27::InternalSwap(M26_M27* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f2_, other->f2_);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M26_M27::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M26_M28::InitAsDefaultInstance() {
}
class M26_M28::_Internal {
 public:
  using HasBits = decltype(std::declval<M26_M28>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M26_M28::M26_M28()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M26.M28)
}
M26_M28::M26_M28(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M26.M28)
}
M26_M28::M26_M28(const M26_M28& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M26.M28)
}

void M26_M28::SharedCtor() {
  f1_ = PROTOBUF_ULONGLONG(0);
}

M26_M28::~M26_M28() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M26.M28)
  SharedDtor();
}

void M26_M28::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M26_M28::ArenaDtor(void* object) {
  M26_M28* _this = reinterpret_cast< M26_M28* >(object);
  (void)_this;
}
void M26_M28::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M26_M28::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M26_M28& M26_M28::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M26_M28_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M26_M28::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M26.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M26_M28::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 f1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M26_M28::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M26.M28)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 f1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M26.M28)
  return target;
}

size_t M26_M28::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M26.M28)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 f1 = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M26_M28::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M26.M28)
  GOOGLE_DCHECK_NE(&from, this);
  const M26_M28* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M26_M28>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M26.M28)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M26.M28)
    MergeFrom(*source);
  }
}

void M26_M28::MergeFrom(const M26_M28& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M26.M28)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M26_M28::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M26.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M26_M28::CopyFrom(const M26_M28& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M26.M28)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M26_M28::IsInitialized() const {
  return true;
}

void M26_M28::InternalSwap(M26_M28* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M26_M28::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M26_M29::InitAsDefaultInstance() {
}
class M26_M29::_Internal {
 public:
  using HasBits = decltype(std::declval<M26_M29>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

M26_M29::M26_M29()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M26.M29)
}
M26_M29::M26_M29(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M26.M29)
}
M26_M29::M26_M29(const M26_M29& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f2_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M26.M29)
}

void M26_M29::SharedCtor() {
  ::memset(&f1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f2_) -
      reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
}

M26_M29::~M26_M29() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M26.M29)
  SharedDtor();
}

void M26_M29::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M26_M29::ArenaDtor(void* object) {
  M26_M29* _this = reinterpret_cast< M26_M29* >(object);
  (void)_this;
}
void M26_M29::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M26_M29::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M26_M29& M26_M29::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M26_M29_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M26_M29::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M26.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f2_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M26_M29::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M26_M29::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M26.M29)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_f1(), target);
  }

  // optional int32 f2 = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_f2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M26.M29)
  return target;
}

size_t M26_M29::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M26.M29)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    // optional int64 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f1());
    }

    // optional int32 f2 = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f2());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M26_M29::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M26.M29)
  GOOGLE_DCHECK_NE(&from, this);
  const M26_M29* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M26_M29>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M26.M29)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M26.M29)
    MergeFrom(*source);
  }
}

void M26_M29::MergeFrom(const M26_M29& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M26.M29)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000au) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000008u) {
      f2_ = from.f2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M26_M29::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M26.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M26_M29::CopyFrom(const M26_M29& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M26.M29)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M26_M29::IsInitialized() const {
  return true;
}

void M26_M29::InternalSwap(M26_M29* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
  swap(f2_, other->f2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M26_M29::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M26_M30::InitAsDefaultInstance() {
}
class M26_M30::_Internal {
 public:
  using HasBits = decltype(std::declval<M26_M30>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

M26_M30::M26_M30()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M26.M30)
}
M26_M30::M26_M30(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M26.M30)
}
M26_M30::M26_M30(const M26_M30& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f1_ = from.f1_;
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M26.M30)
}

void M26_M30::SharedCtor() {
  f1_ = PROTOBUF_LONGLONG(0);
}

M26_M30::~M26_M30() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M26.M30)
  SharedDtor();
}

void M26_M30::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void M26_M30::ArenaDtor(void* object) {
  M26_M30* _this = reinterpret_cast< M26_M30* >(object);
  (void)_this;
}
void M26_M30::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M26_M30::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M26_M30& M26_M30::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M26_M30_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M26_M30::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M26.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M26_M30::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 f1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M26_M30::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M26.M30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 f1 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_f1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M26.M30)
  return target;
}

size_t M26_M30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M26.M30)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 f1 = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_f1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M26_M30::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M26.M30)
  GOOGLE_DCHECK_NE(&from, this);
  const M26_M30* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M26_M30>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M26.M30)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M26.M30)
    MergeFrom(*source);
  }
}

void M26_M30::MergeFrom(const M26_M30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M26.M30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_f1()) {
    _internal_set_f1(from._internal_f1());
  }
}

void M26_M30::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M26.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M26_M30::CopyFrom(const M26_M30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M26.M30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M26_M30::IsInitialized() const {
  return true;
}

void M26_M30::InternalSwap(M26_M30* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(f1_, other->f1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M26_M30::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void M26::InitAsDefaultInstance() {
  ::hyperprotobench::_M26_default_instance_._instance.get_mutable()->f5_ = const_cast< ::hyperprotobench::M26_M27*>(
      ::hyperprotobench::M26_M27::internal_default_instance());
  ::hyperprotobench::_M26_default_instance_._instance.get_mutable()->f7_ = const_cast< ::hyperprotobench::M26_M28*>(
      ::hyperprotobench::M26_M28::internal_default_instance());
  ::hyperprotobench::_M26_default_instance_._instance.get_mutable()->f9_ = const_cast< ::hyperprotobench::M26_M29*>(
      ::hyperprotobench::M26_M29::internal_default_instance());
  ::hyperprotobench::_M26_default_instance_._instance.get_mutable()->f13_ = const_cast< ::hyperprotobench::M26_M30*>(
      ::hyperprotobench::M26_M30::internal_default_instance());
}
class M26::_Internal {
 public:
  using HasBits = decltype(std::declval<M26>()._has_bits_);
  static void set_has_f1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_f2(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f3(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_f4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hyperprotobench::M26_M27& f5(const M26* msg);
  static void set_has_f5(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_f6(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::hyperprotobench::M26_M28& f7(const M26* msg);
  static void set_has_f7(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_f8(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::hyperprotobench::M26_M29& f9(const M26* msg);
  static void set_has_f9(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_f10(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_f11(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_f12(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::hyperprotobench::M26_M30& f13(const M26* msg);
  static void set_has_f13(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::hyperprotobench::M26_M27&
M26::_Internal::f5(const M26* msg) {
  return *msg->f5_;
}
const ::hyperprotobench::M26_M28&
M26::_Internal::f7(const M26* msg) {
  return *msg->f7_;
}
const ::hyperprotobench::M26_M29&
M26::_Internal::f9(const M26* msg) {
  return *msg->f9_;
}
const ::hyperprotobench::M26_M30&
M26::_Internal::f13(const M26* msg) {
  return *msg->f13_;
}
void M26::unsafe_arena_set_allocated_f5(
    ::hyperprotobench::M26_M27* f5) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f5_;
  }
  f5_ = f5;
  if (f5) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M26.f5)
}
void M26::unsafe_arena_set_allocated_f7(
    ::hyperprotobench::M26_M28* f7) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f7_;
  }
  f7_ = f7;
  if (f7) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M26.f7)
}
void M26::unsafe_arena_set_allocated_f9(
    ::hyperprotobench::M26_M29* f9) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f9_;
  }
  f9_ = f9;
  if (f9) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M26.f9)
}
void M26::unsafe_arena_set_allocated_f13(
    ::hyperprotobench::M26_M30* f13) {
  if (GetArenaNoVirtual() == nullptr) {
    delete f13_;
  }
  f13_ = f13;
  if (f13) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M26.f13)
}
M26::M26()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:hyperprotobench.M26)
}
M26::M26(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  f14_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hyperprotobench.M26)
}
M26::M26(const M26& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      f14_(from.f14_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_f6()) {
    f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_f6(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_f5()) {
    f5_ = new ::hyperprotobench::M26_M27(*from.f5_);
  } else {
    f5_ = nullptr;
  }
  if (from._internal_has_f7()) {
    f7_ = new ::hyperprotobench::M26_M28(*from.f7_);
  } else {
    f7_ = nullptr;
  }
  if (from._internal_has_f9()) {
    f9_ = new ::hyperprotobench::M26_M29(*from.f9_);
  } else {
    f9_ = nullptr;
  }
  if (from._internal_has_f13()) {
    f13_ = new ::hyperprotobench::M26_M30(*from.f13_);
  } else {
    f13_ = nullptr;
  }
  ::memcpy(&f1_, &from.f1_,
    static_cast<size_t>(reinterpret_cast<char*>(&f12_) -
    reinterpret_cast<char*>(&f1_)) + sizeof(f12_));
  // @@protoc_insertion_point(copy_constructor:hyperprotobench.M26)
}

void M26::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_M26_benchmark_2eproto.base);
  f6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&f5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f12_) -
      reinterpret_cast<char*>(&f5_)) + sizeof(f12_));
}

M26::~M26() {
  // @@protoc_insertion_point(destructor:hyperprotobench.M26)
  SharedDtor();
}

void M26::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  f6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete f5_;
  if (this != internal_default_instance()) delete f7_;
  if (this != internal_default_instance()) delete f9_;
  if (this != internal_default_instance()) delete f13_;
}

void M26::ArenaDtor(void* object) {
  M26* _this = reinterpret_cast< M26* >(object);
  (void)_this;
}
void M26::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void M26::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const M26& M26::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_M26_benchmark_2eproto.base);
  return *internal_default_instance();
}


void M26::Clear() {
// @@protoc_insertion_point(message_clear_start:hyperprotobench.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f14_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000b800u) {
    if (cached_has_bits & 0x00001000u) {
      f6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(f5_ != nullptr);
      f5_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(f7_ != nullptr);
      f7_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(f9_ != nullptr);
      f9_->Clear();
    }
  }
  if (cached_has_bits & 0x00080000u) {
    GOOGLE_DCHECK(f13_ != nullptr);
    f13_->Clear();
  }
  if (cached_has_bits & 0x000000e2u) {
    ::memset(&f1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f4_) -
        reinterpret_cast<char*>(&f1_)) + sizeof(f4_));
  }
  f8_ = false;
  if (cached_has_bits & 0x00070000u) {
    ::memset(&f10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&f12_) -
        reinterpret_cast<char*>(&f10_)) + sizeof(f12_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* M26::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 f1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_f1(&has_bits);
          f1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_f2(&has_bits);
          f2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 f3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_f3(&has_bits);
          f3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_f4(&has_bits);
          f4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M26.M27 f5 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_f5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string f6 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_f6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hyperprotobench.M26.f6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M26.M28 f7 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_f7(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool f8 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_f8(&has_bits);
          f8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M26.M29 f9 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_f9(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 f10 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_f10(&has_bits);
          f10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 f11 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_f11(&has_bits);
          f11_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double f12 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_f12(&has_bits);
          f12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .hyperprotobench.M26.M30 f13 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_f13(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 f14 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_f14(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_f14(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* M26::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hyperprotobench.M26)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 f1 = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_f1(), target);
  }

  // optional double f2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_f2(), target);
  }

  // optional int32 f3 = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_f3(), target);
  }

  // optional int64 f4 = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_f4(), target);
  }

  // optional .hyperprotobench.M26.M27 f5 = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::f5(this), target, stream);
  }

  // optional string f6 = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_f6().data(), static_cast<int>(this->_internal_f6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hyperprotobench.M26.f6");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_f6(), target);
  }

  // optional .hyperprotobench.M26.M28 f7 = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::f7(this), target, stream);
  }

  // optional bool f8 = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_f8(), target);
  }

  // optional .hyperprotobench.M26.M29 f9 = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::f9(this), target, stream);
  }

  // optional int32 f10 = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_f10(), target);
  }

  // optional int64 f11 = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_f11(), target);
  }

  // optional double f12 = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_f12(), target);
  }

  // optional .hyperprotobench.M26.M30 f13 = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::f13(this), target, stream);
  }

  // repeated int32 f14 = 20;
  for (int i = 0, n = this->_internal_f14_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_f14(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hyperprotobench.M26)
  return target;
}

size_t M26::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hyperprotobench.M26)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 f14 = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->f14_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f14_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000b800u) {
    // optional string f6 = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_f6());
    }

    // optional .hyperprotobench.M26.M27 f5 = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f5_);
    }

    // optional .hyperprotobench.M26.M28 f7 = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f7_);
    }

    // optional .hyperprotobench.M26.M29 f9 = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *f9_);
    }

  }
  // optional .hyperprotobench.M26.M30 f13 = 19;
  if (cached_has_bits & 0x00080000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f13_);
  }

  if (cached_has_bits & 0x000000e2u) {
    // optional int32 f1 = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f1());
    }

    // optional int32 f3 = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f3());
    }

    // optional double f2 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional int64 f4 = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f4());
    }

  }
  // optional bool f8 = 14;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 1;
  }

  if (cached_has_bits & 0x00070000u) {
    // optional int32 f10 = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_f10());
    }

    // optional int64 f11 = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_f11());
    }

    // optional double f12 = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void M26::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hyperprotobench.M26)
  GOOGLE_DCHECK_NE(&from, this);
  const M26* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<M26>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hyperprotobench.M26)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hyperprotobench.M26)
    MergeFrom(*source);
  }
}

void M26::MergeFrom(const M26& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hyperprotobench.M26)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f14_.MergeFrom(from.f14_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000b800u) {
    if (cached_has_bits & 0x00001000u) {
      _internal_set_f6(from._internal_f6());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_f5()->::hyperprotobench::M26_M27::MergeFrom(from._internal_f5());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_mutable_f7()->::hyperprotobench::M26_M28::MergeFrom(from._internal_f7());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_mutable_f9()->::hyperprotobench::M26_M29::MergeFrom(from._internal_f9());
    }
  }
  if (cached_has_bits & 0x00080000u) {
    _internal_mutable_f13()->::hyperprotobench::M26_M30::MergeFrom(from._internal_f13());
  }
  if (cached_has_bits & 0x000000e2u) {
    if (cached_has_bits & 0x00000002u) {
      f1_ = from.f1_;
    }
    if (cached_has_bits & 0x00000040u) {
      f3_ = from.f3_;
    }
    if (cached_has_bits & 0x00000020u) {
      f2_ = from.f2_;
    }
    if (cached_has_bits & 0x00000080u) {
      f4_ = from.f4_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00004000u) {
    _internal_set_f8(from._internal_f8());
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      f10_ = from.f10_;
    }
    if (cached_has_bits & 0x00020000u) {
      f11_ = from.f11_;
    }
    if (cached_has_bits & 0x00040000u) {
      f12_ = from.f12_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void M26::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hyperprotobench.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void M26::CopyFrom(const M26& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hyperprotobench.M26)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool M26::IsInitialized() const {
  return true;
}

void M26::InternalSwap(M26* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  f14_.InternalSwap(&other->f14_);
  f6_.Swap(&other->f6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(f5_, other->f5_);
  swap(f7_, other->f7_);
  swap(f9_, other->f9_);
  swap(f13_, other->f13_);
  swap(f1_, other->f1_);
  swap(f3_, other->f3_);
  swap(f2_, other->f2_);
  swap(f4_, other->f4_);
  swap(f8_, other->f8_);
  swap(f10_, other->f10_);
  swap(f11_, other->f11_);
  swap(f12_, other->f12_);
}

::PROTOBUF_NAMESPACE_ID::Metadata M26::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage< ::hyperprotobench::M1_M2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1_M2 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M1* Arena::CreateMaybeMessage< ::hyperprotobench::M1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M1 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M3_M4* Arena::CreateMaybeMessage< ::hyperprotobench::M3_M4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M3_M4 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M3_M5* Arena::CreateMaybeMessage< ::hyperprotobench::M3_M5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M3_M5 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M3_M6* Arena::CreateMaybeMessage< ::hyperprotobench::M3_M6 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M3_M6 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M3* Arena::CreateMaybeMessage< ::hyperprotobench::M3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M3 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M7_M8* Arena::CreateMaybeMessage< ::hyperprotobench::M7_M8 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M7_M8 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M7* Arena::CreateMaybeMessage< ::hyperprotobench::M7 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M7 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M9_M10* Arena::CreateMaybeMessage< ::hyperprotobench::M9_M10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M9_M10 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M9* Arena::CreateMaybeMessage< ::hyperprotobench::M9 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M9 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M12* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M12 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M12 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11_M13* Arena::CreateMaybeMessage< ::hyperprotobench::M11_M13 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11_M13 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M11* Arena::CreateMaybeMessage< ::hyperprotobench::M11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M11 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M14_M15* Arena::CreateMaybeMessage< ::hyperprotobench::M14_M15 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M14_M15 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M14_M16* Arena::CreateMaybeMessage< ::hyperprotobench::M14_M16 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M14_M16 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M14* Arena::CreateMaybeMessage< ::hyperprotobench::M14 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M14 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17_M18* Arena::CreateMaybeMessage< ::hyperprotobench::M17_M18 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17_M18 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M17* Arena::CreateMaybeMessage< ::hyperprotobench::M17 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M17 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M19_M20* Arena::CreateMaybeMessage< ::hyperprotobench::M19_M20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M19_M20 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M19_M21* Arena::CreateMaybeMessage< ::hyperprotobench::M19_M21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M19_M21 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M19* Arena::CreateMaybeMessage< ::hyperprotobench::M19 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M19 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M22_M23* Arena::CreateMaybeMessage< ::hyperprotobench::M22_M23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M22_M23 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M22_M24* Arena::CreateMaybeMessage< ::hyperprotobench::M22_M24 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M22_M24 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M22_M25* Arena::CreateMaybeMessage< ::hyperprotobench::M22_M25 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M22_M25 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M22* Arena::CreateMaybeMessage< ::hyperprotobench::M22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M22 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M26_M27* Arena::CreateMaybeMessage< ::hyperprotobench::M26_M27 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M26_M27 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M26_M28* Arena::CreateMaybeMessage< ::hyperprotobench::M26_M28 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M26_M28 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M26_M29* Arena::CreateMaybeMessage< ::hyperprotobench::M26_M29 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M26_M29 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M26_M30* Arena::CreateMaybeMessage< ::hyperprotobench::M26_M30 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M26_M30 >(arena);
}
template<> PROTOBUF_NOINLINE ::hyperprotobench::M26* Arena::CreateMaybeMessage< ::hyperprotobench::M26 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hyperprotobench::M26 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
