// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: benchmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_benchmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_benchmark_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_benchmark_2eproto;

 struct hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_M2_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M1_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M3_M4_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M3_M4_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M3_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M3_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M5_M6_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M5_M6_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M5_M7_M8_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M5_M7_M8_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M5_M7_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M5_M7_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M5_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M5_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M9_M10_M11_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M9_M10_M11_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M9_M10_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M9_M10_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M9_M12_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M9_M12_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M9_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M9_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M13_M14_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M13_M14_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M13_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M13_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_M16_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M15_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M15_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_M18_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M17_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M19_M20_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M19_M20_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M19_M21_M22_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_M22_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M19_M21_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M19_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M19_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M23_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M23_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_M26_ACCEL_DESCRIPTORS[];
};

 struct hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS {
static const ::PROTOBUF_NAMESPACE_ID::uint64 M25_ACCEL_DESCRIPTORS[];
};
namespace hyperprotobench {
class M1;
class M1DefaultTypeInternal;
extern M1DefaultTypeInternal _M1_default_instance_;
class M13;
class M13DefaultTypeInternal;
extern M13DefaultTypeInternal _M13_default_instance_;
class M13_M14;
class M13_M14DefaultTypeInternal;
extern M13_M14DefaultTypeInternal _M13_M14_default_instance_;
class M15;
class M15DefaultTypeInternal;
extern M15DefaultTypeInternal _M15_default_instance_;
class M15_M16;
class M15_M16DefaultTypeInternal;
extern M15_M16DefaultTypeInternal _M15_M16_default_instance_;
class M17;
class M17DefaultTypeInternal;
extern M17DefaultTypeInternal _M17_default_instance_;
class M17_M18;
class M17_M18DefaultTypeInternal;
extern M17_M18DefaultTypeInternal _M17_M18_default_instance_;
class M19;
class M19DefaultTypeInternal;
extern M19DefaultTypeInternal _M19_default_instance_;
class M19_M20;
class M19_M20DefaultTypeInternal;
extern M19_M20DefaultTypeInternal _M19_M20_default_instance_;
class M19_M21;
class M19_M21DefaultTypeInternal;
extern M19_M21DefaultTypeInternal _M19_M21_default_instance_;
class M19_M21_M22;
class M19_M21_M22DefaultTypeInternal;
extern M19_M21_M22DefaultTypeInternal _M19_M21_M22_default_instance_;
class M1_M2;
class M1_M2DefaultTypeInternal;
extern M1_M2DefaultTypeInternal _M1_M2_default_instance_;
class M23;
class M23DefaultTypeInternal;
extern M23DefaultTypeInternal _M23_default_instance_;
class M23_M24;
class M23_M24DefaultTypeInternal;
extern M23_M24DefaultTypeInternal _M23_M24_default_instance_;
class M25;
class M25DefaultTypeInternal;
extern M25DefaultTypeInternal _M25_default_instance_;
class M25_M26;
class M25_M26DefaultTypeInternal;
extern M25_M26DefaultTypeInternal _M25_M26_default_instance_;
class M3;
class M3DefaultTypeInternal;
extern M3DefaultTypeInternal _M3_default_instance_;
class M3_M4;
class M3_M4DefaultTypeInternal;
extern M3_M4DefaultTypeInternal _M3_M4_default_instance_;
class M5;
class M5DefaultTypeInternal;
extern M5DefaultTypeInternal _M5_default_instance_;
class M5_M6;
class M5_M6DefaultTypeInternal;
extern M5_M6DefaultTypeInternal _M5_M6_default_instance_;
class M5_M7;
class M5_M7DefaultTypeInternal;
extern M5_M7DefaultTypeInternal _M5_M7_default_instance_;
class M5_M7_M8;
class M5_M7_M8DefaultTypeInternal;
extern M5_M7_M8DefaultTypeInternal _M5_M7_M8_default_instance_;
class M9;
class M9DefaultTypeInternal;
extern M9DefaultTypeInternal _M9_default_instance_;
class M9_M10;
class M9_M10DefaultTypeInternal;
extern M9_M10DefaultTypeInternal _M9_M10_default_instance_;
class M9_M10_M11;
class M9_M10_M11DefaultTypeInternal;
extern M9_M10_M11DefaultTypeInternal _M9_M10_M11_default_instance_;
class M9_M12;
class M9_M12DefaultTypeInternal;
extern M9_M12DefaultTypeInternal _M9_M12_default_instance_;
}  // namespace hyperprotobench
PROTOBUF_NAMESPACE_OPEN
template<> ::hyperprotobench::M1* Arena::CreateMaybeMessage<::hyperprotobench::M1>(Arena*);
template<> ::hyperprotobench::M13* Arena::CreateMaybeMessage<::hyperprotobench::M13>(Arena*);
template<> ::hyperprotobench::M13_M14* Arena::CreateMaybeMessage<::hyperprotobench::M13_M14>(Arena*);
template<> ::hyperprotobench::M15* Arena::CreateMaybeMessage<::hyperprotobench::M15>(Arena*);
template<> ::hyperprotobench::M15_M16* Arena::CreateMaybeMessage<::hyperprotobench::M15_M16>(Arena*);
template<> ::hyperprotobench::M17* Arena::CreateMaybeMessage<::hyperprotobench::M17>(Arena*);
template<> ::hyperprotobench::M17_M18* Arena::CreateMaybeMessage<::hyperprotobench::M17_M18>(Arena*);
template<> ::hyperprotobench::M19* Arena::CreateMaybeMessage<::hyperprotobench::M19>(Arena*);
template<> ::hyperprotobench::M19_M20* Arena::CreateMaybeMessage<::hyperprotobench::M19_M20>(Arena*);
template<> ::hyperprotobench::M19_M21* Arena::CreateMaybeMessage<::hyperprotobench::M19_M21>(Arena*);
template<> ::hyperprotobench::M19_M21_M22* Arena::CreateMaybeMessage<::hyperprotobench::M19_M21_M22>(Arena*);
template<> ::hyperprotobench::M1_M2* Arena::CreateMaybeMessage<::hyperprotobench::M1_M2>(Arena*);
template<> ::hyperprotobench::M23* Arena::CreateMaybeMessage<::hyperprotobench::M23>(Arena*);
template<> ::hyperprotobench::M23_M24* Arena::CreateMaybeMessage<::hyperprotobench::M23_M24>(Arena*);
template<> ::hyperprotobench::M25* Arena::CreateMaybeMessage<::hyperprotobench::M25>(Arena*);
template<> ::hyperprotobench::M25_M26* Arena::CreateMaybeMessage<::hyperprotobench::M25_M26>(Arena*);
template<> ::hyperprotobench::M3* Arena::CreateMaybeMessage<::hyperprotobench::M3>(Arena*);
template<> ::hyperprotobench::M3_M4* Arena::CreateMaybeMessage<::hyperprotobench::M3_M4>(Arena*);
template<> ::hyperprotobench::M5* Arena::CreateMaybeMessage<::hyperprotobench::M5>(Arena*);
template<> ::hyperprotobench::M5_M6* Arena::CreateMaybeMessage<::hyperprotobench::M5_M6>(Arena*);
template<> ::hyperprotobench::M5_M7* Arena::CreateMaybeMessage<::hyperprotobench::M5_M7>(Arena*);
template<> ::hyperprotobench::M5_M7_M8* Arena::CreateMaybeMessage<::hyperprotobench::M5_M7_M8>(Arena*);
template<> ::hyperprotobench::M9* Arena::CreateMaybeMessage<::hyperprotobench::M9>(Arena*);
template<> ::hyperprotobench::M9_M10* Arena::CreateMaybeMessage<::hyperprotobench::M9_M10>(Arena*);
template<> ::hyperprotobench::M9_M10_M11* Arena::CreateMaybeMessage<::hyperprotobench::M9_M10_M11>(Arena*);
template<> ::hyperprotobench::M9_M12* Arena::CreateMaybeMessage<::hyperprotobench::M9_M12>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hyperprotobench {

enum M3_E1 : int {
  M3_E1_E1_CONST_1 = 8,
  M3_E1_E1_CONST_2 = 108,
  M3_E1_E1_CONST_3 = 110,
  M3_E1_E1_CONST_4 = 16,
  M3_E1_E1_CONST_5 = 123
};
bool M3_E1_IsValid(int value);
constexpr M3_E1 M3_E1_E1_MIN = M3_E1_E1_CONST_1;
constexpr M3_E1 M3_E1_E1_MAX = M3_E1_E1_CONST_5;
constexpr int M3_E1_E1_ARRAYSIZE = M3_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M3_E1_descriptor();
template<typename T>
inline const std::string& M3_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M3_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M3_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M3_E1_descriptor(), enum_t_value);
}
inline bool M3_E1_Parse(
    const std::string& name, M3_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M3_E1>(
    M3_E1_descriptor(), name, value);
}
enum M17_M18_E1 : int {
  M17_M18_E1_E1_CONST_1 = 99,
  M17_M18_E1_E1_CONST_2 = 37,
  M17_M18_E1_E1_CONST_3 = 72,
  M17_M18_E1_E1_CONST_4 = 10,
  M17_M18_E1_E1_CONST_5 = 76
};
bool M17_M18_E1_IsValid(int value);
constexpr M17_M18_E1 M17_M18_E1_E1_MIN = M17_M18_E1_E1_CONST_4;
constexpr M17_M18_E1 M17_M18_E1_E1_MAX = M17_M18_E1_E1_CONST_1;
constexpr int M17_M18_E1_E1_ARRAYSIZE = M17_M18_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M17_M18_E1_descriptor();
template<typename T>
inline const std::string& M17_M18_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M17_M18_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M17_M18_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M17_M18_E1_descriptor(), enum_t_value);
}
inline bool M17_M18_E1_Parse(
    const std::string& name, M17_M18_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M17_M18_E1>(
    M17_M18_E1_descriptor(), name, value);
}
enum M17_E1 : int {
  M17_E1_E1_CONST_1 = 96,
  M17_E1_E1_CONST_2 = 12,
  M17_E1_E1_CONST_3 = 46,
  M17_E1_E1_CONST_4 = 85,
  M17_E1_E1_CONST_5 = 4662
};
bool M17_E1_IsValid(int value);
constexpr M17_E1 M17_E1_E1_MIN = M17_E1_E1_CONST_2;
constexpr M17_E1 M17_E1_E1_MAX = M17_E1_E1_CONST_5;
constexpr int M17_E1_E1_ARRAYSIZE = M17_E1_E1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* M17_E1_descriptor();
template<typename T>
inline const std::string& M17_E1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, M17_E1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function M17_E1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    M17_E1_descriptor(), enum_t_value);
}
inline bool M17_E1_Parse(
    const std::string& name, M17_E1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<M17_E1>(
    M17_E1_descriptor(), name, value);
}
// ===================================================================

class M1_M2 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1.M2) */ {
 public:
  M1_M2();
  virtual ~M1_M2();

  M1_M2(const M1_M2& from);
  M1_M2(M1_M2&& from) noexcept
    : M1_M2() {
    *this = ::std::move(from);
  }

  inline M1_M2& operator=(const M1_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1_M2& operator=(M1_M2&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1_M2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1_M2* internal_default_instance() {
    return reinterpret_cast<const M1_M2*>(
               &_M1_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(M1_M2& a, M1_M2& b) {
    a.Swap(&b);
  }
  inline void Swap(M1_M2* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1_M2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1_M2* New() const final {
    return CreateMaybeMessage<M1_M2>(nullptr);
  }

  M1_M2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1_M2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1_M2& from);
  void MergeFrom(const M1_M2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1_M2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1.M2";
  }
  protected:
  explicit M1_M2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 6,
  };
  // optional string f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const char* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional string f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1.M2)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_M2_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M1) */ {
 public:
  M1();
  virtual ~M1();

  M1(const M1& from);
  M1(M1&& from) noexcept
    : M1() {
    *this = ::std::move(from);
  }

  inline M1& operator=(const M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline M1& operator=(M1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M1* internal_default_instance() {
    return reinterpret_cast<const M1*>(
               &_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(M1& a, M1& b) {
    a.Swap(&b);
  }
  inline void Swap(M1* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M1* New() const final {
    return CreateMaybeMessage<M1>(nullptr);
  }

  M1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M1& from);
  void MergeFrom(const M1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M1";
  }
  protected:
  explicit M1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M1_M2 M2;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF2FieldNumber = 4,
    kF4FieldNumber = 8,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF8FieldNumber = 14,
    kF10FieldNumber = 16,
    kF7FieldNumber = 13,
    kF9FieldNumber = 15,
    kF11FieldNumber = 17,
  };
  // optional bytes f1 = 3;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const void* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional bytes f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M1.M2 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M1_M2& f2() const;
  ::hyperprotobench::M1_M2* release_f2();
  ::hyperprotobench::M1_M2* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M1_M2* f2);
  private:
  const ::hyperprotobench::M1_M2& _internal_f2() const;
  ::hyperprotobench::M1_M2* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M1_M2* f2);
  ::hyperprotobench::M1_M2* unsafe_arena_release_f2();

  // optional float f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional float f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional uint32 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f10 = 16;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional int64 f7 = 13;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int64 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int64 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f11 = 17;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  ::PROTOBUF_NAMESPACE_ID::int64 f11() const;
  void set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f11() const;
  void _internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M1_M2* f2_;
  float f4_;
  float f5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  bool f10_;
  ::PROTOBUF_NAMESPACE_ID::int64 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f9_;
  ::PROTOBUF_NAMESPACE_ID::int64 f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M1_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M3_M4 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M3.M4) */ {
 public:
  M3_M4();
  virtual ~M3_M4();

  M3_M4(const M3_M4& from);
  M3_M4(M3_M4&& from) noexcept
    : M3_M4() {
    *this = ::std::move(from);
  }

  inline M3_M4& operator=(const M3_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline M3_M4& operator=(M3_M4&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M3_M4& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M3_M4* internal_default_instance() {
    return reinterpret_cast<const M3_M4*>(
               &_M3_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(M3_M4& a, M3_M4& b) {
    a.Swap(&b);
  }
  inline void Swap(M3_M4* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M3_M4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M3_M4* New() const final {
    return CreateMaybeMessage<M3_M4>(nullptr);
  }

  M3_M4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M3_M4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M3_M4& from);
  void MergeFrom(const M3_M4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M3_M4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M3.M4";
  }
  protected:
  explicit M3_M4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M3.M4)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M3_M4_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M3) */ {
 public:
  M3();
  virtual ~M3();

  M3(const M3& from);
  M3(M3&& from) noexcept
    : M3() {
    *this = ::std::move(from);
  }

  inline M3& operator=(const M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline M3& operator=(M3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M3* internal_default_instance() {
    return reinterpret_cast<const M3*>(
               &_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(M3& a, M3& b) {
    a.Swap(&b);
  }
  inline void Swap(M3* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M3* New() const final {
    return CreateMaybeMessage<M3>(nullptr);
  }

  M3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M3& from);
  void MergeFrom(const M3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M3";
  }
  protected:
  explicit M3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M3_M4 M4;

  typedef M3_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M3_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M3_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M3_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M3_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M3_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M3_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M3_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M3_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M3_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M3_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M3_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M3_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF6FieldNumber = 6,
    kF7FieldNumber = 7,
    kF11FieldNumber = 20,
    kF9FieldNumber = 12,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 4,
    kF5FieldNumber = 5,
    kF10FieldNumber = 14,
    kF8FieldNumber = 11,
  };
  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f6 = 6;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional string f7 = 7;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional string f11 = 20;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  const std::string& f11() const;
  void set_f11(const std::string& value);
  void set_f11(std::string&& value);
  void set_f11(const char* value);
  void set_f11(const char* value, size_t size);
  std::string* mutable_f11();
  std::string* release_f11();
  void set_allocated_f11(std::string* f11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f11(
      std::string* f11);
  private:
  const std::string& _internal_f11() const;
  void _internal_set_f11(const std::string& value);
  std::string* _internal_mutable_f11();
  public:

  // optional .hyperprotobench.M3.M4 f9 = 12;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  const ::hyperprotobench::M3_M4& f9() const;
  ::hyperprotobench::M3_M4* release_f9();
  ::hyperprotobench::M3_M4* mutable_f9();
  void set_allocated_f9(::hyperprotobench::M3_M4* f9);
  private:
  const ::hyperprotobench::M3_M4& _internal_f9() const;
  ::hyperprotobench::M3_M4* _internal_mutable_f9();
  public:
  void unsafe_arena_set_allocated_f9(
      ::hyperprotobench::M3_M4* f9);
  ::hyperprotobench::M3_M4* unsafe_arena_release_f9();

  // optional uint32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional float f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional float f10 = 14;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  float f10() const;
  void set_f10(float value);
  private:
  float _internal_f10() const;
  void _internal_set_f10(float value);
  public:

  // optional .hyperprotobench.M3.E1 f8 = 11;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::hyperprotobench::M3_E1 f8() const;
  void set_f8(::hyperprotobench::M3_E1 value);
  private:
  ::hyperprotobench::M3_E1 _internal_f8() const;
  void _internal_set_f8(::hyperprotobench::M3_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M3)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f11_;
  ::hyperprotobench::M3_M4* f9_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  float f4_;
  float f5_;
  float f10_;
  int f8_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M3_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M5_M6 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M5.M6) */ {
 public:
  M5_M6();
  virtual ~M5_M6();

  M5_M6(const M5_M6& from);
  M5_M6(M5_M6&& from) noexcept
    : M5_M6() {
    *this = ::std::move(from);
  }

  inline M5_M6& operator=(const M5_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline M5_M6& operator=(M5_M6&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M5_M6& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M5_M6* internal_default_instance() {
    return reinterpret_cast<const M5_M6*>(
               &_M5_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(M5_M6& a, M5_M6& b) {
    a.Swap(&b);
  }
  inline void Swap(M5_M6* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M5_M6* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M5_M6* New() const final {
    return CreateMaybeMessage<M5_M6>(nullptr);
  }

  M5_M6* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M5_M6>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M5_M6& from);
  void MergeFrom(const M5_M6& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M5_M6* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M5.M6";
  }
  protected:
  explicit M5_M6(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M5.M6)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M5_M6_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M5_M7_M8 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M5.M7.M8) */ {
 public:
  M5_M7_M8();
  virtual ~M5_M7_M8();

  M5_M7_M8(const M5_M7_M8& from);
  M5_M7_M8(M5_M7_M8&& from) noexcept
    : M5_M7_M8() {
    *this = ::std::move(from);
  }

  inline M5_M7_M8& operator=(const M5_M7_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline M5_M7_M8& operator=(M5_M7_M8&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M5_M7_M8& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M5_M7_M8* internal_default_instance() {
    return reinterpret_cast<const M5_M7_M8*>(
               &_M5_M7_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(M5_M7_M8& a, M5_M7_M8& b) {
    a.Swap(&b);
  }
  inline void Swap(M5_M7_M8* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M5_M7_M8* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M5_M7_M8* New() const final {
    return CreateMaybeMessage<M5_M7_M8>(nullptr);
  }

  M5_M7_M8* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M5_M7_M8>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M5_M7_M8& from);
  void MergeFrom(const M5_M7_M8& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M5_M7_M8* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M5.M7.M8";
  }
  protected:
  explicit M5_M7_M8(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional bool f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  bool f1() const;
  void set_f1(bool value);
  private:
  bool _internal_f1() const;
  void _internal_set_f1(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M5.M7.M8)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M5_M7_M8_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M5_M7 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M5.M7) */ {
 public:
  M5_M7();
  virtual ~M5_M7();

  M5_M7(const M5_M7& from);
  M5_M7(M5_M7&& from) noexcept
    : M5_M7() {
    *this = ::std::move(from);
  }

  inline M5_M7& operator=(const M5_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline M5_M7& operator=(M5_M7&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M5_M7& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M5_M7* internal_default_instance() {
    return reinterpret_cast<const M5_M7*>(
               &_M5_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(M5_M7& a, M5_M7& b) {
    a.Swap(&b);
  }
  inline void Swap(M5_M7* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M5_M7* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M5_M7* New() const final {
    return CreateMaybeMessage<M5_M7>(nullptr);
  }

  M5_M7* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M5_M7>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M5_M7& from);
  void MergeFrom(const M5_M7& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M5_M7* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M5.M7";
  }
  protected:
  explicit M5_M7(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M5_M7_M8 M8;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
  };
  // optional bytes f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const std::string& f2() const;
  void set_f2(const std::string& value);
  void set_f2(std::string&& value);
  void set_f2(const char* value);
  void set_f2(const void* value, size_t size);
  std::string* mutable_f2();
  std::string* release_f2();
  void set_allocated_f2(std::string* f2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f2(
      std::string* f2);
  private:
  const std::string& _internal_f2() const;
  void _internal_set_f2(const std::string& value);
  std::string* _internal_mutable_f2();
  public:

  // optional .hyperprotobench.M5.M7.M8 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M5_M7_M8& f1() const;
  ::hyperprotobench::M5_M7_M8* release_f1();
  ::hyperprotobench::M5_M7_M8* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M5_M7_M8* f1);
  private:
  const ::hyperprotobench::M5_M7_M8& _internal_f1() const;
  ::hyperprotobench::M5_M7_M8* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M5_M7_M8* f1);
  ::hyperprotobench::M5_M7_M8* unsafe_arena_release_f1();

  // @@protoc_insertion_point(class_scope:hyperprotobench.M5.M7)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f2_;
  ::hyperprotobench::M5_M7_M8* f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M5_M7_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M5 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M5) */ {
 public:
  M5();
  virtual ~M5();

  M5(const M5& from);
  M5(M5&& from) noexcept
    : M5() {
    *this = ::std::move(from);
  }

  inline M5& operator=(const M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline M5& operator=(M5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M5* internal_default_instance() {
    return reinterpret_cast<const M5*>(
               &_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(M5& a, M5& b) {
    a.Swap(&b);
  }
  inline void Swap(M5* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M5* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M5* New() const final {
    return CreateMaybeMessage<M5>(nullptr);
  }

  M5* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M5>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M5& from);
  void MergeFrom(const M5& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M5* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M5";
  }
  protected:
  explicit M5(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M5_M6 M6;
  typedef M5_M7 M7;

  // accessors -------------------------------------------------------

  enum : int {
    kF12FieldNumber = 19,
    kF14FieldNumber = 21,
    kF1FieldNumber = 1,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
    kF7FieldNumber = 13,
    kF6FieldNumber = 11,
    kF8FieldNumber = 14,
    kF5FieldNumber = 8,
    kF11FieldNumber = 18,
    kF10FieldNumber = 17,
    kF9FieldNumber = 15,
    kF13FieldNumber = 20,
  };
  // optional .hyperprotobench.M5.M6 f12 = 19;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M5_M6& f12() const;
  ::hyperprotobench::M5_M6* release_f12();
  ::hyperprotobench::M5_M6* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M5_M6* f12);
  private:
  const ::hyperprotobench::M5_M6& _internal_f12() const;
  ::hyperprotobench::M5_M6* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M5_M6* f12);
  ::hyperprotobench::M5_M6* unsafe_arena_release_f12();

  // optional .hyperprotobench.M5.M7 f14 = 21;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  const ::hyperprotobench::M5_M7& f14() const;
  ::hyperprotobench::M5_M7* release_f14();
  ::hyperprotobench::M5_M7* mutable_f14();
  void set_allocated_f14(::hyperprotobench::M5_M7* f14);
  private:
  const ::hyperprotobench::M5_M7& _internal_f14() const;
  ::hyperprotobench::M5_M7* _internal_mutable_f14();
  public:
  void unsafe_arena_set_allocated_f14(
      ::hyperprotobench::M5_M7* f14);
  ::hyperprotobench::M5_M7* unsafe_arena_release_f14();

  // optional int64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  float f3() const;
  void set_f3(float value);
  private:
  float _internal_f3() const;
  void _internal_set_f3(float value);
  public:

  // optional int32 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 13;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f6 = 11;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::uint64 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  bool f5() const;
  void set_f5(bool value);
  private:
  bool _internal_f5() const;
  void _internal_set_f5(bool value);
  public:

  // optional bool f11 = 18;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  bool f11() const;
  void set_f11(bool value);
  private:
  bool _internal_f11() const;
  void _internal_set_f11(bool value);
  public:

  // optional float f10 = 17;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  float f10() const;
  void set_f10(float value);
  private:
  float _internal_f10() const;
  void _internal_set_f10(float value);
  public:

  // optional int64 f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int64 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f13 = 20;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  ::PROTOBUF_NAMESPACE_ID::int32 f13() const;
  void set_f13(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f13() const;
  void _internal_set_f13(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M5)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M5_M6* f12_;
  ::hyperprotobench::M5_M7* f14_;
  ::PROTOBUF_NAMESPACE_ID::int64 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  float f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f6_;
  ::PROTOBUF_NAMESPACE_ID::int64 f8_;
  bool f5_;
  bool f11_;
  float f10_;
  ::PROTOBUF_NAMESPACE_ID::int64 f9_;
  ::PROTOBUF_NAMESPACE_ID::int32 f13_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M5_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M9_M10_M11 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M9.M10.M11) */ {
 public:
  M9_M10_M11();
  virtual ~M9_M10_M11();

  M9_M10_M11(const M9_M10_M11& from);
  M9_M10_M11(M9_M10_M11&& from) noexcept
    : M9_M10_M11() {
    *this = ::std::move(from);
  }

  inline M9_M10_M11& operator=(const M9_M10_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline M9_M10_M11& operator=(M9_M10_M11&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M9_M10_M11& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M9_M10_M11* internal_default_instance() {
    return reinterpret_cast<const M9_M10_M11*>(
               &_M9_M10_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(M9_M10_M11& a, M9_M10_M11& b) {
    a.Swap(&b);
  }
  inline void Swap(M9_M10_M11* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M9_M10_M11* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M9_M10_M11* New() const final {
    return CreateMaybeMessage<M9_M10_M11>(nullptr);
  }

  M9_M10_M11* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M9_M10_M11>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M9_M10_M11& from);
  void MergeFrom(const M9_M10_M11& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M9_M10_M11* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M9.M10.M11";
  }
  protected:
  explicit M9_M10_M11(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF5FieldNumber = 6,
    kF6FieldNumber = 7,
    kF7FieldNumber = 9,
  };
  // optional fixed32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional float f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  float f3() const;
  void set_f3(float value);
  private:
  float _internal_f3() const;
  void _internal_set_f3(float value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  float f6() const;
  void set_f6(float value);
  private:
  float _internal_f6() const;
  void _internal_set_f6(float value);
  public:

  // optional bool f7 = 9;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M9.M10.M11)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f1_;
  float f2_;
  float f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  float f6_;
  bool f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M9_M10_M11_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M9_M10 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M9.M10) */ {
 public:
  M9_M10();
  virtual ~M9_M10();

  M9_M10(const M9_M10& from);
  M9_M10(M9_M10&& from) noexcept
    : M9_M10() {
    *this = ::std::move(from);
  }

  inline M9_M10& operator=(const M9_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline M9_M10& operator=(M9_M10&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M9_M10& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M9_M10* internal_default_instance() {
    return reinterpret_cast<const M9_M10*>(
               &_M9_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(M9_M10& a, M9_M10& b) {
    a.Swap(&b);
  }
  inline void Swap(M9_M10* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M9_M10* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M9_M10* New() const final {
    return CreateMaybeMessage<M9_M10>(nullptr);
  }

  M9_M10* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M9_M10>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M9_M10& from);
  void MergeFrom(const M9_M10& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M9_M10* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M9.M10";
  }
  protected:
  explicit M9_M10(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M9_M10_M11 M11;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 5,
    kF2FieldNumber = 6,
  };
  // optional .hyperprotobench.M9.M10.M11 f1 = 5;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M9_M10_M11& f1() const;
  ::hyperprotobench::M9_M10_M11* release_f1();
  ::hyperprotobench::M9_M10_M11* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M9_M10_M11* f1);
  private:
  const ::hyperprotobench::M9_M10_M11& _internal_f1() const;
  ::hyperprotobench::M9_M10_M11* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M9_M10_M11* f1);
  ::hyperprotobench::M9_M10_M11* unsafe_arena_release_f1();

  // optional uint64 f2 = 6;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M9.M10)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M9_M10_M11* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M9_M10_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M9_M12 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M9.M12) */ {
 public:
  M9_M12();
  virtual ~M9_M12();

  M9_M12(const M9_M12& from);
  M9_M12(M9_M12&& from) noexcept
    : M9_M12() {
    *this = ::std::move(from);
  }

  inline M9_M12& operator=(const M9_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline M9_M12& operator=(M9_M12&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M9_M12& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M9_M12* internal_default_instance() {
    return reinterpret_cast<const M9_M12*>(
               &_M9_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(M9_M12& a, M9_M12& b) {
    a.Swap(&b);
  }
  inline void Swap(M9_M12* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M9_M12* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M9_M12* New() const final {
    return CreateMaybeMessage<M9_M12>(nullptr);
  }

  M9_M12* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M9_M12>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M9_M12& from);
  void MergeFrom(const M9_M12& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M9_M12* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M9.M12";
  }
  protected:
  explicit M9_M12(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 7,
    kF3FieldNumber = 8,
    kF4FieldNumber = 9,
    kF5FieldNumber = 14,
    kF6FieldNumber = 15,
    kF7FieldNumber = 16,
  };
  // repeated int32 f1 = 2;
  int f1_size() const;
  private:
  int _internal_f1_size() const;
  public:
  void clear_f1();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_f1() const;
  void _internal_add_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_f1();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 f1(int index) const;
  void set_f1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      f1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_f1();

  // repeated int32 f2 = 7;
  int f2_size() const;
  private:
  int _internal_f2_size() const;
  public:
  void clear_f2();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_f2() const;
  void _internal_add_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_f2();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 f2(int index) const;
  void set_f2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      f2() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_f2();

  // optional string f3 = 8;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional int32 f4 = 9;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f5 = 14;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // optional int32 f6 = 15;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f7 = 16;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M9.M12)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > f1_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > f2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  float f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  bool f7_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M9_M12_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M9 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M9) */ {
 public:
  M9();
  virtual ~M9();

  M9(const M9& from);
  M9(M9&& from) noexcept
    : M9() {
    *this = ::std::move(from);
  }

  inline M9& operator=(const M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline M9& operator=(M9&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M9& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M9* internal_default_instance() {
    return reinterpret_cast<const M9*>(
               &_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(M9& a, M9& b) {
    a.Swap(&b);
  }
  inline void Swap(M9* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M9* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M9* New() const final {
    return CreateMaybeMessage<M9>(nullptr);
  }

  M9* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M9>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M9& from);
  void MergeFrom(const M9& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M9* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M9";
  }
  protected:
  explicit M9(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M9_M10 M10;
  typedef M9_M12 M12;

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF7FieldNumber = 8,
    kF2FieldNumber = 2,
    kF5FieldNumber = 6,
    kF4FieldNumber = 5,
    kF6FieldNumber = 7,
    kF8FieldNumber = 9,
    kF9FieldNumber = 11,
    kF10FieldNumber = 12,
    kF11FieldNumber = 14,
    kF13FieldNumber = 19,
    kF12FieldNumber = 17,
    kF14FieldNumber = 20,
  };
  // repeated uint32 f1 = 1;
  int f1_size() const;
  private:
  int _internal_f1_size() const;
  public:
  void clear_f1();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f1(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_f1() const;
  void _internal_add_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_f1();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 f1(int index) const;
  void set_f1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_f1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      f1() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_f1();

  // optional bytes f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional bytes f7 = 8;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const void* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional .hyperprotobench.M9.M10 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M9_M10& f2() const;
  ::hyperprotobench::M9_M10* release_f2();
  ::hyperprotobench::M9_M10* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M9_M10* f2);
  private:
  const ::hyperprotobench::M9_M10& _internal_f2() const;
  ::hyperprotobench::M9_M10* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M9_M10* f2);
  ::hyperprotobench::M9_M10* unsafe_arena_release_f2();

  // optional .hyperprotobench.M9.M12 f5 = 6;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const ::hyperprotobench::M9_M12& f5() const;
  ::hyperprotobench::M9_M12* release_f5();
  ::hyperprotobench::M9_M12* mutable_f5();
  void set_allocated_f5(::hyperprotobench::M9_M12* f5);
  private:
  const ::hyperprotobench::M9_M12& _internal_f5() const;
  ::hyperprotobench::M9_M12* _internal_mutable_f5();
  public:
  void unsafe_arena_set_allocated_f5(
      ::hyperprotobench::M9_M12* f5);
  ::hyperprotobench::M9_M12* unsafe_arena_release_f5();

  // optional float f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  float f4() const;
  void set_f4(float value);
  private:
  float _internal_f4() const;
  void _internal_set_f4(float value);
  public:

  // optional int32 f6 = 7;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f8 = 9;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f9 = 11;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  float f9() const;
  void set_f9(float value);
  private:
  float _internal_f9() const;
  void _internal_set_f9(float value);
  public:

  // optional bool f10 = 12;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  bool f10() const;
  void set_f10(bool value);
  private:
  bool _internal_f10() const;
  void _internal_set_f10(bool value);
  public:

  // optional float f11 = 14;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  float f11() const;
  void set_f11(float value);
  private:
  float _internal_f11() const;
  void _internal_set_f11(float value);
  public:

  // optional float f13 = 19;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  float f13() const;
  void set_f13(float value);
  private:
  float _internal_f13() const;
  void _internal_set_f13(float value);
  public:

  // optional int64 f12 = 17;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  ::PROTOBUF_NAMESPACE_ID::int64 f12() const;
  void set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f12() const;
  void _internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 f14 = 20;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  ::PROTOBUF_NAMESPACE_ID::int64 f14() const;
  void set_f14(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f14() const;
  void _internal_set_f14(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M9)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::hyperprotobench::M9_M10* f2_;
  ::hyperprotobench::M9_M12* f5_;
  float f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  float f9_;
  bool f10_;
  float f11_;
  float f13_;
  ::PROTOBUF_NAMESPACE_ID::int64 f12_;
  ::PROTOBUF_NAMESPACE_ID::int64 f14_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M9_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M13_M14 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M13.M14) */ {
 public:
  M13_M14();
  virtual ~M13_M14();

  M13_M14(const M13_M14& from);
  M13_M14(M13_M14&& from) noexcept
    : M13_M14() {
    *this = ::std::move(from);
  }

  inline M13_M14& operator=(const M13_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline M13_M14& operator=(M13_M14&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M13_M14& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M13_M14* internal_default_instance() {
    return reinterpret_cast<const M13_M14*>(
               &_M13_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(M13_M14& a, M13_M14& b) {
    a.Swap(&b);
  }
  inline void Swap(M13_M14* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M13_M14* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M13_M14* New() const final {
    return CreateMaybeMessage<M13_M14>(nullptr);
  }

  M13_M14* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M13_M14>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M13_M14& from);
  void MergeFrom(const M13_M14& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M13_M14* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M13.M14";
  }
  protected:
  explicit M13_M14(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M13.M14)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M13_M14_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M13 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M13) */ {
 public:
  M13();
  virtual ~M13();

  M13(const M13& from);
  M13(M13&& from) noexcept
    : M13() {
    *this = ::std::move(from);
  }

  inline M13& operator=(const M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline M13& operator=(M13&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M13& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M13* internal_default_instance() {
    return reinterpret_cast<const M13*>(
               &_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(M13& a, M13& b) {
    a.Swap(&b);
  }
  inline void Swap(M13* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M13* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M13* New() const final {
    return CreateMaybeMessage<M13>(nullptr);
  }

  M13* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M13>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M13& from);
  void MergeFrom(const M13& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M13* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M13";
  }
  protected:
  explicit M13(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M13_M14 M14;

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 7,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
    kF3FieldNumber = 6,
    kF8FieldNumber = 12,
    kF7FieldNumber = 11,
    kF9FieldNumber = 14,
  };
  // optional bytes f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  const std::string& f4() const;
  void set_f4(const std::string& value);
  void set_f4(std::string&& value);
  void set_f4(const char* value);
  void set_f4(const void* value, size_t size);
  std::string* mutable_f4();
  std::string* release_f4();
  void set_allocated_f4(std::string* f4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f4(
      std::string* f4);
  private:
  const std::string& _internal_f4() const;
  void _internal_set_f4(const std::string& value);
  std::string* _internal_mutable_f4();
  public:

  // optional bytes f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const void* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional string f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M13.M14 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M13_M14& f2() const;
  ::hyperprotobench::M13_M14* release_f2();
  ::hyperprotobench::M13_M14* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M13_M14* f2);
  private:
  const ::hyperprotobench::M13_M14& _internal_f2() const;
  ::hyperprotobench::M13_M14* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M13_M14* f2);
  ::hyperprotobench::M13_M14* unsafe_arena_release_f2();

  // optional float f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional int32 f3 = 6;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed64 f8 = 12;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  bool f7() const;
  void set_f7(bool value);
  private:
  bool _internal_f7() const;
  void _internal_set_f7(bool value);
  public:

  // optional int32 f9 = 14;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::int32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M13)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M13_M14* f2_;
  float f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  bool f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M13_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15_M16 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15.M16) */ {
 public:
  M15_M16();
  virtual ~M15_M16();

  M15_M16(const M15_M16& from);
  M15_M16(M15_M16&& from) noexcept
    : M15_M16() {
    *this = ::std::move(from);
  }

  inline M15_M16& operator=(const M15_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15_M16& operator=(M15_M16&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15_M16& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15_M16* internal_default_instance() {
    return reinterpret_cast<const M15_M16*>(
               &_M15_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(M15_M16& a, M15_M16& b) {
    a.Swap(&b);
  }
  inline void Swap(M15_M16* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15_M16* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15_M16* New() const final {
    return CreateMaybeMessage<M15_M16>(nullptr);
  }

  M15_M16* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15_M16>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15_M16& from);
  void MergeFrom(const M15_M16& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15_M16* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15.M16";
  }
  protected:
  explicit M15_M16(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15.M16)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_M16_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M15 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M15) */ {
 public:
  M15();
  virtual ~M15();

  M15(const M15& from);
  M15(M15&& from) noexcept
    : M15() {
    *this = ::std::move(from);
  }

  inline M15& operator=(const M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline M15& operator=(M15&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M15& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M15* internal_default_instance() {
    return reinterpret_cast<const M15*>(
               &_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(M15& a, M15& b) {
    a.Swap(&b);
  }
  inline void Swap(M15* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M15* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M15* New() const final {
    return CreateMaybeMessage<M15>(nullptr);
  }

  M15* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M15>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M15& from);
  void MergeFrom(const M15& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M15* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M15";
  }
  protected:
  explicit M15(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M15_M16 M16;

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
    kF3FieldNumber = 3,
    kF4FieldNumber = 4,
    kF5FieldNumber = 8,
  };
  // optional .hyperprotobench.M15.M16 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  const ::hyperprotobench::M15_M16& f2() const;
  ::hyperprotobench::M15_M16* release_f2();
  ::hyperprotobench::M15_M16* mutable_f2();
  void set_allocated_f2(::hyperprotobench::M15_M16* f2);
  private:
  const ::hyperprotobench::M15_M16& _internal_f2() const;
  ::hyperprotobench::M15_M16* _internal_mutable_f2();
  public:
  void unsafe_arena_set_allocated_f2(
      ::hyperprotobench::M15_M16* f2);
  ::hyperprotobench::M15_M16* unsafe_arena_release_f2();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M15)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::hyperprotobench::M15_M16* f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M15_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17_M18 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17.M18) */ {
 public:
  M17_M18();
  virtual ~M17_M18();

  M17_M18(const M17_M18& from);
  M17_M18(M17_M18&& from) noexcept
    : M17_M18() {
    *this = ::std::move(from);
  }

  inline M17_M18& operator=(const M17_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17_M18& operator=(M17_M18&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17_M18& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17_M18* internal_default_instance() {
    return reinterpret_cast<const M17_M18*>(
               &_M17_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(M17_M18& a, M17_M18& b) {
    a.Swap(&b);
  }
  inline void Swap(M17_M18* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17_M18* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17_M18* New() const final {
    return CreateMaybeMessage<M17_M18>(nullptr);
  }

  M17_M18* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17_M18>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17_M18& from);
  void MergeFrom(const M17_M18& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17_M18* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17.M18";
  }
  protected:
  explicit M17_M18(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M17_M18_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M17_M18_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M17_M18_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M17_M18_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M17_M18_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M17_M18_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M17_M18_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M17_M18_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M17_M18_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M17_M18_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M17_M18_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M17_M18_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M17_M18_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
  };
  // optional int32 f1 = 2;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional fixed32 f2 = 3;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 f3 = 4;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::int32 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 7;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .hyperprotobench.M17.M18.E1 f5 = 8;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::hyperprotobench::M17_M18_E1 f5() const;
  void set_f5(::hyperprotobench::M17_M18_E1 value);
  private:
  ::hyperprotobench::M17_M18_E1 _internal_f5() const;
  void _internal_set_f5(::hyperprotobench::M17_M18_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17.M18)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  int f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_M18_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M17 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M17) */ {
 public:
  M17();
  virtual ~M17();

  M17(const M17& from);
  M17(M17&& from) noexcept
    : M17() {
    *this = ::std::move(from);
  }

  inline M17& operator=(const M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline M17& operator=(M17&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M17& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M17* internal_default_instance() {
    return reinterpret_cast<const M17*>(
               &_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(M17& a, M17& b) {
    a.Swap(&b);
  }
  inline void Swap(M17* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M17* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M17* New() const final {
    return CreateMaybeMessage<M17>(nullptr);
  }

  M17* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M17>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M17& from);
  void MergeFrom(const M17& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M17* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M17";
  }
  protected:
  explicit M17(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M17_M18 M18;

  typedef M17_E1 E1;
  static constexpr E1 E1_CONST_1 =
    M17_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 =
    M17_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 =
    M17_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 =
    M17_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 =
    M17_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return M17_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN =
    M17_E1_E1_MIN;
  static constexpr E1 E1_MAX =
    M17_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE =
    M17_E1_E1_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  E1_descriptor() {
    return M17_E1_descriptor();
  }
  template<typename T>
  static inline const std::string& E1_Name(T enum_t_value) {
    static_assert(::std::is_same<T, E1>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function E1_Name.");
    return M17_E1_Name(enum_t_value);
  }
  static inline bool E1_Parse(const std::string& name,
      E1* value) {
    return M17_E1_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kF4FieldNumber = 4,
    kF5FieldNumber = 7,
    kF7FieldNumber = 16,
    kF8FieldNumber = 20,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF6FieldNumber = 8,
    kF3FieldNumber = 3,
  };
  // repeated string f4 = 4;
  int f4_size() const;
  private:
  int _internal_f4_size() const;
  public:
  void clear_f4();
  const std::string& f4(int index) const;
  std::string* mutable_f4(int index);
  void set_f4(int index, const std::string& value);
  void set_f4(int index, std::string&& value);
  void set_f4(int index, const char* value);
  void set_f4(int index, const char* value, size_t size);
  std::string* add_f4();
  void add_f4(const std::string& value);
  void add_f4(std::string&& value);
  void add_f4(const char* value);
  void add_f4(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& f4() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_f4();
  private:
  const std::string& _internal_f4(int index) const;
  std::string* _internal_add_f4();
  public:

  // optional string f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  const std::string& f5() const;
  void set_f5(const std::string& value);
  void set_f5(std::string&& value);
  void set_f5(const char* value);
  void set_f5(const char* value, size_t size);
  std::string* mutable_f5();
  std::string* release_f5();
  void set_allocated_f5(std::string* f5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f5(
      std::string* f5);
  private:
  const std::string& _internal_f5() const;
  void _internal_set_f5(const std::string& value);
  std::string* _internal_mutable_f5();
  public:

  // optional bytes f7 = 16;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const void* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional .hyperprotobench.M17.M18 f8 = 20;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  const ::hyperprotobench::M17_M18& f8() const;
  ::hyperprotobench::M17_M18* release_f8();
  ::hyperprotobench::M17_M18* mutable_f8();
  void set_allocated_f8(::hyperprotobench::M17_M18* f8);
  private:
  const ::hyperprotobench::M17_M18& _internal_f8() const;
  ::hyperprotobench::M17_M18* _internal_mutable_f8();
  public:
  void unsafe_arena_set_allocated_f8(
      ::hyperprotobench::M17_M18* f8);
  ::hyperprotobench::M17_M18* unsafe_arena_release_f8();

  // optional uint64 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::uint64 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // optional bool f6 = 8;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional .hyperprotobench.M17.E1 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::hyperprotobench::M17_E1 f3() const;
  void set_f3(::hyperprotobench::M17_E1 value);
  private:
  ::hyperprotobench::M17_E1 _internal_f3() const;
  void _internal_set_f3(::hyperprotobench::M17_E1 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M17)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> f4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::hyperprotobench::M17_M18* f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f1_;
  float f2_;
  bool f6_;
  int f3_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M17_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M19_M20 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M19.M20) */ {
 public:
  M19_M20();
  virtual ~M19_M20();

  M19_M20(const M19_M20& from);
  M19_M20(M19_M20&& from) noexcept
    : M19_M20() {
    *this = ::std::move(from);
  }

  inline M19_M20& operator=(const M19_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline M19_M20& operator=(M19_M20&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M19_M20& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M19_M20* internal_default_instance() {
    return reinterpret_cast<const M19_M20*>(
               &_M19_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(M19_M20& a, M19_M20& b) {
    a.Swap(&b);
  }
  inline void Swap(M19_M20* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M19_M20* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M19_M20* New() const final {
    return CreateMaybeMessage<M19_M20>(nullptr);
  }

  M19_M20* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M19_M20>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M19_M20& from);
  void MergeFrom(const M19_M20& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M19_M20* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M19.M20";
  }
  protected:
  explicit M19_M20(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M19.M20)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M19_M20_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M19_M21_M22 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M19.M21.M22) */ {
 public:
  M19_M21_M22();
  virtual ~M19_M21_M22();

  M19_M21_M22(const M19_M21_M22& from);
  M19_M21_M22(M19_M21_M22&& from) noexcept
    : M19_M21_M22() {
    *this = ::std::move(from);
  }

  inline M19_M21_M22& operator=(const M19_M21_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline M19_M21_M22& operator=(M19_M21_M22&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M19_M21_M22& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M19_M21_M22* internal_default_instance() {
    return reinterpret_cast<const M19_M21_M22*>(
               &_M19_M21_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(M19_M21_M22& a, M19_M21_M22& b) {
    a.Swap(&b);
  }
  inline void Swap(M19_M21_M22* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M19_M21_M22* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M19_M21_M22* New() const final {
    return CreateMaybeMessage<M19_M21_M22>(nullptr);
  }

  M19_M21_M22* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M19_M21_M22>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M19_M21_M22& from);
  void MergeFrom(const M19_M21_M22& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M19_M21_M22* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M19.M21.M22";
  }
  protected:
  explicit M19_M21_M22(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF7FieldNumber = 11,
    kF3FieldNumber = 5,
    kF2FieldNumber = 4,
    kF4FieldNumber = 6,
    kF5FieldNumber = 7,
    kF6FieldNumber = 10,
    kF8FieldNumber = 12,
  };
  // optional string f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const std::string& f1() const;
  void set_f1(const std::string& value);
  void set_f1(std::string&& value);
  void set_f1(const char* value);
  void set_f1(const char* value, size_t size);
  std::string* mutable_f1();
  std::string* release_f1();
  void set_allocated_f1(std::string* f1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f1(
      std::string* f1);
  private:
  const std::string& _internal_f1() const;
  void _internal_set_f1(const std::string& value);
  std::string* _internal_mutable_f1();
  public:

  // optional string f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional fixed64 f3 = 5;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 f2 = 4;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 6;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 f5 = 7;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::uint32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  bool f6() const;
  void set_f6(bool value);
  private:
  bool _internal_f6() const;
  void _internal_set_f6(bool value);
  public:

  // optional fixed64 f8 = 12;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M19.M21.M22)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f5_;
  bool f6_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M19_M21_M22_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M19_M21 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M19.M21) */ {
 public:
  M19_M21();
  virtual ~M19_M21();

  M19_M21(const M19_M21& from);
  M19_M21(M19_M21&& from) noexcept
    : M19_M21() {
    *this = ::std::move(from);
  }

  inline M19_M21& operator=(const M19_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline M19_M21& operator=(M19_M21&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M19_M21& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M19_M21* internal_default_instance() {
    return reinterpret_cast<const M19_M21*>(
               &_M19_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(M19_M21& a, M19_M21& b) {
    a.Swap(&b);
  }
  inline void Swap(M19_M21* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M19_M21* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M19_M21* New() const final {
    return CreateMaybeMessage<M19_M21>(nullptr);
  }

  M19_M21* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M19_M21>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M19_M21& from);
  void MergeFrom(const M19_M21& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M19_M21* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M19.M21";
  }
  protected:
  explicit M19_M21(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M19_M21_M22 M22;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 9,
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
  };
  // optional string f3 = 9;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional .hyperprotobench.M19.M21.M22 f1 = 4;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M19_M21_M22& f1() const;
  ::hyperprotobench::M19_M21_M22* release_f1();
  ::hyperprotobench::M19_M21_M22* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M19_M21_M22* f1);
  private:
  const ::hyperprotobench::M19_M21_M22& _internal_f1() const;
  ::hyperprotobench::M19_M21_M22* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M19_M21_M22* f1);
  ::hyperprotobench::M19_M21_M22* unsafe_arena_release_f1();

  // optional fixed64 f2 = 5;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M19.M21)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::hyperprotobench::M19_M21_M22* f1_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M19_M21_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M19 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M19) */ {
 public:
  M19();
  virtual ~M19();

  M19(const M19& from);
  M19(M19&& from) noexcept
    : M19() {
    *this = ::std::move(from);
  }

  inline M19& operator=(const M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline M19& operator=(M19&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M19& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M19* internal_default_instance() {
    return reinterpret_cast<const M19*>(
               &_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(M19& a, M19& b) {
    a.Swap(&b);
  }
  inline void Swap(M19* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M19* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M19* New() const final {
    return CreateMaybeMessage<M19>(nullptr);
  }

  M19* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M19>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M19& from);
  void MergeFrom(const M19& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M19* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M19";
  }
  protected:
  explicit M19(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M19_M20 M20;
  typedef M19_M21 M21;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 8,
    kF13FieldNumber = 24,
    kF6FieldNumber = 15,
    kF10FieldNumber = 21,
    kF1FieldNumber = 5,
    kF2FieldNumber = 6,
    kF4FieldNumber = 11,
    kF5FieldNumber = 13,
    kF7FieldNumber = 16,
    kF14FieldNumber = 26,
    kF8FieldNumber = 17,
    kF9FieldNumber = 20,
    kF11FieldNumber = 22,
    kF12FieldNumber = 23,
  };
  // optional string f3 = 8;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f13 = 24;
  bool has_f13() const;
  private:
  bool _internal_has_f13() const;
  public:
  void clear_f13();
  const std::string& f13() const;
  void set_f13(const std::string& value);
  void set_f13(std::string&& value);
  void set_f13(const char* value);
  void set_f13(const char* value, size_t size);
  std::string* mutable_f13();
  std::string* release_f13();
  void set_allocated_f13(std::string* f13);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f13();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f13(
      std::string* f13);
  private:
  const std::string& _internal_f13() const;
  void _internal_set_f13(const std::string& value);
  std::string* _internal_mutable_f13();
  public:

  // optional .hyperprotobench.M19.M20 f6 = 15;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const ::hyperprotobench::M19_M20& f6() const;
  ::hyperprotobench::M19_M20* release_f6();
  ::hyperprotobench::M19_M20* mutable_f6();
  void set_allocated_f6(::hyperprotobench::M19_M20* f6);
  private:
  const ::hyperprotobench::M19_M20& _internal_f6() const;
  ::hyperprotobench::M19_M20* _internal_mutable_f6();
  public:
  void unsafe_arena_set_allocated_f6(
      ::hyperprotobench::M19_M20* f6);
  ::hyperprotobench::M19_M20* unsafe_arena_release_f6();

  // optional .hyperprotobench.M19.M21 f10 = 21;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  const ::hyperprotobench::M19_M21& f10() const;
  ::hyperprotobench::M19_M21* release_f10();
  ::hyperprotobench::M19_M21* mutable_f10();
  void set_allocated_f10(::hyperprotobench::M19_M21* f10);
  private:
  const ::hyperprotobench::M19_M21& _internal_f10() const;
  ::hyperprotobench::M19_M21* _internal_mutable_f10();
  public:
  void unsafe_arena_set_allocated_f10(
      ::hyperprotobench::M19_M21* f10);
  ::hyperprotobench::M19_M21* unsafe_arena_release_f10();

  // optional int32 f1 = 5;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f2 = 6;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  bool f2() const;
  void set_f2(bool value);
  private:
  bool _internal_f2() const;
  void _internal_set_f2(bool value);
  public:

  // optional bool f4 = 11;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional int32 f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f7 = 16;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f14 = 26;
  bool has_f14() const;
  private:
  bool _internal_has_f14() const;
  public:
  void clear_f14();
  ::PROTOBUF_NAMESPACE_ID::int32 f14() const;
  void set_f14(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f14() const;
  void _internal_set_f14(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f8 = 17;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::uint64 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 f9 = 20;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::uint64 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f11 = 22;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  float f11() const;
  void set_f11(float value);
  private:
  float _internal_f11() const;
  void _internal_set_f11(float value);
  public:

  // optional float f12 = 23;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  float f12() const;
  void set_f12(float value);
  private:
  float _internal_f12() const;
  void _internal_set_f12(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M19)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f13_;
  ::hyperprotobench::M19_M20* f6_;
  ::hyperprotobench::M19_M21* f10_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  bool f2_;
  bool f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int32 f14_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f8_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f9_;
  float f11_;
  float f12_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M19_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23_M24 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23.M24) */ {
 public:
  M23_M24();
  virtual ~M23_M24();

  M23_M24(const M23_M24& from);
  M23_M24(M23_M24&& from) noexcept
    : M23_M24() {
    *this = ::std::move(from);
  }

  inline M23_M24& operator=(const M23_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23_M24& operator=(M23_M24&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23_M24& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23_M24* internal_default_instance() {
    return reinterpret_cast<const M23_M24*>(
               &_M23_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(M23_M24& a, M23_M24& b) {
    a.Swap(&b);
  }
  inline void Swap(M23_M24* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23_M24* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23_M24* New() const final {
    return CreateMaybeMessage<M23_M24>(nullptr);
  }

  M23_M24* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23_M24>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23_M24& from);
  void MergeFrom(const M23_M24& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23_M24* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23.M24";
  }
  protected:
  explicit M23_M24(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF2FieldNumber = 2,
    kF1FieldNumber = 1,
    kF4FieldNumber = 4,
    kF3FieldNumber = 3,
    kF5FieldNumber = 5,
  };
  // optional uint64 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::uint64 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  float f1() const;
  void set_f1(float value);
  private:
  float _internal_f1() const;
  void _internal_set_f1(float value);
  public:

  // optional int32 f4 = 4;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  ::PROTOBUF_NAMESPACE_ID::uint64 f3() const;
  void set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_f3() const;
  void _internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float f5 = 5;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  float f5() const;
  void set_f5(float value);
  private:
  float _internal_f5() const;
  void _internal_set_f5(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23.M24)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f2_;
  float f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::uint64 f3_;
  float f5_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_M24_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M23 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M23) */ {
 public:
  M23();
  virtual ~M23();

  M23(const M23& from);
  M23(M23&& from) noexcept
    : M23() {
    *this = ::std::move(from);
  }

  inline M23& operator=(const M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline M23& operator=(M23&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M23& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M23* internal_default_instance() {
    return reinterpret_cast<const M23*>(
               &_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(M23& a, M23& b) {
    a.Swap(&b);
  }
  inline void Swap(M23* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M23* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M23* New() const final {
    return CreateMaybeMessage<M23>(nullptr);
  }

  M23* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M23>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M23& from);
  void MergeFrom(const M23& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M23* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M23";
  }
  protected:
  explicit M23(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M23_M24 M24;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF6FieldNumber = 14,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF10FieldNumber = 29,
    kF4FieldNumber = 5,
    kF7FieldNumber = 18,
    kF5FieldNumber = 13,
    kF8FieldNumber = 22,
    kF9FieldNumber = 23,
  };
  // optional string f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const char* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f6 = 14;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  const std::string& f6() const;
  void set_f6(const std::string& value);
  void set_f6(std::string&& value);
  void set_f6(const char* value);
  void set_f6(const char* value, size_t size);
  std::string* mutable_f6();
  std::string* release_f6();
  void set_allocated_f6(std::string* f6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f6(
      std::string* f6);
  private:
  const std::string& _internal_f6() const;
  void _internal_set_f6(const std::string& value);
  std::string* _internal_mutable_f6();
  public:

  // optional .hyperprotobench.M23.M24 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  const ::hyperprotobench::M23_M24& f1() const;
  ::hyperprotobench::M23_M24* release_f1();
  ::hyperprotobench::M23_M24* mutable_f1();
  void set_allocated_f1(::hyperprotobench::M23_M24* f1);
  private:
  const ::hyperprotobench::M23_M24& _internal_f1() const;
  ::hyperprotobench::M23_M24* _internal_mutable_f1();
  public:
  void unsafe_arena_set_allocated_f1(
      ::hyperprotobench::M23_M24* f1);
  ::hyperprotobench::M23_M24* unsafe_arena_release_f1();

  // optional double f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  double f2() const;
  void set_f2(double value);
  private:
  double _internal_f2() const;
  void _internal_set_f2(double value);
  public:

  // optional int32 f10 = 29;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  ::PROTOBUF_NAMESPACE_ID::int32 f10() const;
  void set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f10() const;
  void _internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool f4 = 5;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  bool f4() const;
  void set_f4(bool value);
  private:
  bool _internal_f4() const;
  void _internal_set_f4(bool value);
  public:

  // optional int32 f7 = 18;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  ::PROTOBUF_NAMESPACE_ID::int32 f7() const;
  void set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f7() const;
  void _internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int64 f5 = 13;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int64 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 f8 = 22;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f9 = 23;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  float f9() const;
  void set_f9(float value);
  private:
  float _internal_f9() const;
  void _internal_set_f9(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M23)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f6_;
  ::hyperprotobench::M23_M24* f1_;
  double f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f10_;
  bool f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f7_;
  ::PROTOBUF_NAMESPACE_ID::int64 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  float f9_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M23_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25_M26 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25.M26) */ {
 public:
  M25_M26();
  virtual ~M25_M26();

  M25_M26(const M25_M26& from);
  M25_M26(M25_M26&& from) noexcept
    : M25_M26() {
    *this = ::std::move(from);
  }

  inline M25_M26& operator=(const M25_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25_M26& operator=(M25_M26&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25_M26& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25_M26* internal_default_instance() {
    return reinterpret_cast<const M25_M26*>(
               &_M25_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(M25_M26& a, M25_M26& b) {
    a.Swap(&b);
  }
  inline void Swap(M25_M26* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25_M26* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25_M26* New() const final {
    return CreateMaybeMessage<M25_M26>(nullptr);
  }

  M25_M26* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25_M26>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25_M26& from);
  void MergeFrom(const M25_M26& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25_M26* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25.M26";
  }
  protected:
  explicit M25_M26(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
  };
  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  float f2() const;
  void set_f2(float value);
  private:
  float _internal_f2() const;
  void _internal_set_f2(float value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25.M26)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  float f2_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_M26_ACCEL_DESCRIPTORS;
};
// -------------------------------------------------------------------

class M25 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hyperprotobench.M25) */ {
 public:
  M25();
  virtual ~M25();

  M25(const M25& from);
  M25(M25&& from) noexcept
    : M25() {
    *this = ::std::move(from);
  }

  inline M25& operator=(const M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline M25& operator=(M25&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const M25& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const M25* internal_default_instance() {
    return reinterpret_cast<const M25*>(
               &_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(M25& a, M25& b) {
    a.Swap(&b);
  }
  inline void Swap(M25* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(M25* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline M25* New() const final {
    return CreateMaybeMessage<M25>(nullptr);
  }

  M25* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<M25>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const M25& from);
  void MergeFrom(const M25& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(M25* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hyperprotobench.M25";
  }
  protected:
  explicit M25(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_benchmark_2eproto);
    return ::descriptor_table_benchmark_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef M25_M26 M26;

  // accessors -------------------------------------------------------

  enum : int {
    kF3FieldNumber = 3,
    kF7FieldNumber = 11,
    kF12FieldNumber = 25,
    kF1FieldNumber = 1,
    kF2FieldNumber = 2,
    kF4FieldNumber = 8,
    kF5FieldNumber = 9,
    kF6FieldNumber = 10,
    kF8FieldNumber = 14,
    kF10FieldNumber = 16,
    kF9FieldNumber = 15,
    kF11FieldNumber = 17,
  };
  // optional bytes f3 = 3;
  bool has_f3() const;
  private:
  bool _internal_has_f3() const;
  public:
  void clear_f3();
  const std::string& f3() const;
  void set_f3(const std::string& value);
  void set_f3(std::string&& value);
  void set_f3(const char* value);
  void set_f3(const void* value, size_t size);
  std::string* mutable_f3();
  std::string* release_f3();
  void set_allocated_f3(std::string* f3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f3(
      std::string* f3);
  private:
  const std::string& _internal_f3() const;
  void _internal_set_f3(const std::string& value);
  std::string* _internal_mutable_f3();
  public:

  // optional string f7 = 11;
  bool has_f7() const;
  private:
  bool _internal_has_f7() const;
  public:
  void clear_f7();
  const std::string& f7() const;
  void set_f7(const std::string& value);
  void set_f7(std::string&& value);
  void set_f7(const char* value);
  void set_f7(const char* value, size_t size);
  std::string* mutable_f7();
  std::string* release_f7();
  void set_allocated_f7(std::string* f7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_f7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_f7(
      std::string* f7);
  private:
  const std::string& _internal_f7() const;
  void _internal_set_f7(const std::string& value);
  std::string* _internal_mutable_f7();
  public:

  // optional .hyperprotobench.M25.M26 f12 = 25;
  bool has_f12() const;
  private:
  bool _internal_has_f12() const;
  public:
  void clear_f12();
  const ::hyperprotobench::M25_M26& f12() const;
  ::hyperprotobench::M25_M26* release_f12();
  ::hyperprotobench::M25_M26* mutable_f12();
  void set_allocated_f12(::hyperprotobench::M25_M26* f12);
  private:
  const ::hyperprotobench::M25_M26& _internal_f12() const;
  ::hyperprotobench::M25_M26* _internal_mutable_f12();
  public:
  void unsafe_arena_set_allocated_f12(
      ::hyperprotobench::M25_M26* f12);
  ::hyperprotobench::M25_M26* unsafe_arena_release_f12();

  // optional int32 f1 = 1;
  bool has_f1() const;
  private:
  bool _internal_has_f1() const;
  public:
  void clear_f1();
  ::PROTOBUF_NAMESPACE_ID::int32 f1() const;
  void set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f1() const;
  void _internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f2 = 2;
  bool has_f2() const;
  private:
  bool _internal_has_f2() const;
  public:
  void clear_f2();
  ::PROTOBUF_NAMESPACE_ID::int32 f2() const;
  void set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f2() const;
  void _internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f4 = 8;
  bool has_f4() const;
  private:
  bool _internal_has_f4() const;
  public:
  void clear_f4();
  ::PROTOBUF_NAMESPACE_ID::int32 f4() const;
  void set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f4() const;
  void _internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f5 = 9;
  bool has_f5() const;
  private:
  bool _internal_has_f5() const;
  public:
  void clear_f5();
  ::PROTOBUF_NAMESPACE_ID::int32 f5() const;
  void set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f5() const;
  void _internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f6 = 10;
  bool has_f6() const;
  private:
  bool _internal_has_f6() const;
  public:
  void clear_f6();
  ::PROTOBUF_NAMESPACE_ID::int32 f6() const;
  void set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f6() const;
  void _internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 f8 = 14;
  bool has_f8() const;
  private:
  bool _internal_has_f8() const;
  public:
  void clear_f8();
  ::PROTOBUF_NAMESPACE_ID::int32 f8() const;
  void set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_f8() const;
  void _internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double f10 = 16;
  bool has_f10() const;
  private:
  bool _internal_has_f10() const;
  public:
  void clear_f10();
  double f10() const;
  void set_f10(double value);
  private:
  double _internal_f10() const;
  void _internal_set_f10(double value);
  public:

  // optional fixed32 f9 = 15;
  bool has_f9() const;
  private:
  bool _internal_has_f9() const;
  public:
  void clear_f9();
  ::PROTOBUF_NAMESPACE_ID::uint32 f9() const;
  void set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_f9() const;
  void _internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool f11 = 17;
  bool has_f11() const;
  private:
  bool _internal_has_f11() const;
  public:
  void clear_f11();
  bool f11() const;
  void set_f11(bool value);
  private:
  bool _internal_f11() const;
  void _internal_set_f11(bool value);
  public:

  // @@protoc_insertion_point(class_scope:hyperprotobench.M25)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr f7_;
  ::hyperprotobench::M25_M26* f12_;
  ::PROTOBUF_NAMESPACE_ID::int32 f1_;
  ::PROTOBUF_NAMESPACE_ID::int32 f2_;
  ::PROTOBUF_NAMESPACE_ID::int32 f4_;
  ::PROTOBUF_NAMESPACE_ID::int32 f5_;
  ::PROTOBUF_NAMESPACE_ID::int32 f6_;
  ::PROTOBUF_NAMESPACE_ID::int32 f8_;
  double f10_;
  ::PROTOBUF_NAMESPACE_ID::uint32 f9_;
  bool f11_;
  friend struct ::TableStruct_benchmark_2eproto;
  friend struct ::hyperprotobench_FriendStruct_M25_ACCEL_DESCRIPTORS;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// M1_M2

// optional string f1 = 2;
inline bool M1_M2::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1_M2::has_f1() const {
  return _internal_has_f1();
}
inline void M1_M2::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1_M2::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f1)
  return _internal_f1();
}
inline void M1_M2::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f1)
}
inline std::string* M1_M2::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1_M2::_internal_f1() const {
  return f1_.Get();
}
inline void M1_M2::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f1)
}
inline void M1_M2::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f1)
}
inline void M1_M2::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f1)
}
inline std::string* M1_M2::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f1)
}
inline std::string* M1_M2::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f1)
}

// optional string f2 = 3;
inline bool M1_M2::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M1_M2::has_f2() const {
  return _internal_has_f2();
}
inline void M1_M2::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M1_M2::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f2)
  return _internal_f2();
}
inline void M1_M2::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f2)
  return _internal_mutable_f2();
}
inline const std::string& M1_M2::_internal_f2() const {
  return f2_.Get();
}
inline void M1_M2::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f2)
}
inline void M1_M2::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f2)
}
inline void M1_M2::set_f2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f2)
}
inline std::string* M1_M2::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f2)
}

// optional string f3 = 6;
inline bool M1_M2::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M1_M2::has_f3() const {
  return _internal_has_f3();
}
inline void M1_M2::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& M1_M2::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.M2.f3)
  return _internal_f3();
}
inline void M1_M2::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.M2.f3)
}
inline std::string* M1_M2::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.M2.f3)
  return _internal_mutable_f3();
}
inline const std::string& M1_M2::_internal_f3() const {
  return f3_.Get();
}
inline void M1_M2::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1_M2::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.M2.f3)
}
inline void M1_M2::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.M2.f3)
}
inline void M1_M2::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.M2.f3)
}
inline std::string* M1_M2::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000020u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1_M2::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.M2.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1_M2::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.M2.f3)
}
inline std::string* M1_M2::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.M2.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1_M2::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.M2.f3)
}

// -------------------------------------------------------------------

// M1

// optional bytes f1 = 3;
inline bool M1::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M1::has_f1() const {
  return _internal_has_f1();
}
inline void M1::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M1::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f1)
  return _internal_f1();
}
inline void M1::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f1)
}
inline std::string* M1::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f1)
  return _internal_mutable_f1();
}
inline const std::string& M1::_internal_f1() const {
  return f1_.Get();
}
inline void M1::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f1)
}
inline void M1::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f1)
}
inline void M1::set_f1(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f1)
}
inline std::string* M1::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f1)
}
inline std::string* M1::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f1)
}

// optional .hyperprotobench.M1.M2 f2 = 4;
inline bool M1::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M1::has_f2() const {
  return _internal_has_f2();
}
inline void M1::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M1_M2& M1::_internal_f2() const {
  const ::hyperprotobench::M1_M2* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M1_M2*>(
      &::hyperprotobench::_M1_M2_default_instance_);
}
inline const ::hyperprotobench::M1_M2& M1::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M1_M2* M1::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M1_M2* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M1_M2* M1::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M1_M2>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M1_M2* M1::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f2)
  return _internal_mutable_f2();
}
inline void M1::set_allocated_f2(::hyperprotobench::M1_M2* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f2)
}

// optional bytes f3 = 5;
inline bool M1::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M1::has_f3() const {
  return _internal_has_f3();
}
inline void M1::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M1::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f3)
  return _internal_f3();
}
inline void M1::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f3)
}
inline std::string* M1::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M1.f3)
  return _internal_mutable_f3();
}
inline const std::string& M1::_internal_f3() const {
  return f3_.Get();
}
inline void M1::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M1::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M1.f3)
}
inline void M1::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M1.f3)
}
inline void M1::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M1.f3)
}
inline std::string* M1::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M1::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M1.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M1::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M1.f3)
}
inline std::string* M1::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M1.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M1::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M1.f3)
}

// optional float f4 = 8;
inline bool M1::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M1::has_f4() const {
  return _internal_has_f4();
}
inline void M1::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float M1::_internal_f4() const {
  return f4_;
}
inline float M1::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f4)
  return _internal_f4();
}
inline void M1::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M1::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f4)
}

// optional float f5 = 9;
inline bool M1::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M1::has_f5() const {
  return _internal_has_f5();
}
inline void M1::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M1::_internal_f5() const {
  return f5_;
}
inline float M1::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f5)
  return _internal_f5();
}
inline void M1::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M1::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f5)
}

// optional uint32 f6 = 10;
inline bool M1::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M1::has_f6() const {
  return _internal_has_f6();
}
inline void M1::clear_f6() {
  f6_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M1::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f6)
  return _internal_f6();
}
inline void M1::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M1::set_f6(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f6)
}

// optional int64 f7 = 13;
inline bool M1::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M1::has_f7() const {
  return _internal_has_f7();
}
inline void M1::clear_f7() {
  f7_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f7)
  return _internal_f7();
}
inline void M1::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  f7_ = value;
}
inline void M1::set_f7(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f7)
}

// optional int32 f8 = 14;
inline bool M1::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M1::has_f8() const {
  return _internal_has_f8();
}
inline void M1::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M1::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f8)
  return _internal_f8();
}
inline void M1::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f8_ = value;
}
inline void M1::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f8)
}

// optional int64 f9 = 15;
inline bool M1::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M1::has_f9() const {
  return _internal_has_f9();
}
inline void M1::clear_f9() {
  f9_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f9)
  return _internal_f9();
}
inline void M1::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  f9_ = value;
}
inline void M1::set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f9)
}

// optional bool f10 = 16;
inline bool M1::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M1::has_f10() const {
  return _internal_has_f10();
}
inline void M1::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool M1::_internal_f10() const {
  return f10_;
}
inline bool M1::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f10)
  return _internal_f10();
}
inline void M1::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00004000u;
  f10_ = value;
}
inline void M1::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f10)
}

// optional int64 f11 = 17;
inline bool M1::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M1::has_f11() const {
  return _internal_has_f11();
}
inline void M1::clear_f11() {
  f11_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::_internal_f11() const {
  return f11_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M1::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M1.f11)
  return _internal_f11();
}
inline void M1::_internal_set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  f11_ = value;
}
inline void M1::set_f11(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M1.f11)
}

// -------------------------------------------------------------------

// M3_M4

// optional float f1 = 1;
inline bool M3_M4::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M3_M4::has_f1() const {
  return _internal_has_f1();
}
inline void M3_M4::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M3_M4::_internal_f1() const {
  return f1_;
}
inline float M3_M4::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.M4.f1)
  return _internal_f1();
}
inline void M3_M4::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M3_M4::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.M4.f1)
}

// optional int32 f2 = 2;
inline bool M3_M4::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M3_M4::has_f2() const {
  return _internal_has_f2();
}
inline void M3_M4::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M3_M4::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M3_M4::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.M4.f2)
  return _internal_f2();
}
inline void M3_M4::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M3_M4::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.M4.f2)
}

// -------------------------------------------------------------------

// M3

// optional uint32 f1 = 1;
inline bool M3::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M3::has_f1() const {
  return _internal_has_f1();
}
inline void M3::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M3::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M3::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f1)
  return _internal_f1();
}
inline void M3::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M3::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f1)
}

// optional int32 f2 = 2;
inline bool M3::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M3::has_f2() const {
  return _internal_has_f2();
}
inline void M3::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M3::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M3::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f2)
  return _internal_f2();
}
inline void M3::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M3::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f2)
}

// optional string f3 = 3;
inline bool M3::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M3::has_f3() const {
  return _internal_has_f3();
}
inline void M3::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M3::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f3)
  return _internal_f3();
}
inline void M3::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f3)
}
inline std::string* M3::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M3.f3)
  return _internal_mutable_f3();
}
inline const std::string& M3::_internal_f3() const {
  return f3_.Get();
}
inline void M3::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M3::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M3.f3)
}
inline void M3::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M3.f3)
}
inline void M3::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M3.f3)
}
inline std::string* M3::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M3::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M3.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M3::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M3.f3)
}
inline std::string* M3::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M3.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M3::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f3)
}

// optional float f4 = 4;
inline bool M3::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M3::has_f4() const {
  return _internal_has_f4();
}
inline void M3::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float M3::_internal_f4() const {
  return f4_;
}
inline float M3::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f4)
  return _internal_f4();
}
inline void M3::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M3::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f4)
}

// optional float f5 = 5;
inline bool M3::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M3::has_f5() const {
  return _internal_has_f5();
}
inline void M3::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M3::_internal_f5() const {
  return f5_;
}
inline float M3::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f5)
  return _internal_f5();
}
inline void M3::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M3::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f5)
}

// optional string f6 = 6;
inline bool M3::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M3::has_f6() const {
  return _internal_has_f6();
}
inline void M3::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M3::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f6)
  return _internal_f6();
}
inline void M3::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f6)
}
inline std::string* M3::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M3.f6)
  return _internal_mutable_f6();
}
inline const std::string& M3::_internal_f6() const {
  return f6_.Get();
}
inline void M3::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M3::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M3.f6)
}
inline void M3::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M3.f6)
}
inline void M3::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M3.f6)
}
inline std::string* M3::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000040u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M3::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M3.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M3::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M3.f6)
}
inline std::string* M3::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M3.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M3::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f6)
}

// optional string f7 = 7;
inline bool M3::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M3::has_f7() const {
  return _internal_has_f7();
}
inline void M3::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M3::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f7)
  return _internal_f7();
}
inline void M3::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f7)
}
inline std::string* M3::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M3.f7)
  return _internal_mutable_f7();
}
inline const std::string& M3::_internal_f7() const {
  return f7_.Get();
}
inline void M3::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M3::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M3.f7)
}
inline void M3::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M3.f7)
}
inline void M3::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M3.f7)
}
inline std::string* M3::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000080u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M3::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M3.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M3::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M3.f7)
}
inline std::string* M3::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M3.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M3::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f7)
}

// optional .hyperprotobench.M3.E1 f8 = 11;
inline bool M3::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M3::has_f8() const {
  return _internal_has_f8();
}
inline void M3::clear_f8() {
  f8_ = 8;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::hyperprotobench::M3_E1 M3::_internal_f8() const {
  return static_cast< ::hyperprotobench::M3_E1 >(f8_);
}
inline ::hyperprotobench::M3_E1 M3::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f8)
  return _internal_f8();
}
inline void M3::_internal_set_f8(::hyperprotobench::M3_E1 value) {
  assert(::hyperprotobench::M3_E1_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M3::set_f8(::hyperprotobench::M3_E1 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f8)
}

// optional .hyperprotobench.M3.M4 f9 = 12;
inline bool M3::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || f9_ != nullptr);
  return value;
}
inline bool M3::has_f9() const {
  return _internal_has_f9();
}
inline void M3::clear_f9() {
  if (f9_ != nullptr) f9_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
inline const ::hyperprotobench::M3_M4& M3::_internal_f9() const {
  const ::hyperprotobench::M3_M4* p = f9_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M3_M4*>(
      &::hyperprotobench::_M3_M4_default_instance_);
}
inline const ::hyperprotobench::M3_M4& M3::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f9)
  return _internal_f9();
}
inline ::hyperprotobench::M3_M4* M3::release_f9() {
  auto temp = unsafe_arena_release_f9();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M3_M4* M3::unsafe_arena_release_f9() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M3.f9)
  _has_bits_[0] &= ~0x00001000u;
  ::hyperprotobench::M3_M4* temp = f9_;
  f9_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M3_M4* M3::_internal_mutable_f9() {
  _has_bits_[0] |= 0x00001000u;
  if (f9_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M3_M4>(GetArenaNoVirtual());
    f9_ = p;
  }
  return f9_;
}
inline ::hyperprotobench::M3_M4* M3::mutable_f9() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M3.f9)
  return _internal_mutable_f9();
}
inline void M3::set_allocated_f9(::hyperprotobench::M3_M4* f9) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f9_;
  }
  if (f9) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f9);
    if (message_arena != submessage_arena) {
      f9 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f9, submessage_arena);
    }
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  f9_ = f9;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M3.f9)
}

// optional float f10 = 14;
inline bool M3::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M3::has_f10() const {
  return _internal_has_f10();
}
inline void M3::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float M3::_internal_f10() const {
  return f10_;
}
inline float M3::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f10)
  return _internal_f10();
}
inline void M3::_internal_set_f10(float value) {
  _has_bits_[0] |= 0x00004000u;
  f10_ = value;
}
inline void M3::set_f10(float value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f10)
}

// optional string f11 = 20;
inline bool M3::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M3::has_f11() const {
  return _internal_has_f11();
}
inline void M3::clear_f11() {
  f11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& M3::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M3.f11)
  return _internal_f11();
}
inline void M3::set_f11(const std::string& value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M3.f11)
}
inline std::string* M3::mutable_f11() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M3.f11)
  return _internal_mutable_f11();
}
inline const std::string& M3::_internal_f11() const {
  return f11_.Get();
}
inline void M3::_internal_set_f11(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M3::set_f11(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  f11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M3.f11)
}
inline void M3::set_f11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M3.f11)
}
inline void M3::set_f11(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  f11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M3.f11)
}
inline std::string* M3::_internal_mutable_f11() {
  _has_bits_[0] |= 0x00100000u;
  return f11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M3::release_f11() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M3.f11)
  if (!_internal_has_f11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return f11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M3::set_allocated_f11(std::string* f11) {
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f11,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M3.f11)
}
inline std::string* M3::unsafe_arena_release_f11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M3.f11)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return f11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M3::unsafe_arena_set_allocated_f11(
    std::string* f11) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f11 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f11, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M3.f11)
}

// -------------------------------------------------------------------

// M5_M6

// optional int32 f1 = 1;
inline bool M5_M6::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M5_M6::has_f1() const {
  return _internal_has_f1();
}
inline void M5_M6::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5_M6::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5_M6::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.M6.f1)
  return _internal_f1();
}
inline void M5_M6::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M5_M6::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.M6.f1)
}

// -------------------------------------------------------------------

// M5_M7_M8

// optional bool f1 = 1;
inline bool M5_M7_M8::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M5_M7_M8::has_f1() const {
  return _internal_has_f1();
}
inline void M5_M7_M8::clear_f1() {
  f1_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool M5_M7_M8::_internal_f1() const {
  return f1_;
}
inline bool M5_M7_M8::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.M7.M8.f1)
  return _internal_f1();
}
inline void M5_M7_M8::_internal_set_f1(bool value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M5_M7_M8::set_f1(bool value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.M7.M8.f1)
}

// -------------------------------------------------------------------

// M5_M7

// optional .hyperprotobench.M5.M7.M8 f1 = 1;
inline bool M5_M7::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M5_M7::has_f1() const {
  return _internal_has_f1();
}
inline void M5_M7::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M5_M7_M8& M5_M7::_internal_f1() const {
  const ::hyperprotobench::M5_M7_M8* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M5_M7_M8*>(
      &::hyperprotobench::_M5_M7_M8_default_instance_);
}
inline const ::hyperprotobench::M5_M7_M8& M5_M7::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.M7.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M5_M7_M8* M5_M7::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M5_M7_M8* M5_M7::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M5.M7.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M5_M7_M8* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M5_M7_M8* M5_M7::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M5_M7_M8>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M5_M7_M8* M5_M7::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M5.M7.f1)
  return _internal_mutable_f1();
}
inline void M5_M7::set_allocated_f1(::hyperprotobench::M5_M7_M8* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M5.M7.f1)
}

// optional bytes f2 = 2;
inline bool M5_M7::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M5_M7::has_f2() const {
  return _internal_has_f2();
}
inline void M5_M7::clear_f2() {
  f2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& M5_M7::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.M7.f2)
  return _internal_f2();
}
inline void M5_M7::set_f2(const std::string& value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.M7.f2)
}
inline std::string* M5_M7::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M5.M7.f2)
  return _internal_mutable_f2();
}
inline const std::string& M5_M7::_internal_f2() const {
  return f2_.Get();
}
inline void M5_M7::_internal_set_f2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M5_M7::set_f2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M5.M7.f2)
}
inline void M5_M7::set_f2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M5.M7.f2)
}
inline void M5_M7::set_f2(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  f2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M5.M7.f2)
}
inline std::string* M5_M7::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  return f2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M5_M7::release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M5.M7.f2)
  if (!_internal_has_f2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return f2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M5_M7::set_allocated_f2(std::string* f2) {
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f2,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M5.M7.f2)
}
inline std::string* M5_M7::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M5.M7.f2)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return f2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M5_M7::unsafe_arena_set_allocated_f2(
    std::string* f2) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f2, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M5.M7.f2)
}

// -------------------------------------------------------------------

// M5

// optional int64 f1 = 1;
inline bool M5::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M5::has_f1() const {
  return _internal_has_f1();
}
inline void M5::clear_f1() {
  f1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f1)
  return _internal_f1();
}
inline void M5::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M5::set_f1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f1)
}

// optional int32 f2 = 5;
inline bool M5::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M5::has_f2() const {
  return _internal_has_f2();
}
inline void M5::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f2)
  return _internal_f2();
}
inline void M5::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f2_ = value;
}
inline void M5::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f2)
}

// optional float f3 = 6;
inline bool M5::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M5::has_f3() const {
  return _internal_has_f3();
}
inline void M5::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float M5::_internal_f3() const {
  return f3_;
}
inline float M5::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f3)
  return _internal_f3();
}
inline void M5::_internal_set_f3(float value) {
  _has_bits_[0] |= 0x00000040u;
  f3_ = value;
}
inline void M5::set_f3(float value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f3)
}

// optional int32 f4 = 7;
inline bool M5::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M5::has_f4() const {
  return _internal_has_f4();
}
inline void M5::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f4)
  return _internal_f4();
}
inline void M5::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M5::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f4)
}

// optional bool f5 = 8;
inline bool M5::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M5::has_f5() const {
  return _internal_has_f5();
}
inline void M5::clear_f5() {
  f5_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool M5::_internal_f5() const {
  return f5_;
}
inline bool M5::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f5)
  return _internal_f5();
}
inline void M5::_internal_set_f5(bool value) {
  _has_bits_[0] |= 0x00000100u;
  f5_ = value;
}
inline void M5::set_f5(bool value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f5)
}

// optional fixed64 f6 = 11;
inline bool M5::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M5::has_f6() const {
  return _internal_has_f6();
}
inline void M5::clear_f6() {
  f6_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M5::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M5::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f6)
  return _internal_f6();
}
inline void M5::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  f6_ = value;
}
inline void M5::set_f6(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f6)
}

// optional int32 f7 = 13;
inline bool M5::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M5::has_f7() const {
  return _internal_has_f7();
}
inline void M5::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f7)
  return _internal_f7();
}
inline void M5::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  f7_ = value;
}
inline void M5::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f7)
}

// optional int64 f8 = 14;
inline bool M5::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M5::has_f8() const {
  return _internal_has_f8();
}
inline void M5::clear_f8() {
  f8_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f8)
  return _internal_f8();
}
inline void M5::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  f8_ = value;
}
inline void M5::set_f8(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f8)
}

// optional int64 f9 = 15;
inline bool M5::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M5::has_f9() const {
  return _internal_has_f9();
}
inline void M5::clear_f9() {
  f9_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M5::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f9)
  return _internal_f9();
}
inline void M5::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  f9_ = value;
}
inline void M5::set_f9(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f9)
}

// optional float f10 = 17;
inline bool M5::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M5::has_f10() const {
  return _internal_has_f10();
}
inline void M5::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float M5::_internal_f10() const {
  return f10_;
}
inline float M5::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f10)
  return _internal_f10();
}
inline void M5::_internal_set_f10(float value) {
  _has_bits_[0] |= 0x00020000u;
  f10_ = value;
}
inline void M5::set_f10(float value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f10)
}

// optional bool f11 = 18;
inline bool M5::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M5::has_f11() const {
  return _internal_has_f11();
}
inline void M5::clear_f11() {
  f11_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool M5::_internal_f11() const {
  return f11_;
}
inline bool M5::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f11)
  return _internal_f11();
}
inline void M5::_internal_set_f11(bool value) {
  _has_bits_[0] |= 0x00040000u;
  f11_ = value;
}
inline void M5::set_f11(bool value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f11)
}

// optional .hyperprotobench.M5.M6 f12 = 19;
inline bool M5::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M5::has_f12() const {
  return _internal_has_f12();
}
inline void M5::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
inline const ::hyperprotobench::M5_M6& M5::_internal_f12() const {
  const ::hyperprotobench::M5_M6* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M5_M6*>(
      &::hyperprotobench::_M5_M6_default_instance_);
}
inline const ::hyperprotobench::M5_M6& M5::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M5_M6* M5::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M5_M6* M5::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M5.f12)
  _has_bits_[0] &= ~0x00080000u;
  ::hyperprotobench::M5_M6* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M5_M6* M5::_internal_mutable_f12() {
  _has_bits_[0] |= 0x00080000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M5_M6>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M5_M6* M5::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M5.f12)
  return _internal_mutable_f12();
}
inline void M5::set_allocated_f12(::hyperprotobench::M5_M6* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M5.f12)
}

// optional int32 f13 = 20;
inline bool M5::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M5::has_f13() const {
  return _internal_has_f13();
}
inline void M5::clear_f13() {
  f13_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::_internal_f13() const {
  return f13_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M5::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f13)
  return _internal_f13();
}
inline void M5::_internal_set_f13(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00100000u;
  f13_ = value;
}
inline void M5::set_f13(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M5.f13)
}

// optional .hyperprotobench.M5.M7 f14 = 21;
inline bool M5::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || f14_ != nullptr);
  return value;
}
inline bool M5::has_f14() const {
  return _internal_has_f14();
}
inline void M5::clear_f14() {
  if (f14_ != nullptr) f14_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
inline const ::hyperprotobench::M5_M7& M5::_internal_f14() const {
  const ::hyperprotobench::M5_M7* p = f14_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M5_M7*>(
      &::hyperprotobench::_M5_M7_default_instance_);
}
inline const ::hyperprotobench::M5_M7& M5::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M5.f14)
  return _internal_f14();
}
inline ::hyperprotobench::M5_M7* M5::release_f14() {
  auto temp = unsafe_arena_release_f14();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M5_M7* M5::unsafe_arena_release_f14() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M5.f14)
  _has_bits_[0] &= ~0x00200000u;
  ::hyperprotobench::M5_M7* temp = f14_;
  f14_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M5_M7* M5::_internal_mutable_f14() {
  _has_bits_[0] |= 0x00200000u;
  if (f14_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M5_M7>(GetArenaNoVirtual());
    f14_ = p;
  }
  return f14_;
}
inline ::hyperprotobench::M5_M7* M5::mutable_f14() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M5.f14)
  return _internal_mutable_f14();
}
inline void M5::set_allocated_f14(::hyperprotobench::M5_M7* f14) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f14_;
  }
  if (f14) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f14);
    if (message_arena != submessage_arena) {
      f14 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f14, submessage_arena);
    }
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  f14_ = f14;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M5.f14)
}

// -------------------------------------------------------------------

// M9_M10_M11

// optional fixed32 f1 = 1;
inline bool M9_M10_M11::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f1() const {
  return _internal_has_f1();
}
inline void M9_M10_M11::clear_f1() {
  f1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M9_M10_M11::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M9_M10_M11::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f1)
  return _internal_f1();
}
inline void M9_M10_M11::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M9_M10_M11::set_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f1)
}

// optional float f2 = 2;
inline bool M9_M10_M11::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f2() const {
  return _internal_has_f2();
}
inline void M9_M10_M11::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M9_M10_M11::_internal_f2() const {
  return f2_;
}
inline float M9_M10_M11::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f2)
  return _internal_f2();
}
inline void M9_M10_M11::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M9_M10_M11::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f2)
}

// optional float f3 = 3;
inline bool M9_M10_M11::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f3() const {
  return _internal_has_f3();
}
inline void M9_M10_M11::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float M9_M10_M11::_internal_f3() const {
  return f3_;
}
inline float M9_M10_M11::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f3)
  return _internal_f3();
}
inline void M9_M10_M11::_internal_set_f3(float value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M9_M10_M11::set_f3(float value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f3)
}

// optional int32 f4 = 4;
inline bool M9_M10_M11::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f4() const {
  return _internal_has_f4();
}
inline void M9_M10_M11::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M10_M11::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M10_M11::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f4)
  return _internal_f4();
}
inline void M9_M10_M11::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M9_M10_M11::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f4)
}

// optional int32 f5 = 6;
inline bool M9_M10_M11::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f5() const {
  return _internal_has_f5();
}
inline void M9_M10_M11::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M10_M11::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M10_M11::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f5)
  return _internal_f5();
}
inline void M9_M10_M11::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f5_ = value;
}
inline void M9_M10_M11::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f5)
}

// optional float f6 = 7;
inline bool M9_M10_M11::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f6() const {
  return _internal_has_f6();
}
inline void M9_M10_M11::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float M9_M10_M11::_internal_f6() const {
  return f6_;
}
inline float M9_M10_M11::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f6)
  return _internal_f6();
}
inline void M9_M10_M11::_internal_set_f6(float value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M9_M10_M11::set_f6(float value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f6)
}

// optional bool f7 = 9;
inline bool M9_M10_M11::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M9_M10_M11::has_f7() const {
  return _internal_has_f7();
}
inline void M9_M10_M11::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool M9_M10_M11::_internal_f7() const {
  return f7_;
}
inline bool M9_M10_M11::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.M11.f7)
  return _internal_f7();
}
inline void M9_M10_M11::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000200u;
  f7_ = value;
}
inline void M9_M10_M11::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.M11.f7)
}

// -------------------------------------------------------------------

// M9_M10

// optional .hyperprotobench.M9.M10.M11 f1 = 5;
inline bool M9_M10::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M9_M10::has_f1() const {
  return _internal_has_f1();
}
inline void M9_M10::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M9_M10_M11& M9_M10::_internal_f1() const {
  const ::hyperprotobench::M9_M10_M11* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M9_M10_M11*>(
      &::hyperprotobench::_M9_M10_M11_default_instance_);
}
inline const ::hyperprotobench::M9_M10_M11& M9_M10::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M9_M10_M11* M9_M10::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M9_M10_M11* M9_M10::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.M10.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M9_M10_M11* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M9_M10_M11* M9_M10::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M9_M10_M11>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M9_M10_M11* M9_M10::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.M10.f1)
  return _internal_mutable_f1();
}
inline void M9_M10::set_allocated_f1(::hyperprotobench::M9_M10_M11* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.M10.f1)
}

// optional uint64 f2 = 6;
inline bool M9_M10::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M9_M10::has_f2() const {
  return _internal_has_f2();
}
inline void M9_M10::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M9_M10::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M9_M10::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M10.f2)
  return _internal_f2();
}
inline void M9_M10::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M9_M10::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M10.f2)
}

// -------------------------------------------------------------------

// M9_M12

// repeated int32 f1 = 2;
inline int M9_M12::_internal_f1_size() const {
  return f1_.size();
}
inline int M9_M12::f1_size() const {
  return _internal_f1_size();
}
inline void M9_M12::clear_f1() {
  f1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::_internal_f1(int index) const {
  return f1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::f1(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f1)
  return _internal_f1(index);
}
inline void M9_M12::set_f1(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f1)
}
inline void M9_M12::_internal_add_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add(value);
}
inline void M9_M12::add_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_f1(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M9.M12.f1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M9_M12::_internal_f1() const {
  return f1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M9_M12::f1() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M9.M12.f1)
  return _internal_f1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M9_M12::_internal_mutable_f1() {
  return &f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M9_M12::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M9.M12.f1)
  return _internal_mutable_f1();
}

// repeated int32 f2 = 7;
inline int M9_M12::_internal_f2_size() const {
  return f2_.size();
}
inline int M9_M12::f2_size() const {
  return _internal_f2_size();
}
inline void M9_M12::clear_f2() {
  f2_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::_internal_f2(int index) const {
  return f2_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::f2(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f2)
  return _internal_f2(index);
}
inline void M9_M12::set_f2(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  f2_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f2)
}
inline void M9_M12::_internal_add_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f2_.Add(value);
}
inline void M9_M12::add_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_f2(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M9.M12.f2)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M9_M12::_internal_f2() const {
  return f2_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
M9_M12::f2() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M9.M12.f2)
  return _internal_f2();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M9_M12::_internal_mutable_f2() {
  return &f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
M9_M12::mutable_f2() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M9.M12.f2)
  return _internal_mutable_f2();
}

// optional string f3 = 8;
inline bool M9_M12::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M9_M12::has_f3() const {
  return _internal_has_f3();
}
inline void M9_M12::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M9_M12::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f3)
  return _internal_f3();
}
inline void M9_M12::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f3)
}
inline std::string* M9_M12::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.M12.f3)
  return _internal_mutable_f3();
}
inline const std::string& M9_M12::_internal_f3() const {
  return f3_.Get();
}
inline void M9_M12::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M9_M12::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M9.M12.f3)
}
inline void M9_M12::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M9.M12.f3)
}
inline void M9_M12::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M9.M12.f3)
}
inline std::string* M9_M12::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000080u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M9_M12::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.M12.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M9_M12::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.M12.f3)
}
inline std::string* M9_M12::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M9.M12.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M9_M12::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M9.M12.f3)
}

// optional int32 f4 = 9;
inline bool M9_M12::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M9_M12::has_f4() const {
  return _internal_has_f4();
}
inline void M9_M12::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f4)
  return _internal_f4();
}
inline void M9_M12::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f4_ = value;
}
inline void M9_M12::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f4)
}

// optional float f5 = 14;
inline bool M9_M12::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M9_M12::has_f5() const {
  return _internal_has_f5();
}
inline void M9_M12::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float M9_M12::_internal_f5() const {
  return f5_;
}
inline float M9_M12::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f5)
  return _internal_f5();
}
inline void M9_M12::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00002000u;
  f5_ = value;
}
inline void M9_M12::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f5)
}

// optional int32 f6 = 15;
inline bool M9_M12::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M9_M12::has_f6() const {
  return _internal_has_f6();
}
inline void M9_M12::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9_M12::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f6)
  return _internal_f6();
}
inline void M9_M12::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  f6_ = value;
}
inline void M9_M12::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f6)
}

// optional bool f7 = 16;
inline bool M9_M12::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M9_M12::has_f7() const {
  return _internal_has_f7();
}
inline void M9_M12::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool M9_M12::_internal_f7() const {
  return f7_;
}
inline bool M9_M12::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.M12.f7)
  return _internal_f7();
}
inline void M9_M12::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00008000u;
  f7_ = value;
}
inline void M9_M12::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.M12.f7)
}

// -------------------------------------------------------------------

// M9

// repeated uint32 f1 = 1;
inline int M9::_internal_f1_size() const {
  return f1_.size();
}
inline int M9::f1_size() const {
  return _internal_f1_size();
}
inline void M9::clear_f1() {
  f1_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M9::_internal_f1(int index) const {
  return f1_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M9::f1(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f1)
  return _internal_f1(index);
}
inline void M9::set_f1(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  f1_.Set(index, value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f1)
}
inline void M9::_internal_add_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Add(value);
}
inline void M9::add_f1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_f1(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M9.f1)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
M9::_internal_f1() const {
  return f1_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
M9::f1() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M9.f1)
  return _internal_f1();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
M9::_internal_mutable_f1() {
  return &f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
M9::mutable_f1() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M9.f1)
  return _internal_mutable_f1();
}

// optional .hyperprotobench.M9.M10 f2 = 2;
inline bool M9::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M9::has_f2() const {
  return _internal_has_f2();
}
inline void M9::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M9_M10& M9::_internal_f2() const {
  const ::hyperprotobench::M9_M10* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M9_M10*>(
      &::hyperprotobench::_M9_M10_default_instance_);
}
inline const ::hyperprotobench::M9_M10& M9::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M9_M10* M9::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M9_M10* M9::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M9_M10* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M9_M10* M9::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M9_M10>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M9_M10* M9::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.f2)
  return _internal_mutable_f2();
}
inline void M9::set_allocated_f2(::hyperprotobench::M9_M10* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.f2)
}

// optional bytes f3 = 3;
inline bool M9::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M9::has_f3() const {
  return _internal_has_f3();
}
inline void M9::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M9::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f3)
  return _internal_f3();
}
inline void M9::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f3)
}
inline std::string* M9::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.f3)
  return _internal_mutable_f3();
}
inline const std::string& M9::_internal_f3() const {
  return f3_.Get();
}
inline void M9::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M9::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M9.f3)
}
inline void M9::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M9.f3)
}
inline void M9::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M9.f3)
}
inline std::string* M9::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M9::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M9::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.f3)
}
inline std::string* M9::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M9.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M9::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M9.f3)
}

// optional float f4 = 5;
inline bool M9::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M9::has_f4() const {
  return _internal_has_f4();
}
inline void M9::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M9::_internal_f4() const {
  return f4_;
}
inline float M9::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f4)
  return _internal_f4();
}
inline void M9::_internal_set_f4(float value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M9::set_f4(float value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f4)
}

// optional .hyperprotobench.M9.M12 f5 = 6;
inline bool M9::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || f5_ != nullptr);
  return value;
}
inline bool M9::has_f5() const {
  return _internal_has_f5();
}
inline void M9::clear_f5() {
  if (f5_ != nullptr) f5_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::hyperprotobench::M9_M12& M9::_internal_f5() const {
  const ::hyperprotobench::M9_M12* p = f5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M9_M12*>(
      &::hyperprotobench::_M9_M12_default_instance_);
}
inline const ::hyperprotobench::M9_M12& M9::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f5)
  return _internal_f5();
}
inline ::hyperprotobench::M9_M12* M9::release_f5() {
  auto temp = unsafe_arena_release_f5();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M9_M12* M9::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.f5)
  _has_bits_[0] &= ~0x00000040u;
  ::hyperprotobench::M9_M12* temp = f5_;
  f5_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M9_M12* M9::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000040u;
  if (f5_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M9_M12>(GetArenaNoVirtual());
    f5_ = p;
  }
  return f5_;
}
inline ::hyperprotobench::M9_M12* M9::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.f5)
  return _internal_mutable_f5();
}
inline void M9::set_allocated_f5(::hyperprotobench::M9_M12* f5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f5_;
  }
  if (f5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f5);
    if (message_arena != submessage_arena) {
      f5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f5_ = f5;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.f5)
}

// optional int32 f6 = 7;
inline bool M9::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M9::has_f6() const {
  return _internal_has_f6();
}
inline void M9::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f6)
  return _internal_f6();
}
inline void M9::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  f6_ = value;
}
inline void M9::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f6)
}

// optional bytes f7 = 8;
inline bool M9::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M9::has_f7() const {
  return _internal_has_f7();
}
inline void M9::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M9::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f7)
  return _internal_f7();
}
inline void M9::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f7)
}
inline std::string* M9::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M9.f7)
  return _internal_mutable_f7();
}
inline const std::string& M9::_internal_f7() const {
  return f7_.Get();
}
inline void M9::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M9::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M9.f7)
}
inline void M9::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M9.f7)
}
inline void M9::set_f7(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M9.f7)
}
inline std::string* M9::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000100u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M9::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M9.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M9::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M9.f7)
}
inline std::string* M9::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M9.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M9::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M9.f7)
}

// optional int32 f8 = 9;
inline bool M9::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M9::has_f8() const {
  return _internal_has_f8();
}
inline void M9::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M9::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f8)
  return _internal_f8();
}
inline void M9::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f8_ = value;
}
inline void M9::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f8)
}

// optional float f9 = 11;
inline bool M9::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M9::has_f9() const {
  return _internal_has_f9();
}
inline void M9::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float M9::_internal_f9() const {
  return f9_;
}
inline float M9::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f9)
  return _internal_f9();
}
inline void M9::_internal_set_f9(float value) {
  _has_bits_[0] |= 0x00000800u;
  f9_ = value;
}
inline void M9::set_f9(float value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f9)
}

// optional bool f10 = 12;
inline bool M9::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M9::has_f10() const {
  return _internal_has_f10();
}
inline void M9::clear_f10() {
  f10_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool M9::_internal_f10() const {
  return f10_;
}
inline bool M9::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f10)
  return _internal_f10();
}
inline void M9::_internal_set_f10(bool value) {
  _has_bits_[0] |= 0x00001000u;
  f10_ = value;
}
inline void M9::set_f10(bool value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f10)
}

// optional float f11 = 14;
inline bool M9::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M9::has_f11() const {
  return _internal_has_f11();
}
inline void M9::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float M9::_internal_f11() const {
  return f11_;
}
inline float M9::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f11)
  return _internal_f11();
}
inline void M9::_internal_set_f11(float value) {
  _has_bits_[0] |= 0x00004000u;
  f11_ = value;
}
inline void M9::set_f11(float value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f11)
}

// optional int64 f12 = 17;
inline bool M9::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M9::has_f12() const {
  return _internal_has_f12();
}
inline void M9::clear_f12() {
  f12_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M9::_internal_f12() const {
  return f12_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M9::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f12)
  return _internal_f12();
}
inline void M9::_internal_set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  f12_ = value;
}
inline void M9::set_f12(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f12)
}

// optional float f13 = 19;
inline bool M9::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M9::has_f13() const {
  return _internal_has_f13();
}
inline void M9::clear_f13() {
  f13_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float M9::_internal_f13() const {
  return f13_;
}
inline float M9::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f13)
  return _internal_f13();
}
inline void M9::_internal_set_f13(float value) {
  _has_bits_[0] |= 0x00080000u;
  f13_ = value;
}
inline void M9::set_f13(float value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f13)
}

// optional int64 f14 = 20;
inline bool M9::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M9::has_f14() const {
  return _internal_has_f14();
}
inline void M9::clear_f14() {
  f14_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M9::_internal_f14() const {
  return f14_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M9::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M9.f14)
  return _internal_f14();
}
inline void M9::_internal_set_f14(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00100000u;
  f14_ = value;
}
inline void M9::set_f14(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f14(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M9.f14)
}

// -------------------------------------------------------------------

// M13_M14

// optional int32 f1 = 1;
inline bool M13_M14::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M13_M14::has_f1() const {
  return _internal_has_f1();
}
inline void M13_M14::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13_M14::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13_M14::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.M14.f1)
  return _internal_f1();
}
inline void M13_M14::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M13_M14::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.M14.f1)
}

// -------------------------------------------------------------------

// M13

// optional float f1 = 2;
inline bool M13::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M13::has_f1() const {
  return _internal_has_f1();
}
inline void M13::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M13::_internal_f1() const {
  return f1_;
}
inline float M13::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f1)
  return _internal_f1();
}
inline void M13::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M13::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f1)
}

// optional .hyperprotobench.M13.M14 f2 = 4;
inline bool M13::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M13::has_f2() const {
  return _internal_has_f2();
}
inline void M13::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::hyperprotobench::M13_M14& M13::_internal_f2() const {
  const ::hyperprotobench::M13_M14* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M13_M14*>(
      &::hyperprotobench::_M13_M14_default_instance_);
}
inline const ::hyperprotobench::M13_M14& M13::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M13_M14* M13::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M13_M14* M13::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M13.f2)
  _has_bits_[0] &= ~0x00000008u;
  ::hyperprotobench::M13_M14* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M13_M14* M13::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000008u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M13_M14>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M13_M14* M13::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M13.f2)
  return _internal_mutable_f2();
}
inline void M13::set_allocated_f2(::hyperprotobench::M13_M14* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M13.f2)
}

// optional int32 f3 = 6;
inline bool M13::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M13::has_f3() const {
  return _internal_has_f3();
}
inline void M13::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f3)
  return _internal_f3();
}
inline void M13::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M13::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f3)
}

// optional bytes f4 = 7;
inline bool M13::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M13::has_f4() const {
  return _internal_has_f4();
}
inline void M13::clear_f4() {
  f4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M13::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f4)
  return _internal_f4();
}
inline void M13::set_f4(const std::string& value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f4)
}
inline std::string* M13::mutable_f4() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M13.f4)
  return _internal_mutable_f4();
}
inline const std::string& M13::_internal_f4() const {
  return f4_.Get();
}
inline void M13::_internal_set_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M13::set_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M13.f4)
}
inline void M13::set_f4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M13.f4)
}
inline void M13::set_f4(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M13.f4)
}
inline std::string* M13::_internal_mutable_f4() {
  _has_bits_[0] |= 0x00000040u;
  return f4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M13::release_f4() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M13.f4)
  if (!_internal_has_f4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M13::set_allocated_f4(std::string* f4) {
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f4,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M13.f4)
}
inline std::string* M13::unsafe_arena_release_f4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M13.f4)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M13::unsafe_arena_set_allocated_f4(
    std::string* f4) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f4, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M13.f4)
}

// optional bytes f5 = 9;
inline bool M13::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M13::has_f5() const {
  return _internal_has_f5();
}
inline void M13::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& M13::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f5)
  return _internal_f5();
}
inline void M13::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f5)
}
inline std::string* M13::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M13.f5)
  return _internal_mutable_f5();
}
inline const std::string& M13::_internal_f5() const {
  return f5_.Get();
}
inline void M13::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M13::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M13.f5)
}
inline void M13::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M13.f5)
}
inline void M13::set_f5(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M13.f5)
}
inline std::string* M13::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000100u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M13::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M13.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M13::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M13.f5)
}
inline std::string* M13::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M13.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M13::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M13.f5)
}

// optional string f6 = 10;
inline bool M13::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M13::has_f6() const {
  return _internal_has_f6();
}
inline void M13::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& M13::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f6)
  return _internal_f6();
}
inline void M13::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f6)
}
inline std::string* M13::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M13.f6)
  return _internal_mutable_f6();
}
inline const std::string& M13::_internal_f6() const {
  return f6_.Get();
}
inline void M13::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M13::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M13.f6)
}
inline void M13::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M13.f6)
}
inline void M13::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M13.f6)
}
inline std::string* M13::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000200u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M13::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M13.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M13::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M13.f6)
}
inline std::string* M13::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M13.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M13::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M13.f6)
}

// optional bool f7 = 11;
inline bool M13::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M13::has_f7() const {
  return _internal_has_f7();
}
inline void M13::clear_f7() {
  f7_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool M13::_internal_f7() const {
  return f7_;
}
inline bool M13::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f7)
  return _internal_f7();
}
inline void M13::_internal_set_f7(bool value) {
  _has_bits_[0] |= 0x00000400u;
  f7_ = value;
}
inline void M13::set_f7(bool value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f7)
}

// optional fixed64 f8 = 12;
inline bool M13::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M13::has_f8() const {
  return _internal_has_f8();
}
inline void M13::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M13::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M13::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f8)
  return _internal_f8();
}
inline void M13::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  f8_ = value;
}
inline void M13::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f8)
}

// optional int32 f9 = 14;
inline bool M13::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M13::has_f9() const {
  return _internal_has_f9();
}
inline void M13::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M13::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M13.f9)
  return _internal_f9();
}
inline void M13::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  f9_ = value;
}
inline void M13::set_f9(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M13.f9)
}

// -------------------------------------------------------------------

// M15_M16

// optional int32 f1 = 1;
inline bool M15_M16::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15_M16::has_f1() const {
  return _internal_has_f1();
}
inline void M15_M16::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15_M16::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15_M16::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.M16.f1)
  return _internal_f1();
}
inline void M15_M16::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M15_M16::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.M16.f1)
}

// -------------------------------------------------------------------

// M15

// optional int32 f1 = 1;
inline bool M15::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M15::has_f1() const {
  return _internal_has_f1();
}
inline void M15::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f1)
  return _internal_f1();
}
inline void M15::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M15::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f1)
}

// optional .hyperprotobench.M15.M16 f2 = 2;
inline bool M15::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || f2_ != nullptr);
  return value;
}
inline bool M15::has_f2() const {
  return _internal_has_f2();
}
inline void M15::clear_f2() {
  if (f2_ != nullptr) f2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hyperprotobench::M15_M16& M15::_internal_f2() const {
  const ::hyperprotobench::M15_M16* p = f2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M15_M16*>(
      &::hyperprotobench::_M15_M16_default_instance_);
}
inline const ::hyperprotobench::M15_M16& M15::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f2)
  return _internal_f2();
}
inline ::hyperprotobench::M15_M16* M15::release_f2() {
  auto temp = unsafe_arena_release_f2();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M15_M16* M15::unsafe_arena_release_f2() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M15.f2)
  _has_bits_[0] &= ~0x00000004u;
  ::hyperprotobench::M15_M16* temp = f2_;
  f2_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M15_M16* M15::_internal_mutable_f2() {
  _has_bits_[0] |= 0x00000004u;
  if (f2_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M15_M16>(GetArenaNoVirtual());
    f2_ = p;
  }
  return f2_;
}
inline ::hyperprotobench::M15_M16* M15::mutable_f2() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M15.f2)
  return _internal_mutable_f2();
}
inline void M15::set_allocated_f2(::hyperprotobench::M15_M16* f2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f2_;
  }
  if (f2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f2);
    if (message_arena != submessage_arena) {
      f2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  f2_ = f2;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M15.f2)
}

// optional int32 f3 = 3;
inline bool M15::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M15::has_f3() const {
  return _internal_has_f3();
}
inline void M15::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f3)
  return _internal_f3();
}
inline void M15::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M15::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f3)
}

// optional int32 f4 = 4;
inline bool M15::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M15::has_f4() const {
  return _internal_has_f4();
}
inline void M15::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M15::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f4)
  return _internal_f4();
}
inline void M15::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M15::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f4)
}

// optional uint32 f5 = 8;
inline bool M15::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M15::has_f5() const {
  return _internal_has_f5();
}
inline void M15::clear_f5() {
  f5_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M15::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M15.f5)
  return _internal_f5();
}
inline void M15::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  f5_ = value;
}
inline void M15::set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M15.f5)
}

// -------------------------------------------------------------------

// M17_M18

// optional int32 f1 = 2;
inline bool M17_M18::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M17_M18::has_f1() const {
  return _internal_has_f1();
}
inline void M17_M18::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f1)
  return _internal_f1();
}
inline void M17_M18::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M17_M18::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f1)
}

// optional fixed32 f2 = 3;
inline bool M17_M18::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M17_M18::has_f2() const {
  return _internal_has_f2();
}
inline void M17_M18::clear_f2() {
  f2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M17_M18::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M17_M18::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f2)
  return _internal_f2();
}
inline void M17_M18::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M17_M18::set_f2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f2)
}

// optional int32 f3 = 4;
inline bool M17_M18::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M17_M18::has_f3() const {
  return _internal_has_f3();
}
inline void M17_M18::clear_f3() {
  f3_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f3)
  return _internal_f3();
}
inline void M17_M18::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M17_M18::set_f3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f3)
}

// optional int32 f4 = 7;
inline bool M17_M18::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M17_M18::has_f4() const {
  return _internal_has_f4();
}
inline void M17_M18::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M17_M18::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f4)
  return _internal_f4();
}
inline void M17_M18::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M17_M18::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f4)
}

// optional .hyperprotobench.M17.M18.E1 f5 = 8;
inline bool M17_M18::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M17_M18::has_f5() const {
  return _internal_has_f5();
}
inline void M17_M18::clear_f5() {
  f5_ = 99;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::hyperprotobench::M17_M18_E1 M17_M18::_internal_f5() const {
  return static_cast< ::hyperprotobench::M17_M18_E1 >(f5_);
}
inline ::hyperprotobench::M17_M18_E1 M17_M18::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.M18.f5)
  return _internal_f5();
}
inline void M17_M18::_internal_set_f5(::hyperprotobench::M17_M18_E1 value) {
  assert(::hyperprotobench::M17_M18_E1_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M17_M18::set_f5(::hyperprotobench::M17_M18_E1 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.M18.f5)
}

// -------------------------------------------------------------------

// M17

// optional uint64 f1 = 1;
inline bool M17::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M17::has_f1() const {
  return _internal_has_f1();
}
inline void M17::clear_f1() {
  f1_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M17::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f1)
  return _internal_f1();
}
inline void M17::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M17::set_f1(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f1)
}

// optional float f2 = 2;
inline bool M17::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M17::has_f2() const {
  return _internal_has_f2();
}
inline void M17::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M17::_internal_f2() const {
  return f2_;
}
inline float M17::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f2)
  return _internal_f2();
}
inline void M17::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M17::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f2)
}

// optional .hyperprotobench.M17.E1 f3 = 3;
inline bool M17::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M17::has_f3() const {
  return _internal_has_f3();
}
inline void M17::clear_f3() {
  f3_ = 96;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::hyperprotobench::M17_E1 M17::_internal_f3() const {
  return static_cast< ::hyperprotobench::M17_E1 >(f3_);
}
inline ::hyperprotobench::M17_E1 M17::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f3)
  return _internal_f3();
}
inline void M17::_internal_set_f3(::hyperprotobench::M17_E1 value) {
  assert(::hyperprotobench::M17_E1_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M17::set_f3(::hyperprotobench::M17_E1 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f3)
}

// repeated string f4 = 4;
inline int M17::_internal_f4_size() const {
  return f4_.size();
}
inline int M17::f4_size() const {
  return _internal_f4_size();
}
inline void M17::clear_f4() {
  f4_.Clear();
}
inline std::string* M17::add_f4() {
  // @@protoc_insertion_point(field_add_mutable:hyperprotobench.M17.f4)
  return _internal_add_f4();
}
inline const std::string& M17::_internal_f4(int index) const {
  return f4_.Get(index);
}
inline const std::string& M17::f4(int index) const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f4)
  return _internal_f4(index);
}
inline std::string* M17::mutable_f4(int index) {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f4)
  return f4_.Mutable(index);
}
inline void M17::set_f4(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f4)
  f4_.Mutable(index)->assign(value);
}
inline void M17::set_f4(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f4)
  f4_.Mutable(index)->assign(std::move(value));
}
inline void M17::set_f4(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  f4_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.f4)
}
inline void M17::set_f4(int index, const char* value, size_t size) {
  f4_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.f4)
}
inline std::string* M17::_internal_add_f4() {
  _has_bits_[0] |= 0x00000010u;
  return f4_.Add();
}
inline void M17::add_f4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hyperprotobench.M17.f4)
}
inline void M17::add_f4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hyperprotobench.M17.f4)
}
inline void M17::add_f4(const char* value) {
  _has_bits_[0] |= 0x00000010u;
  GOOGLE_DCHECK(value != nullptr);
  f4_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hyperprotobench.M17.f4)
}
inline void M17::add_f4(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f4_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hyperprotobench.M17.f4)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
M17::f4() const {
  // @@protoc_insertion_point(field_list:hyperprotobench.M17.f4)
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
M17::mutable_f4() {
  // @@protoc_insertion_point(field_mutable_list:hyperprotobench.M17.f4)
  return &f4_;
}

// optional string f5 = 7;
inline bool M17::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M17::has_f5() const {
  return _internal_has_f5();
}
inline void M17::clear_f5() {
  f5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& M17::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f5)
  return _internal_f5();
}
inline void M17::set_f5(const std::string& value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f5)
}
inline std::string* M17::mutable_f5() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f5)
  return _internal_mutable_f5();
}
inline const std::string& M17::_internal_f5() const {
  return f5_.Get();
}
inline void M17::_internal_set_f5(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17::set_f5(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.f5)
}
inline void M17::set_f5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.f5)
}
inline void M17::set_f5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  f5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.f5)
}
inline std::string* M17::_internal_mutable_f5() {
  _has_bits_[0] |= 0x00000080u;
  return f5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17::release_f5() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f5)
  if (!_internal_has_f5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return f5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17::set_allocated_f5(std::string* f5) {
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f5,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f5)
}
inline std::string* M17::unsafe_arena_release_f5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.f5)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return f5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17::unsafe_arena_set_allocated_f5(
    std::string* f5) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f5 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  f5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f5, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f5)
}

// optional bool f6 = 8;
inline bool M17::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M17::has_f6() const {
  return _internal_has_f6();
}
inline void M17::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool M17::_internal_f6() const {
  return f6_;
}
inline bool M17::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f6)
  return _internal_f6();
}
inline void M17::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000100u;
  f6_ = value;
}
inline void M17::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f6)
}

// optional bytes f7 = 16;
inline bool M17::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M17::has_f7() const {
  return _internal_has_f7();
}
inline void M17::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& M17::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f7)
  return _internal_f7();
}
inline void M17::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M17.f7)
}
inline std::string* M17::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f7)
  return _internal_mutable_f7();
}
inline const std::string& M17::_internal_f7() const {
  return f7_.Get();
}
inline void M17::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M17::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M17.f7)
}
inline void M17::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M17.f7)
}
inline void M17::set_f7(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M17.f7)
}
inline std::string* M17::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00010000u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M17::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M17::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f7)
}
inline std::string* M17::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M17.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M17::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M17.f7)
}

// optional .hyperprotobench.M17.M18 f8 = 20;
inline bool M17::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || f8_ != nullptr);
  return value;
}
inline bool M17::has_f8() const {
  return _internal_has_f8();
}
inline void M17::clear_f8() {
  if (f8_ != nullptr) f8_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
inline const ::hyperprotobench::M17_M18& M17::_internal_f8() const {
  const ::hyperprotobench::M17_M18* p = f8_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M17_M18*>(
      &::hyperprotobench::_M17_M18_default_instance_);
}
inline const ::hyperprotobench::M17_M18& M17::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M17.f8)
  return _internal_f8();
}
inline ::hyperprotobench::M17_M18* M17::release_f8() {
  auto temp = unsafe_arena_release_f8();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M17_M18* M17::unsafe_arena_release_f8() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M17.f8)
  _has_bits_[0] &= ~0x00100000u;
  ::hyperprotobench::M17_M18* temp = f8_;
  f8_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M17_M18* M17::_internal_mutable_f8() {
  _has_bits_[0] |= 0x00100000u;
  if (f8_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M17_M18>(GetArenaNoVirtual());
    f8_ = p;
  }
  return f8_;
}
inline ::hyperprotobench::M17_M18* M17::mutable_f8() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M17.f8)
  return _internal_mutable_f8();
}
inline void M17::set_allocated_f8(::hyperprotobench::M17_M18* f8) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f8_;
  }
  if (f8) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f8);
    if (message_arena != submessage_arena) {
      f8 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f8, submessage_arena);
    }
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f8_ = f8;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M17.f8)
}

// -------------------------------------------------------------------

// M19_M20

// optional string f1 = 1;
inline bool M19_M20::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M19_M20::has_f1() const {
  return _internal_has_f1();
}
inline void M19_M20::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M19_M20::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M20.f1)
  return _internal_f1();
}
inline void M19_M20::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M20.f1)
}
inline std::string* M19_M20::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.M20.f1)
  return _internal_mutable_f1();
}
inline const std::string& M19_M20::_internal_f1() const {
  return f1_.Get();
}
inline void M19_M20::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19_M20::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.M20.f1)
}
inline void M19_M20::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.M20.f1)
}
inline void M19_M20::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.M20.f1)
}
inline std::string* M19_M20::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19_M20::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.M20.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19_M20::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.M20.f1)
}
inline std::string* M19_M20::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.M20.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19_M20::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.M20.f1)
}

// -------------------------------------------------------------------

// M19_M21_M22

// optional string f1 = 1;
inline bool M19_M21_M22::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f1() const {
  return _internal_has_f1();
}
inline void M19_M21_M22::clear_f1() {
  f1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& M19_M21_M22::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f1)
  return _internal_f1();
}
inline void M19_M21_M22::set_f1(const std::string& value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f1)
}
inline std::string* M19_M21_M22::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.M21.M22.f1)
  return _internal_mutable_f1();
}
inline const std::string& M19_M21_M22::_internal_f1() const {
  return f1_.Get();
}
inline void M19_M21_M22::_internal_set_f1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19_M21_M22::set_f1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.M21.M22.f1)
}
inline void M19_M21_M22::set_f1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.M21.M22.f1)
}
inline void M19_M21_M22::set_f1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  f1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.M21.M22.f1)
}
inline std::string* M19_M21_M22::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  return f1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19_M21_M22::release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.M21.M22.f1)
  if (!_internal_has_f1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return f1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19_M21_M22::set_allocated_f1(std::string* f1) {
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f1,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.M21.M22.f1)
}
inline std::string* M19_M21_M22::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.M21.M22.f1)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return f1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19_M21_M22::unsafe_arena_set_allocated_f1(
    std::string* f1) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f1, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.M21.M22.f1)
}

// optional int32 f2 = 4;
inline bool M19_M21_M22::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f2() const {
  return _internal_has_f2();
}
inline void M19_M21_M22::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19_M21_M22::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19_M21_M22::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f2)
  return _internal_f2();
}
inline void M19_M21_M22::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f2_ = value;
}
inline void M19_M21_M22::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f2)
}

// optional fixed64 f3 = 5;
inline bool M19_M21_M22::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f3() const {
  return _internal_has_f3();
}
inline void M19_M21_M22::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_M22::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_M22::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f3)
  return _internal_f3();
}
inline void M19_M21_M22::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  f3_ = value;
}
inline void M19_M21_M22::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f3)
}

// optional int32 f4 = 6;
inline bool M19_M21_M22::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f4() const {
  return _internal_has_f4();
}
inline void M19_M21_M22::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19_M21_M22::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19_M21_M22::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f4)
  return _internal_f4();
}
inline void M19_M21_M22::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  f4_ = value;
}
inline void M19_M21_M22::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f4)
}

// optional uint32 f5 = 7;
inline bool M19_M21_M22::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f5() const {
  return _internal_has_f5();
}
inline void M19_M21_M22::clear_f5() {
  f5_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M19_M21_M22::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M19_M21_M22::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f5)
  return _internal_f5();
}
inline void M19_M21_M22::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  f5_ = value;
}
inline void M19_M21_M22::set_f5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f5)
}

// optional bool f6 = 10;
inline bool M19_M21_M22::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f6() const {
  return _internal_has_f6();
}
inline void M19_M21_M22::clear_f6() {
  f6_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool M19_M21_M22::_internal_f6() const {
  return f6_;
}
inline bool M19_M21_M22::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f6)
  return _internal_f6();
}
inline void M19_M21_M22::_internal_set_f6(bool value) {
  _has_bits_[0] |= 0x00000400u;
  f6_ = value;
}
inline void M19_M21_M22::set_f6(bool value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f6)
}

// optional string f7 = 11;
inline bool M19_M21_M22::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f7() const {
  return _internal_has_f7();
}
inline void M19_M21_M22::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M19_M21_M22::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f7)
  return _internal_f7();
}
inline void M19_M21_M22::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f7)
}
inline std::string* M19_M21_M22::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.M21.M22.f7)
  return _internal_mutable_f7();
}
inline const std::string& M19_M21_M22::_internal_f7() const {
  return f7_.Get();
}
inline void M19_M21_M22::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19_M21_M22::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.M21.M22.f7)
}
inline void M19_M21_M22::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.M21.M22.f7)
}
inline void M19_M21_M22::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.M21.M22.f7)
}
inline std::string* M19_M21_M22::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000800u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19_M21_M22::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.M21.M22.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19_M21_M22::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.M21.M22.f7)
}
inline std::string* M19_M21_M22::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.M21.M22.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19_M21_M22::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.M21.M22.f7)
}

// optional fixed64 f8 = 12;
inline bool M19_M21_M22::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M19_M21_M22::has_f8() const {
  return _internal_has_f8();
}
inline void M19_M21_M22::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_M22::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21_M22::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.M22.f8)
  return _internal_f8();
}
inline void M19_M21_M22::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  f8_ = value;
}
inline void M19_M21_M22::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.M22.f8)
}

// -------------------------------------------------------------------

// M19_M21

// optional .hyperprotobench.M19.M21.M22 f1 = 4;
inline bool M19_M21::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M19_M21::has_f1() const {
  return _internal_has_f1();
}
inline void M19_M21::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M19_M21_M22& M19_M21::_internal_f1() const {
  const ::hyperprotobench::M19_M21_M22* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M19_M21_M22*>(
      &::hyperprotobench::_M19_M21_M22_default_instance_);
}
inline const ::hyperprotobench::M19_M21_M22& M19_M21::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M19_M21_M22* M19_M21::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M19_M21_M22* M19_M21::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.M21.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M19_M21_M22* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M19_M21_M22* M19_M21::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M19_M21_M22>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M19_M21_M22* M19_M21::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.M21.f1)
  return _internal_mutable_f1();
}
inline void M19_M21::set_allocated_f1(::hyperprotobench::M19_M21_M22* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.M21.f1)
}

// optional fixed64 f2 = 5;
inline bool M19_M21::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M19_M21::has_f2() const {
  return _internal_has_f2();
}
inline void M19_M21::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19_M21::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.f2)
  return _internal_f2();
}
inline void M19_M21::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M19_M21::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.f2)
}

// optional string f3 = 9;
inline bool M19_M21::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool M19_M21::has_f3() const {
  return _internal_has_f3();
}
inline void M19_M21::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& M19_M21::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.M21.f3)
  return _internal_f3();
}
inline void M19_M21::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.M21.f3)
}
inline std::string* M19_M21::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.M21.f3)
  return _internal_mutable_f3();
}
inline const std::string& M19_M21::_internal_f3() const {
  return f3_.Get();
}
inline void M19_M21::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19_M21::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.M21.f3)
}
inline void M19_M21::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.M21.f3)
}
inline void M19_M21::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.M21.f3)
}
inline std::string* M19_M21::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000040u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19_M21::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.M21.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19_M21::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.M21.f3)
}
inline std::string* M19_M21::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.M21.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19_M21::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.M21.f3)
}

// -------------------------------------------------------------------

// M19

// optional int32 f1 = 5;
inline bool M19::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M19::has_f1() const {
  return _internal_has_f1();
}
inline void M19::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f1)
  return _internal_f1();
}
inline void M19::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M19::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f1)
}

// optional bool f2 = 6;
inline bool M19::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M19::has_f2() const {
  return _internal_has_f2();
}
inline void M19::clear_f2() {
  f2_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool M19::_internal_f2() const {
  return f2_;
}
inline bool M19::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f2)
  return _internal_f2();
}
inline void M19::_internal_set_f2(bool value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M19::set_f2(bool value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f2)
}

// optional string f3 = 8;
inline bool M19::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M19::has_f3() const {
  return _internal_has_f3();
}
inline void M19::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& M19::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f3)
  return _internal_f3();
}
inline void M19::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f3)
}
inline std::string* M19::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.f3)
  return _internal_mutable_f3();
}
inline const std::string& M19::_internal_f3() const {
  return f3_.Get();
}
inline void M19::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.f3)
}
inline void M19::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.f3)
}
inline void M19::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.f3)
}
inline std::string* M19::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000010u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.f3)
}
inline std::string* M19::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.f3)
}

// optional bool f4 = 11;
inline bool M19::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool M19::has_f4() const {
  return _internal_has_f4();
}
inline void M19::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool M19::_internal_f4() const {
  return f4_;
}
inline bool M19::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f4)
  return _internal_f4();
}
inline void M19::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000080u;
  f4_ = value;
}
inline void M19::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f4)
}

// optional int32 f5 = 13;
inline bool M19::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M19::has_f5() const {
  return _internal_has_f5();
}
inline void M19::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f5)
  return _internal_f5();
}
inline void M19::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M19::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f5)
}

// optional .hyperprotobench.M19.M20 f6 = 15;
inline bool M19::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || f6_ != nullptr);
  return value;
}
inline bool M19::has_f6() const {
  return _internal_has_f6();
}
inline void M19::clear_f6() {
  if (f6_ != nullptr) f6_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::hyperprotobench::M19_M20& M19::_internal_f6() const {
  const ::hyperprotobench::M19_M20* p = f6_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M19_M20*>(
      &::hyperprotobench::_M19_M20_default_instance_);
}
inline const ::hyperprotobench::M19_M20& M19::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f6)
  return _internal_f6();
}
inline ::hyperprotobench::M19_M20* M19::release_f6() {
  auto temp = unsafe_arena_release_f6();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M19_M20* M19::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.f6)
  _has_bits_[0] &= ~0x00000800u;
  ::hyperprotobench::M19_M20* temp = f6_;
  f6_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M19_M20* M19::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00000800u;
  if (f6_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M19_M20>(GetArenaNoVirtual());
    f6_ = p;
  }
  return f6_;
}
inline ::hyperprotobench::M19_M20* M19::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.f6)
  return _internal_mutable_f6();
}
inline void M19::set_allocated_f6(::hyperprotobench::M19_M20* f6) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f6_;
  }
  if (f6) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f6);
    if (message_arena != submessage_arena) {
      f6 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f6, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f6_ = f6;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.f6)
}

// optional int32 f7 = 16;
inline bool M19::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool M19::has_f7() const {
  return _internal_has_f7();
}
inline void M19::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f7)
  return _internal_f7();
}
inline void M19::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  f7_ = value;
}
inline void M19::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f7)
}

// optional uint64 f8 = 17;
inline bool M19::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M19::has_f8() const {
  return _internal_has_f8();
}
inline void M19::clear_f8() {
  f8_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f8)
  return _internal_f8();
}
inline void M19::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  f8_ = value;
}
inline void M19::set_f8(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f8)
}

// optional fixed64 f9 = 20;
inline bool M19::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M19::has_f9() const {
  return _internal_has_f9();
}
inline void M19::clear_f9() {
  f9_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M19::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f9)
  return _internal_f9();
}
inline void M19::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  f9_ = value;
}
inline void M19::set_f9(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f9)
}

// optional .hyperprotobench.M19.M21 f10 = 21;
inline bool M19::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || f10_ != nullptr);
  return value;
}
inline bool M19::has_f10() const {
  return _internal_has_f10();
}
inline void M19::clear_f10() {
  if (f10_ != nullptr) f10_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
inline const ::hyperprotobench::M19_M21& M19::_internal_f10() const {
  const ::hyperprotobench::M19_M21* p = f10_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M19_M21*>(
      &::hyperprotobench::_M19_M21_default_instance_);
}
inline const ::hyperprotobench::M19_M21& M19::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f10)
  return _internal_f10();
}
inline ::hyperprotobench::M19_M21* M19::release_f10() {
  auto temp = unsafe_arena_release_f10();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M19_M21* M19::unsafe_arena_release_f10() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.f10)
  _has_bits_[0] &= ~0x00020000u;
  ::hyperprotobench::M19_M21* temp = f10_;
  f10_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M19_M21* M19::_internal_mutable_f10() {
  _has_bits_[0] |= 0x00020000u;
  if (f10_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M19_M21>(GetArenaNoVirtual());
    f10_ = p;
  }
  return f10_;
}
inline ::hyperprotobench::M19_M21* M19::mutable_f10() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.f10)
  return _internal_mutable_f10();
}
inline void M19::set_allocated_f10(::hyperprotobench::M19_M21* f10) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f10_;
  }
  if (f10) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f10);
    if (message_arena != submessage_arena) {
      f10 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f10, submessage_arena);
    }
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  f10_ = f10;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.f10)
}

// optional float f11 = 22;
inline bool M19::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M19::has_f11() const {
  return _internal_has_f11();
}
inline void M19::clear_f11() {
  f11_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float M19::_internal_f11() const {
  return f11_;
}
inline float M19::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f11)
  return _internal_f11();
}
inline void M19::_internal_set_f11(float value) {
  _has_bits_[0] |= 0x00040000u;
  f11_ = value;
}
inline void M19::set_f11(float value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f11)
}

// optional float f12 = 23;
inline bool M19::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool M19::has_f12() const {
  return _internal_has_f12();
}
inline void M19::clear_f12() {
  f12_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float M19::_internal_f12() const {
  return f12_;
}
inline float M19::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f12)
  return _internal_f12();
}
inline void M19::_internal_set_f12(float value) {
  _has_bits_[0] |= 0x00080000u;
  f12_ = value;
}
inline void M19::set_f12(float value) {
  _internal_set_f12(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f12)
}

// optional string f13 = 24;
inline bool M19::_internal_has_f13() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool M19::has_f13() const {
  return _internal_has_f13();
}
inline void M19::clear_f13() {
  f13_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& M19::f13() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f13)
  return _internal_f13();
}
inline void M19::set_f13(const std::string& value) {
  _internal_set_f13(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f13)
}
inline std::string* M19::mutable_f13() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M19.f13)
  return _internal_mutable_f13();
}
inline const std::string& M19::_internal_f13() const {
  return f13_.Get();
}
inline void M19::_internal_set_f13(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M19::set_f13(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M19.f13)
}
inline void M19::set_f13(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M19.f13)
}
inline void M19::set_f13(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  f13_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M19.f13)
}
inline std::string* M19::_internal_mutable_f13() {
  _has_bits_[0] |= 0x00100000u;
  return f13_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M19::release_f13() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M19.f13)
  if (!_internal_has_f13()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return f13_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M19::set_allocated_f13(std::string* f13) {
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f13_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f13,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M19.f13)
}
inline std::string* M19::unsafe_arena_release_f13() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M19.f13)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return f13_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M19::unsafe_arena_set_allocated_f13(
    std::string* f13) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f13 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  f13_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f13, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M19.f13)
}

// optional int32 f14 = 26;
inline bool M19::_internal_has_f14() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M19::has_f14() const {
  return _internal_has_f14();
}
inline void M19::clear_f14() {
  f14_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::_internal_f14() const {
  return f14_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M19::f14() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M19.f14)
  return _internal_f14();
}
inline void M19::_internal_set_f14(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  f14_ = value;
}
inline void M19::set_f14(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f14(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M19.f14)
}

// -------------------------------------------------------------------

// M23_M24

// optional float f1 = 1;
inline bool M23_M24::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M23_M24::has_f1() const {
  return _internal_has_f1();
}
inline void M23_M24::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float M23_M24::_internal_f1() const {
  return f1_;
}
inline float M23_M24::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f1)
  return _internal_f1();
}
inline void M23_M24::_internal_set_f1(float value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M23_M24::set_f1(float value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f1)
}

// optional uint64 f2 = 2;
inline bool M23_M24::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M23_M24::has_f2() const {
  return _internal_has_f2();
}
inline void M23_M24::clear_f2() {
  f2_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f2)
  return _internal_f2();
}
inline void M23_M24::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M23_M24::set_f2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f2)
}

// optional uint64 f3 = 3;
inline bool M23_M24::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M23_M24::has_f3() const {
  return _internal_has_f3();
}
inline void M23_M24::clear_f3() {
  f3_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24::_internal_f3() const {
  return f3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 M23_M24::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f3)
  return _internal_f3();
}
inline void M23_M24::_internal_set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  f3_ = value;
}
inline void M23_M24::set_f3(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f3)
}

// optional int32 f4 = 4;
inline bool M23_M24::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool M23_M24::has_f4() const {
  return _internal_has_f4();
}
inline void M23_M24::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23_M24::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f4)
  return _internal_f4();
}
inline void M23_M24::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  f4_ = value;
}
inline void M23_M24::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f4)
}

// optional float f5 = 5;
inline bool M23_M24::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M23_M24::has_f5() const {
  return _internal_has_f5();
}
inline void M23_M24::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float M23_M24::_internal_f5() const {
  return f5_;
}
inline float M23_M24::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.M24.f5)
  return _internal_f5();
}
inline void M23_M24::_internal_set_f5(float value) {
  _has_bits_[0] |= 0x00000020u;
  f5_ = value;
}
inline void M23_M24::set_f5(float value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.M24.f5)
}

// -------------------------------------------------------------------

// M23

// optional .hyperprotobench.M23.M24 f1 = 1;
inline bool M23::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || f1_ != nullptr);
  return value;
}
inline bool M23::has_f1() const {
  return _internal_has_f1();
}
inline void M23::clear_f1() {
  if (f1_ != nullptr) f1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hyperprotobench::M23_M24& M23::_internal_f1() const {
  const ::hyperprotobench::M23_M24* p = f1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M23_M24*>(
      &::hyperprotobench::_M23_M24_default_instance_);
}
inline const ::hyperprotobench::M23_M24& M23::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f1)
  return _internal_f1();
}
inline ::hyperprotobench::M23_M24* M23::release_f1() {
  auto temp = unsafe_arena_release_f1();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M23_M24* M23::unsafe_arena_release_f1() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f1)
  _has_bits_[0] &= ~0x00000002u;
  ::hyperprotobench::M23_M24* temp = f1_;
  f1_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M23_M24* M23::_internal_mutable_f1() {
  _has_bits_[0] |= 0x00000002u;
  if (f1_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M23_M24>(GetArenaNoVirtual());
    f1_ = p;
  }
  return f1_;
}
inline ::hyperprotobench::M23_M24* M23::mutable_f1() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f1)
  return _internal_mutable_f1();
}
inline void M23::set_allocated_f1(::hyperprotobench::M23_M24* f1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f1_;
  }
  if (f1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f1);
    if (message_arena != submessage_arena) {
      f1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  f1_ = f1;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f1)
}

// optional double f2 = 2;
inline bool M23::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M23::has_f2() const {
  return _internal_has_f2();
}
inline void M23::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double M23::_internal_f2() const {
  return f2_;
}
inline double M23::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f2)
  return _internal_f2();
}
inline void M23::_internal_set_f2(double value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M23::set_f2(double value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f2)
}

// optional string f3 = 3;
inline bool M23::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M23::has_f3() const {
  return _internal_has_f3();
}
inline void M23::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M23::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f3)
  return _internal_f3();
}
inline void M23::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f3)
}
inline std::string* M23::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f3)
  return _internal_mutable_f3();
}
inline const std::string& M23::_internal_f3() const {
  return f3_.Get();
}
inline void M23::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.f3)
}
inline void M23::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.f3)
}
inline void M23::set_f3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.f3)
}
inline std::string* M23::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f3)
}
inline std::string* M23::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.f3)
}

// optional bool f4 = 5;
inline bool M23::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool M23::has_f4() const {
  return _internal_has_f4();
}
inline void M23::clear_f4() {
  f4_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool M23::_internal_f4() const {
  return f4_;
}
inline bool M23::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f4)
  return _internal_f4();
}
inline void M23::_internal_set_f4(bool value) {
  _has_bits_[0] |= 0x00000020u;
  f4_ = value;
}
inline void M23::set_f4(bool value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f4)
}

// optional int64 f5 = 13;
inline bool M23::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool M23::has_f5() const {
  return _internal_has_f5();
}
inline void M23::clear_f5() {
  f5_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M23::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 M23::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f5)
  return _internal_f5();
}
inline void M23::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  f5_ = value;
}
inline void M23::set_f5(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f5)
}

// optional string f6 = 14;
inline bool M23::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M23::has_f6() const {
  return _internal_has_f6();
}
inline void M23::clear_f6() {
  f6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& M23::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f6)
  return _internal_f6();
}
inline void M23::set_f6(const std::string& value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f6)
}
inline std::string* M23::mutable_f6() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M23.f6)
  return _internal_mutable_f6();
}
inline const std::string& M23::_internal_f6() const {
  return f6_.Get();
}
inline void M23::_internal_set_f6(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M23::set_f6(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M23.f6)
}
inline void M23::set_f6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M23.f6)
}
inline void M23::set_f6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  f6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M23.f6)
}
inline std::string* M23::_internal_mutable_f6() {
  _has_bits_[0] |= 0x00004000u;
  return f6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M23::release_f6() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M23.f6)
  if (!_internal_has_f6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return f6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M23::set_allocated_f6(std::string* f6) {
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f6,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M23.f6)
}
inline std::string* M23::unsafe_arena_release_f6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M23.f6)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return f6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M23::unsafe_arena_set_allocated_f6(
    std::string* f6) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f6 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  f6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f6, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M23.f6)
}

// optional int32 f7 = 18;
inline bool M23::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool M23::has_f7() const {
  return _internal_has_f7();
}
inline void M23::clear_f7() {
  f7_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f7() const {
  return f7_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f7)
  return _internal_f7();
}
inline void M23::_internal_set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00040000u;
  f7_ = value;
}
inline void M23::set_f7(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f7)
}

// optional int32 f8 = 22;
inline bool M23::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool M23::has_f8() const {
  return _internal_has_f8();
}
inline void M23::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f8)
  return _internal_f8();
}
inline void M23::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00400000u;
  f8_ = value;
}
inline void M23::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f8)
}

// optional float f9 = 23;
inline bool M23::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool M23::has_f9() const {
  return _internal_has_f9();
}
inline void M23::clear_f9() {
  f9_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float M23::_internal_f9() const {
  return f9_;
}
inline float M23::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f9)
  return _internal_f9();
}
inline void M23::_internal_set_f9(float value) {
  _has_bits_[0] |= 0x00800000u;
  f9_ = value;
}
inline void M23::set_f9(float value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f9)
}

// optional int32 f10 = 29;
inline bool M23::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool M23::has_f10() const {
  return _internal_has_f10();
}
inline void M23::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::_internal_f10() const {
  return f10_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M23::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M23.f10)
  return _internal_f10();
}
inline void M23::_internal_set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  f10_ = value;
}
inline void M23::set_f10(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M23.f10)
}

// -------------------------------------------------------------------

// M25_M26

// optional int32 f1 = 1;
inline bool M25_M26::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25_M26::has_f1() const {
  return _internal_has_f1();
}
inline void M25_M26::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25_M26::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25_M26::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f1)
  return _internal_f1();
}
inline void M25_M26::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25_M26::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.f1)
}

// optional float f2 = 2;
inline bool M25_M26::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25_M26::has_f2() const {
  return _internal_has_f2();
}
inline void M25_M26::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float M25_M26::_internal_f2() const {
  return f2_;
}
inline float M25_M26::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.M26.f2)
  return _internal_f2();
}
inline void M25_M26::_internal_set_f2(float value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M25_M26::set_f2(float value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.M26.f2)
}

// -------------------------------------------------------------------

// M25

// optional int32 f1 = 1;
inline bool M25::_internal_has_f1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool M25::has_f1() const {
  return _internal_has_f1();
}
inline void M25::clear_f1() {
  f1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f1() const {
  return f1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f1() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f1)
  return _internal_f1();
}
inline void M25::_internal_set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  f1_ = value;
}
inline void M25::set_f1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f1(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f1)
}

// optional int32 f2 = 2;
inline bool M25::_internal_has_f2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool M25::has_f2() const {
  return _internal_has_f2();
}
inline void M25::clear_f2() {
  f2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f2() const {
  return f2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f2() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f2)
  return _internal_f2();
}
inline void M25::_internal_set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  f2_ = value;
}
inline void M25::set_f2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f2(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f2)
}

// optional bytes f3 = 3;
inline bool M25::_internal_has_f3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool M25::has_f3() const {
  return _internal_has_f3();
}
inline void M25::clear_f3() {
  f3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& M25::f3() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f3)
  return _internal_f3();
}
inline void M25::set_f3(const std::string& value) {
  _internal_set_f3(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f3)
}
inline std::string* M25::mutable_f3() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f3)
  return _internal_mutable_f3();
}
inline const std::string& M25::_internal_f3() const {
  return f3_.Get();
}
inline void M25::_internal_set_f3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f3)
}
inline void M25::set_f3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f3)
}
inline void M25::set_f3(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  f3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f3)
}
inline std::string* M25::_internal_mutable_f3() {
  _has_bits_[0] |= 0x00000008u;
  return f3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f3() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f3)
  if (!_internal_has_f3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return f3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f3(std::string* f3) {
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f3,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f3)
}
inline std::string* M25::unsafe_arena_release_f3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f3)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return f3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f3(
    std::string* f3) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  f3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f3, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f3)
}

// optional int32 f4 = 8;
inline bool M25::_internal_has_f4() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool M25::has_f4() const {
  return _internal_has_f4();
}
inline void M25::clear_f4() {
  f4_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f4() const {
  return f4_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f4() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f4)
  return _internal_f4();
}
inline void M25::_internal_set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  f4_ = value;
}
inline void M25::set_f4(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f4(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f4)
}

// optional int32 f5 = 9;
inline bool M25::_internal_has_f5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool M25::has_f5() const {
  return _internal_has_f5();
}
inline void M25::clear_f5() {
  f5_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f5() const {
  return f5_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f5() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f5)
  return _internal_f5();
}
inline void M25::_internal_set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  f5_ = value;
}
inline void M25::set_f5(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f5(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f5)
}

// optional int32 f6 = 10;
inline bool M25::_internal_has_f6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool M25::has_f6() const {
  return _internal_has_f6();
}
inline void M25::clear_f6() {
  f6_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f6() const {
  return f6_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f6() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f6)
  return _internal_f6();
}
inline void M25::_internal_set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  f6_ = value;
}
inline void M25::set_f6(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f6(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f6)
}

// optional string f7 = 11;
inline bool M25::_internal_has_f7() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool M25::has_f7() const {
  return _internal_has_f7();
}
inline void M25::clear_f7() {
  f7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& M25::f7() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f7)
  return _internal_f7();
}
inline void M25::set_f7(const std::string& value) {
  _internal_set_f7(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f7)
}
inline std::string* M25::mutable_f7() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f7)
  return _internal_mutable_f7();
}
inline const std::string& M25::_internal_f7() const {
  return f7_.Get();
}
inline void M25::_internal_set_f7(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void M25::set_f7(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:hyperprotobench.M25.f7)
}
inline void M25::set_f7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:hyperprotobench.M25.f7)
}
inline void M25::set_f7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  f7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:hyperprotobench.M25.f7)
}
inline std::string* M25::_internal_mutable_f7() {
  _has_bits_[0] |= 0x00000800u;
  return f7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* M25::release_f7() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f7)
  if (!_internal_has_f7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return f7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void M25::set_allocated_f7(std::string* f7) {
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), f7,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f7)
}
inline std::string* M25::unsafe_arena_release_f7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hyperprotobench.M25.f7)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return f7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void M25::unsafe_arena_set_allocated_f7(
    std::string* f7) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (f7 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  f7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      f7, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hyperprotobench.M25.f7)
}

// optional int32 f8 = 14;
inline bool M25::_internal_has_f8() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool M25::has_f8() const {
  return _internal_has_f8();
}
inline void M25::clear_f8() {
  f8_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::_internal_f8() const {
  return f8_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 M25::f8() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f8)
  return _internal_f8();
}
inline void M25::_internal_set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  f8_ = value;
}
inline void M25::set_f8(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_f8(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f8)
}

// optional fixed32 f9 = 15;
inline bool M25::_internal_has_f9() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool M25::has_f9() const {
  return _internal_has_f9();
}
inline void M25::clear_f9() {
  f9_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25::_internal_f9() const {
  return f9_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 M25::f9() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f9)
  return _internal_f9();
}
inline void M25::_internal_set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  f9_ = value;
}
inline void M25::set_f9(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_f9(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f9)
}

// optional double f10 = 16;
inline bool M25::_internal_has_f10() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool M25::has_f10() const {
  return _internal_has_f10();
}
inline void M25::clear_f10() {
  f10_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double M25::_internal_f10() const {
  return f10_;
}
inline double M25::f10() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f10)
  return _internal_f10();
}
inline void M25::_internal_set_f10(double value) {
  _has_bits_[0] |= 0x00010000u;
  f10_ = value;
}
inline void M25::set_f10(double value) {
  _internal_set_f10(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f10)
}

// optional bool f11 = 17;
inline bool M25::_internal_has_f11() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool M25::has_f11() const {
  return _internal_has_f11();
}
inline void M25::clear_f11() {
  f11_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool M25::_internal_f11() const {
  return f11_;
}
inline bool M25::f11() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f11)
  return _internal_f11();
}
inline void M25::_internal_set_f11(bool value) {
  _has_bits_[0] |= 0x00020000u;
  f11_ = value;
}
inline void M25::set_f11(bool value) {
  _internal_set_f11(value);
  // @@protoc_insertion_point(field_set:hyperprotobench.M25.f11)
}

// optional .hyperprotobench.M25.M26 f12 = 25;
inline bool M25::_internal_has_f12() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || f12_ != nullptr);
  return value;
}
inline bool M25::has_f12() const {
  return _internal_has_f12();
}
inline void M25::clear_f12() {
  if (f12_ != nullptr) f12_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
inline const ::hyperprotobench::M25_M26& M25::_internal_f12() const {
  const ::hyperprotobench::M25_M26* p = f12_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hyperprotobench::M25_M26*>(
      &::hyperprotobench::_M25_M26_default_instance_);
}
inline const ::hyperprotobench::M25_M26& M25::f12() const {
  // @@protoc_insertion_point(field_get:hyperprotobench.M25.f12)
  return _internal_f12();
}
inline ::hyperprotobench::M25_M26* M25::release_f12() {
  auto temp = unsafe_arena_release_f12();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::unsafe_arena_release_f12() {
  // @@protoc_insertion_point(field_release:hyperprotobench.M25.f12)
  _has_bits_[0] &= ~0x02000000u;
  ::hyperprotobench::M25_M26* temp = f12_;
  f12_ = nullptr;
  return temp;
}
inline ::hyperprotobench::M25_M26* M25::_internal_mutable_f12() {
  _has_bits_[0] |= 0x02000000u;
  if (f12_ == nullptr) {
    auto* p = CreateMaybeMessage<::hyperprotobench::M25_M26>(GetArenaNoVirtual());
    f12_ = p;
  }
  return f12_;
}
inline ::hyperprotobench::M25_M26* M25::mutable_f12() {
  // @@protoc_insertion_point(field_mutable:hyperprotobench.M25.f12)
  return _internal_mutable_f12();
}
inline void M25::set_allocated_f12(::hyperprotobench::M25_M26* f12) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f12_;
  }
  if (f12) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(f12);
    if (message_arena != submessage_arena) {
      f12 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f12, submessage_arena);
    }
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  f12_ = f12;
  // @@protoc_insertion_point(field_set_allocated:hyperprotobench.M25.f12)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hyperprotobench

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hyperprotobench::M3_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M3_E1>() {
  return ::hyperprotobench::M3_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M17_M18_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M17_M18_E1>() {
  return ::hyperprotobench::M17_M18_E1_descriptor();
}
template <> struct is_proto_enum< ::hyperprotobench::M17_E1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hyperprotobench::M17_E1>() {
  return ::hyperprotobench::M17_E1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_benchmark_2eproto
